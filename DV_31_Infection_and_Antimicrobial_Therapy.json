```json
{
  "chapter_name": "Infection and Antimicrobial Therapy",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 52-year-old male smoker with chronic obstructive pulmonary disease (COPD) presents to the emergency department (ED) complaining of fevers and foul-tasting sputum for the past 4 weeks. He was recently admitted to an outside hospital for treatment of a COPD exacerbation and has a history of vancomycin-resistant Staphylococcus aureus bacteremia. Chest radiograph shows a 4-cm air-fluid level within the right lung. He reports a 20-pound weight loss over the past 5 months. Appropriate management includes:",
      "options": [
        "A. Administration of intravenous daptomycin",
        "B. Thoracotomy and decortication",
        "C. Pulmonary lobectomy",
        "D. Percutaneous drain placement",
        "E. Diagnostic bronchoscopy"
      ],
      "answer": "E",
      "explanation": [
        "Lung abscesses typically present with an indolent course over several weeks, characterized by fevers, purulent sputum, and cough.",
        "Single lung abscesses are frequently monomicrobial and usually associated with aspiration pneumonia, found in dependent segments of the lung (posterior segment of upper lobes or superior segments of lower lobes).",
        "An air-fluid level on chest radiograph and purulent sputum are virtually diagnostic of an anaerobic lung infection.",
        "Coinfection with antibiotic-resistant gram-positive organisms is possible in patients with frequent hospitalizations.",
        "Most lung abscesses resolve with antibiotics alone; however, daptomycin cannot be used to treat lung infections because it is inhibited by pulmonary surfactant (A).",
        "For patients with risk factors for lung cancer (e.g., smoking, recent weight loss), diagnostic bronchoscopy is indicated to rule out an underlying neoplasm (obstruction leading to infectious process).",
        "Surgical treatment may be necessary for infections unresponsive to medical management, abscesses >6 cm, or those secondary to an obstructed bronchus/foreign body/neoplasm, typically involving lobectomy or pneumonectomy (C).",
        "Percutaneous drain placement can be considered for poor surgical candidates (D).",
        "Thoracotomy and decortication is a treatment option for empyema, not lung abscess (B)."
      ]
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the management of parapneumonic effusions?",
      "options": [
        "A. If discovered within the first 5 days after the onset of pneumonia, tube thoracostomy is generally all that is required.",
        "B. Intrapleural fibrinolytics are highly efficacious in patients with loculated effusions.",
        "C. Large diameter chest tubes (>28 French) are required for adequate drainage.",
        "D. Treatment of the organizing phase requires open drainage (e.g., Eloesser flap).",
        "E. Video-assisted thoracoscopic surgery should be performed if an empyema does not respond to chest tube drainage."
      ],
      "answer": "E",
      "explanation": [
        "Parapneumonic effusion is the accumulation of pleural fluid in response to a respiratory infection, divided into three stages: exudative, fibrinopurulent, and organizing.",
        "The exudative stage is characterized by sterile pleural fluid due to increased capillary permeability; antibiotic treatment for pneumonia is generally sufficient (A is incorrect, as drainage is required after 5 days).",
        "After 5 days, bacteria and inflammatory cells enter the fluid, marking the fibrinopurulent phase, which requires mandatory drainage, typically with chest tubes.",
        "The diameter of the chest tube is not important, provided smaller caliber tubes are routinely flushed to prevent blockage (C is incorrect).",
        "As the fibrinopurulent phase progresses, loculations form, making single catheter drainage difficult.",
        "Studies on intrapleural fibrinolytics (e.g., alteplase) to prevent surgical progression have controversial results, with a 2008 Cochrane Review finding no consistent benefit (B is incorrect).",
        "At this stage, video-assisted thoracoscopic debridement and adhesiolysis are viable options, though some patients may still require conversion to thoracotomy (E is correct).",
        "The final (organizing) stage, reached after 2-3 weeks of untreated infection, involves fibroblast formation of a pleural peel, generally requiring formal decortication via thoracotomy.",
        "Open drainage (e.g., Eloesser flap) may be considered for patients unfit for surgery in the organizing phase, but it leads to months of dressing changes and significant morbidity (D is incorrect, as it's a last resort for unfit patients, not the primary treatment for organizing phase)."
      ]
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding antibiotic mechanisms?",
      "options": [
        "A. Penicillin-derivative antibiotics bind the bacterial cell membrane and increase its permeability.",
        "B. Piperacillin-Tazobactam (Zosyn) works partly by binding β-lactamases.",
        "C. Metronidazole, though limited, has some effect against aerobic bacteria.",
        "D. Linezolid competitively inhibits the 30S ribosome.",
        "E. Clindamycin, like the macrolides, reversibly binds the 50S ribosome."
      ],
      "answer": "B",
      "explanation": [
        "All penicillin-derivative antibiotics (β-lactams) inhibit the final step of bacterial cell wall synthesis by binding transpeptidases or penicillin-binding proteins (A is incorrect, as they do not bind the cell membrane).",
        "Cephalosporins work by the same mechanism but are more resistant to β-lactamase degradation.",
        "Tazobactam, sulbactam, and clavulanic acid bind β-lactamases, increasing the effectiveness of penicillin-derivative antibiotics when combined (e.g., Zosyn is piperacillin-tazobactam) (B is correct).",
        "Metronidazole acts only against anaerobic bacteria by inhibiting nucleic acid synthesis and is not effective in aerobic cells, as it requires reduction to its active state, which occurs in anaerobic cells (C is incorrect).",
        "Aminoglycosides and tetracyclines inhibit the 30S ribosome.",
        "Linezolid inhibits the 50S ribosome subunit. Other antibiotics like macrolides and chloramphenicol also inhibit the 50S ribosome, but through a slightly different process (D is incorrect, as Linezolid inhibits the 50S, not 30S).",
        "Clindamycin is a lincosamide antibiotic that interferes with the amino acyl-tRNA complex, binding the 50S ribosome (E is also correct, as Clindamycin does reversibly bind the 50S ribosome)."
      ]
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following should be used as part of a screening tool designed to identify non-ICU patients that are at increased risk of organ failure from infection?",
      "options": [
        "A. Temperature higher than 38°C",
        "B. Heart rate greater than 90/min",
        "C. Altered mentation",
        "D. White blood cell (WBC) count greater than 12,000/mm³",
        "E. Paco2 less than 32 mm Hg"
      ],
      "answer": "C",
      "explanation": [
        "The Third International Consensus Definitions for Sepsis and Septic Shock (2016) redefined sepsis.",
        "The previous definition of sepsis (2+ SIRS criteria and a source of infection) was found to be too nonspecific for identifying patients at increased risk of mortality from infection (A, B, D, E are SIRS criteria and are not sufficient alone).",
        "The committee recommended the quick Sequential Organ System Failure score (qSOFA) as a bedside screening tool for patients likely to have a poor outcome from infection.",
        "qSOFA criteria: respiratory rate > 22/min, altered mental status, and systolic blood pressure < 100 mm Hg.",
        "Altered mentation (C) is one of the qSOFA criteria.",
        "Sepsis is now defined as an infection with 2 or more points on the Sequential (Sepsis-Related) Organ Failure (SOFA) score, which takes objective criteria for multiple organ systems (respiration, cardiovascular, coagulation, liver, central nervous system, and renal).",
        "A SOFA score of 2 or more is associated with a 10% or greater increase in mortality.",
        "Septic shock is redefined as sepsis requiring vasopressors to maintain mean arterial pressure (MAP) > 65 mm Hg and a lactate level > 2.0 mmol/L."
      ]
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 56-year-old HIV-positive (with a low CD4 count) female presented to the ED with a spontaneous pneumothorax and underwent a tube thoracostomy procedure. While trying to recap the 20-gauge needle used for anesthetizing the skin, the resident that performed the procedure was inadvertently stuck resulting in visible bleeding from the skin. Which of the following is true regarding this exposure?",
      "options": [
        "A. Postexposure prophylaxis with a two-drug regimen should be administered for 8 weeks.",
        "B. Postexposure prophylaxis with a three-drug regimen should be administered for 4 weeks.",
        "C. Potential HIV infection should be disclosed to future patients.",
        "D. At least 6 months of postexposure treatment is recommended.",
        "E. The hollow bore needle used for this procedure lowers the risk of HIV transmission."
      ],
      "answer": "B",
      "explanation": [
        "The first step in managing blood exposure is to determine the risk (severity of exposure and patient's HIV status).",
        "The risk of puncture by a hollow needle with fresh blood is greater than with a solid (surgical) needle, which is greater than splashing on mucous membranes or nonintact skin, and greater than blood drops on intact skin (E is incorrect).",
        "Recommendations for postexposure prophylaxis (PEP) include a basic regimen (two drugs, 4 weeks) or an expanded regimen (three drugs, 4 weeks).",
        "Given the high-exposure severity (hollow, large bore needle with visible skin penetration by fresh blood) and the patient's high-risk HIV status (low CD4 count), a three-drug regimen is recommended for 4 weeks (B is correct, A is incorrect).",
        "A three-drug regimen is recommended whenever a hollow needlestick pierces the skin and the patient is HIV positive, regardless of viral load or CD4 count.",
        "Follow-up testing to confirm HIV-negative status in healthcare workers is recommended 3 to 6 months later (D is incorrect, as this is for follow-up, not treatment duration).",
        "Healthcare workers are not required to stop working or inform patients of a possible exposure (C is incorrect).",
        "The American College of Surgeons states that 'HIV-infected surgeons may continue to practice and perform invasive procedures...unless there is clear evidence that a significant risk of transmission of infection exists through an inability to meet basic infection control procedures' and that 'the HIV status of a surgeon is personal health information and does not need to be disclosed to anyone.'"
      ]
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 45-year-old HIV-positive male presents to the ED with perianal pain for the past 2 days. Physical exam reveals a small area of tenderness in the right posterolateral position distal to the external sphincter that is extremely tender. His CD4 count is 550 cells/mL, and he is currently on highly active antiretroviral therapy (HAART). Which of the following is the most correct management of this patient?",
      "options": [
        "A. Intravenous (IV) antibiotics, exam under anesthesia (EUA), and if an area of fluctuance is identified, then incision and drainage (I&D) and biopsy",
        "B. EUA and if an area of fluctuance is identified, then I&D and biopsy",
        "C. IV antibiotics, EUA, I&D and biopsy of area of tenderness even if no fluctuance is identified",
        "D. EUA, I&D, and biopsy of area of tenderness even if no fluctuance is identified",
        "E. IV antibiotics"
      ],
      "answer": "C",
      "explanation": [
        "Anorectal disease is the most common indication for surgery in HIV-infected patients and can be the first presenting symptom of undiagnosed HIV.",
        "Diagnosis can be difficult in HIV patients with anorectal abscesses as they may not mount an adequate response, presenting with a small area or complete absence of fluctuance (A, B are incorrect).",
        "Patients often have significant tenderness disproportionate to exam findings.",
        "HAART therapy allows these patients to be managed with the same practice standards as noninfected patients if not neutropenic.",
        "Incision and drainage is recommended for this patient, even if no fluctuance is detected, with concurrent seton placement if a fistula is discovered.",
        "Anoscopy with biopsy should also be performed, as a perianal abscess may be the presenting symptom of an anal or rectal malignancy in HIV-positive patients.",
        "Ordinarily, antibiotics are not recommended for perianal abscess, but for immunocompromised patients like this HIV patient, antibiotics are routinely used, even with adequate drainage.",
        "Wound cultures should be sent for identification of atypical organisms (C is correct, D and E are incomplete or incorrect)."
      ]
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 62-year-old man is postoperative day 6 from an elective laparoscopic sigmoid colectomy for recurrent diverticulitis. He had return of bowel function 2 days ago and was getting ready to be discharged home. Throughout his hospital course, he has been having low-grade fevers. He is now complaining of tenesmus and urinary retention. Which of the following represents the most appropriate next step in management?",
      "options": [
        "A. Transition to nonnarcotic pain medications",
        "B. Bladder scan and in-and-out catheterization as needed",
        "C. Abdominal radiography",
        "D. Computed tomography (CT)",
        "E. Diagnostic laparoscopy"
      ],
      "answer": "D",
      "explanation": [
        "Over 80% of intra-abdominal abscesses are postsurgical and diagnosed in the postoperative period.",
        "They typically arise from persistent walled-off infection after resolution of peritonitis or from anastomotic breakdown/perforation controlled by peritoneal defense mechanisms.",
        "Presentation is highly variable depending on location, from hiccupping with subphrenic abscesses to a palpable mass or sepsis.",
        "Pelvic abscesses can present with urinary or fecal symptoms, such as urinary retention or tenesmus.",
        "These typically present on postoperative days 5 to 7.",
        "Suspicious symptoms should be evaluated with an abdominal CT scan (D is correct).",
        "Plain abdominal radiography has been replaced by CT due to increased diagnostic sensitivity and specificity for intra-abdominal pathology (C is incorrect).",
        "While narcotic pain medications or underlying benign prostatic disease can cause urinary retention, a more serious etiology must be ruled out first (A, B are incorrect).",
        "Almost all intra-abdominal abscesses can be treated with percutaneous drainage and antibiotics; operative intervention is likely unnecessary in the absence of diffuse peritonitis (E is incorrect)."
      ]
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "A 47-year-old female with history of pulmonary sarcoidosis is discovered to have a right upper lobe mass on chest radiograph that is outlined by a crescent of air superiorly. On a left lateral decubitus film, the crescent of air shifts to remain in a nondependent position. The patient is currently asymptomatic. What is the next step in management?",
      "options": [
        "A. Diagnostic bronchoscopy with bronchoalveolar lavage",
        "B. CT-guided biopsy",
        "C. IV voriconazole",
        "D. Pulmonary wedge resection",
        "E. No further workup or treatment is required"
      ],
      "answer": "E",
      "explanation": [
        "Aspergillus species are widely dispersed in the environment and primarily affect the lung as pathogens.",
        "They typically present as one of four syndromes: aspergilloma, allergic bronchopulmonary aspergillosis (ABPA), chronic necrotizing Aspergillus pneumonia, and invasive aspergillosis.",
        "Aspergilloma typically presents as an asymptomatic radiographic finding in patients with preexisting cavitary lung disease, such as sarcoidosis.",
        "A soft-tissue mass within a cavity surrounded by a crescent of air (Monad sign) is diagnostic.",
        "The air remains in a nondependent position because the aspergilloma is not adherent to the cavity walls.",
        "Biopsy or bronchoscopy is not indicated or necessary for diagnosis (A, B are incorrect).",
        "As long as the patient is asymptomatic, no further workup or treatment is necessary (E is correct).",
        "The most common symptom associated with aspergilloma is hemoptysis, which can be life-threatening and may require emergency bronchial artery embolization followed by surgical resection (D is incorrect, as patient is asymptomatic).",
        "ABPA is a noninvasive hypersensitivity disease, treated with inhaled bronchodilators/steroids or systemic corticosteroids.",
        "Invasive aspergillosis and chronic necrotizing Aspergillus pneumonia are treated with intravenous antifungals (C is incorrect, as patient is asymptomatic and diagnosis is aspergilloma, not invasive disease)."
      ]
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A typical serologic panel for hepatitis B gives levels for hepatitis B surface antigen (HBsAg), hepatitis B surface antibody (anti-HBs), total hepatitis B core antibody (anti-HBc), and IgM antibody against hepatitis B core antigen (IgM anti-HBc). Which of the following profiles would you expect for a patient with chronic hepatitis B infection?",
      "options": [
        "A. HBsAg-, anti-HBs–, anti-HBc-, IgM anti-HBc-",
        "B. HBsAg-, anti-HBs+, anti-HBc+, IgM anti-HBc-",
        "C. HBsAg-, anti-HBs+, anti-HBc-, IgM anti-HBc-",
        "D. HBsAg+, anti-HBs–, anti-HBc+, IgM anti-HBc+",
        "E. HBsAg+, anti-HBs-, anti-HBc+, IgM anti-HBc-"
      ],
      "answer": "E",
      "explanation": [
        "HBsAg (Hepatitis B surface antigen) is found on the surface of the hepatitis B virus and in high quantities in the serum of individuals with acute or chronic infection.",
        "Anti-HBs (Hepatitis B surface antibody) represents immunity to the virus, either from previous infection or vaccination.",
        "Patients with chronic hepatitis B infection will be anti-HBs negative.",
        "Anti-HBc (total Hepatitis B core antibody) appears at the onset of symptoms and persists for life, indicating either active or previous infection; vaccination does not produce anti-HBc.",
        "IgM anti-HBc (IgM antibody against hepatitis B core antigen) is only present for the first 6 months of infection, indicating a recent exposure.",
        "Based on these definitions, the profile for chronic hepatitis B infection is HBsAg+, anti-HBs-, anti-HBc+, IgM anti-HBc- (E is correct).",
        "Other profiles represent: A. Susceptible to infection; B. Immunity from previous infection; C. Immunity from vaccination; D. Acute infection."
      ]
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is the best choice for post-exposure prophylaxis for anthrax?",
      "options": [
        "A. Ciprofloxacin",
        "B. Second-generation cephalosporin",
        "C. Rifampin",
        "D. Trimethoprim-sulfamethoxazole",
        "E. Clindamycin, rifampin, and ciprofloxacin"
      ],
      "answer": "A",
      "explanation": [
        "Postexposure prophylaxis for anthrax consists of ciprofloxacin or doxycycline (A is correct).",
        "Agents such as cephalosporins and trimethoprim-sulfamethoxazole are not effective against Bacillus anthracis (B, D are incorrect).",
        "Inhalational anthrax develops after a 1- to 6-day incubation period, with nonspecific symptoms (malaise, myalgia, fever) that worsen over a short period to respiratory distress, chest pain, and diaphoresis.",
        "Mortality is very high if symptoms develop in the exposed patient.",
        "Treatment for fulminant anthrax infection includes combination therapy with ciprofloxacin, clindamycin (to block toxin production), and rifampin (for CNS and intracellular penetration) (E is incorrect, as this is for treatment, not prophylaxis)."
      ]
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 32-year-old male is recovering in the ICU 1 day after extensive debridement of the left leg for a necrotizing soft-tissue infection (NSTI). He is intubated and requiring 80% Fio2. He has leukocytosis that has been rising and an elevated serum lactate. He is on broad-spectrum antibiotics. Which of the following is the best next step in management?",
      "options": [
        "A. Amputation of left leg",
        "B. Second-look operation",
        "C. Add antifungal coverage",
        "D. CT scan of the leg",
        "E. Start pressors"
      ],
      "answer": "B",
      "explanation": [
        "Necrotizing soft-tissue infection (NSTI) encompasses infections limited to skin and subcutaneous tissue (necrotizing cellulitis) and those involving fascia (necrotizing fasciitis) and muscle (myonecrosis).",
        "Early diagnosis is difficult, as less than half present with obvious hard signs (bullae, skin necrosis, gas on radiograph, crepitus). Other signs include tense edema, violaceous skin color, severe pain, and neurologic deficit.",
        "Useful laboratory values for distinguishing NSTI from simple cellulitis include the LRINEC score or a simpler model (admission WBC > 15.4 × 10^9/L and/or serum sodium < 135 mEq/L).",
        "Risk factors for NSTI include diabetes, illicit IV drug abuse, immunosuppression, and liver disease.",
        "70-80% of NSTIs are polymicrobial. Type I infections are polymicrobial (aerobic and anaerobic bacteria), while Type II infections are caused by Group A Streptococcus with or without Staphylococcus.",
        "Treatment includes rapid administration of broad-spectrum antimicrobial agents, aggressive fluid resuscitation, and aggressive surgical debridement.",
        "Mortality rate is 20-40% and is higher with surgical delays, particularly beyond 24 hours.",
        "A rising WBC count and lactate after debridement are highly suggestive of NSTI progression.",
        "A second-look operation is often required to ensure no additional tissues have become involved since the initial debridement (B is correct).",
        "Amputation may be necessary, but only a second-look operation will indicate if it is required (A is incorrect).",
        "CT scan in the postoperative setting may not be useful due to difficult interpretation secondary to postsurgical changes (D is incorrect).",
        "Pressors may be necessary in septic shock, but this is not a definitive intervention for the NSTI itself (E is incorrect).",
        "Adding antifungal coverage can be considered, but it is not the best next step in management for a rising WBC and lactate after debridement (C is incorrect)."
      ]
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is least likely to contribute to a surgical site infection?",
      "options": [
        "A. American Society of Anesthesiologists physical status",
        "B. Length of operation",
        "C. Serum glucose level",
        "D. Body temperature",
        "E. Hemoglobin level"
      ],
      "answer": "E",
      "explanation": [
        "The risk of surgical site infections is related to several factors, including microbial contamination during surgery, length of operation (B), and patient factors.",
        "Patient factors include diabetes (C), nutritional state, obesity, and immunosuppression (cancer, renal failure, immunosuppressive drugs).",
        "The National Nosocomial Infection Surveillance risk index, a tool to assess wound infection risk, includes: (1) American Society of Anesthesiologists (ASA) score higher than 2 (A); (2) class III or IV wounds; and (3) operation duration greater than the 75th percentile for that procedure.",
        "Wounds are classified as clean (class I), clean/contaminated (class II), contaminated (class III), and dirty (class IV).",
        "Hemoglobin level has not been shown to increase the risk of wound infection (E is correct, as it is least likely to contribute).",
        "Hypothermia (low body temperature) increases wound infection risk; active warming to maintain normothermia reduces risk (D is incorrect).",
        "Aggressive glucose control reduces sternal wound infection in diabetic patients; high serum glucose levels contribute to infection risk (C is incorrect).",
        "Blood transfusion has been highlighted as a risk for wound infection, likely due to its immunosuppressive effects."
      ]
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "The organism most commonly associated with acute mesenteric lymphadenitis is:",
      "options": [
        "A. Campylobacter jejuni",
        "B. Escherichia coli",
        "C. Enterococcus",
        "D. Yersinia enterocolitica",
        "E. Pinworms"
      ],
      "answer": "D",
      "explanation": [
        "Acute mesenteric adenitis most commonly presents in children and young adults.",
        "It can frequently be confused with appendicitis in children.",
        "Usually, an upper respiratory infection is present or has recently resolved.",
        "Abdominal pain is typically diffuse, with rare true rigidity.",
        "More than 50% of cases have an elevated WBC count.",
        "While infection with other answer choices can lead to mesenteric lymphadenitis, Yersinia enterocolitica is the most commonly associated organism in children (D is correct; A, B, E are incorrect).",
        "If the diagnosis is clear preoperatively, treatment is supportive as it is a self-limited disease.",
        "Diagnosis can be made with CT by demonstrating enlarged, clustered mesenteric lymph nodes in the right lower quadrant in the absence of acute appendicitis.",
        "Due to increasing reluctance to expose children to radiation from CT scanning, diagnosis is most often made during laparoscopy."
      ]
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Forty-eight hours after total mastectomy, high fever, diarrhea, vomiting, redness of the skin of the entire body, and hypotension develop in a 30-year-old patient. The mastectomy incision appears unremarkable. The following day diffuse desquamation develops. The most likely etiology is:",
      "options": [
        "A. Clostridium perfringens",
        "B. Clostridium difficile",
        "C. β-Hemolytic Streptococcus",
        "D. Staphylococcus aureus",
        "E. Staphylococcus epidermidis"
      ],
      "answer": "D",
      "explanation": [
        "Wound toxic shock syndrome is a rare cause of infection within the first 48 hours after an operation.",
        "It is an acute onset, multiorgan illness resembling severe scarlet fever, originally described in menstruating women (tampon use), but increasingly recognized in postsurgical wounds.",
        "In the majority of cases, the illness is caused by S. aureus strains that express toxic shock syndrome toxin-1, enterotoxin B, or enterotoxin C (D is correct).",
        "It has rarely been described in association with S. pyogenes (group A streptococci) (C is incorrect).",
        "The remaining answer choices (A, B, E) are not associated with toxic shock syndrome.",
        "Half of postsurgical toxic shock syndrome cases present early, within 48 hours of operation.",
        "Symptoms include fever, diarrhea, vomiting, diffuse redness of the skin, and hypotension, followed a day or two later by diffuse desquamation.",
        "Physical examination findings of wound infection are often unremarkable.",
        "Treatment includes wound drainage and antibiotics; administration of clindamycin may be helpful as it inhibits exotoxin production."
      ]
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 60-year-old man presents with gas gangrene of his left leg requiring below-knee amputation. Wound cultures were positive for Clostridium septicum. Additional workup should include:",
      "options": [
        "A. Head CT scan",
        "B. Bronchoscopy",
        "C. Colonoscopy",
        "D. HIV serology",
        "E. Chest CT scan"
      ],
      "answer": "C",
      "explanation": [
        "Clostridium septicum has been associated with colonic and hematologic malignancies.",
        "A review of 162 cases of C. septicum infection found that 81% had an associated malignancy, including 34% with colon carcinoma and 40% with a hematologic malignancy.",
        "In 37% of cases, the malignancy was occult.",
        "The survival rate was only 35%.",
        "Patients discovered to have an infection with C. septicum should have an outpatient colonoscopy scheduled (C is correct).",
        "Other imaging or tests (A, B, D, E) are not specifically indicated as the next step for C. septicum infection."
      ]
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is true regarding gentamicin?",
      "options": [
        "A. It has strong activity against streptococci.",
        "B. It has a high therapeutic index.",
        "C. It has poor activity against Serratia.",
        "D. It has some synergism with penicillin against Enterococcus.",
        "E. It has strong activity against anaerobes."
      ],
      "answer": "D",
      "explanation": [
        "Gentamicin is an aminoglycoside effective against gram-negative rods.",
        "It is most active against Enterococcus and Serratia (C is incorrect).",
        "It has poor activity against Streptococci (A is incorrect).",
        "It has some synergism with penicillin or vancomycin against enterococci (D is correct).",
        "It has no activity against anaerobes (E is incorrect).",
        "Gentamicin is associated with nephrotoxicity and cranial nerve VIII toxicity.",
        "Like other aminoglycosides, its therapeutic index (ratio of toxicity to effective doses) is very low, requiring serum monitoring (B is incorrect)."
      ]
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Peripheral neuropathy with prolonged use is most commonly associated with:",
      "options": [
        "A. Clindamycin",
        "B. Metronidazole",
        "C. Ciprofloxacin",
        "D. Gentamicin",
        "E. Vancomycin"
      ],
      "answer": "B",
      "explanation": [
        "Metronidazole is effective against anaerobes and protozoa.",
        "It is used for perforated bowel, pelvic inflammatory disease, H. pylori infections, amebic dysentery, and amebic liver abscesses.",
        "It has an Antabuse (disulfiram)-like reaction, so it cannot be used with alcohol.",
        "It is cleared by the liver.",
        "Prolonged use of metronidazole has been associated with peripheral neuropathy (B is correct).",
        "The remaining answer choices (A, C–E) are not commonly associated with peripheral neuropathy."
      ]
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is true regarding tetanus?",
      "options": [
        "A. It is highly contagious.",
        "B. Trismus is usually the first sign.",
        "C. It is caused by a gram-negative anaerobic rod.",
        "D. Immunization is not required if there is a previous history of surviving tetanus.",
        "E. The diagnosis is established by demonstrating the organisms in a wound."
      ],
      "answer": "B",
      "explanation": [
        "Tetanus is an acute, often fatal, disease caused by an exotoxin produced by Clostridium tetani, which enters the body through a wound.",
        "The mean incubation period is 7 to 8 days (range 3-21).",
        "In the presence of anaerobic conditions, the spores germinate.",
        "The causative organism is a gram-positive anaerobic rod (C is incorrect).",
        "C. tetani produces two exotoxins: tetanolysin and tetanospasmin; tetanospasmin is a neurotoxin responsible for clinical manifestations.",
        "The toxins interfere with neurotransmitter release, blocking inhibitor impulses, leading to unopposed muscle contraction and spasm.",
        "Characterized by generalized rigidity and convulsive spasms of skeletal muscles, typically involving the jaw muscles (lockjaw/trismus) and neck first, then becoming generalized (B is correct).",
        "Intense facial spasms can lead to risus sardonicus.",
        "Laryngospasm and/or respiratory muscle spasm can interfere with breathing.",
        "There are no characteristic laboratory findings; culture of the wound or blood is not helpful (E is incorrect).",
        "The diagnosis is clinical.",
        "Treatment includes human tetanus immunoglobulin, airway protection (tracheostomy), IV magnesium for muscle spasm prevention, high calorie replenishment, and benzodiazepines.",
        "Contracting tetanus does not result in immunity due to the extreme potency of the toxin (D is incorrect).",
        "Tetanus immune globulin (TIG) is recommended; active immunization with tetanus toxoid should begin or continue once the person's condition has stabilized.",
        "Tetanus is not transmittable from person to person; it is the only vaccine-preventable disease that is infectious but not contagious (A is incorrect)."
      ]
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Which of the following is associated with an endotoxin?",
      "options": [
        "A. Streptococcus pyogenes",
        "B. Bacteroides fragilis",
        "C. Clostridium tetani",
        "D. Staphylococcus aureus",
        "E. Clostridium perfringens"
      ],
      "answer": "B",
      "explanation": [
        "As a general rule, gram-positive organisms produce exotoxins, and gram-negative organisms have endotoxins.",
        "Streptococcus pyogenes produces streptokinase, which acts as a fibrinolytic (A is incorrect, exotoxin).",
        "Bacteroides fragilis is a gram-negative organism that does not produce an exotoxin and has defective lipopolysaccharide and lipid A, which are components of endotoxin (B is correct).",
        "Clostridium tetani produces tetanospasmin, a neurotoxin (C is incorrect, exotoxin).",
        "Staphylococcus aureus produces hemolysin and leukocidin (which damage plasma membranes) and exfoliatin (which cleaves desmosomes) (D is incorrect, exotoxins).",
        "Clostridium perfringens produces heat-labile enterotoxin causing watery diarrhea (E is incorrect, exotoxin)."
      ]
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding occupational risk of hepatitis in health-care workers?",
      "options": [
        "A. The risk of transmission is greater for hepatitis C than hepatitis B.",
        "B. If the exposed person has been vaccinated for hepatitis B, no hepatitis B treatment is needed.",
        "C. If the patient has hepatitis C, the exposed person should be given ribavirin.",
        "D. Most hepatitis B transmissions are the result of needlestick injuries.",
        "E. Hepatitis B virus can survive on dried blood for at least a week."
      ],
      "answer": "E",
      "explanation": [
        "The risk of developing hepatitis B from a needlestick injury is far greater than for hepatitis C (A is incorrect).",
        "If the patient's blood is both HBeAg and HBsAg positive, the risk of developing clinical hepatitis B is very high (22-31%).",
        "Hepatitis B is highly infectious, and the virus can survive on dried blood and on environmental surfaces for at least a week (E is correct).",
        "The majority of healthcare workers infected with hepatitis B do not recall a needlestick exposure, though they were in contact with a hepatitis B-positive patient (D is incorrect).",
        "For healthcare workers who have never been vaccinated for hepatitis B or are seronegative, treatment with both HBIG (immunoglobulin) and hepatitis B vaccine is recommended (B is incorrect, as treatment is needed).",
        "The average incidence of anti-HCV seroconversion from an HCV-positive source is very low (~1.8%).",
        "No effective prophylaxis for HCV has been identified; immunoglobulin and antiviral agents are not recommended for HCV postexposure prophylaxis (C is incorrect)."
      ]
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 65-year-old female presents to the ED with diffuse mild abdominal pain and distention, as well as diarrhea. She is recently recovering from an episode of pneumonia. Her temperature is 101°F, blood pressure is 110/70 mm Hg, and heat rate (HR) is 100 bpm. WBC count is 24,000 cells/µL and lactate is normal. CT scan shows a moderately dilated colon throughout, with mild thickening of the cecal wall, without evidence of obstruction or free fluid. The patient is admitted, placed NPO, and empirically started on oral metronidazole for presumed Clostridium difficile colitis. However, the following day, she develops an altered sensorium, with a blood pressure of 80/50 mm Hg. Repeat WBC count is 30,000 cells/µL, and lactate is now 5.0 mmol/L. She is given fluids and low-dose pressor support. Which of the following is the recommended management?",
      "options": [
        "A. Switch to vancomycin orally.",
        "B. Add vancomycin orally and per rectum.",
        "C. Add vancomycin orally and per rectum and switch metronidazole to IV route.",
        "D. Emergent subtotal colectomy",
        "E. Repeat CT scan."
      ],
      "answer": "D",
      "explanation": [
        "Clostridium difficile colitis is a common nosocomial infection, with rising incidence, more common in women and older patients.",
        "Antibiotic use is the most widely recognized risk factor.",
        "Initial management for suspected C. difficile colitis involves cessation of the suspected antibiotic agent.",
        "Mild to moderate C. difficile colitis (WBC < 15 cells/µL and/or Cre < 1.5 × baseline) should initially be managed with oral metronidazole.",
        "Severe C. difficile colitis (WBC > 15 cells/µL and/or Cre > 1.5 × baseline) should be treated with oral vancomycin.",
        "IV vancomycin is not useful as it does not reach the colonic lumen and has near 0% bioavailability.",
        "Patients who fail to respond to therapy after 5 to 7 days should receive oral and rectal vancomycin as well as IV metronidazole.",
        "In patients who develop complicated C. difficile colitis, surgical intervention is considered in addition to the antibiotic regimen.",
        "Indications for surgery include hypotension requiring pressor support, organ failure, WBC greater than or equal to 50,000 cells/µL, and a lactate level greater than 5 mmol/L.",
        "The patient's progression to altered sensorium, blood pressure 80/50 mm Hg, rising WBC count to 30,000 cells/µL, and lactate of 5.0 mmol/L indicates complicated C. difficile colitis requiring emergent subtotal colectomy (D is correct).",
        "Switching to oral vancomycin (A) or adding rectal vancomycin (B) or switching metronidazole to IV (C) are insufficient for complicated disease.",
        "Repeating CT scan (E) is not the primary management for a patient in septic shock with complicated C. difficile."
      ]
    }
  ]
}
```
The extraction process followed the defined JSON structure and rules. Each question was identified, its type (all MCQs in this set) determined, and the complete question text, options, correct answer, and explanation were extracted. The explanations were formatted into bullet points for readability while preserving the original content. All required fields are present, and the answer format adheres to the specified rules. No additional text or comments are included outside the JSON.```json
{
  "chapter_name": "Infection and Antimicrobial Therapy",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 52-year-old male smoker with chronic obstructive pulmonary disease (COPD) presents to the emergency department (ED) complaining of fevers and foul-tasting sputum for the past 4 weeks. He was recently admitted to an outside hospital for treatment of a COPD exacerbation and has a history of vancomycin-resistant Staphylococcus aureus bacteremia. Chest radiograph shows a 4-cm air-fluid level within the right lung. He reports a 20-pound weight loss over the past 5 months. Appropriate management includes:",
      "options": [
        "A. Administration of intravenous daptomycin",
        "B. Thoracotomy and decortication",
        "C. Pulmonary lobectomy",
        "D. Percutaneous drain placement",
        "E. Diagnostic bronchoscopy"
      ],
      "answer": "E",
      "explanation": [
        "Lung abscesses typically present with an indolent course over several weeks, characterized by fevers, purulent sputum, and cough.",
        "Single lung abscesses are frequently monomicrobial and usually associated with aspiration pneumonia, typically found in dependent segments of the lung (e.g., posterior segment of upper lobes or superior segments of lower lobes).",
        "An air-fluid level on chest radiograph and purulent sputum are virtually diagnostic of an anaerobic lung infection.",
        "Coinfection with antibiotic-resistant gram-positive organisms is possible in patients with frequent hospitalizations.",
        "Most lung abscesses resolve with antibiotics alone; however, daptomycin cannot be used to treat lung infections because it is inhibited by pulmonary surfactant (A).",
        "For patients with risk factors for lung cancer (e.g., smoking, recent weight loss), diagnostic bronchoscopy is indicated to rule out an underlying neoplasm (obstruction leading to infectious process).",
        "Surgical treatment may be necessary for infections that fail to respond to medical management, abscesses greater than 6 cm in size, or abscesses secondary to an obstructed bronchus from a foreign body or neoplasm. This typically involves either lobectomy or pneumonectomy (C).",
        "Percutaneous drain placement can be considered for patients who are poor surgical candidates (D).",
        "Thoracotomy and decortication is a treatment option for empyema, not lung abscess (B)."
      ]
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the management of parapneumonic effusions?",
      "options": [
        "A. If discovered within the first 5 days after the onset of pneumonia, tube thoracostomy is generally all that is required.",
        "B. Intrapleural fibrinolytics are highly efficacious in patients with loculated effusions.",
        "C. Large diameter chest tubes (>28 French) are required for adequate drainage.",
        "D. Treatment of the organizing phase requires open drainage (e.g., Eloesser flap).",
        "E. Video-assisted thoracoscopic surgery should be performed if an empyema does not respond to chest tube drainage."
      ],
      "answer": "E",
      "explanation": [
        "Parapneumonic effusion refers to the accumulation of pleural fluid in response to a respiratory infection, generally divided into three stages: exudative, fibrinopurulent, and organizing.",
        "The exudative stage is characterized by sterile pleural fluid due to increased capillary permeability; antibiotic treatment of the pneumonia is generally all that is required for this stage (A is incorrect, as this applies only to the initial exudative stage).",
        "After 5 days, bacteria begin to enter the fluid and inflammatory cells follow, marking the beginning of the fibrinopurulent phase, where drainage of the collection is mandatory.",
        "Generally, drainage can be accomplished by placement of chest tubes; the diameter of the chest tube does not seem to be important, as smaller caliber tubes are routinely flushed to prevent blockage (C is incorrect).",
        "As the fibrinopurulent phase progresses, loculations begin to form, making drainage with a single catheter difficult.",
        "Studies evaluating intrapleural fibrinolytics (e.g., alteplase) to prevent progression to surgery have controversial results, with a 2008 Cochrane Review finding no consistent benefit (B is incorrect).",
        "At the fibrinopurulent stage, video-assisted thoracoscopic debridement and adhesiolysis are viable options, though a certain number of patients may still need conversion to thoracotomy (E is correct).",
        "The final (organizing) stage, reached after 2 to 3 weeks of untreated infection, involves fibroblast formation of a pleural peel, which generally requires formal decortication via thoracotomy.",
        "Open drainage (e.g., Eloesser flap) may be considered for patients unfit for surgery in the organizing phase, but it subjects patients to months of dressing changes and significant morbidity (D is incorrect, as it is considered when formal decortication is not feasible)."
      ]
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding antibiotic mechanisms?",
      "options": [
        "A. Penicillin-derivative antibiotics bind the bacterial cell membrane and increase its permeability.",
        "B. Piperacillin-Tazobactam (Zosyn) works partly by binding β-lactamases.",
        "C. Metronidazole, though limited, has some effect against aerobic bacteria.",
        "D. Linezolid competitively inhibits the 30S ribosome.",
        "E. Clindamycin, like the macrolides, reversibly binds the 50S ribosome."
      ],
      "answer": "B",
      "explanation": [
        "All penicillin-derivative antibiotics (β-lactams) inhibit the final step of bacterial cell wall synthesis by binding transpeptidases or penicillin-binding proteins (A is incorrect, as they target cell wall synthesis, not the cell membrane).",
        "Cephalosporins work by the same mechanism but are more resistant to degradation by β-lactamases.",
        "Tazobactam, sulbactam, and clavulanic acid bind β-lactamases and are frequently combined with penicillin-derivative antibiotics to increase their effectiveness (e.g., Zosyn, which is piperacillin-tazobactam) (B is correct).",
        "Metronidazole acts only against anaerobic bacteria by inhibiting nucleic acid synthesis; it is not effective in aerobic cells as it requires reduction to its active state, which only takes place in anaerobic cells (C is incorrect).",
        "Aminoglycosides and tetracyclines inhibit the 30S ribosome.",
        "Linezolid inhibits the 50S ribosome subunit. Several other antibiotics (macrolides, linezolid, chloramphenicol) also inhibit the 50S ribosome, but through a slightly different process (D is incorrect, as Linezolid targets the 50S, not 30S ribosome).",
        "Clindamycin is a lincosamide antibiotic that interferes with the amino acyl-tRNA complex, which involves binding to the 50S ribosome (E is also a true statement, as Clindamycin is a 50S ribosomal inhibitor)."
      ]
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following should be used as part of a screening tool designed to identify non-ICU patients that are at increased risk of organ failure from infection?",
      "options": [
        "A. Temperature higher than 38°C",
        "B. Heart rate greater than 90/min",
        "C. Altered mentation",
        "D. White blood cell (WBC) count greater than 12,000/mm³",
        "E. Paco2 less than 32 mm Hg"
      ],
      "answer": "C",
      "explanation": [
        "The Third International Consensus Definitions for Sepsis and Septic Shock, published in JAMA in 2016, redefined sepsis.",
        "The previously used definition of sepsis (2+ SIRS criteria and a source of infection) was deemed too nonspecific and unhelpful in identifying patients at increased risk of mortality from infection (A, B, D, E are SIRS criteria and are not the specific indicators for the new screening tool).",
        "The committee recommended a bedside screening tool called the quick Sequential Organ System Failure score (qSOFA) for identifying patients likely to have a poor outcome from infection.",
        "qSOFA criteria include: respiratory rate > 22/min, altered mental status, and systolic blood pressure < 100 mm Hg.",
        "Altered mentation (C) is one of the three qSOFA criteria.",
        "Sepsis is now defined as an infection with 2 or more points on the Sequential (Sepsis-Related) Organ Failure (SOFA) scoring system.",
        "The SOFA score takes objective criteria for multiple organ systems (respiration, cardiovascular, coagulation, liver, central nervous system, and renal) and assigns a score based on the amount of organ dysfunction.",
        "A SOFA score of 2 or more is associated with a 10% or greater increase in mortality.",
        "Septic shock has been redefined as sepsis that requires vasopressors to keep the mean arterial pressure (MAP) greater than 65 mm Hg and a lactate level greater than 2.0 mmol/L."
      ]
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 56-year-old HIV-positive (with a low CD4 count) female presented to the ED with a spontaneous pneumothorax and underwent a tube thoracostomy procedure. While trying to recap the 20-gauge needle used for anesthetizing the skin, the resident that performed the procedure was inadvertently stuck resulting in visible bleeding from the skin. Which of the following is true regarding this exposure?",
      "options": [
        "A. Postexposure prophylaxis with a two-drug regimen should be administered for 8 weeks.",
        "B. Postexposure prophylaxis with a three-drug regimen should be administered for 4 weeks.",
        "C. Potential HIV infection should be disclosed to future patients.",
        "D. At least 6 months of postexposure treatment is recommended.",
        "E. The hollow bore needle used for this procedure lowers the risk of HIV transmission."
      ],
      "answer": "B",
      "explanation": [
        "For a blood exposure, the first step is to determine the risk (severity) of the exposure and the risk of the patient.",
        "The risk of puncture by a hollow needle with fresh blood is greater than with a solid (surgical) needle, which is greater than splashing of blood on mucous membranes or nonintact skin, which is greater than blood drops on intact skin (E is incorrect).",
        "Depending on the combination of exposure severity and HIV risk, the recommendation is either a basic regimen of two drugs (4 weeks of zidovudine and lamivudine) or an expanded one of three drugs (basic regimen plus indinavir or nelfinavir for 4 weeks).",
        "Given that the healthcare worker had visible skin penetration by fresh blood with a hollow, large bore needle (high-exposure severity), and the patient described has a low CD4 count (high-risk HIV status), the recommendation would be a three-drug regimen for 4 weeks (B is correct, A is incorrect as it specifies 8 weeks).",
        "A three-drug regimen is recommended whenever a hollow needlestick pierces the skin and the patient is HIV positive, regardless of viral load or CD4 count.",
        "Follow-up testing to confirm HIV-negative status in healthcare workers is recommended 3 to 6 months later (D is incorrect, as this is follow-up duration, not treatment duration).",
        "The average risk of HIV transmission after a percutaneous exposure to HIV-infected blood is overall very low (approximately 0.3%).",
        "Healthcare workers are not required to stop working or to inform patients of a possible exposure (C is incorrect).",
        "The American College of Surgeons states that 'HIV-infected surgeons may continue to practice and perform invasive procedures... unless there is clear evidence that a significant risk of transmission of infection exists through an inability to meet basic infection control procedures' and that 'the HIV status of a surgeon is personal health information and does not need to be disclosed to anyone.'"
      ]
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 45-year-old HIV-positive male presents to the ED with perianal pain for the past 2 days. Physical exam reveals a small area of tenderness in the right posterolateral position distal to the external sphincter that is extremely tender. His CD4 count is 550 cells/mL, and he is currently on highly active antiretroviral therapy (HAART). Which of the following is the most correct management of this patient?",
      "options": [
        "A. Intravenous (IV) antibiotics, exam under anesthesia (EUA), and if an area of fluctuance is identified, then incision and drainage (I&D) and biopsy",
        "B. EUA and if an area of fluctuance is identified, then I&D and biopsy",
        "C. IV antibiotics, EUA, I&D and biopsy of area of tenderness even if no fluctuance is identified",
        "D. EUA, I&D, and biopsy of area of tenderness even if no fluctuance is identified",
        "E. IV antibiotics"
      ],
      "answer": "C",
      "explanation": [
        "Anorectal disease is the most common indication for surgery in HIV-infected patients and can frequently be the first presenting symptom for an undiagnosed patient.",
        "Diagnosis can be difficult because HIV patients with anorectal abscesses may be unable to mount an adequate response, presenting with a small area or a complete absence of fluctuance (A, B are incorrect, as fluctuance may not be present).",
        "They often have significant tenderness that is out of proportion to exam findings.",
        "HAART therapy allows these patients to be managed with the same practice standards as noninfected patients with similar outcomes, given that they are not neutropenic.",
        "Incision and drainage is recommended for this patient (even if no fluctuance is detected) with a concurrent seton placement if a fistula is discovered.",
        "Anoscopy with biopsy should also be performed, as a perianal abscess may be the presenting symptom of an anal or rectal malignancy, particularly in an HIV-positive patient.",
        "Ordinarily, antibiotics are not recommended for perianal abscess, but for immunocompromised patients like this HIV patient, antibiotics are routinely used, even in the setting of adequate drainage.",
        "Wound cultures should be sent for the identification of atypical organisms (C is correct, as it includes IV antibiotics, EUA, I&D, and biopsy even without fluctuance). D is incorrect as it omits IV antibiotics. E is incorrect as antibiotics alone are not sufficient."
      ]
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 62-year-old man is postoperative day 6 from an elective laparoscopic sigmoid colectomy for recurrent diverticulitis. He had return of bowel function 2 days ago and was getting ready to be discharged home. Throughout his hospital course, he has been having low-grade fevers. He is now complaining of tenesmus and urinary retention. Which of the following represents the most appropriate next step in management?",
      "options": [
        "A. Transition to nonnarcotic pain medications",
        "B. Bladder scan and in-and-out catheterization as needed",
        "C. Abdominal radiography",
        "D. Computed tomography (CT)",
        "E. Diagnostic laparoscopy"
      ],
      "answer": "D",
      "explanation": [
        "Over 80% of all intra-abdominal abscesses are postsurgical and diagnosed in the postoperative period.",
        "They typically arise from persistent walled-off infection after resolution of peritonitis or after an anastomotic breakdown/perforation that is effectively controlled by peritoneal defense mechanisms.",
        "Presentation can be highly variable depending on their location, ranging from hiccoughing with subphrenic abscesses to a palpable mass or sepsis.",
        "Pelvic abscesses can also present primarily with urinary or fecal symptoms such as urinary retention or tenesmus.",
        "These typically present on postoperative days 5 to 7.",
        "Suspicious symptoms should be evaluated with an abdominal CT scan (D is correct).",
        "Plain abdominal radiography has been essentially replaced by CT due to increased diagnostic sensitivity and specificity for intra-abdominal pathology (C is incorrect).",
        "Though narcotic pain medications or underlying benign prostatic disease can cause urinary retention, a more serious etiology needs to be ruled out first (A, B are incorrect).",
        "Almost all intra-abdominal abscesses can be treated with percutaneous drainage and antibiotics. In the absence of diffuse peritonitis, operative intervention is likely unnecessary (E is incorrect)."
      ]
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "A 47-year-old female with history of pulmonary sarcoidosis is discovered to have a right upper lobe mass on chest radiograph that is outlined by a crescent of air superiorly. On a left lateral decubitus film, the crescent of air shifts to remain in a nondependent position. The patient is currently asymptomatic. What is the next step in management?",
      "options": [
        "A. Diagnostic bronchoscopy with bronchoalveolar lavage",
        "B. CT-guided biopsy",
        "C. IV voriconazole",
        "D. Pulmonary wedge resection",
        "E. No further workup or treatment is required"
      ],
      "answer": "E",
      "explanation": [
        "Aspergillus species are widely dispersed in the environment and primarily affect the lung as pathogens.",
        "Aspergilloma typically presents as an asymptomatic radiographic finding in patients with preexisting cavitary lung disease such as sarcoidosis.",
        "A soft-tissue mass within a cavity that is surrounded by a crescent of air (Monad sign) is diagnostic.",
        "The air will remain in a nondependent position because the aspergilloma is not adherent to the cavity walls.",
        "Biopsy or bronchoscopy is not indicated or necessary for diagnosis (A, B are incorrect).",
        "As long as the patient is asymptomatic, no further workup or treatment is necessary (E is correct).",
        "The most common symptom associated with aspergilloma is hemoptysis, which can occasionally be life-threatening. In this setting, an emergency bronchial artery embolization should be performed followed by surgical resection (D is incorrect, as the patient is asymptomatic).",
        "ABPA (allergic bronchopulmonary aspergillosis) is a noninvasive hypersensitivity disease; therapy is aimed at treating acute exacerbations.",
        "Invasive aspergillosis and chronic necrotizing Aspergillus pneumonia are treated with intravenous antifungals (C is incorrect, as the patient is asymptomatic and the diagnosis is aspergilloma, not invasive disease)."
      ]
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A typical serologic panel for hepatitis B gives levels for hepatitis B surface antigen (HBsAg), hepatitis B surface antibody (anti-HBs), total hepatitis B core antibody (anti-HBc), and IgM antibody against hepatitis B core antigen (IgM anti-HBc). Which of the following profiles would you expect for a patient with chronic hepatitis B infection?",
      "options": [
        "A. HBsAg-, anti-HBs–, anti-HBc-, IgM anti-HBc-",
        "B. HBsAg-, anti-HBs+, anti-HBc+, IgM anti-HBc-",
        "C. HBsAg-, anti-HBs+, anti-HBc-, IgM anti-HBc-",
        "D. HBsAg+, anti-HBs–, anti-HBc+, IgM anti-HBc+",
        "E. HBsAg+, anti-HBs-, anti-HBc+, IgM anti-HBc-"
      ],
      "answer": "E",
      "explanation": [
        "HBsAg (Hepatitis B surface antigen) is found on the surface of the hepatitis B virus and is found in high quantities in the serum of individuals with acute or chronic infection.",
        "Anti-HBs (Hepatitis B surface antibody) represents immunity to the virus, either from previous infection or vaccination.",
        "All patients with chronic hepatitis B infection will be anti-HBs negative.",
        "Anti-HBc (total Hepatitis B core antibody) appears at the onset of symptoms and persists for life; it indicates either active or previous infection with hepatitis B, but vaccination does not produce anti-HBc.",
        "IgM anti-HBc (IgM antibody against hepatitis B core antigen) is only present for the first 6 months of infection, indicating a recent exposure.",
        "Based on these definitions, the serologic profile for chronic hepatitis B infection is HBsAg+, anti-HBs-, anti-HBc+, IgM anti-HBc- (E is correct).",
        "Other profiles represent: A. Susceptible to infection; B. Immunity from previous infection; C. Immunity from vaccination; D. Acute infection."
      ]
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is the best choice for post-exposure prophylaxis for anthrax?",
      "options": [
        "A. Ciprofloxacin",
        "B. Second-generation cephalosporin",
        "C. Rifampin",
        "D. Trimethoprim-sulfamethoxazole",
        "E. Clindamycin, rifampin, and ciprofloxacin"
      ],
      "answer": "A",
      "explanation": [
        "Postexposure prophylaxis for anthrax consists of ciprofloxacin or doxycycline (A is correct).",
        "Agents such as cephalosporins and trimethoprim-sulfamethoxazole are not effective against Bacillus anthracis (B, D are incorrect).",
        "Inhalational anthrax develops after a 1- to 6-day incubation period, with nonspecific symptoms (malaise, myalgia, fever).",
        "These symptoms worsen with the development of respiratory distress, chest pain, and diaphoresis; the mortality rate is very high if symptoms develop.",
        "Treatment for fulminant anthrax infection includes combination therapy with ciprofloxacin, clindamycin (to block toxin production), and rifampin (for CNS and intracellular penetration) (E is incorrect, as this is for treatment of fulminant infection, not prophylaxis)."
      ]
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 32-year-old male is recovering in the ICU 1 day after extensive debridement of the left leg for a necrotizing soft-tissue infection (NSTI). He is intubated and requiring 80% Fio2. He has leukocytosis that has been rising and an elevated serum lactate. He is on broad-spectrum antibiotics. Which of the following is the best next step in management?",
      "options": [
        "A. Amputation of left leg",
        "B. Second-look operation",
        "C. Add antifungal coverage",
        "D. CT scan of the leg",
        "E. Start pressors"
      ],
      "answer": "B",
      "explanation": [
        "Necrotizing soft-tissue infection (NSTI) is a broad term encompassing infections limited to skin and subcutaneous tissue (necrotizing cellulitis) and those involving the fascia (necrotizing fasciitis) and muscle (myonecrosis).",
        "Early diagnosis can be extremely difficult, as fewer than half present with obvious hard signs of NSTI (bullae, skin necrosis, gas on radiograph, crepitus). Other signs include tense edema, violaceous skin color, severe pain, and neurologic deficit.",
        "Useful laboratory values for distinguishing NSTI from simple cellulitis include the LRINEC score or a simpler model (admission WBC > 15.4 × 10^9/L and/or serum sodium < 135 mEq/L).",
        "Risk factors for NSTI include diabetes, illicit IV drug abuse, immunosuppression, and liver disease.",
        "70-80% of NSTIs are polymicrobial. Type I infections are polymicrobial (aerobic and anaerobic bacteria), while Type II infections are caused by Group A Streptococcus with or without Staphylococcus.",
        "Treatment includes rapid administration of broad-spectrum antimicrobial agents, aggressive fluid resuscitation, and aggressive surgical debridement.",
        "The mortality rate remains at 20-40% and is higher with surgical delays, particularly beyond 24 hours.",
        "A rising WBC count and lactate after debridement are highly suggestive of NSTI progression.",
        "A second-look operation is often required to ensure that no additional tissues have become involved since the initial debridement (B is correct).",
        "Amputation may be necessary, but only a second-look operation will indicate whether this is the case (A is incorrect).",
        "CT scan in the postoperative setting may not be useful because interpretation can be difficult secondary to postsurgical changes (D is incorrect).",
        "Pressors may be necessary for septic shock, but this would not be the definitive intervention for the NSTI itself (E is incorrect).",
        "Adding antifungal coverage can be considered, but it is not the immediate best next step for rising WBC and lactate after initial debridement (C is incorrect)."
      ]
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is least likely to contribute to a surgical site infection?",
      "options": [
        "A. American Society of Anesthesiologists physical status",
        "B. Length of operation",
        "C. Serum glucose level",
        "D. Body temperature",
        "E. Hemoglobin level"
      ],
      "answer": "E",
      "explanation": [
        "The risk of developing surgical site infections is related to several factors, including microbial contamination during surgery, length of the operation (B), and patient factors.",
        "Patient factors include diabetes (C), nutritional state, obesity, and immunosuppression (e.g., cancer, renal failure, immunosuppressive drugs).",
        "The National Nosocomial Infection Surveillance risk index, a useful tool to assess wound infection risk, includes: (1) American Society of Anesthesiologists (ASA) score higher than 2 (A); (2) class III or IV wounds; and (3) duration of an operation greater than the 75th percentile for that particular procedure.",
        "Wounds are classified as clean (class I), clean/contaminated (class II), contaminated (class III), and dirty (class IV).",
        "Hemoglobin level has not been shown to increase the risk of wound infection (E is correct, as it is the least likely to contribute).",
        "Hypothermia increases wound infection risk; active warming to maintain normothermia reduces risk (D is incorrect).",
        "Aggressive glucose control reduces sternal wound infection in diabetic patients; high serum glucose levels contribute to infection risk (C is incorrect).",
        "Blood transfusion has been highlighted as a risk for wound infection, likely due to its immunosuppressive effects."
      ]
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "The organism most commonly associated with acute mesenteric lymphadenitis is:",
      "options": [
        "A. Campylobacter jejuni",
        "B. Escherichia coli",
        "C. Enterococcus",
        "D. Yersinia enterocolitica",
        "E. Pinworms"
      ],
      "answer": "D",
      "explanation": [
        "Acute mesenteric adenitis presents most commonly in children and young adults.",
        "It can frequently be confused with appendicitis in children.",
        "Usually, an upper respiratory infection is present or has recently resolved.",
        "The abdominal pain is usually diffuse, but true rigidity is rare.",
        "More than 50% of cases have an elevated WBC count.",
        "Although infection with the other answer choices can lead to mesenteric lymphadenitis, Yersinia enterocolitica is the most commonly associated organism in children (D is correct; A, B, E are incorrect).",
        "If the diagnosis is clear preoperatively, treatment is supportive because it is a self-limited disease.",
        "The diagnosis can also be made with CT by the demonstration of enlarged, clustered mesenteric lymph nodes in the right lower quadrant in the absence of acute appendicitis.",
        "With the increasing reluctance to expose children to the radiation associated with CT scanning, the diagnosis is most often made during laparoscopy."
      ]
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Forty-eight hours after total mastectomy, high fever, diarrhea, vomiting, redness of the skin of the entire body, and hypotension develop in a 30-year-old patient. The mastectomy incision appears unremarkable. The following day diffuse desquamation develops. The most likely etiology is:",
      "options": [
        "A. Clostridium perfringens",
        "B. Clostridium difficile",
        "C. β-Hemolytic Streptococcus",
        "D. Staphylococcus aureus",
        "E. Staphylococcus epidermidis"
      ],
      "answer": "D",
      "explanation": [
        "Wound toxic shock syndrome is a rare cause of infection in the first 48 hours after an operation.",
        "Toxic shock syndrome is an acute onset, multiorgan illness that resembles severe scarlet fever.",
        "It was originally described in menstruating women in association with tampon use, but it has been increasingly recognized in postsurgical wounds.",
        "In the majority of cases, the illness is caused by S. aureus strains that express toxic shock syndrome toxin-1, enterotoxin B, or enterotoxin C (D is correct).",
        "It has rarely been described in association with S. pyogenes (group A streptococci) (C is incorrect).",
        "The remaining answer choices (A, B, E) are not associated with toxic shock syndrome.",
        "Half of the postsurgical toxic shock syndrome cases present early, within 48 hours of operation.",
        "Symptoms include fever, diarrhea, vomiting, diffuse redness of the skin, and hypotension. This is followed a day or two later by diffuse desquamation.",
        "Physical examination findings of wound infection are often unremarkable.",
        "Treatment includes wound drainage and antibiotics; administration of clindamycin may be helpful because it inhibits exotoxin production."
      ]
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 60-year-old man presents with gas gangrene of his left leg requiring below-knee amputation. Wound cultures were positive for Clostridium septicum. Additional workup should include:",
      "options": [
        "A. Head CT scan",
        "B. Bronchoscopy",
        "C. Colonoscopy",
        "D. HIV serology",
        "E. Chest CT scan"
      ],
      "answer": "C",
      "explanation": [
        "Clostridium septicum has been associated with colonic and hematologic malignancies.",
        "A review of the literature involving 162 cases of C. septicum infection found that 81% had an associated malignancy, including 34% with colon carcinoma and 40% with a hematologic malignancy.",
        "In 37% of cases, the malignancy was occult.",
        "The survival rate was only 35%.",
        "As such, patients discovered to have an infection with C. septicum should have an outpatient colonoscopy scheduled (C is correct).",
        "Other workups like Head CT scan (A), Bronchoscopy (B), HIV serology (D), or Chest CT scan (E) are not the primary additional workup indicated for C. septicum infection."
      ]
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is true regarding gentamicin?",
      "options": [
        "A. It has strong activity against streptococci.",
        "B. It has a high therapeutic index.",
        "C. It has poor activity against Serratia.",
        "D. It has some synergism with penicillin against Enterococcus.",
        "E. It has strong activity against anaerobes."
      ],
      "answer": "D",
      "explanation": [
        "Gentamicin is an aminoglycoside that is effective against gram-negative rods.",
        "It is most active against Enterococcus and Serratia (C is incorrect, as it has strong activity against Serratia).",
        "It has poor activity against Streptococci (A is incorrect).",
        "It has some synergism with penicillin or vancomycin against enterococci (D is correct).",
        "It has no activity against anaerobes (E is incorrect).",
        "It is associated with nephrotoxicity and cranial nerve VIII toxicity.",
        "Like other aminoglycosides, its therapeutic index (ratio of toxicity to effective doses) is very low, requiring serum monitoring (B is incorrect, as it has a low therapeutic index)."
      ]
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Peripheral neuropathy with prolonged use is most commonly associated with:",
      "options": [
        "A. Clindamycin",
        "B. Metronidazole",
        "C. Ciprofloxacin",
        "D. Gentamicin",
        "E. Vancomycin"
      ],
      "answer": "B",
      "explanation": [
        "Metronidazole is effective against anaerobes and protozoa.",
        "It is used for perforated bowel, pelvic inflammatory disease, H. pylori infections, amebic dysentery, and amebic liver abscesses.",
        "It has an Antabuse (disulfiram)-like reaction, so it cannot be used in conjunction with alcohol.",
        "It is cleared by the liver.",
        "Prolonged use of metronidazole has been associated with peripheral neuropathy (B is correct).",
        "The remaining answer choices (A, C–E) are not commonly associated with peripheral neuropathy."
      ]
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is true regarding tetanus?",
      "options": [
        "A. It is highly contagious.",
        "B. Trismus is usually the first sign.",
        "C. It is caused by a gram-negative anaerobic rod.",
        "D. Immunization is not required if there is a previous history of surviving tetanus.",
        "E. The diagnosis is established by demonstrating the organisms in a wound."
      ],
      "answer": "B",
      "explanation": [
        "Tetanus is an acute, often fatal, disease caused by an exotoxin produced by Clostridium tetani that enters the body through a wound.",
        "The mean incubation period is 7 to 8 days (range 3-21).",
        "In the presence of anaerobic (low oxygen) conditions, the spores germinate.",
        "The causative organism is a gram-positive anaerobic rod (C is incorrect).",
        "C. tetani produces two exotoxins: tetanolysin and tetanospasmin; tetanospasmin is a neurotoxin that causes the clinical manifestations of tetanus.",
        "The toxins interfere with the release of neurotransmitters, blocking inhibitor impulses, leading to unopposed muscle contraction and spasm.",
        "It typically involves the jaw muscles (lockjaw/trismus) and neck first, then becomes generalized (B is correct).",
        "Intense facial spasms can lead to risus sardonicus (sardonic smile).",
        "Laryngospasm and/or spasm of the muscles of respiration leads to interference with breathing.",
        "There are no laboratory findings characteristic of tetanus; culture of the wound or blood is not helpful (E is incorrect).",
        "The diagnosis is clinical.",
        "Treatment includes human tetanus immunoglobulin, airway protection by early tracheostomy placement, IV magnesium for muscle spasm prevention, high calorie replenishment, and benzodiazepines.",
        "Due to the extreme potency of the toxin, contracting tetanus does not result in immunity (D is incorrect).",
        "Tetanus immune globulin (TIG) is recommended; active immunization with tetanus toxoid should begin or continue as soon as the person's condition has stabilized.",
        "Tetanus is not transmittable from person to person; it is the only vaccine-preventable disease that is infectious but not contagious (A is incorrect)."
      ]
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Which of the following is associated with an endotoxin?",
      "options": [
        "A. Streptococcus pyogenes",
        "B. Bacteroides fragilis",
        "C. Clostridium tetani",
        "D. Staphylococcus aureus",
        "E. Clostridium perfringens"
      ],
      "answer": "B",
      "explanation": [
        "As a general rule, gram-positive organisms produce exotoxins, and gram-negative organisms have endotoxins.",
        "Streptococcus pyogenes produces streptokinase, which acts as a fibrinolytic (A is incorrect, as streptokinase is an exotoxin).",
        "Bacteroides fragilis is a gram-negative organism that does not produce an exotoxin and has defective lipopolysaccharide and lipid A, which are components of endotoxin (B is correct).",
        "Clostridium tetani produces tetanospasmin, a neurotoxin (C is incorrect, as tetanospasmin is an exotoxin).",
        "Staphylococcus aureus produces hemolysin and leukocidin (which damage plasma membranes of the host) and exfoliative (which cleaves desmosomes) (D is incorrect, as these are exotoxins).",
        "Clostridium perfringens produces heat-labile enterotoxin causing watery diarrhea (E is incorrect, as this is an exotoxin)."
      ]
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding occupational risk of hepatitis in health-care workers?",
      "options": [
        "A. The risk of transmission is greater for hepatitis C than hepatitis B.",
        "B. If the exposed person has been vaccinated for hepatitis B, no hepatitis B treatment is needed.",
        "C. If the patient has hepatitis C, the exposed person should be given ribavirin.",
        "D. Most hepatitis B transmissions are the result of needlestick injuries.",
        "E. Hepatitis B virus can survive on dried blood for at least a week."
      ],
      "answer": "E",
      "explanation": [
        "The risk of developing hepatitis B from a needlestick injury is far greater than for hepatitis C (A is incorrect).",
        "If the patient's blood is both HBeAg and HBsAg positive, the risk of developing clinical hepatitis B is very high (22-31%).",
        "Hepatitis B is highly infectious, and the virus can survive on dried blood and on environmental surfaces for at least a week (E is correct).",
        "The majority of healthcare workers infected with hepatitis B do not recall a needlestick exposure, though they were in contact with a hepatitis B-positive patient (D is incorrect).",
        "For healthcare workers who have never been vaccinated for hepatitis B or are seronegative, treatment with both HBIG (immunoglobulin) and hepatitis B vaccine is recommended (B is incorrect, as treatment is still needed).",
        "Data on clinical hepatitis C following exposure is lacking; the average incidence of anti-HCV seroconversion from an HCV-positive source is very low (~1.8%).",
        "No effective prophylaxis for HCV has been identified; immunoglobulin and antiviral agents are not recommended for HCV postexposure prophylaxis (C is incorrect)."
      ]
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 65-year-old female presents to the ED with diffuse mild abdominal pain and distention, as well as diarrhea. She is recently recovering from an episode of pneumonia. Her temperature is 101°F, blood pressure is 110/70 mm Hg, and heat rate (HR) is 100 bpm. WBC count is 24,000 cells/µL and lactate is normal. CT scan shows a moderately dilated colon throughout, with mild thickening of the cecal wall, without evidence of obstruction or free fluid. The patient is admitted, placed NPO, and empirically started on oral metronidazole for presumed Clostridium difficile colitis. However, the following day, she develops an altered sensorium, with a blood pressure of 80/50 mm Hg. Repeat WBC count is 30,000 cells/µL, and lactate is now 5.0 mmol/L. She is given fluids and low-dose pressor support. Which of the following is the recommended management?",
      "options": [
        "A. Switch to vancomycin orally.",
        "B. Add vancomycin orally and per rectum.",
        "C. Add vancomycin orally and per rectum and switch metronidazole to IV route.",
        "D. Emergent subtotal colectomy",
        "E. Repeat CT scan."
      ],
      "answer": "D",
      "explanation": [
        "Clostridium difficile colitis is a very common nosocomial infection, with rising incidence, more common in women and older patients.",
        "Antibiotic use is the most widely recognized risk factor.",
        "Management for suspected C. difficile colitis should first begin with cessation of the suspected antibiotic agent.",
        "Patients with mild to moderate C. difficile colitis (defined as WBC < 15 cells/µL and/or Cre < 1.5 × baseline) should initially be managed with oral metronidazole.",
        "Patients with severe C. difficile colitis (WBC > 15 cells/µL and/or Cre > 1.5 × baseline) should be treated with oral vancomycin.",
        "IV vancomycin does not reach the colonic lumen effectively and has near 0% bioavailability, so it is not useful for C. difficile colitis.",
        "Patients who fail to respond to therapy after 5 to 7 days should receive oral and rectal vancomycin as well as IV metronidazole.",
        "In patients who develop complicated C. difficile colitis, surgical intervention is considered in addition to the antibiotic regimen.",
        "Indications for surgery include hypotension requiring pressor support, organ failure, WBC greater than or equal to 50,000 cells/µL, and a lactate level greater than 5 mmol/L.",
        "The patient's clinical deterioration (altered sensorium, blood pressure 80/50 mm Hg, rising WBC to 30,000 cells/µL, and lactate 5.0 mmol/L) indicates complicated C. difficile colitis requiring emergent subtotal colectomy (D is correct).",
        "Switching to oral vancomycin (A), adding rectal vancomycin (B), or switching metronidazole to IV (C) are insufficient for complicated C. difficile colitis with signs of organ failure.",
        "Repeating CT scan (E) is not the primary management for a patient presenting with signs of septic shock and complicated C. difficile."
      ]
    }
  ]
}
```
{
    "chapter_name": "Problems in Related Specialties",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "A 34-year-old man with a right lower lobe pneumonia develops a parapneumonic effusion. What finding would confer the highest possibility of successful treatment with tube thoracostomy and antibiotics alone?",
            "options": [
                "A. Pleural fluid pH less than 7.20",
                "B. Thickened parietal pleura",
                "C. Purulent material in pleural space",
                "D. Free-flowing effusion confined to 25% of hemithorax",
                "E. Glucose of pleural fluid of 40 mg/dL"
            ],
            "answer": "D",
            "explanation": "- A parapneumonic effusion is a pleural effusion arising in association with an infectious lung focus (e.g., pneumonia, lung abscess, infected bronchiectasis).\n- The Health and Science Policy Committee of the American College of Chest Physicians developed a 4-tier categorization of parapneumonic effusions based on the pleural space anatomy, the bacteriology of the fluid, and the fluid chemistry.\n- Category 1 parapneumonic effusions are minimal, free-flowing effusions (<10 mm on lateral decubitus film) with very low risk of a poor outcome. Treatment includes antibiotics and observation.\n- Category 2 parapneumonic effusions are small to moderate, free-flowing effusions (>10 mm on lateral decubitus film but less than half the hemithorax) with negative Gram stain/culture of the pleural fluid and a pH greater than 7.20. They have a low risk of poor outcome and require antibiotics and pleural fluid sampling with thoracentesis.\n- Category 3 parapneumonic effusions are large, free-flowing effusions involving half or more of the hemithorax on lateral decubitus film, loculated effusions, effusions with thickened parietal pleura, effusions with positive bacterial Gram stain/culture, or effusions with a pH less than 7.20. They have a moderate risk for poor outcome and require antibiotic therapy and drainage via tube thoracostomy.\n- Category 4 parapneumonic effusions have pus within them and a high risk of poor outcome.\n- For this patient, a free-flowing effusion confined to 25% of the hemithorax describes a category 2 parapneumonic effusion, which would be amenable to drainage with a small-bore tube."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "A 64-year-old man with chronic obstructive pulmonary disease presents with worsening shortness of breath, particularly when he is supine. His chest x-ray is remarkable for marked elevation of his left hemidiaphragm. The diagnosis of unilateral paralysis of the left hemidiaphragm is most reliably made by",
            "options": [
                "A. CT scan of the chest and abdomen.",
                "B. fluoroscopy.",
                "C. M-mode ultrasonography.",
                "D. MRI.",
                "E. phrenic nerve stimulation."
            ],
            "answer": "E",
            "explanation": "- Elevation of the hemidiaphragm may occur in a variety of settings; it is important to determine whether it is due to other anatomic factors or to unilateral paralysis.\n- Unilateral diaphragmatic paralysis may be tumor related, viral infection, surgery, trauma, or idiopathic.\n- The finding of an elevated hemidiaphragm on a chest X-ray or CT scan is nonspecific and does not confirm unilateral hemidiaphragm paralysis.\n- Fluoroscopy is often cited as a method to confirm the diagnosis, recording diaphragmatic motion while the patient sniffs.\n- Ultrasonography is also described as a novel method to detect paralysis.\n- Both fluoroscopy and ultrasonography are highly dependent on patient effort and subject to operator error.\n- The most reliable test to quantify the mechanical function of the diaphragm is the measurement of negative pressure generated by contraction in response to phrenic nerve stimulation.\n- Phrenic nerve stimulation is the best means to distinguish between neuropathic and myopathic conditions causing unilateral paralysis."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "A 23-year-old man with a history of asthma presents with sudden onset chest and neck pain. He is afebrile, and physical exam demonstrates crepitus in his neck. His white blood cell count is 11,500/mm3 (3600-11,200/mm3). A chest CT scan is performed (figures 3.1 and 3.2). Initial management should consist of",
            "options": [
                "A. observation.",
                "B. esophagram.",
                "C. bronchoscopy.",
                "D. broad-spectrum antibiotics.",
                "E. transcervical mediastinal drain placement."
            ],
            "answer": "A",
            "explanation": "- The clinical history and CT scan findings are consistent with spontaneous pneumomediastinum.\n- This condition is thought to be caused by alveolar rupture with tracking along the bronchovascular bundle to the mediastinum.\n- Most patients present with chest pain, shortness of breath, and sometimes neck pain; asthma is a common predisposing comorbidity.\n- Careful review of history for trauma, aerodigestive instrumentation, or vomiting is important, as esophageal rupture would be a diagnostic consideration.\n- White blood cell count may be mildly elevated, but fever is not common and would raise suspicion for visceral rupture.\n- Diagnosis is suggested by physical exam and chest x-ray showing pneumomediastinum or subcutaneous air in the neck, with subsequent chest CT scan as the standard of care.\n- Diffuse pneumomediastinum is seen without pleural effusions; effusions or mediastinal fluid collections raise concern for visceral rupture.\n- Given this patient's presenting history and clinical condition, observation without further testing is reasonable.\n- Most patients need pain control with intravenous pain medication initially.\n- Esophagram would be indicated with a history of emesis or in the presence of fever, pleural effusions, or trauma/instrumentation.\n- Bronchoscopy, antibiotics, and drain placement are not needed; air typically resorbs within 1 to 3 days."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "An 85-year-old old man presents with dyspnea and a chest x-ray with white out of the right chest. CT scan shows collapse of the right lung with large nonloculated right pleural effusion. Thoracentesis returns 1 L of serous fluid with improvement in his dyspnea. After thoracentesis, chest x-ray shows a pneumothorax. A chest tube is placed, which does not re-expand the lung. There is no air leak. Cytology indicates atypical cells. Malignant effusion is suspected. What is the next step in the management of this patient?",
            "options": [
                "A. Video-assisted thoracoscopic surgery (VATS) pleural biopsies with talc sclerotherapy",
                "B. A second chest tube and increased suction",
                "C. Right thoracotomy with decortication of the lung",
                "D. Pigtail catheter with doxycycline pleurodesis",
                "E. VATS pleural biopsies with tunneled pleural catheter"
            ],
            "answer": "E",
            "explanation": "- This case describes a common scenario in managing malignant pleural effusions.\n- Pleural fluid cytology is not very sensitive, and clinical suspicion should prompt further evaluation for malignancy; atypical cells do not rule out malignancy, and malignant effusions often have negative cytology on first evaluation.\n- Nonexpansile lung after thoracentesis that persists despite chest tube placement in the absence of air leak defines \"trapped lung,\" caused by tumor implants and chronic compression with scar tissue.\n- Pneumothorax ex vacuo occurs in approximately half of all malignant pleural effusions.\n- A trapped lung is a contraindication to pleurodesis as visceral and parietal surfaces are not in contact.\n- Indwelling pleural catheters are the only option for palliation in trapped lung circumstances.\n- A second chest tube will not improve the situation and is unnecessary.\n- Thoracotomy and decortication are overly aggressive for an 85-year-old man with advanced malignancy.\n- Obtaining tissue is critical for targeted therapy and immunotherapy; single port video-assisted thoracoscopic surgery is a reasonable option for pleural biopsies.\n- The patient's symptoms improved with thoracentesis, which is common even with trapped lung.\n- Placing an indwelling pleural catheter for home drainage effectively palliates dyspnea and improves quality of life, reducing hospital time."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "A patient is involved in a high-speed motor vehicle collision. He was restrained, and his airbag deployed. His primary survey is normal, and his secondary survey reveals no external injuries. He has complete imaging, and his only positive finding is a pneumomediastinum on CT scan of the chest. Which of the following statements is true regarding this finding?",
            "options": [
                "A. Intubation for occult airway injury is necessary.",
                "B. Observation is appropriate treatment.",
                "C. Workup requires bronchoscopy and esophagogastro-duodenoscopy.",
                "D. Mediastinal organ injury will be found in 12% of asymptomatic patients.",
                "E. Broad-spectrum antibiotics are required."
            ],
            "answer": "B",
            "explanation": "- Pneumomediastinum can be spontaneous or related to trauma, instrumentation, severe coughing/vomiting, forced straining, or asthma.\n- It is most often identified on CT imaging.\n- In spontaneous pneumomediastinum, associated injury to the esophagus, trachea, or mediastinal structures is uncommon, and extensive workup is not required.\n- Workup should be considered for patients with recent instrumentation, penetrating trauma, violent retching, or associated pleural effusion, as the chance for mediastinal organ injury is higher.\n- Broad-spectrum antibiotics are not indicated unless specific mediastinal contamination is present.\n- Asymptomatic blunt trauma patients can be safely observed because mediastinal injury occurs in less than 2%."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "A 19-year-old college student with food poisoning has been vomiting and retching for 12 hours. He complains of chest pain, high fevers, and shortness of breath. A CT scan of the chest was obtained (figures 6.1 and 6.2). His vitals are as follows: Temp 38.9°C, heart rate = 120 beats per minute, blood pressure - 110/70 mm Hg, and white blood cell count 25,000/mm3 (3600-11,200/mm3). After administration of 2 L of normal saline and broad-spectrum antibiotics, what is the optimal next step in management?",
            "options": [
                "A. Endoscopic placement of a covered esophageal stent",
                "B. Surgical repair of the esophageal tear",
                "C. Esophagectomy with cervical esophagostomy",
                "D. Endoscopic mucosal clipping",
                "E. Chest tube placement and 48 hours of antibiotics"
            ],
            "answer": "B",
            "explanation": "- Based on the history of retching and imaging showing mediastinal air and gross soilage of the pleura and mediastinum, this patient likely has spontaneous distal esophageal perforation (Boerhaave syndrome).\n- The patient's condition has progressed to sepsis, likely due to mediastinitis.\n- Therapeutic intervention is urgent and begins with fluid resuscitation and broad-spectrum intravenous antibiotics.\n- In patients with Boerhaave syndrome presenting with gross mediastinal and pleural contamination, surgical intervention is the mainstay of therapy.\n- Thoracotomy with primary esophageal repair is the standard of care in Boerhaave syndrome, commonly via left thoracotomy with possible phreno-laparotomy to expose the tear site.\n- Copious irrigation of the mediastinum and pleural space plus debridement of devitalized tissue is important.\n- Primary full-thickness esophageal repair is performed if possible, with reinforcement by a fundic wrap or pleural flap.\n- The mediastinum and pleura are widely drained with large bore chest tubes.\n- Esophagectomy with cervical esophagostomy is recommended only for patients with widespread esophageal necrosis where repair is impossible, typically presenting >24 hours after the inciting event.\n- Nonoperative management should only be considered for patients with small ruptures contained in the mediastinum, draining back into the esophagus, absence of pleural contamination, and no evidence of sepsis.\n- If nonoperative management is attempted, nothing by mouth, antibiotics, and chest tube drainage are necessary.\n- Some patients may benefit from covered esophageal stent placement, and some centers prefer stent placement as first-line treatment.\n- Endoscopic clips may be used for mucosal defects in acute esophageal perforation, but only in early course and experienced centers."
        },
        {
            "id": 7,
            "question_type": "emq",
            "question": "A spontaneous pneumothorax in an 18-year-old healthy male runner",
            "options": [
                "A. Anterior placement of a small pleural drainage catheter",
                "B. Apical pleurectomy and pleurodesis",
                "C. Pleurodesis with talc installation",
                "D. Thoracostomy tube placement mid axillary line, 8th intercostal space",
                "E. Thoracoscopy with lung resection"
            ],
            "answer": "A",
            "explanation": "- Spontaneous pneumothorax should be managed promptly to avoid tension pneumothorax complications.\n- Specific treatment is based on the patient's underlying condition.\n- For an otherwise healthy 18-year-old patient, a small anterior chest tube directed apically is definitive treatment in >70% of spontaneous pneumothorax cases.\n- A low thoracostomy tube for effusion drainage is not necessary.\n- For patients with high-risk activities (e.g., flying, scuba diving) where another episode could be fatal, more definitive procedures like pleurectomy, bleb resection, and pleurodesis are recommended.\n- For patients with a second episode of spontaneous pneumothorax, a definitive procedure is also clearly indicated."
        },
        {
            "id": 8,
            "question_type": "emq",
            "question": "A spontaneous pneumothorax in a 66-year-old man with metastatic lung cancer and pleural effusion",
            "options": [
                "A. Anterior placement of a small pleural drainage catheter",
                "B. Apical pleurectomy and pleurodesis",
                "C. Pleurodesis with talc installation",
                "D. Thoracostomy tube placement mid axillary line, 8th intercostal space",
                "E. Thoracoscopy with lung resection"
            ],
            "answer": "C",
            "explanation": "- For a patient with metastatic cancer, the issue is managing pneumothorax and maximizing quality of life.\n- A simple anterior tube addresses pneumothorax but is inadequate for effusion drainage.\n- A low tube thoracostomy may not be removed due to persistent exudate and negatively impact quality of life.\n- Thoracoscopy with lung resection may eliminate the air leak source but carries greater risk in this patient.\n- Elimination of the potential pleural space for prompt hospital discharge is the goal.\n- Assuming the lung can be re-expanded, drainage with pleurodesis to obliterate the space can be performed at the bedside or in the operating room with sedation and pain control.\n- Concerns exist about talc as a potential carcinogen, but it is not an issue in this patient with metastatic disease.\n- If the lung cannot be re-expanded, a tunneled catheter may be appropriate due to likely effusion recurrence."
        },
        {
            "id": 9,
            "question_type": "emq",
            "question": "A second episode of spontaneous pneumothorax in a 26-year-old",
            "options": [
                "A. Anterior placement of a small pleural drainage catheter",
                "B. Apical pleurectomy and pleurodesis",
                "C. Pleurodesis with talc installation",
                "D. Thoracostomy tube placement mid axillary line, 8th intercostal space",
                "E. Thoracoscopy with lung resection"
            ],
            "answer": "B",
            "explanation": "- Spontaneous pneumothorax should be managed promptly to avoid tension pneumothorax complications.\n- Specific treatment is based on the patient's underlying condition.\n- For an otherwise healthy 18-year-old patient, a small anterior chest tube directed apically is definitive treatment in >70% of spontaneous pneumothorax cases.\n- A low thoracostomy tube for effusion drainage is not necessary.\n- For patients with high-risk activities (e.g., flying, scuba diving) where another episode could be fatal, more definitive procedures like pleurectomy, bleb resection, and pleurodesis are recommended.\n- For patients with a second episode of spontaneous pneumothorax, a definitive procedure is also clearly indicated."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "A 32-year-old woman presents to the emergency department with left-sided pelvic pain. Pregnancy test is negative. Transvaginal ultrasound reveals a 3-cm tubo-ovarian abscess. After 2 days of intravenous antibiotics, she continues to have severe pain and fever. Repeat imaging shows the abscess has grown to 7-cm. What is the best next step in her care?",
            "options": [
                "A. Addition of antifungal therapy",
                "B. Transvaginal drainage",
                "C. Laparoscopic drainage",
                "D. Ileocolectomy",
                "E. Diverting loop ileostomy"
            ],
            "answer": "C",
            "explanation": "- Tubo-ovarian abscesses form from pelvic inflammatory disease and vary in size and severity.\n- Most patients present with abdominopelvic pain and fever, sometimes vaginal drainage.\n- Initial treatment for smaller (<4-5 cm) abscesses is intravenous antibiotics, successful in up to 70% of patients.\n- Large abscesses (>7-8 cm) or patients with persistent/progressive symptoms require abscess drainage for sepsis resolution.\n- Offending pathogens are typically bacteria; antifungal agents are rarely needed.\n- Approach to abscess drainage has evolved from total abdominal hysterectomy to unilateral salpingo-oophorectomy.\n- Simple abscess drainage is now done with excellent success rates, typically via laparoscopic drainage to avoid spillage.\n- Percutaneous abscess drainage can also be performed.\n- Tubo-ovarian abscesses typically occur in younger patients; in postmenopausal women, they raise concern for gynecologic malignancy."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "A 32-year-old woman with a medical history of a ruptured appendix undergoes an exploratory laparotomy for small bowel obstruction. A 6-cm endometrioma of the right ovary is discovered. What is the best treatment?",
            "options": [
                "A. Oral contraceptives",
                "B. Drainage",
                "C. Oophorectomy",
                "D. Ovarian-sparing excision",
                "E. Observation"
            ],
            "answer": "D",
            "explanation": "- Endometriosis is a painful condition affecting reproductive-age women, where endometrial lining grows outside the uterus, forming peritoneal implants or endometriomas.\n- Endometriomas are cysts formed when ectopic endometrial tissue in the ovary bleeds, resulting in a hematoma.\n- They typically have fibrotic walls, surface adhesions, and are filled with chocolate-colored fluid.\n- There is debate regarding surgery for asymptomatic endometriomas.\n- Ovarian-sparing excision is appropriate for large endometriomas, improving pain control and reducing recurrence compared to ablation, drainage, or observation.\n- Oral contraceptives may reduce recurrence but are not effective in treating an established endometrioma."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "A 71-year-old man has a 46-year history of nephrolithiasis, but no additional significant medical history. He has undergone 2 ureteral basket extractions of stones and 8 episodes in which the stones spontaneously passed. The patient recently complained of persistent left costovertebral angle and flank pain prompting CT scan, which shows large left renal calculus (figure 12.1). Workup on 2 occasions in the past demonstrated normal serum calcium and intact parathyroid hormone levels. After a successful percutaneous nephrolithotomy, stone analysis demonstrated the stones to be calcium oxalate-monohydrate and the following additional findings: sCa++ = 9.3,9.0, 9.1 (8.4-10.3 mg/dL) uVolume = 2.67 (>2.0 L/day) uCaOx = 3.25 (6-10) uCa++ = 162 (<250 mg/day) uOx = 31 (20-40 mg/dL) uCitrate = 184 (>450 mg/day) upH = 5.489 (5.8-6.2) uUric acid = >0.800 (>0.800 g/day) s = serum; u = 24-hour urine Management at this point should include",
            "options": [
                "A. (Tc)-99m sestamibi scintigraphy.",
                "B. repeat serum parathyroid hormone level.",
                "C. potassium citrate.",
                "D. bisphosphonate.",
                "E. furosemide."
            ],
            "answer": "C",
            "explanation": "- Primary hyperparathyroidism is a consideration in recurrent calcium stone formers (CaSF), but normal serum calcium and intact parathyroid hormone (iPTH) levels exclude this diagnosis.\n- Normal iPTH and 24-hour uCa++ excretion make normocalcemic hyperparathyroidism unlikely, so repeating iPTH or nuclear scanning is irrelevant.\n- Thiazide diuretics are used for hypercalciuria, and tamsulosin (alpha-blocker) increases urinary pH and promotes stone passage.\n- Furosemide is not appropriate.\n- Bisphosphonates and exercise prevent bone loss and renal stone formation in astronauts and bed-rest patients, but evidence is limited.\n- Potassium citrate and potassium-magnesium citrate reduce recurrent calcium-stone formation, especially calcium oxalate stones.\n- Citrate inhibits calcium oxalate crystal formation.\n- This treatment is appropriate for this patient with calcium oxalate stones and low urinary citrate levels.\n- Increasing consumption of high citrate fluids like fruit juices and lemonade is proposed to reduce stone formation, though the mechanism (crystal formation vs. volume) is debated."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "A 75-year-old, 82 kg, man is found on CT scan to have an enhancing left renal mass that measures 2.5 cm. Comorbidities include diabetes mellitus and compensated congestive heart failure. His serum creatinine is 1.6 mg/dL (0.40-13 mg/dL), and his estimated creatinine clearance is 46 mL/minute (97-137 mL/minute). What is the most appropriate management approach?",
            "options": [
                "A. Cryoablation",
                "B. Active surveillance",
                "C. Radical nephrectomy",
                "D. Laparoscopic enucleation of the lesion",
                "E. Partial nephrectomy with hilar lymph node dissection"
            ],
            "answer": "B",
            "explanation": "- Renal cell carcinoma (RCC) incidence is increasing due to more frequent imaging.\n- Identifying incidental renal lesions in asymptomatic patients complicates treatment decisions.\n- The greatest increase in RCC detection is in elderly patients with comorbidities.\n- Treatment goals include cancer-free survival and renal function preservation.\n- Radical nephrectomy is standard for malignant renal tumors, with high survival but loss of renal function, acceptable in younger patients but increases cardiovascular risk in older patients.\n- Nephron-sparing surgery (partial nephrectomy, ablative techniques) has equivalent oncologic outcomes with minimized renal function loss.\n- Routine nodal excision offers little survival benefit for most early-stage RCCs and is reserved for suspicious lymphadenopathy.\n- Charlson Comorbidity Index (CCI) is a validated method to determine survival based on comorbidities.\n- For this patient, expected 1-year and 2-year survival are 64% and 35% respectively.\n- Given that 40% of incidentally identified small renal masses are benign and another 40% follow an indolent course, observation may be prudent.\n- Clinical studies support this approach, showing no increased survival with active treatment for small renal tumors.\n- Active surveillance (interval imaging without active treatment) is appropriate for patients with advanced age or significant comorbidities.\n- Mean growth rate for small renal masses is 0.28 cm/year; one-third have zero-growth.\n- Elevated growth rates (1.5-2.0 times normal) may warrant reconsideration of management options.\n- Zero-growth doesn't imply benignity, but delayed intervention (6-12 months) has no adverse impact on outcome."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 45-year-old man notes one episode of blood in his urine. He has no pain, urinary incontinence, urgency, or dysuria. He has no medical or surgical history and takes no medications. His vital signs are normal, and a physical examination is normal. His basic metabolic panel is normal. The only abnormality on urinalysis is 10 red blood cells per high powered field. The first step in his management should be",
            "options": [
                "A. urine cytology.",
                "B. repeated microscopic analysis in 6 months.",
                "C. cystoscopy.",
                "D. abdominal CT scan.",
                "E. antibiotics."
            ],
            "answer": "C",
            "explanation": "- Asymptomatic microhematuria (ASH) is defined as ≥3 red blood cells per high-powered field without apparent benign causes (trauma, infection, vigorous exercise, viral illness).\n- Workup focuses on detecting urologic malignancy in the upper and lower urinary tract, occurring in 2.6-4% of ASH patients.\n- American Urological Association guidelines recommend workup for patients ≥35 years.\n- Intrinsic renal disease can cause hematuria, but neoplasm workup is still indicated even with abnormal renal function.\n- Multiphasic CT urogram with and without intravenous contrast evaluates renal parenchyma and upper urinary tracts with high sensitivity and specificity for neoplasms.\n- 90% of bladder cancers present with hematuria.\n- Cystoscopy is recommended for all patients ≥35 years to evaluate for bladder neoplasm.\n- Urine cytology is not sensitive enough for low-grade urothelial cancer and negative results do not preclude full workup.\n- Repeated urinalyses are not necessary.\n- Standard abdominal CT scan is insufficient to detect renal neoplasms.\n- Antibiotics are not recommended without a urinary tract infection."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "Which of the following statements is true regarding iatrogenic ureteral injury during abdominal operations?",
            "options": [
                "A. It occurs in 3% of radical excisions for uterine cancer.",
                "B. It is prevented by preprocedure stent placement.",
                "C. Thermal injury to the distal third of the ureter is best repaired primarily.",
                "D. Transection of the middle third of the ureter may be repaired with a Boari flap.",
                "E. Psoas hitch is indicated for ureteropelvic junction injuries."
            ],
            "answer": "D",
            "explanation": "- Ureteral injuries are a complication of extensive dissections in advanced cancer, previous pelvic dissections, radiation, and infection.\n- Incidence varies by operator experience and disease extent.\n- Preprocedural ureteral stent placement should facilitate ureter identification in difficult cases, but previously published series have not found a decreased incidence of injury.\n- Surgeons hypothesized that stents make the ureter less pliable and more prone to injury.\n- The undisputed advantage of stents is prompt injury recognition.\n- If the injury is not from electrocautery and is very small, primary repair over a stent can be performed.\n- For thermal injuries or large segment transections, edges should be debrided to viable tissue before repair.\n- Distal third ureter injuries can often be reimplanted to the bladder without tension, facilitated by bladder mobilization and psoas hitch.\n- When the bladder cannot be mobilized, a Boari flap (tube from the bladder) can anastomose to the ureter.\n- More proximal injuries are managed with temporary external drainage or renal autotransplantation.\n- Expertise from urologic or transplant surgeons is often necessary."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "A 7-year-old girl is receiving active treatment for acute leukemia and presents with abdominal pain. In addition to abdominal pain and neutropenia, the diagnostic criteria for neutropenic enterocolitis includes",
            "options": [
                "A. bowel wall thickening on imaging.",
                "B. gastrointestinal hemorrhage.",
                "C. pneumoperitoneum.",
                "D. peritonitis.",
                "E. ileus."
            ],
            "answer": "A",
            "explanation": "- Neutropenic enterocolitis (typhlitis, ileocecal syndrome, cectis, necrotizing enterocolitis) is a severe condition affecting immunocompromised patients, initially described in leukemic pediatric patients and also reported in adults with hematological malignancies.\n- The exact pathogenesis is unknown, but hallmarks include intestinal mucosal injury with neutropenia.\n- Clinical presentation includes fever, abdominal pain, neutropenia, and thickening of the bowel wall (most commonly cecum and ascending colon).\n- Bowel wall thickness correlates with mortality; higher mortality with ≥10 mm thickness.\n- Other clinical findings include hypotension and diarrhea.\n- Duration of neutropenia, lack of surgical intervention, and severe sepsis are associated with poorer survival.\n- Gastrointestinal hemorrhage, pneumoperitoneum, peritonitis, and ileus are associated but not absolute diagnostic criteria."
        },
        {
            "id": 17,
            "question_type": "matching",
            "question": "Obturator sign",
            "options": {
                "items": [],
                "choices": [
                    "Pain in right lower quadrant caused by palpating the left lower quadrant",
                    "Pain on extension of the thigh",
                    "Pain on flexion of the thigh",
                    "Pain on flexion and internal rotation of the hip",
                    "Pain on flexion and external rotation of the hip"
                ]
            },
            "answer": "D",
            "explanation": "- The Obturator sign is elicited by passively internally rotating the flexed right thigh, causing pain if an inflamed pelvic appendiceal tip is near the obturator muscle."
        },
        {
            "id": 18,
            "question_type": "matching",
            "question": "Psoas sign",
            "options": {
                "items": [],
                "choices": [
                    "Pain in right lower quadrant caused by palpating the left lower quadrant",
                    "Pain on extension of the thigh",
                    "Pain on flexion of the thigh",
                    "Pain on flexion and internal rotation of the hip",
                    "Pain on flexion and external rotation of the hip"
                ]
            },
            "answer": "C",
            "explanation": "<b>PROBABLE ANSWER: B<b><br>- The book's explanation states that the Psoas sign is elicited by extending the right thigh while the patient is positioned on their left side, stretching the iliopsoas muscle and causing pain if the tip of an inflamed retrocecal appendix is closely approximated. This corresponds to 'Pain on extension of the thigh' (Option B), not 'Pain on flexion of the thigh' (Option C)."
        },
        {
            "id": 19,
            "question_type": "matching",
            "question": "Rovsing sign",
            "options": {
                "items": [],
                "choices": [
                    "Pain in right lower quadrant caused by palpating the left lower quadrant",
                    "Pain on extension of the thigh",
                    "Pain on flexion of the thigh",
                    "Pain on flexion and internal rotation of the hip",
                    "Pain on flexion and external rotation of the hip"
                ]
            },
            "answer": "A",
            "explanation": "- The Rovsing sign involves palpation of the left lower quadrant resulting in pain in the right lower quadrant."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "Retractile testes",
            "options": [
                "A. are a variant of the undescended testis.",
                "B. are normal only in infants.",
                "C. require operation by the age of 5 years.",
                "D. must be in the scrotum some of the time.",
                "E. are normal at any age."
            ],
            "answer": "D",
            "explanation": "- A retractile testis is a variant of the normal testis, where an active cremaster reflex pulls the testis out of the scrotum, common in infants and young boys.\n- It is normal until puberty, when increased androgen secretion relaxes the cremaster reflex, and the testis should remain in the scrotum almost all the time.\n- The three requirements for a retractile testis are: (1) it can be palpated in the groin and manipulated into the scrotum; (2) it remains in the scrotum at least transiently after manipulation until the cremaster reflex is stimulated; and (3) the parent/guardian observes the testis in the scrotum at least part of the time.\n- A retractile testis is clinically distinguishable from an undescended testis (which has never been present in the scrotum).\n- A small proportion of retractile testes become pathologic, with indications for surgery including pain in the cord when manipulated into the scrotum, failure to stay in the scrotum, and decreased testicular volume.\n- Close observation is required until the testis descends or until the end of adolescence."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "What is the ideal way to determine whether the condition pictured (figure 21.1) is caused by an incarcerated hernia or infection?",
            "options": [
                "A. Ultrasound",
                "B. Aspiration",
                "C. Rectal examination",
                "D. Abdominal x-ray, including the scrotum",
                "E. Operative approach through the groin"
            ],
            "answer": "A",
            "explanation": "- Groin pathology is common in infants and children, with differential diagnoses including uncomplicated/complicated inguinal hernias and adenopathy.\n- A child eating, drinking, stooling normally, and looking well is unlikely to have an incarcerated hernia.\n- A rectal exam with one hand on the groin may allow palpation of contents in the inguinal canal or groin adenopathy/abscess.\n- Aspiration is relatively contraindicated due to potential bowel loops in the inguinal canal.\n- An abdominal x-ray shows bowel loops but may not distinguish hernia from omentum or normal configuration.\n- Ultrasound is the best diagnostic tool to examine the groin; an abscess will have specific characteristics and be lateral to the inguinal canal, and ultrasound will show tissue within the inguinal canal."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "Which of the following has consensus with respect to diagnosis and treatments biliary dyskinesia in adolescents?",
            "options": [
                "A. Symptoms",
                "B. Diagnostic criteria",
                "C. Gallbladder ejection fraction",
                "D. Indications for surgery",
                "E. Lack of durable symptom relief after cholecystectomy"
            ],
            "answer": "E",
            "explanation": "- Surgical treatment of biliary dyskinesia in children is controversial, generally guided by symptoms and hepatobiliary scan results.\n- A systematic review showed varied diagnostic criteria, indications for surgery, and gallbladder ejection fraction values.\n- Abnormal gallbladder ejection fraction is institutionally defined (generally <35%), but no standard validated method exists for assessing motility in children.\n- Some centers used up to 50% as abnormal, and some focused on hyperkinesia (>70-80%).\n- Diagnostic criteria were variable, including abdominal pain, nausea, vomiting, fatty food intolerance, anorexia, weight loss, and normal gallbladder ultrasound.\n- There was no consensus on indications for cholecystectomy.\n- Some studies randomized patients to medical vs. surgical management, with variable success.\n- Outcomes after laparoscopic cholecystectomy correlated poorer outcomes with longer symptom duration.\n- Lower gallbladder ejection fraction (<11% or <15%) independently predicted success.\n- Immediate symptom relief was more common than durable relief, with many patients relapsing within weeks.\n- Resolution (complete cessation without recurrence) ranged from 34% to 100%.\n- Symptom resolution after surgery ranged from 54% to 100% for 2 weeks to 6 months, lasting 6 days to 11 years, with only 66% remaining symptom-free long-term."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "The major difference between a patient-centered outcomes trial and a randomized controlled trial is",
            "options": [
                "A. choice of care.",
                "B. reduced cultural bias.",
                "C. decreased investigator bias.",
                "D. reduced enrollment of patients.",
                "E. no need for informed consent."
            ],
            "answer": "A",
            "explanation": "- In a controlled randomized trial, patients and families consent to the trial but are randomized to treatment.\n- In a patient-centered (patient and family choice) trial, patients and families consent to the trial but choose their preferred treatment.\n- Patient and family choice design can produce potential selection bias by the investigator.\n- Bias can be minimized by standardized consent processes and well-defined inclusion/exclusion criteria.\n- Patient and family choice design may lead to unbalanced patient characteristics and treatment differences.\n- For example, in a published trial comparing nonoperative to operative management of pediatric uncomplicated acute appendicitis, parents whose primary language was not English were more likely to select nonoperative management.\n- However, those choosing nonoperative management as a personal choice were less likely to worry about recurrent appendicitis.\n- The ability to choose preferred treatment generally enhances enrollment in a clinical trial."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "Comparing the outcomes of general and pediatric surgeons, children with appendicitis managed by pediatric surgeons have",
            "options": [
                "A. shorter lengths of stay.",
                "B. lower surgical site infection rates.",
                "C. lower negative appendectomy rates.",
                "D. higher readmission rates.",
                "E. lower pelvic abscess rates."
            ],
            "answer": "C",
            "explanation": "- Appendectomy is the most common urgent surgical procedure in the pediatric patient population.\n- Questions remain about general surgeons performing versus referring patients to specialty surgeons.\n- The most important factor appears to be surgeon volume, not subspecialty training.\n- General surgeons performing at least 4 pediatric appendectomies annually appear to have similar outcomes to pediatric surgical colleagues.\n- Patients of general and pediatric surgeons have similar lengths of stay, readmission rates, and complication rates (wound infection, mortality) for complicated and uncomplicated acute appendicitis.\n- The only consistent statistical difference is lower rates of negative appendectomy when the operation is done by pediatric surgeons."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "An 11-year-old girl with Crohn terminal ileitis is being treated with azathioprine and steroids, but she continues to have episodes of abdominal pain and partial bowel obstruction. Her mother is concerned that she is losing weight and becoming socially withdrawn. What is the most appropriate next step in management?",
            "options": [
                "A. Addition of aminosalicylates",
                "B. Switch from azathioprine to 6-mercaptopurine",
                "C. Infliximab infusion",
                "D. Ileocolectomy",
                "E. Diverting loop ileostomy"
            ],
            "answer": "C",
            "explanation": "- For children with inflammatory bowel disease, inadequate treatment is indicated by failure to thrive (weight loss, growth delay, social withdrawal, inactivity).\n- This patient is worsening despite an immunomodulator and ongoing steroids, warranting escalation of therapy.\n- For moderate to severe Crohn disease, initiation of biologic therapy (infliximab or adalimumab) has significant clinical benefit (88% of patients).\n- 50-60% of these patients achieve clinical remission, with a similar number able to wean off oral steroids.\n- Infliximab has the greatest success, with adalimumab typically reserved for second-line treatment.\n- Aminosalicylates have limited efficacy in Crohn disease for children and adults and are not useful for severe disease.\n- Converting immunomodulators (e.g., azathioprine to 6-mercaptopurine) is not adequate escalation.\n- Ileocolectomy is warranted for medical therapy failure and should be performed if biologics are ineffective.\n- A diverting loop ileostomy may partially alleviate symptoms but does not remove the diseased bowel segment and may worsen body image; it should be reserved for situations where resection is not feasible."
        },
        {
            "id": 26,
            "question_type": "mcq",
            "question": "An otherwise healthy 2-year-old boy is referred for an asymptomatic umbilical hernia found on routine exam. Examination reveals a reducible hernia with a 1-cm fascial defect. What is the most appropriate treatment?",
            "options": [
                "A. Observation",
                "B. Abdominal binder",
                "C. Primary repair",
                "D. Repair with polypropylene mesh",
                "E. Repair with bioabsorbable mesh"
            ],
            "answer": "A",
            "explanation": "- Small, asymptomatic umbilical hernias are common in young children (10-20% of infants, up to 75% of premature infants).\n- Complications (incarceration or strangulation) are rare (<1% of patients).\n- Many small hernias close spontaneously (80% of hernias <1 cm, 96% of hernias <0.5 cm).\n- The most appropriate management for small asymptomatic hernias in the first 4 years of life is observation.\n- Abdominal binders have no proven benefit for symptom control, defect closure, or complication prevention."
        },
        {
            "id": 27,
            "question_type": "mcq",
            "question": "A 4-year-old boy presents to the emergency department with a suspicion of having swallowed a round shiny object 3 hours ago. On examination, the boy appears to be comfortable with minimal symptoms but does point to his throat when asked if he has any pain. A plain radiograph is shown (figure 27,1). Which of the following statements is true regarding management of this patient?",
            "options": [
                "A. Distinguishing button batteries from coins is difficult via radiography.",
                "B. Significant esophageal stricture is an unlikely complication.",
                "C. Immediate removal is indicated.",
                "D. Esophageal mucosal injury is caused by pressure effects.",
                "E. If this object were in the stomach, it could be observed."
            ],
            "answer": "C",
            "explanation": "- Management of ingested and aspirated foreign bodies is a common task for surgeons caring for children, but button batteries are a special emergency.\n- The severity of injury from button batteries has increased due to larger sizes lodging in the airway/esophagus and more powerful lithium cells being ingested.\n- Button batteries produce hydroxyl radicals in the mucosa, causing caustic injury from high pH, not from electrical, thermal, or pressure effects.\n- Button batteries have a characteristic double halo appearance on radiography, allowing distinction from coins.\n- Button batteries in the stomach are rarely associated with perforating gastric injury, though a report exists.\n- A patient with a gastric button battery died from an aortoenteric fistula from a missed esophageal injury, leading to recommendations for endoscopic evaluation and removal of all button battery ingestions.\n- A 2010 survey of button battery injuries included tracheoesophageal fistula (47.9%), esophageal perforation (23.3%), esophageal strictures (38.4%), vocal cord paralysis (9.6%), mediastinitis, cardiac arrest, pneumothorax, and aortoenteric fistula (7 of 13 fatalities).\n- The presence of a button battery in the esophagus is a surgical emergency requiring immediate esophagogastroduodenoscopy (EGD).\n- Follow-up EGDs are indicated.\n- For injuries near the aortic arch, MRI or CT scan should rule out inflammation from the esophagus.\n- All battery ingestions should be reported to the National Battery Ingestion Hotline."
        },
        {
            "id": 28,
            "question_type": "mcq",
            "question": "An 18-month-old girl presents with frequent crying spells after periods of normal activity. Her birth and development were normal. Immunizations are up to date. She had a low-grade fever last week with rhinorrhea, which resolved after 72 hours. On exam, she is afebrile. Her abdominal exam is remarkable for some guarding but no peritoneal signs. Which of the following is the best next step in her management?",
            "options": [
                "A. Urgent laparotomy",
                "B. Air contrast enema",
                "C. Chest x-ray",
                "D. Broad-spectrum antibiotics",
                "E. Upper gastrointestinal series/small bowel follow-through"
            ],
            "answer": "B",
            "explanation": "- This clinical presentation is typical of pediatric intussusception.\n- Retrospective series show an average age at presentation of 20 months.\n- This child does not have peritoneal signs, so laparotomy is not indicated.\n- Many children receive an initial plain film of the abdomen, often revealing lack of bowel gas in the right lower quadrant.\n- A chest x-ray will not examine this area and is not indicated for resolved upper respiratory symptoms.\n- Broad-spectrum antibiotics are not indicated for a resolved viral illness.\n- Confirmatory testing for intussusception may include ultrasound, which demonstrates a double donut sign.\n- An upper gastrointestinal series/small bowel follow-through identifies bowel obstruction but carries aspiration risk and does not treat obstruction.\n- Air contrast enema shows the intussusception area and provides a noninvasive means of reduction, which can be done with ultrasound guidance or fluoroscopic imaging.\n- Recurrent intussusception rates in the first 48 hours are low (2.7-6.6%)."
        },
        {
            "id": 29,
            "question_type": "mcq",
            "question": "Which of the following statements is true regarding pediatric inguinal hernias?",
            "options": [
                "A. Laparoscopic repair is not recommended.",
                "B. The incidence of a patent processus vaginalis is greatest at birth.",
                "C. Inguinal hernias rarely incarcerate.",
                "D. Risk of contralateral hernia is higher for male children.",
                "E. Postoperative apnea is an expected complication in full-term infants."
            ],
            "answer": "B",
            "explanation": "- The processus vaginalis is an abdominal wall opening allowing testicular descent in utero.\n- In girls, ovaries remain intra-abdominal, and the round ligament lies in the inguinal canal.\n- In both sexes, the processus vaginalis involutes between 25-35 weeks gestational age, with the left side obliterating first.\n- Persistent communication can lead to hydrocele (fluid in scrotum) or inguinal hernia (bowel passes through).\n- The incidence of a patent processus vaginalis is greatest at birth and gradually declines with age.\n- Inguinal hernias can incarcerate in infants, requiring timely repair; incarceration rates are 4.6-28%.\n- Special circumstances like preterm infants need careful evaluation due to higher postoperative apnea or mechanical ventilation risk (up to 9%).\n- Randomized controlled trials show greater success with laparoscopic repair compared to open, with fewer recurrent herniations (0.2% vs. 1.0%).\n- Laparoscopy allows bilateral repair without additional incisions.\n- Controversy exists regarding contralateral inguinal region exploration in unilateral hernia.\n- Risk of bilateral herniorrhaphy to vas deferens during dissection exists.\n- Many surgeons argue for bilateral repair if the left side has a hernia, as the left processus vaginalis normally closes first.\n- Recent series found no decreased incidence of occult contralateral patent processus vaginalis or inguinal hernia based on side of presentation.\n- Most authors advocate discussing with parents the risk of future contralateral inguinal hernia (2.4% over 2 years) and deferring to parental judgment.\n- Sex further confounds the issue; meta-analysis found no significant difference in contralateral hernia incidence between female and male children."
        },
        {
            "id": 30,
            "question_type": "mcq",
            "question": "A 5-year-old girl who weighs 17 kg presents to the emergency department with a penetrating injury to abdomen and evisceration of some small bowel. At exploration, she has 2 enterotomies, violation of the peritoneum in the pelvis, and what appears to be an expanding serosanguinous fluid collection in zone III. Her enterotomies are repaired with a bowel resection and primary anastomosis. She has been hemodynamically normal throughout the case. An appropriately sized bladder catheter has been placed with little return of urine; what has returned is bloody. What is the next step in management?",
            "options": [
                "A. Angioembolization",
                "B. Suprapubic drainage",
                "C. Exploration of zone m",
                "D. No further intervention",
                "E. Pelvic packing"
            ],
            "answer": "C",
            "explanation": "- This patient has an expanding fluid collection in zone III after a penetrating traumatic injury.\n- Differential diagnosis includes vascular injury and urinary tract injury.\n- Bloody urine output after catheter placement suggests a urologic injury.\n- Since the patient is hemodynamically normal and responds to fluid resuscitation, proceeding with exploration is safer even if vascular injury is a concern.\n- In an analysis of the national trauma databank, operative bladder repair was associated with improved survival in pediatric patients.\n- Angioembolization only treats arterial injuries and is not the next step for a suspected bladder injury.\n- Suprapubic drainage is an option for isolated bladder injuries, but with laparotomy underway, repair is recommended for hemodynamically normal patients.\n- Pelvic packing might be an option if the patient were hemodynamically abnormal with active pelvic bleeding, but it wouldn't address the urine leak.\n- In a hemodynamically normal patient, the next best option is to explore zone III."
        },
        {
            "id": 31,
            "question_type": "emq",
            "question": "Meconium ileus",
            "options": [
                "A. Cardiac anomalies",
                "B. Defect to the right of the umbilicus",
                "C. Ladd bands",
                "D. Cystic fibrosis",
                "E. Currant jelly stool"
            ],
            "answer": "D",
            "explanation": "- Cystic fibrosis in infants is associated with viscous meconium production due to pancreatic enzyme deficiencies and abnormal intestinal chloride secretion.\n- Thickened meconium can impact the distal ileum, causing high-grade intestinal obstruction.\n- Affected patients present with failure to pass meconium and progressive abdominal distention in the neonatal period.\n- Diagnosis is confirmed by contrast enema showing a microcolon.\n- Uncomplicated meconium ileus is often successfully treated with water-soluble contrast agents."
        },
        {
            "id": 32,
            "question_type": "emq",
            "question": "Omphalocele",
            "options": [
                "A. Cardiac anomalies",
                "B. Defect to the right of the umbilicus",
                "C. Ladd bands",
                "D. Cystic fibrosis",
                "E. Currant jelly stool"
            ],
            "answer": "A",
            "explanation": "- Omphalocele is an abdominal wall defect of variable size where bowel and solid viscera protrude, covered by peritoneum and amniotic membrane.\n- It is thought to represent an arrest in development.\n- Approximately 60-70% of affected newborns have associated anomalies, including cardiac anomalies in up to 40% of cases."
        },
        {
            "id": 33,
            "question_type": "emq",
            "question": "Gastroschisis",
            "options": [
                "A. Cardiac anomalies",
                "B. Defect to the right of the umbilicus",
                "C. Ladd bands",
                "D. Cystic fibrosis",
                "E. Currant jelly stool"
            ],
            "answer": "B",
            "explanation": "- Gastroschisis is characterized by an anterior wall defect to the right of the umbilicus, usually <4 cm in size.\n- Intestines freely protrude without a covering sac.\n- If rupture occurred late in pregnancy, intestines appear normal; otherwise, they are thickened, edematous, and covered with exudate.\n- Patients with gastroschisis typically do not have associated anomalies.\n- The protruded intestine is prone to vascular compromise, leading to a higher incidence of bowel atresia."
        },
        {
            "id": 34,
            "question_type": "mcq",
            "question": "A 10-year-old boy presents with 3 days of worsening diffuse abdominal pain. A CT scan shows perforated appendicitis with moderate diffuse peritoneal fluid. Which of the following statements is true regarding irrigation and suction versus suction alone of the peritoneal cavity with laparoscopic appendectomy for perforated appendicitis?",
            "options": [
                "A. There is no difference in the rate of intra-abdominal abscess formation.",
                "B. Irrigation reduces the number of nonpelvic intra-abdominal abscesses.",
                "C. Irrigation reduces length of stay.",
                "D. Irrigation reduces duration of antibiotics.",
                "E. Irrigation increases the number of abscesses per patient."
            ],
            "answer": "A",
            "explanation": "- For decades, surgical trainees were taught \"the solution to pollution is dilution,\" believing high-volume irrigation reduced abscesses and improved outcome.\n- Two recent studies on pediatric appendicitis addressed this.\n- In one study, children with perforated appendicitis were randomized to suction alone or peritoneal irrigation (≥500 mL saline irrigation and suction).\n- The rate of postoperative intra-abdominal abscess formation was high (approximately 19%) but similar for both groups.\n- Each group averaged approximately 2 abscesses per patient.\n- Abscess location was similar, with almost half in the pelvis.\n- In a similar study, intra-abdominal abscess rates were 4.9% and 5.0% respectively.\n- Length of stay and antibiotic duration were similar for both groups in both studies."
        },
        {
            "id": 35,
            "question_type": "mcq",
            "question": "Which of the following statements is true regarding malrotation in the pediatric population?",
            "options": [
                "A. The rate of diagnosis drops off significantly after 5 years of age",
                "B. The incidence of subsequent volvulus is greater with laparoscopic Ladd procedure than with an open Ladd procedure.",
                "C. Malrotation found incidentally in a 15-year-old does not need to be fixed.",
                "D. The majority of cases are diagnosed incidentally.",
                "E. Ladd procedure includes release of Ladd bands, broadening of the mesentery, appendectomy, and placement of the small bowel to the left and the colon to the right."
            ],
            "answer": "B",
            "explanation": "- Malrotation occurs in 1/6000 live births.\n- Approximately 90% of patients present with acute symptoms in the first year of life.\n- Older children may also present with life-threatening symptoms; incidental malrotation in a teenager should lead to surgical management.\n- Urgent malrotation management is generally performed with laparotomy, though a laparoscopic approach is possible.\n- All components of the Ladd procedure can be performed laparoscopically.\n- The incidence of recurrent volvulus appears greater with a laparoscopic approach compared to open.\n- Whether performed open or laparoscopically, the Ladd procedure includes untwisting volvulized bowel, releasing cecal bands, broadening the small bowel mesentery, incidental appendectomy, and placing the small bowel to the right and the colon to the left."
        }
    ]
}
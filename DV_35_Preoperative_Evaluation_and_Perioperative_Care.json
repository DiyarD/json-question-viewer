{
  "chapter_name": "Preoperative Evaluation and Perioperative Care",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 65-year-old woman is admitted to the hospital with a large bowel obstruction. Workup reveals a sigmoid cancer, and on hospital day 4, she undergoes laparoscopy with a plan to perform a resection with a proximal colostomy. During the operation, her end-tidal carbon dioxide suddenly drops, and she develops tachycardia to the 120s with occasional premature atrial contractions. Her systolic blood pressure is 80 mm Hg. Which of the following would be most helpful in establishing the presumptive diagnosis?",
      "options": [
        "A. Electrocardiogram",
        "B. Cardiac enzymes",
        "C. Transesophageal echocardiogram",
        "D. Arterial blood gas",
        "E. Flexible bronchoscopy"
      ],
      "answer": "C",
      "explanation": "- The differential diagnosis for a sudden drop in end-tidal CO2 in the operating room (OR) includes an obstructed airway, accidental extubation, disconnection of the circuit, cardiac arrest, and pulmonary embolism (PE).\n- The patient has at least three risk factors for PE: malignancy, heart rate >100, and >3 days of immobilization.\n- In patients under general anesthesia, PE can present with hypotension, tachycardia, decreased end-tidal CO2, and hypoxemia.\n- Electrocardiogram changes are generally nonspecific (A), and elevated cardiac enzyme levels are not specific for PE (B).\n- The two most sensitive tests to diagnose PE are transesophageal echocardiogram (TEE) and calculating physiologic dead space.\n- TEE has a sensitivity of 80% and specificity of 97% and is ideal in the OR setting, demonstrating right heart strain as indirect evidence of PE.\n- Arterial blood gas (D) and flexible bronchoscopy (E) are not as helpful in this context."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 59-year-old male with a coronary artery bypass grafting 1 year prior for multivessel disease undergoes a right knee replacement surgery. His postoperative course is complicated by pneumonia requiring mechanical ventilation. Electrocardiogram shows a stable Q wave in lead II. Heart rate is 80 bpm and blood pressure is 116/82 mm Hg. Chest radiograph shows bilateral patchy infiltrates. Laboratory exam demonstrates Pao2 of 70 mm Hg, a white blood cell count of 17,000 cells/µL, and hemoglobin of 7.4 g/dL. Which of the follow is true regarding the management of his anemia?",
      "options": [
        "A. Blood transfusion will facilitate weaning from the mechanical ventilator.",
        "B. He should be transfused to a hemoglobin goal of 10 g/dL.",
        "C. Red blood cell transfusion is independently associated with lower mortality.",
        "D. Recombinant human erythropoietin may reduce his overall transfusion requirements.",
        "E. Hemoglobin-based oxygen carriers offer a good alternative to transfusion in this patient."
      ],
      "answer": "D",
      "explanation": "- Red blood cell transfusion is independently associated with longer ICU/hospital stays, increased complications, and increased mortality (C); it is also a risk factor for multiorgan system failure and SIRS.\n- Most guidelines suggest a restrictive transfusion strategy (goal of 7–9 g/dL) is no better and likely worse than a liberal strategy (goal of 10 g/dL) (B).\n- While hemoglobin can improve oxygen delivery, it has not been shown to decrease time on mechanical ventilation or improve outcomes in patients with ARDS/ALI (A); in fact, it has been associated with worse outcomes.\n- Alternative methods like recombinant human erythropoietin (EPO) and hemoglobin-based oxygen carriers are being researched.\n- EPO trials (EPO-1, EPO-2, EPO-3) have shown reductions in required blood transfusions and improved mortality.\n- Current evidence suggests recombinant human erythropoietin is likely safe and may reduce the number of necessary blood transfusions.\n- Hemoglobin-based oxygen carriers show promise but are not currently approved for use in the United States (E)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Four days after a pancreaticoduodenectomy for pancreatic adenocarcinoma, a 65-year-old man develops a fever and tachycardia. Exam reveals tenderness, edema, and erythema over the angle of the jaw. Which of the following is true regarding this condition?",
      "options": [
        "A. It is usually due to Streptococcus.",
        "B. Massage of the area is beneficial.",
        "C. It can be prevented with antibiotics.",
        "D. It is associated with decreased saliva formation.",
        "E. It can be avoided with the use of anticholinergics."
      ],
      "answer": "D",
      "explanation": "- This patient has postoperative parotitis, which commonly occurs in elderly patients with poor oral hygiene, poor oral intake, prolonged nasogastric tube decompression, and dehydration, all leading to decreased saliva production.\n- The pathophysiology involves obstruction of salivary ducts with secondary infection.\n- Signs and symptoms include pain, tenderness over the angle of the jaw, high fevers, leukocytosis, and significant edema.\n- Initial treatment is with high-dose broad-spectrum antibiotics, including Staphylococcus coverage (A), and warm compresses (B).\n- Surgical incision and drainage are indicated if the patient does not improve.\n- Measures to stimulate salivary flow (e.g., sucking on candy) help prevent this complication, but prophylactic antibiotics are generally not indicated (C).\n- Anticholinergics decrease salivary flow and increase the risk of developing postoperative parotitis (E)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 69-year-old woman presents with copious diarrhea, fever, dehydration, and abdominal pain. She was hospitalized 4 weeks ago for pneumonia. The patient demonstrates diffuse abdominal tenderness on examination with guarding and rebound. Plain abdominal radiographs reveal a markedly distended colon without free air. Temperature is 103°F and the white blood cell count is 25,000 cells/μ L. After fluid hydration, definitive management should consist of:",
      "options": [
        "A. Oral Flagyl (metronidazole)",
        "B. Oral vancomycin",
        "C. Intravenous (IV) Flagyl (metronidazole)",
        "D. Colonoscopic decompression",
        "E. Colectomy"
      ],
      "answer": "E",
      "explanation": "- This presentation is consistent with toxic megacolon, most likely secondary to Clostridium difficile infection.\n- The presence of peritonitis mandates exploratory laparotomy and colectomy.\n- Both oral and IV Flagyl (metronidazole) and oral vancomycin are effective for uncomplicated C. difficile colitis (A-C), but IV vancomycin is not effective for GI tract issues.\n- Endoscopy can be useful in certain conditions but is potentially dangerous in fulminant colitis and is not indicated when there are signs of peritonitis and sepsis (D).\n- Delay in therapy will likely increase the risk of an adverse outcome; mortality for C. difficile colitis with toxic megacolon is 50%."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 69-year-old patient with a tumor at the rectosigmoid junction undergoes laparoscopic sigmoid colectomy. Postoperative pain is well controlled with patient-controlled thoracic epidural anesthesia. On postoperative day 1, prophylactic anticoagulation is started with low-molecular-weight heparin (LMWH). The bladder is undergoing drainage with an indwelling Foley catheter. Which of the following is true regarding epidural anesthesia?",
      "options": [
        "A. Bladder catheterization should continue while the thoracic epidural is in place.",
        "B. LMWH should be held for 24 hours before removal of the thoracic epidural.",
        "C. The risk of urinary tract infection is the same regardless of whether the urinary catheter is removed on postoperative day 1 versus postoperative day 3.",
        "D. Risk of urinary retention is not significantly higher with early removal of the Foley catheter.",
        "E. Unfractionated heparin should not be restarted for at least 4 hours after removal of an epidural catheter."
      ],
      "answer": "D",
      "explanation": "- Routine use of urinary drainage with epidural anesthesia remains controversial.\n- Postoperative day 1 removal of the Foley catheter with thoracic epidurals has been shown to significantly decrease the incidence of urinary tract infections with minimal change to the rate of urinary retention (A-C).\n- Current recommendations for epidural catheters with prophylactic low-molecular-weight heparin (LMWH) aim to prevent epidural hematoma.\n- LMWH must be held at least 24 hours before placement and should not be removed within 12 hours of the last dose (B).\n- Prophylactic anticoagulation can be restarted 6 hours after placement and no sooner than 4 hours after epidural removal.\n- Unfractionated heparin may be restarted after 1 hour (E)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 25-year-old woman develops a fever of 104°F 12 hours after an open cholecystectomy. On examination, she has foul-smelling, purulent drainage from her wound. She undergoes the appropriate treatment, and culture of the wound grows gram-positive rods. Which of the following is true regarding this patient and her condition?",
      "options": [
        "A. The causative organism is an aerobe.",
        "B. This condition can be managed conservatively but should be taken to the OR if there is diffuse peritonitis.",
        "C. Broad-spectrum antibiotics and fluid resuscitation alone resolve the majority of cases.",
        "D. The organism produces an endotoxin.",
        "E. Clindamycin should be included in the management."
      ],
      "answer": "E",
      "explanation": "- The description of \"dishwater pus\" is classic for a postoperative clostridial wound infection, a type of necrotizing soft-tissue infection.\n- The causative organisms are typically Streptococcus pyogenes or Clostridium perfringens.\n- Clostridium perfringens is an anaerobic gram-positive rod that produces alpha-toxin, a virulent exotoxin leading to extensive tissue necrosis and cardiovascular collapse (A-D).\n- Clindamycin has been shown to limit toxin production, decrease virulence, slow tissue destruction, and potentially reduce inflammatory cytokine release.\n- Effective therapy requires rapid administration of broad-spectrum antibiotics (including aerobic coverage) and source control via emergent operative excision of necrotic infected tissue.\n- Conservative management is not appropriate if a necrotizing soft-tissue infection is suspected (B)."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 34-year-old woman undergoes a subtotal thyroidectomy for Graves disease. In the recovery room, she develops anxiety and progressive respiratory distress with stridor. Her incision is bulging and tense on exam. The most important initial step would be:",
      "options": [
        "A. Nebulized racemic epinephrine",
        "B. Rapid-sequence intubation",
        "C. Needle aspiration of the neck wound",
        "D. Ultrasound examination of the neck",
        "E. Rapidly opening the incision at the bedside"
      ],
      "answer": "E",
      "explanation": "- Postoperative hematomas after neck surgery (thyroid, parathyroid, carotid artery) can have catastrophic consequences.\n- Physical examination findings can be deceptively benign.\n- Attempts at intubation may be hampered by tracheal compression and deviation (B).\n- Rapidly opening the incision at the bedside is necessary for urgent decompression to restore proper respiratory function.\n- Definitive hemostasis must then be obtained in the operating room.\n- While ultrasonography (D) is an important diagnostic aid, clinical suspicion is sufficient, and the urgency does not permit waiting.\n- Needle aspiration (C) would not be sufficient.\n- Nebulized racemic epinephrine (A) is not appropriate when stridor is caused by external compression of the airway."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "One day after a left colectomy for recurrent diverticulitis, a patient is noted to have an elevation of his serum creatinine. Other laboratories are unremarkable. He has a urine output of 30 to 50 mL/hour. A renal ultrasound shows no evidence of abnormalities with the exception of ascites. Computed tomography (CT) scan demonstrates discontinuity of the left ureter with contrast extravasation at the level of the pelvic brim. Which of the following about this injury is true?",
      "options": [
        "A. Placement of ureteral stents would have prevented this complication.",
        "B. Immediate reoperation should not be performed.",
        "C. A percutaneous nephrostomy should be placed.",
        "D. A retrograde stent should be placed.",
        "E. A ureteroneocystostomy will likely be a better option than a ureteroureterostomy"
      ],
      "answer": "E",
      "explanation": "- Ureters are at risk for injury during pelvic surgery, especially with inflammation, abscess, or phlegmon.\n- Placement of ureteral stents before operation may help identify ureters but does not correlate with a reduction in injuries (A).\n- The decision for immediate reoperation is based on the delay of injury recognition, severity, and presence of urosepsis.\n- If discovered within a week postop, reoperation is generally recommended (B).\n- Beyond 10 days, inflammation makes reoperation hazardous, and percutaneous nephrostomy (C) and/or retrograde drainage with a ureteral stent (D) are indicated.\n- The type of repair depends on the location and extent of the injury: for midureter injuries, a ureteroureterostomy is preferred; for pelvic injuries, a ureteroneocystostomy is needed. If not possible, a psoas hitch or a Boari flap may be needed."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Two days after sustaining significant crush injury to her bilateral lower extremities from a motor vehicle collision, a 32-year-old female becomes oliguric and is only producing scant dark urine. Urine dipstick reveals 4+ blood, and follow-up urinalysis shows 5 to 10 red blood cells per high power field. Prevention of acute kidney injury is best achieved by which of the following?",
      "options": [
        "A. Urgent four compartment fasciotomies",
        "B. Loop diuretics",
        "C. Vigorous IV fluid hydration",
        "D. Alkalization of urine with intravenous sodium bicarbonate",
        "E. Mannitol"
      ],
      "answer": "C",
      "explanation": "- Crush injury to extremities is often complicated by rhabdomyolysis, which can lead to acute renal failure.\n- Degradation products of hemoglobin and myoglobin are toxic to the nephron in acidic urine.\n- Management consists of aggressive IV hydration to maintain a urine output of more than 100 mL/hour, beginning with infusion rates of at least 200 cc/hour.\n- Myoglobin precipitates in renal tubules when contacting Tamm-Horsfall protein, enhanced by acidic conditions.\n- Routine administration of bicarbonate (D) and mannitol (E) in the prevention of acute kidney injury from rhabdomyolysis is controversial.\n- Mannitol may aid in decreasing muscle swelling and compartment pressures, but the mainstay of treatment remains decompression of muscle compartments (A).\n- Loop diuretics (B) are not used in the prevention of acute kidney injury in the setting of rhabdomyolysis."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Five days after a laparoscopic Roux-en-Y gastric bypass, a patient develops fever with rigors, hypotension, tachycardia, and pain in the left shoulder. This most likely represents:",
      "options": [
        "A. Gas bloat syndrome",
        "B. Acalculous cholecystitis",
        "C. Wound dehiscence",
        "D. Internal hernia involving the Roux limb",
        "E. Disruption of the gastric pouch-jejunal anastomosis"
      ],
      "answer": "E",
      "explanation": "- Fever, chills, tachycardia, hypotension, and peritoneal irritation occurring together within 1 week of any surgery involving a new bowel anastomosis should immediately raise suspicion for an anastomotic disruption.\n- Left shoulder pain is often a consequence of left diaphragm irritation and, in this case, correlates with the gastric pouch-jejunal anastomosis.\n- Water-soluble contrast studies can aid in the diagnosis and indicate how large the leak is.\n- In this patient, hypotension and signs of peritonitis necessitate operative exploration and repair of the anastomosis.\n- Gas pain (A), acalculous cholecystitis (B), and wound dehiscence (C) are less likely given the history and presentation.\n- Internal hernia (D) is less likely given the timeline and left shoulder pain indicative of diaphragmatic irritation."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 28-year-old woman undergoes adhesiolysis for an acute small bowel obstruction. During the course of the surgery, she requires a segmental ileal resection with primary anastomosis. On postoperative day 6, she is noted to have thick bile-colored fluid emanating from the midline wound. After IV hydration, the next step in the management should be:",
      "options": [
        "A. CT scan of the abdomen",
        "B. Water-soluble upper gastrointestinal series with small bowel follow-through",
        "C. Fistulogram",
        "D. Operative re-exploration",
        "E. Octreotide"
      ],
      "answer": "A",
      "explanation": "- This case represents an enterocutaneous fistula, likely resulting from an anastomotic leak or an unrecognized intraoperative bowel injury.\n- Management should begin with stabilizing the patient via aggressive fluid hydration and control of sepsis (if present).\n- Prompt return to the operating room (D) is not recommended because the peritoneal cavity will likely have highly vascular adhesions, making reentry treacherous, and early attempts to reclose fistulas typically fail.\n- Once the patient has been stabilized, the best initial study is a CT scan of the abdomen, which will identify any intra-abdominal abscesses that might require percutaneous drainage and rule out distal obstruction (B, C).\n- Octreotide (E) has not been shown to aid in earlier fistula closure or decrease mortality."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "The most important predictor of colonic ischemia after repair of a ruptured abdominal aortic aneurysm is:",
      "options": [
        "A. Age",
        "B. Presence of preoperative shock",
        "C. Time to operation",
        "D. Presence of associated cardiac disease",
        "E. Intraoperative ligation of a patent inferior mesenteric artery"
      ],
      "answer": "B",
      "explanation": "- Colonic ischemia after repair of a ruptured abdominal aortic aneurysm occurs in 1% to 6% of operations, and up to 25% in certain circumstances.\n- The greatest risk factor is the presence of prolonged preoperative hypotension.\n- Age (A), time to operation (C), and presence of cardiac disease (D) have little effect on the incidence of colonic ischemia after aortic repair.\n- Intraoperative ligation of a patent inferior mesenteric artery (E) is not a good predictor due to significant avenues of collateral flow.\n- Symptoms and signs of ischemia include bloody diarrhea, abdominal pain/distention, and elevated white blood cell count.\n- If peritonitis is present, urgent reoperation is indicated; otherwise, urgent endoscopy is required.\n- The majority of cases can be managed nonoperatively with bowel rest, hydration, and IV antibiotics.\n- Mortality rates are as high as 75% if colon resection is required."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Five days after surgery for perforated appendicitis, liquid stool emanates from the right lower quadrant wound. Which of the following is true about this condition?",
      "options": [
        "A. Mortality is high for this complication.",
        "B. The majority will close spontaneously.",
        "C. The patient should be placed immediately on TPN.",
        "D. Fluid and electrolyte derangements are common.",
        "E. The patient should be returned immediately to the operating room for surgical repair."
      ],
      "answer": "B",
      "explanation": "- This case represents a cecal fistula.\n- Most common causes are slippage of the suture or necrosis of the remaining appendiceal stump, leading to leakage of enteric contents.\n- Cecal fistulas are low-output fistulas and are not associated with losses of large amounts of fluid, electrolytes, or nutrients (D).\n- Therefore, TPN is not necessary to maintain adequate nutrition (C).\n- Mortality rates are low in the absence of other serious complications (A).\n- Spontaneous closure is promoted in as many as 75% of patients maintained on low-residue diets because absorption is mostly complete by the time the contents reach the cecum (B, E)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Five days after a Billroth II gastric resection for a bleeding ulcer, high fever, hypotension, tachycardia, and generalized peritonitis develop in the patient. This most likely represents:",
      "options": [
        "A. Postoperative pancreatitis",
        "B. Acalculous cholecystitis",
        "C. Duodenal stump blowout",
        "D. Intra-abdominal hemorrhage",
        "E. Wound dehiscence"
      ],
      "answer": "C",
      "explanation": "- Duodenal stump blowout occurs after Billroth II operations, where back pressure on the duodenal stump results in breakdown of the stump closure, leading to abdominal sepsis and peritonitis.\n- Acute pancreatitis (A) is associated with Billroth II gastrectomy and jejunostomy, but is unlikely to cause peritonitis.\n- Wound dehiscence (E) is characterized by sudden dramatic drainage of clear, salmon-colored fluid and is apparent on physical exam.\n- Acalculous cholecystitis (B) can occur postoperatively, but the clinical presentation would mainly consist of right upper quadrant pain.\n- Intra-abdominal hemorrhage (D) would be less likely to present with sepsis."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following modalities is LEAST likely to assist in the prevention of postoperative pulmonary complications in a 65-year-old male smoker?",
      "options": [
        "A. Postoperative use of an incentive spirometer",
        "B. Postoperative deep-breathing exercises",
        "C. Postoperative use of continuous positive airway pressure",
        "D. Smoking cessation 1 week before surgery",
        "E. Placement of a nasogastric tube"
      ],
      "answer": "E",
      "explanation": "- Smoking is a predictor of postoperative pulmonary complications.\n- A meta-analysis concluded that concerns about stopping smoking only a few weeks prior to surgery worsening outcomes are unfounded, and clinicians should advise smoking cessation as soon as possible (D).\n- Postoperative lung expansion modalities (A-C) reduce postoperative pulmonary complications, though there is no added benefit from using all three.\n- Routine use of a nasogastric tube (E) may increase aspiration risk because the tube stents open the gastroesophageal junction.\n- However, selective use in patients with nausea, bloating, and/or vomiting is probably protective."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following preoperative studies is most strongly associated with an increased risk of pulmonary-related postoperative complications?",
      "options": [
        "A. Blood urea nitrogen",
        "B. Incentive spirometry",
        "C. Chest radiograph",
        "D. Serum albumin",
        "E. Room air arterial blood gas"
      ],
      "answer": "D",
      "explanation": "- A serum albumin less than 3.5 g/dL is the single most important laboratory predictor of adverse pulmonary events after surgery.\n- Blood urea nitrogen (>21 mg/dL) (A) is also useful, although the correlation is not as strong.\n- Routine spirometry (B) for all operations does not seem to add value beyond a careful history and physical examination, with the exception of lung resection.\n- Chest radiograph (C) and arterial blood gas (E) are diagnostic studies that would only be predictive of postoperative complications if there were abnormal findings."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 67-year-old male recovering from a pelvic exenteration secondary to locally advanced rectal cancer is started on total parenteral nutrition for prolonged ileus via a right-sided peripherally inserted central catheter (PICC) line. Several days later the nurse reports that she is unable to draw blood from his PICC line. The arm is swollen. Ultrasound confirms clot in the basilic and axillary veins. What is the appropriate management of his condition?",
      "options": [
        "A. Warm compress and nonsteroidal antiinflammatory drugs (NSAIDs)",
        "B. Immediately remove the line.",
        "C. Immediately remove line and then start heparin.",
        "D. Start heparin and move the line to an alternate site.",
        "E. Start heparin, keep the line in place, and therapeutic anticoagulation for 3 to 6 months"
      ],
      "answer": "E",
      "explanation": "- Thrombosis of superficial and deep veins of the upper extremity is caused by intravenous catheters in most cases.\n- Management begins with anticoagulation and determining the necessity for the line.\n- Studies have shown that it is not necessary to remove the PICC line despite the DVT, especially if there is a continued need for TPN.\n- Therapeutic anticoagulation for 3 to 6 months is recommended.\n- Removal of the catheter without anticoagulation is not acceptable due to the risk of PE (B).\n- Indications to remove a line include infection and a contraindication to anticoagulation.\n- If the line is to be removed, anticoagulation is still recommended, but it's advisable to wait 5 to 7 days after heparin initiation before removal (C, D).\n- Warm compresses and NSAIDs (A) would be appropriate for a superficial thrombophlebitis."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 76-year-old diabetic male is admitted to the surgical intensive care unit after a fall. His injuries include a right femoral neck fracture and subarachnoid hemorrhage. He continues to have intermittent elevation in his intracranial pressure and is still requiring respiratory support after 2 days. Which of the following is true regarding nutritional supplementation in this patient?",
      "options": [
        "A. Postpyloric feeding may reduce his risk of developing pneumonia.",
        "B. Gastric feeding is associated with a longer length of ICU stay.",
        "C. Diabetic patients have better outcomes with gastric versus postpyloric feedings.",
        "D. Postpyloric feeding more closely simulates normal physiologic feeding.",
        "E. Gastric feeding is associated with increased total nutrition."
      ],
      "answer": "A",
      "explanation": "- A 2015 Cochrane review comparing postpyloric and gastric feedings showed two significant differences: lower rates of pneumonia in the postpyloric group and some evidence for increased total nutrition delivered in the postpyloric group (E).\n- There was no significant difference in length of ICU stay, mortality, or time on the ventilator between the two study groups (B).\n- Advantages of gastric feeding include a better approximation of normal physiology, ease of placement, and convenience (D).\n- Postpyloric feeds should be considered for patients with delayed gastric emptying (common in ICU patients), diabetes (C), and gastroesophageal reflux.\n- Earlier enteral feeding in critically ill patients results in better outcomes."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "A 55-year-old obese female with chronic obstructive pulmonary disease (COPD) is undergoing preoperative evaluation for ventral hernia repair. She has a 30 pack-year smoking history, though she quit 1 year ago. Her COPD symptoms are well controlled with her current medication regimen, and her last admission for COPD exacerbation was over 2 years ago. Which of the following is true regarding risk assessment for postoperative pulmonary complications in this patient?",
      "options": [
        "A. Obesity is not a significant risk factor.",
        "B. Preoperative pulmonary function tests (PFTs) should be obtained.",
        "C. A nasogastric tube should be used postoperatively to decrease pulmonary complications.",
        "D. Upper midline and lower midline laparotomy confer similar risk for pulmonary complications.",
        "E. A Paco2 of more than 45 is an absolute contraindication to major abdominal surgery."
      ],
      "answer": "A",
      "explanation": "- Patient-related risk factors for postoperative pulmonary complications include age >50, COPD, congestive heart failure, ASA class >2, serum albumin <3.5 g/L, obstructive sleep apnea, and current smoking.\n- Obesity (A) has not been shown to independently significantly increase the risk of postoperative pulmonary complications.\n- A preoperative PaCO2 >45 increases surgical risk, but there is no definitive number that prohibits abdominal surgery (E).\n- Current American College of Physicians Guidelines recommend against the routine use of preoperative chest radiography or PFT (B).\n- Location of the surgical incision is an important risk factor, with incisions closer to the diaphragm inferring more risk (D).\n- Routine use of a nasogastric tube (C) postoperatively has been associated with increased rates of pneumonia and atelectasis."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding PFTs?",
      "options": [
        "A. Total lung capacity (TLC) is generally reduced with aging.",
        "B. A preoperative forced expiratory volume in one second (FEV1) of less than 1.5 L is a contraindication for pulmonary lobectomy.",
        "C. Diffusion capacity of the lungs for carbon monoxide (DLCO) will stay relatively constant with age so long as there is no intrinsic lung disease.",
        "D. Percent-predicted postoperative FEV1 of >40% is acceptable for a lobectomy but not pneumonectomy.",
        "E. Chest wall compliance decreases with age."
      ],
      "answer": "E",
      "explanation": "- Pulmonary function testing includes spirometry, lung volumes, and diffusion capacity.\n- Expected changes with aging include an increase in functional residual capacity and residual volume, with a corresponding decrease in vital capacity; total lung capacity (TLC) is preserved (A).\n- Diffusion capacity of the lungs for carbon monoxide (DLCO) decreases with age (C).\n- While lung tissue compliance increases with age, chest wall compliance significantly decreases, leading to an overall reduction in pulmonary system compliance (E).\n- Preoperative PFTs are mandatory for pulmonary resection evaluation.\n- Preoperative values to remember: FEV1 >2 L for pneumonectomy, FEV1 >1.5 L for lobectomy, FEV1 >80% predicted, and DLCO >80% predicted.\n- These numbers are not absolute contraindications; failure to meet them necessitates more workup (B).\n- If percent-predicted postoperative FEV1 and DLCO are >60%, the patient is a candidate for resection without further testing (D)."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 45-year-old male with end-stage renal disease is undergoing placement of a tunneled hemodialysis catheter. During the operation, the anesthesiologist notices a sharp decline in the continuous capnography and the calculated physiologic dead space is increased. This is followed by massive myocardial infarction and cardiac arrest. Which of the following is true regarding this condition?",
      "options": [
        "A. Electrocardiogram (ECG) will most commonly demonstrate right heart strain.",
        "B. A congenital heart defect likely contributed to the cardiac arrest.",
        "C. The patient should be placed in left side-up position.",
        "D. Bedside transesophageal echocardiography is generally not sensitive enough to detect this complication.",
        "E. Aspiration from the central line is usually helpful."
      ],
      "answer": "B",
      "explanation": "- Venous air embolism (VAE) is a rare and typically asymptomatic condition, often associated with central venous access catheters.\n- When suspected, the patient should be immediately placed in Trendelenburg position and left lateral decubitus or right side up (Durant maneuver) (C), designed to trap the air embolus in the right ventricle.\n- The most sensitive bedside test for diagnosis is likely transesophageal echocardiography (D), which can detect even small volumes of air.\n- ECG suggestive of right heart strain (A) is associated with pulmonary emboli.\n- Myocardial infarction is uncommon with venous air embolism and is typically the result of air entering the arterial system via a congenital heart defect, such as a patent foramen ovale, and occluding the coronary arteries.\n- An attempt can be made to aspirate the air from the ventricle through an existing central line or directly through the chest wall, but return of air with these procedures is generally low (E)."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "A 65-year-old man with Barrett esophagus and new onset dysphagia is being evaluated for diagnostic esophagogastroduodenoscopy (EGD), endoscopic ultrasound (EUS), and mucosal biopsy. He is on warfarin for mechanical mitral valve and has a history of embolic stroke 10 years ago. What is recommended for his anticoagulation regimen before this procedure?",
      "options": [
        "A. Hold warfarin for 3 to 5 days and bridge with low-molecular-weight heparin.",
        "B. Hold warfarin for 48 to 72 hours, bridge with unfractionated heparin, and hold heparin 4 to 6 hours before the procedure.",
        "C. Perform EGD and EUS while therapeutic on warfarin; if indicated, the mucosal biopsy can be performed at a later date after holding warfarin.",
        "D. Continue warfarin without interruption.",
        "E. Hold warfarin 3 to 5 days before procedure and restart within 24 hours after the procedure."
      ],
      "answer": "D",
      "explanation": "- This patient is scheduled for a low-risk endoscopic procedure and has a high risk for thromboembolic events (mechanical valve, previous embolic event); therefore, anticoagulation should be continued without interruption.\n- For low-risk endoscopic procedures (e.g., diagnostic endoscopy with mucosal biopsy, EUS, enteroscopy, stent deployment), anticoagulation or antiplatelet therapy can be safely performed while therapeutic and should be continued.\n- For high-risk endoscopic procedures (e.g., polypectomy, sphincterotomy, therapeutic dilation), anticoagulation should be discontinued with or without bridging.\n- If anticoagulation is temporarily needed or discontinuation is safer later, and endoscopy is completely elective, it can be delayed.\n- For patients with high thromboembolic risk on warfarin, bridging therapy with low-molecular-weight heparin (LMWH) or unfractionated heparin may be considered, but the use of LMWH with mechanical valves is controversial (A, B, E).\n- Anticoagulation is generally restarted within 24 hours after the procedure."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A patient in the surgical intensive care unit was started on bolus enteral feeds approximately 3 hours ago and is now having significant respiratory distress. No medications were administered recently, and the nursing staff did not notice any significant events. Following intubation, an arterial blood gas demonstrates a Pao2 of 70 mm Hg on a Fio2 of 75%. Which of the following is true about this condition?",
      "options": [
        "A. Early bronchoscopy is indicated.",
        "B. Corticosteroids should be administered.",
        "C. It is most commonly caused by gram-negative organisms.",
        "D. Tumor necrosis factor alpha (TNF-a) and interleukin-8 (IL-8) have been implicated as causative agents.",
        "E. Feeding via percutaneous endoscopic gastrostomy (PEG) tube is superior to nasogastric tube in preventing this condition."
      ],
      "answer": "D",
      "explanation": "- Aspiration pneumonitis (Mendelson's syndrome) requires aspiration of gastric contents with a pH of less than 2.5, though particulate food aspiration is also a factor.\n- The chemical damage to the lung parenchyma happens almost instantaneously, so routine bronchoscopy (A) is generally not indicated unless there is witnessed aspiration or suspected foreign bodies.\n- Aspiration pneumonitis can rapidly lead to hypoxic respiratory failure and ARDS due to the rapid release of inflammatory cytokines, such as TNF-α and IL-8 (D), and increased permeability.\n- Blunt-ing the inflammatory response with corticosteroids (B) has not been shown to reduce complications or mortality.\n- Management is largely supportive as it is caused by chemical damage, not bacterial infection; routine antibiotics (C) are not encouraged unless there is failure to improve within 48 hours.\n- While pneumonia rates are generally lower with postpyloric feeding, there is no documented difference between nasogastric or PEG tube feedings in preventing aspiration or pneumonia (E)."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "A 42-year-old female with long-standing systemic lupus erythematosus (SLE) complicated by lupus nephritis and debilitating arthritis is in the ICU following an emergency bowel resection 4 days earlier. Over the next several hours, she becomes febrile, hypotensive, and complains of abdominal pain. She is given fluid boluses, but the blood pressure does not respond. Her abdominal exam is unremarkable. Laboratory values reveal a white blood cell count of 12,000 cells/L with eosinophilia, serum Na of 133 mEq/L, serum bicarbonate of 20 mEq/L, and serum K of 5.3 mEq/L. Which of the following represents the best management of this condition?",
      "options": [
        "A. Two liters of normal saline followed by 4 mg of dexamethasone",
        "B. Exploratory laparotomy",
        "C. Vasopressin",
        "D. Immediate administration of broad-spectrum antibiotics and 100 mg of hydrocortisone",
        "E. Fluid resuscitation, vasopressor support, and AM cosyntropin test"
      ],
      "answer": "A",
      "explanation": "- Refractory hypotension in the postoperative period in patients with conditions like SLE (commonly treated with steroids) should raise concern for acute adrenal insufficiency.\n- When the diagnosis is suspected, treatment should begin immediately before confirmatory tests become available.\n- Initial treatment consists of volume resuscitation, laboratory studies, and administration of either 4 mg of dexamethasone or 100 mg of hydrocortisone.\n- Dexamethasone is preferred because it will not interfere with cosyntropin stimulation testing, which should be done the next morning to confirm the diagnosis.\n- Routine administration of “stress-dose steroids” for patients on long-term corticosteroids has recently come into question.\n- It is now recommended that patients on long-term steroids should not be given high-dose perioperative corticosteroids but continued on their regular maintenance dose, with consideration for additional steroids only if refractory hypotension suggests adrenal insufficiency.\n- While the cosyntropin stimulation test can detect acute adrenal insufficiency, its usefulness as a preoperative measure for assessing risk is lacking sufficient data (E).\n- Septic shock is possible, but the vignette provides insufficient data to point to this diagnosis (C, D).\n- Exploratory laparotomy (B) is not an appropriate option."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the use of beta-blockers in the perioperative period for patients undergoing noncardiac surgery?",
      "options": [
        "A. Starting a beta-blocker within 24 hours of surgery may increase the incidence of perioperative death.",
        "B. Beta-blockers should be stopped at least 1 week before surgery so as to reduce the risk of postoperative bradycardia and hypotension.",
        "C. In low-and intermediate-cardiac risk patients beta-blockers should be initiated 2 to 3 weeks before surgery.",
        "D. Beta-blockers should be avoided even in the high-cardiac risk group.",
        "E. Perioperative initiation of beta-blocker decreases the incidence of nonfatal stroke."
      ],
      "answer": "A",
      "explanation": "- The 2008 POISE trial found that patients who received metoprolol started the day of surgery had a lower incidence of myocardial infarction, cardiac revascularization, and clinically significant atrial fibrillation.\n- However, patients in the POISE study arm also had increased mortality, stroke, hypotension, and bradycardia (E).\n- The 2014 ACC/AHA guidelines for perioperative beta-blocker therapy can be summarized as:\n  - Beta-blockers should be continued if patients are on them chronically.\n  - Management of beta-blockers after surgery should be based on clinical judgment to avoid negative consequences such as hypotension or bradycardia (B).\n  - Beta-blockers should not be started the day of surgery (A).\n  - It is unclear what the risk of starting beta-blockers is in the 2 to 45 days before surgery (C).\n  - It should be considered in high-risk individuals (D)."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "Which of the following is true regarding venous thromboembolism (VTE) prophylaxis in surgical patients?",
      "options": [
        "A. Intermittent pneumatic compression (IPC) prevents DVT by increasing circulating tissue plasminogen activator (tPA).",
        "B. Thigh-high IPC is superior to knee-high IPC.",
        "C. IPC is equivalent to pharmacologic prophylaxis in the majority of patients.",
        "D. Unfractionated heparin is superior to lower-molecular-weight heparin (LMWH).",
        "E. LMWH is superior to IPC."
      ],
      "answer": "E",
      "explanation": "- VTE prophylaxis is divided into pharmacologic and mechanical methods.\n- Intermittent pneumatic compression (IPC) works by preventing venous stasis and affecting the intrinsic fibrinolytic system, primarily by decreasing plasminogen activator inhibitor-1 (PAI-1), a tPA inhibitor (A).\n- There is no evidence that one IPC device is superior to another (B).\n- IPC is equivalent to pharmacologic prophylaxis in certain low-risk patients, but combination therapy is superior to mechanical prophylaxis alone (C).\n- IPC can be considered as sole therapy in low-risk patients and those with contraindications to pharmacologic agents.\n- Unfractionated heparin (UFH) and low-molecular-weight heparin (LMWH) are the two most commonly used pharmacologic agents.\n- LMWH is generally regarded as more effective than UFH, especially in certain populations (e.g., trauma patients) (D).\n- LMWH is superior to IPC (E)."
    }
  ]
}
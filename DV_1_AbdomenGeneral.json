{
  "chapter_name": "Abdomen—General",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 74-year-old male presents to your clinic hoping to have his reducible umbilical hernia repaired secondary to increasing but intermittent pain and discomfort. Two days before his clinic visit, he had been discharged from the hospital for unstable angina for which he underwent balloon angioplasty with placement of a bare metal coronary artery stent (BMS). When should his surgery be scheduled?",
      "options": [
        "A. 2 weeks",
        "B. 1 month",
        "C. 2 months",
        "D. 6 months",
        "E. 1 year"
      ],
      "answer": "B",
      "explanation": "*   Good communication between the cardiologist and surgeon is essential before performing coronary interventions in a patient who requires surgery.\n*   Coronary revascularization before elective surgery is not recommended if the patient has asymptomatic coronary artery disease (CAD).\n*   In the setting of an acute coronary syndrome (acute myocardial infarction [MI], unstable angina), a percutaneous coronary intervention (PCI) is recommended before surgery.\n*   Options for PCI include balloon angioplasty alone or adding a bare metal stent (BMS) or a drug-eluting stent (DES).\n*   DES is the best long-term option but requires a longer delay to surgery.\n*   The decision depends on the urgency of the subsequent operation (urgent, time sensitive, or elective) and the feasibility of operating with antiplatelet agents.\n*   If the operation is urgent (within 2 weeks), PCI with balloon angioplasty may be best because the waiting period for surgery is 2 weeks (A).\n*   If the operation is time sensitive (2-6 weeks), a BMS is a better option as it's less likely to suddenly occlude compared to angioplasty alone.\n*   For a BMS, one should wait 1 month before performing surgery (C).\n*   This patient has a relatively symptomatic hernia, making the operation time sensitive.\n*   If a DES is placed, the recommendation is to wait 6 months before performing surgery (D, E)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is true regarding abdominal incisions and the prevention of incisional hernias?",
      "options": [
        "A. A 3:1 suture:wound length is the current recommended closure length.",
        "B. There is no difference in hernia occurrence between a running closure and an interrupted closure.",
        "C. A slowly absorbable monofilament suture is preferred in the closure of the fascia in a running fashion.",
        "D. Prophylactic use of mesh after open aortic aneurysm surgery is not efficacious.",
        "E. A 1-cm bite between each stitch is the recommended distance during abdominal closure."
      ],
      "answer": "C",
      "explanation": "*   The material and surgical technique for open abdomen closure are important determinants of incisional hernia risk.\n*   The European Hernia Society recommends small bite closure with at least a 4:1 suture:wound length (A).\n*   Running closure is superior to interrupted closure (B).\n*   Prophylactic mesh use after open aortic aneurysm surgery is efficacious due to high rates of incisional hernia (D).\n*   A randomized control trial comparing small (5-mm bites, 5 mm apart) to large (1-cm bites, 1 cm apart) bites found a statistically significant reduced hernia occurrence in the small bite group, which is now the recommended bite size and length (E).\n*   A slowly absorbable monofilament suture (polydioxanone suture [PDS]) is recommended for abdominal closure."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 55-year-old obese male presents to the hospital for his bariatric sleeve gastrectomy procedure. His comorbidities include diabetes and hypertension, and he states he was diagnosed with \"walking pneumonia” 2 weeks ago and placed on antibiotics, which he has finished. Which of the following would not be of benefit if the SCIP measures for preoperative and postoperative care are followed?",
      "options": [
        "A. Placing the patient on an insulin sliding scale in an effort to keep glucose levels between 80 to 120 mg/dL",
        "B. Clipping the patient's abdominal hair with an electric shaver before operating",
        "C. Administering anticoagulation on postoperative day 1",
        "D. Administering antibiotics within 1 hour of surgery",
        "E. Discontinuing antibiotics by postoperative day 1"
      ],
      "answer": "A",
      "explanation": "*   The Surgical Care Improvement Project (SCIP) is a national quality partnership aimed at improving surgical outcomes.\n*   Core measures include administering antibiotics within 1 hour of surgery (D) and discontinuing them within 24 hours (E).\n*   Other measures include Foley catheter removal by postoperative day 2 and hair removal by clipping on the day of surgery.\n*   Shaving hair increases infection risk (B).\n*   Beneficial measures include appropriate venous thromboembolism (VTE) prophylaxis within 24 hours after surgery and glucose control.\n*   While glucose control is important, the 2009 NICE-SUGAR trial showed that strict glucose control was associated with worse outcomes.\n*   It is now widely accepted that the glucose goal should be below 180 mg/dL (C), not 80-120 mg/dL."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 32-year-old female who is 24 weeks pregnant presents to the emergency department with an acute onset of abdominal pain, fever, and vomiting. She states the pain woke her up in the middle of the night with sudden onset of epigastric pain that is now diffuse. She has no vaginal bleeding and fetal monitoring demonstrates normal vitals for the fetus. Upon physical exam, the patient has diffuse tenderness with guarding throughout the abdomen, worse in the epigastric region. Pelvic examination is normal. She has a leukocytosis of 15,000 cells/L. Abdominal x-ray series shows some dilated bowel loops but no other findings. What is your next step in management of this patient?",
      "options": [
        "A. Abdominal ultrasound",
        "B. CT scan of the abdomen/pelvis with contrast",
        "C. Admit and observe with serial abdominal exams",
        "D. Exploratory laparotomy",
        "E. Diagnostic laparoscopy"
      ],
      "answer": "B",
      "explanation": "*   Fear of radiation exposure during pregnancy should not take precedence over quickly establishing a correct diagnosis and initiating treatment.\n*   The patient's symptoms (acute onset abdominal pain, fever, vomiting, diffuse tenderness with guarding, leukocytosis) are concerning for peritonitis, possibly due to a perforated viscus (e.g., peptic ulcer) or closed loop bowel obstruction.\n*   In this situation, a computed tomography (CT) scan of the abdomen is the best next step (A, C–E).\n*   As a general rule, the patient's care takes first priority over fetal care.\n*   Expeditious and accurate diagnosis should take precedence over the risk of ionizing radiation.\n*   The effects of radiation exposure on the fetus depend on gestational age and amount of radiation.\n*   High doses (>10 rads) early in pregnancy (first 4 weeks) can lead to fetal demise, but typical imaging doses are much lower (abdominal x-ray: 200 mrad; abdominal/pelvic CT: 3-4 rads).\n*   Between 8-15 weeks' gestation, high-dose radiation can cause intrauterine growth retardation and central nervous defects.\n*   Beyond 15 weeks (as in this case), there appear to be no deterministic effects on the fetus.\n*   Stochastic effects (e.g., increased cancer risk) are increased with exposure of 1 rad or more.\n*   The risk is about 1 cancer for every 500 exposures.\n*   If the pregnant patient progresses to peritonitis and bowel perforation, the risk of fetal demise is very high, higher than the risk from radiation exposure.\n*   MRI is a good imaging option in pregnancy but may be limited by availability in emergent settings.\n*   Ultrasound is useful, but more so for suspected biliary disease or appendicitis."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding omental torsion?",
      "options": [
        "A. Secondary torsion is more common than primary.",
        "B. Treatment is usually observation and pain control.",
        "C. If surgery is necessary, management consists of detorsion and omentopexy.",
        "D. The pain is usually in the left lower quadrant of the abdomen.",
        "E. It typically produces purulent-appearing peritoneal fluid."
      ],
      "answer": "A",
      "explanation": "*   Omental torsion readily mimics intra-abdominal perforation.\n*   Diagnosis is often made at surgery due to difficulty in preoperative diagnosis.\n*   Torsion describes twisting of the omentum around its vascular pedicle along the long axis.\n*   Primary torsion (no underlying pathology) is extremely rare.\n*   Secondary torsion is much more common, usually precipitated by a fixed point like a tumor, adhesion, hernia sac, or intra-abdominal inflammation.\n*   It is more common in adults (fourth or fifth decade) and obese children.\n*   Other predisposing factors include bifid omentum and a narrowed omental pedicle.\n*   Primary omental torsion tends to be localized to the right side, often confused with acute appendicitis, cholecystitis, and pelvic inflammatory disease (D).\n*   The omentum tends to migrate and envelop areas of inflammation, complicating diagnosis.\n*   Laparoscopy is ideal for diagnosis and excluding other etiologies.\n*   Treatment involves resecting the twisted omentum, which may be infarcted, and correcting any related condition (B, C).\n*   Purulent fluid suggests another diagnosis; omental torsion typically yields serosanguinous fluid (E)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "The intrinsic hemostatic characteristics of the omentum are due to its:",
      "options": [
        "A. Ability to recruit platelets",
        "B. Greater concentration of von Willebrand factor",
        "C. Greater concentration of tissue factor",
        "D. Ability to induce local vasoconstriction",
        "E. Ability to activate the intrinsic coagulation pathway"
      ],
      "answer": "C",
      "explanation": "*   Trauma surgeons use omental wrapping to control bleeding around the liver and spleen.\n*   A 1996 study showed that tissue factor concentration in the omentum is more than twice that found in muscle.\n*   This high tissue factor concentration facilitates the activation of the extrinsic pathway of coagulation in trauma, infection, or ischemia, leading to fibrin production and adherence of the omentum to these areas.\n*   Other choices (A, B, D, E) do not contribute to the omentum's intrinsic hemostatic capability."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "The most common organism isolated from the infected peritoneal fluid of a patient with a peritoneal dialysis catheter is:",
      "options": [
        "A. Beta-hemolytic streptococcus",
        "B. Enterococcus",
        "C. Escherichia coli",
        "D. Coagulase-negative staphylococcus",
        "E. Coagulase-positive staphylococcus"
      ],
      "answer": "D",
      "explanation": "*   Coagulase-negative staphylococci (Staphylococcus epidermidis) are the most common cause of peritoneal catheter-related infections (A–C).\n*   Staphylococcus aureus is coagulase positive (E) and catalase positive.\n*   Diagnosis is based on abdominal pain, cloudy peritoneal fluid, and an elevated peritoneal fluid white blood cell count (>100/mm³).\n*   Initial treatment is intraperitoneal antibiotics for 2 weeks, which are more effective than intravenous antibiotics.\n*   If infection persists based on clinical picture or persistent leukocytosis, the catheter needs removal, and a temporary hemodialysis catheter inserted.\n*   S. aureus and gram-negative organism infections are less likely to respond to antibiotic management alone."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "A 70-year-old woman presents with progressive abdominal pain and abdominal distention with nonshifting dullness. A CT scan demonstrates loculated collections of fluid and scalloping of the intra-abdominal organs. At surgery, several liters of yellowish gray mucoid material are present on the omentum and peritoneal surfaces. Which of the following is true about this condition?",
      "options": [
        "A. There is no role for surgical resection.",
        "B. It is unlikely to involve the appendix.",
        "C. This most likely represents a primary peritoneal malignancy.",
        "D. It is more common in males.",
        "E. Cytoreductive surgery is indicated."
      ],
      "answer": "E",
      "explanation": "*   Pseudomyxoma peritonei is a rare process where the peritoneum is covered with semisolid mucus and large loculated cystic masses.\n*   It is unclear if it represents a true malignant process (C).\n*   Classification includes disseminated peritoneal adenomucinosis (DPAM) and peritoneal mucinous carcinomatosis (PMCA).\n*   DPAM is histologically benign, often due to a ruptured appendix.\n*   PMCA typically originates from well-differentiated appendiceal or intestinal mucinous adenocarcinoma (B).\n*   Pseudomyxoma peritonei is most common in women aged 50-70 years (D).\n*   Often asymptomatic until late in its course; common symptoms include increased abdominal girth, distended abdomen with nonshifting dullness.\n*   Management is surgical, involving cytoreduction of primary and secondary implants, including peritonectomy and omentectomy (A).\n*   If the appendix is the clear origin, a right colectomy should be performed.\n*   If the ovary appears to be the origin, total abdominal hysterectomy with bilateral salpingo-oophorectomy is recommended.\n*   Recurrence rate is very high (76% in one series)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "The most common cause of a retroperitoneal abscess is:",
      "options": [
        "A. Diverticulitis",
        "B. Appendicitis",
        "C. Renal disease",
        "D. Tuberculosis of the spine",
        "E. Hematogenous spread from a remote location"
      ],
      "answer": "C",
      "explanation": "*   Primary retroperitoneal abscesses are secondary to hematogenous spread.\n*   Secondary retroperitoneal abscesses are related to infection in an adjacent organ.\n*   Renal infections account for nearly 50% of secondary retroperitoneal abscesses, making it the most common source.\n*   Hematogenous spread is not a significant contributing factor for secondary retroperitoneal abscesses (E).\n*   Other common causes include retrocecal appendicitis (B), perforated duodenal ulcers, pancreatitis, and diverticulitis (A).\n*   Pott's disease (disseminated tuberculosis) (D) can cause rare cases.\n*   Patients typically present with back, pelvic, flank, or thigh pain, fever, leukocytosis, and sometimes flank erythema.\n*   Kidney infections often involve gram-negative rods like Proteus and E. coli.\n*   Treatment includes broad-spectrum antibiotics, drainage, and identification of the source.\n*   CT-guided drainage is preferred for simple, unilocular abscesses; operative drainage may be needed for complex abscesses."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 50-year-old male with cirrhotic ascites secondary to hepatitis C presents with fever, elevated white blood cell count, and abdominal pain. He has a history of esophageal varices. He has been on the liver transplant list for 6 months. Paracentesis was performed and cultures were sent. A single organism grows from the culture. Which of the following is true regarding this condition?",
      "options": [
        "A. He is currently eligible for a liver transplant.",
        "B. Prophylactic use of fluoroquinolone can be used to prevent this condition.",
        "C. In adults, nephrotic syndrome is the most common risk factor.",
        "D. In children, E. coli is the most common isolate.",
        "E. He will likely need an exploratory laparotomy."
      ],
      "answer": "B",
      "explanation": "*   Spontaneous (primary) bacterial peritonitis (SBP) is bacterial infection of ascitic fluid without surgically treatable intra-abdominal infection.\n*   Patients often present with fever, diarrhea, abdominal pain, altered mental status, hypotension, hypothermia, and paralytic ileus, though 13% may be asymptomatic.\n*   Treatment is antibiotics alone.\n*   Prophylactic antibiotics (fluoroquinolones) are considered for high-risk patients with cirrhosis, ascites, and history of gastrointestinal bleeding (as in this case).\n*   Patients with cirrhosis and low ascitic fluid protein (<1.0 g/dL) or serum bilirubin >2.5 mg/dL should also receive prophylactic antibiotics.\n*   A key feature of primary peritonitis is a single organism isolate, usually not an anaerobe.\n*   Polymicrobial or anaerobic cultures suggest bowel perforation and secondary peritonitis (E).\n*   In adults, common pathogens in SBP are aerobic enteric flora E. coli and Klebsiella (C).\n*   In children with nephrogenic or hepatogenic ascites, group A Streptococcus, S. aureus, and Streptococcus pneumoniae are common isolates (D).\n*   Diagnosis is made by paracentesis showing >250 neutrophils/mm³ of ascitic fluid with correlating clinical presentation.\n*   Evaluation is needed before initiating antibiotics, as cultures can return falsely negative.\n*   Active infection is a contraindication for liver transplantation (A)."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which of the following is true regarding a rectus sheath hematoma?",
      "options": [
        "A. If located above the umbilicus, it is more likely to resemble an acute intra-abdominal process.",
        "B. If located below the umbilicus, it is more likely to cause severe bleeding.",
        "C. The majority are associated with a history of trauma.",
        "D. Operative drainage is the treatment of choice in most cases.",
        "E. Angiographic embolization is not useful."
      ],
      "answer": "B",
      "explanation": "*   Rectus sheath hematomas are clinically significant as they can mimic intra-abdominal inflammatory processes.\n*   Etiology is injury to an epigastric artery within the rectus sheath.\n*   Most cases lack a clear history of trauma (C) and occur spontaneously, especially in elderly patients on oral anticoagulants.\n*   Patients often describe sudden onset unilateral abdominal pain, sometimes preceded by a coughing fit.\n*   In series, women are more commonly affected.\n*   Below the arcuate line, there is no posterior aponeurotic covering to the rectus muscle, allowing hematomas to cross the midline, form larger hematomas, and cause bilateral lower quadrant pain resembling a perforated viscus.\n*   A palpable mass is often present on physical examination.\n*   The Fothergill sign (mass remains palpable with rectus muscle contraction) helps distinguish it from an intra-abdominal abscess.\n*   Diagnosis is best established with a CT scan showing fluid collection in the rectus muscle.\n*   Hematocrit should be closely monitored.\n*   Management is primarily nonoperative, involving resuscitation, monitoring of serial hemoglobin/hematocrit, and reversal of anticoagulation (D).\n*   Caution is advised with anticoagulation reversal; stable patients may benefit from continued anticoagulation (A).\n*   Angiographic embolization may be necessary in rare cases (E).\n*   Surgical management, rarely needed, involves ligation of the bleeding vessel and hematoma evacuation."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 35-year-old female presents with an enlarging mass in her right arm. After appropriate workup, she is diagnosed with a desmoid tumor. Which of the following is true about this condition?",
      "options": [
        "A. They have a high rate of metastasis without proper treatment.",
        "B. The chance of local recurrence is low after appropriate intervention.",
        "C. Oral contraceptive pills (OCP) have been shown to reduce their size and make them more resectable.",
        "D. Colonoscopy is indicated.",
        "E. These tumors arise from proliferative chondroblastic cells."
      ],
      "answer": "D",
      "explanation": "*   Desmoid tumors are unusual soft-tissue neoplasms arising from fascial or fibro-aponeurotic tissue.\n*   They are proliferations of benign-appearing fibroblastic cells with abundant collagen and few mitoses (E).\n*   Desmoid tumors do not metastasize (A) but are locally aggressive.\n*   They have a very high local recurrence rate, reaching almost 50% (B).\n*   They are associated with Gardner syndrome (intestinal polyposis, osteomas, fibromas, epidermal or sebaceous cysts) and familial adenomatous polyposis (FAP), hence colonoscopy is indicated soon after diagnosis.\n*   In sporadic cases, surgical trauma is an important cause.\n*   Desmoid tumors can develop within or adjacent to surgical scars.\n*   FAP patients have a 1000-fold increased risk of desmoid tumors.\n*   More common in women of childbearing age and may be linked to estrogen; OCPs have been associated with their occurrence (C).\n*   Patients are typically in their third or fourth decade, presenting with pain, a mass, or both.\n*   Classified as extra-abdominal (extremities, shoulder), abdominal wall, or intra-abdominal (mesenteric and pelvic).\n*   No typical radiographic findings; MRI can delineate muscle/soft-tissue infiltration and is required for larger tumors.\n*   Core needle biopsy often shows collagen with diffuse spindle cells and abundant fibrous stroma, suggesting low-grade fibrosarcoma, but cells lack mitotic activity.\n*   Open incisional biopsy is often necessary for lesions >3-4 cm.\n*   Wide local excision with negative margins is indicated for symptomatic desmoid tumors.\n*   Nonresectable or incidentally found, asymptomatic, intra-abdominal desmoid tumors should be treated with nonsteroidal anti-inflammatory agents (e.g., sulindac) and antiestrogens, which have objective response rates of 50%.\n*   Adjuvant therapy (radiation combined with surgery or radiation alone) has shown significant reductions in recurrence.\n*   Cytotoxic chemotherapy agents yield 20-40% positive response in inoperable desmoid tumors.\n*   Their aggressive nature and high recurrence rate make desmoid tumors the second most common cause of death in FAP patients, after colorectal carcinoma."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following is true regarding retroperitoneal fibrosis?",
      "options": [
        "A. The mainstay of treatment involves radiation therapy.",
        "B. It occurs more commonly in women.",
        "C. The erythrocyte sedimentation rate (ESR) is typically normal.",
        "D. Intravenous pyelography (IVP) is the diagnostic study of choice.",
        "E. Medial deviation of the ureters is characteristic."
      ],
      "answer": "E",
      "explanation": "*   Retroperitoneal fibrosis involves periaortic and retroperitoneal proliferation of fibrous tissue and chronic inflammation.\n*   This leads to ureteral obstruction, flank pain, and sometimes acute renal failure.\n*   The disorder is idiopathic (Ormond disease) in 70% of cases; the other 30% are secondary to inflammation, malignancy, or medication (e.g., methysergide).\n*   It occurs twice as often in men as women (B), with a mean age of 50-60 years.\n*   One theory suggests an autoimmune response, linked to HLA-DRB1*03, type I diabetes, myasthenia gravis, and systemic lupus erythematosus (SLE).\n*   No support for infectious etiology.\n*   The fibrotic process can encase ureters, inferior vena cava, aorta, mesenteric vessels, and/or sympathetic nerves.\n*   Physical exam may reveal hypertension and an abdominal/flank mass.\n*   Compression of pelvic veins can lead to lower extremity edema and pelvic congestion.\n*   Laboratory evaluation often shows elevated BUN and creatinine (azotemia in most patients).\n*   An elevated ESR is a common finding (C).\n*   Ultrasound is often the initial study for ureter involvement and hydronephrosis.\n*   IVP also shows hydronephrosis and extrinsic compression of ureters.\n*   Noncontrast CT scan is the most reliable diagnostic study, showing a homogenous fibrous plaque around the lower aorta and iliac arteries (D).\n*   Medial deviation of the ureters is characteristic for idiopathic retroperitoneal fibrosis but not pathognomonic.\n*   It tends to have a symmetric distribution; malignant tumors conversely tend to deviate ureters laterally.\n*   Malignant tumors can induce retroperitoneal fibrosis, so CT-guided needle biopsy is essential.\n*   Mainstay of treatment is corticosteroids; immunosuppressants are used for steroid-refractory cases (A)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Which of the following is true regarding retroperitoneal sarcomas?",
      "options": [
        "A. They are best managed by enucleation.",
        "B. Prognosis is best determined by histologic grade.",
        "C. Lymph node metastasis is common.",
        "D. Fibrosarcomas are the most common type.",
        "E. Radiation therapy is often curative for small sarcomas."
      ],
      "answer": "B",
      "explanation": "*   Most retroperitoneal tumors are malignant, comprising about half of all soft-tissue sarcomas.\n*   Common types include liposarcomas, malignant fibrous histiocytomas, and leiomyosarcomas (D).\n*   About 50% of patients experience local recurrence, and 20-30% develop distant metastases.\n*   Lymph node metastases are rare (C).\n*   Retroperitoneal sarcomas present as large masses, often without symptoms until mass effect causes compression or invasion.\n*   Symptoms may include GI hemorrhage, early satiety, nausea, vomiting, and lower extremity swelling.\n*   Retroperitoneal sarcomas have a worse prognosis than nonretroperitoneal sarcomas.\n*   Best long-term survival is achieved with en bloc, margin-negative resection.\n*   Tumor stage, high histologic grade, unresectability, and grossly positive resection margins are strongly associated with increased mortality.\n*   Tumor grade is the most significant predictor of outcome.\n*   Complete surgical resection is the most effective treatment for primary or recurrent retroperitoneal sarcomas (A, E).\n*   Surgical cure can be limited by anatomic constraints compromising margins.\n*   No difference in survival between those with grossly positive margins and inoperable tumors.\n*   External beam radiation therapy is limited for retroperitoneal malignancies due to low tolerance of surrounding structures.\n*   Postoperative and intraoperative radiation therapy can reduce local recurrence, but further studies are needed to confirm improved survival."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 75-year-old female with recently diagnosed atrial fibrillation, for which she was given an anticoagulant, presents with sudden onset abdominal pain. It is not related to oral intake. Surgical history is remarkable for a total hip arthroplasty 3 years ago. Her physical exam is significant for a tender, palpable abdominal wall mass above the umbilicus that persists during flexion of abdominal wall muscles. The mass is most likely related to which of the following?",
      "options": [
        "A. Thrombocytopenia",
        "B. Bleeding from the superior epigastric artery",
        "C. Occult trauma",
        "D. An intra-abdominal abscess",
        "E. Bleeding from the inferior epigastric artery"
      ],
      "answer": "B",
      "explanation": "*   In older patients on anticoagulants presenting with acute abdominal pain, an abdominal wall mass, and anemia, a rectus sheath hematoma should be suspected.\n*   The mass is palpable even during flexion of abdominal wall muscles (Fothergill sign), differentiating it from an intraperitoneal process (D).\n*   In a Mayo Clinic review of 126 patients, anticoagulation was associated with 70% of cases.\n*   Above the arcuate line, the etiology is often related to a lesion in the superior epigastric artery within the rectus sheath (E).\n*   Most cases have no clear history of trauma (C).\n*   Spontaneous occurrence is typical in elderly patients on oral anticoagulants.\n*   Most common treatment is rest, analgesics, and blood transfusions.\n*   Coagulopathies are generally corrected; however, continuing anticoagulation may be prudent in select patients (e.g., with a biomechanical valve or recent saddle embolus) (A).\n*   In extreme cases, angioembolization may be required."
    }
  ]
}
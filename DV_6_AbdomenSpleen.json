{
  "chapter_name": "Abdomen-Spleen",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 50-year-old male has an incidentally discovered 8-cm nonparasitic splenic cyst. Which of the following is true about this condition?",
      "options": [
        "A. Splenectomy should be performed.",
        "B. Most are symptomatic and present with left upper quadrant tenderness.",
        "C. It may secrete CA 19-9.",
        "D. The patient should undergo percutaneous aspiration.",
        "E. It is a common incidental finding."
      ],
      "answer": "C",
      "explanation": "* Nonparasitic splenic cysts are rare (E).\n* They are most commonly asymptomatic, but symptomatic patients often complain of left upper quadrant tenderness with referred pain to the left shoulder (B).\n* Previously, surgical removal was accepted for cysts >5 cm even if asymptomatic, but more recently, asymptomatic cysts can be safely observed regardless of size (A).\n* Percutaneous aspiration has high recurrence rates (D).\n* Patients should be managed with observation and serial ultrasound imaging to assess for interval growth.\n* Splenic cysts may secrete tumor markers such as CA 19-9, but they do not have malignant potential."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 7-year old-girl with hemolytic anemia that has failed conservative management is scheduled for an elective splenectomy. Which of the following is true regarding her condition?",
      "options": [
        "A. Preoperative right upper quadrant ultrasonography should be performed.",
        "B. An intraoperative search for accessory splenic tissue is not necessary.",
        "C. The most common intraoperative complication is injury to the pancreas.",
        "D. Open splenectomy should be performed.",
        "E. Surgery should be delayed until 10 years of age."
      ],
      "answer": "A",
      "explanation": "* In pediatric hemolytic anemia patients, preoperative right upper quadrant ultrasound should be performed to check for cholelithiasis due to susceptibility to pigment stones; if present, concomitant splenectomy and cholecystectomy should be considered.\n* Laparoscopic splenectomy has emerged as the gold standard for most children (D).\n* Intraoperatively, always search for an accessory spleen, particularly with a hematologic indication for splenectomy (B).\n* Surgery does not need to be delayed until 10 years of age (E); the minimum accepted age is 5 years, with reports as young as 2 years.\n* Although the pancreatic tail is at risk, the most common intraoperative complication is hemorrhage during hilar dissection (C)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 35-year-old alcoholic male with human immunodeficiency virus (HIV) undergoes a splenectomy after being involved in a motor vehicle crash. Which of the following is true?",
      "options": [
        "A. The primary risk of overwhelming postsplenectomy infection (OPSI) is within the first year after splenectomy.",
        "B. Suspected OPSI should initially be managed with a fluoroquinolone.",
        "C. The majority of OPSI cases are due to Haemophilus influenzae.",
        "D. Daily prophylactic antibiotic is recommended.",
        "E. Loss of immunoglobulin G (IgG) is what predisposes postsplenectomy patients to OPSI."
      ],
      "answer": "D",
      "explanation": "* OPSI is a significant concern (0.05% to 2% incidence) in asplenic patients.\n* It is due to loss of immunoglobulin M (IgM) (E).\n* Patients remain at increased risk for many years after splenectomy (A).\n* Management of suspected OPSI requires prompt identification and initiation of supportive care with a third-generation cephalosporin (B).\n* The majority of OPSI cases are due to *Streptococcus pneumoniae* (C), followed by *H. influenzae* type B, *Neisseria meningitides*, and group A streptococcus.\n* Daily prophylactic antibiotic use is indicated for children younger than 5 and immunocompromised patients, as they may not mount an appropriate response to pneumococcal vaccination.\n* Asplenic patients may also have mild thrombocytosis, leukocytosis, Howell-Jolly bodies in RBCs, and increased target cells."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following indications for splenectomy poses the highest risk of postsplenectomy sepsis?",
      "options": [
        "A. Trauma",
        "B. Idiopathic thrombocytopenic purpura (ITP)",
        "C. Hereditary spherocytosis (HS)",
        "D. Thalassemia major",
        "E. Hereditary elliptocytosis"
      ],
      "answer": "D",
      "explanation": "* All listed indications (A-C, E) can lead to postsplenectomy sepsis.\n* The incidence and mortality rates for postsplenectomy sepsis are highest for patients with underlying hematologic conditions, especially thalassemia major and sickle cell disease.\n* Children have a higher risk than adults (4.4% in children <16 vs. 0.9% in adults).\n* Severe infection after splenectomy for benign disease is uncommon, except in infants and children younger than 5 years.\n* Patients are also more susceptible to malaria."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "After splenectomy for trauma, the optimal timing for administration of the pneumococcal vaccine is on postoperative day:",
      "options": [
        "A. 1",
        "B. 4",
        "C. 7",
        "D. 10",
        "Ε. 14"
      ],
      "answer": "E",
      "explanation": "* For unanticipated splenectomy (e.g., trauma), immediate postoperative pneumococcal vaccine administration increases the likelihood of needing revaccination.\n* The optimal timing for vaccination is 14 days after surgery (A-D).\n* For planned splenectomy, vaccination less than 14 days before surgery also increases the likelihood of needing revaccination.\n* In trauma patients, some surgeons administer vaccines before discharge due to potential loss to follow-up.\n* Pneumococcal vaccine needs to be repeated every 5 to 7 years.\n* Timing for meningococcus and *H. influenzae* type B immunoprophylaxis is less clear; most recommend giving it concurrently with pneumococcal vaccine."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 32-year-old female with rheumatoid arthritis presents for evaluation of recurrent infections. Physical exam is significant for splenomegaly. Laboratory exam demonstrates marked neutropenia. Which of the following is true concerning this condition?",
      "options": [
        "A. Splenectomy is the initial treatment of choice.",
        "B. There is a tendency for upper extremity ulcers to form in this patient population.",
        "C. The neutrophil count does not improve with surgical intervention.",
        "D. Patients have antibodies against neutrophil nuclei.",
        "E. Corticosteroids are contraindicated."
      ],
      "answer": "D",
      "explanation": "* The triad of rheumatoid arthritis, splenomegaly, and neutropenia is called Felty syndrome, present in 3% of rheumatoid arthritis patients.\n* Pathophysiology involves immune complexes coating WBC surfaces, leading to sequestration and clearance in the spleen, and increased infection risk due to neutropenia.\n* Spleen size varies from nonpalpable to massively enlarged.\n* Initial treatment with corticosteroids typically improves neutrophil count, but effects are not always permanent (A, E).\n* Hematopoietic growth factors and methotrexate are also used.\n* There is a tendency for leg ulcers (B).\n* Other splenectomy indications include transfusion-dependent anemia and profound thrombocytopenia.\n* Splenectomy responses are excellent, with >80% showing durable WBC count increase.\n* Neutrophil count typically improves immediately, though relative number may remain subnormal (C); neutrophil function improves."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Ectopic or “wandering” spleen:",
      "options": [
        "A. Is the presence of an accessory spleen in an unusual location",
        "B. Is more common in males",
        "C. Requires no surgical management even when symptomatic",
        "D. May result in splenic torsion",
        "E. Is best diagnosed with mesenteric angiography"
      ],
      "answer": "D",
      "explanation": "* Wandering spleen is rare, referring to a spleen lacking normal peritoneal attachments, allowing free movement in the peritoneal cavity (A).\n* It is postulated to result from failure of dorsal mesogastrium fusion during embryonic development or an acquired defect in splenic attachment in multiparous women.\n* Most commonly diagnosed in children and women 20-40 years old (B).\n* Most patients are asymptomatic; symptomatic patients often present with recurrent abdominal pain, likely due to tension on the vascular pedicle or intermittent torsion.\n* Acute torsion can lead to severe abdominal pain.\n* Diagnosis is confirmed by abdominal CT scan (E).\n* If the spleen is not infarcted, treatment is splenopexy (C)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding hereditary spherocytosis (HS)?",
      "options": [
        "A. It is transmitted as an autosomal recessive trait.",
        "B. The spleen is typically smaller than normal.",
        "C. Spherocytosis on blood smear improves following splenectomy.",
        "D. It is associated with leg ulcers.",
        "E. A positive direct Coombs test result confirms the diagnosis."
      ],
      "answer": "D",
      "explanation": "* Hereditary spherocytosis (HS) is an RBC membrane disorder causing hemolytic anemia.\n* It is autosomal dominant and the most common hemolytic anemia requiring splenectomy (A).\n* It results from inherited dysfunction/deficiency in RBC membrane proteins, leading to membrane instability and lack of deformability.\n* The spleen sequesters and destroys these non-deformable RBCs.\n* Most patients are asymptomatic but may have mild jaundice and splenomegaly (B).\n* Laboratory features include mild/moderate anemia, low MCV, elevated MCHC, elevated RDW, elevated reticulocyte count, LDH, and unconjugated bilirubin.\n* Unlike autoimmune hemolytic anemia, the direct Coombs test is negative in HS (E).\n* RBCs in HS lyse at lower salt concentrations than normal.\n* Splenectomy is curative for HS and the sole therapy, but spherocytosis persists on blood smear (C).\n* Gallstones are common due to ongoing red cell lysis; prophylactic cholecystectomy is recommended if present, especially in children.\n* Leg ulceration is another feature and indication for early splenectomy; these ulcers heal after splenectomy.\n* The cause of ulceration is unclear but may be due to increased blood viscosity reducing oxygen levels in leg tissues, or hemolysis leading to nitric oxide resistance, endothelial dysfunction, and end-organ vasculopathy."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 12-year-old boy presents with ecchymosis and fever of 101.2°F. Laboratory exam is remarkable for platelet count of 30,000 cells/μL and hemoglobin of 8.2 mg/dL. Peripheral blood smear shows large and immature platelets. Review of systems is significant for an upper respiratory tract infection 3 weeks ago. His mother also notes that his urine has been pink. This is his second admission for this constellation of symptoms. Which of the following is true regarding this condition?",
      "options": [
        "A. If splenectomy is required, platelets should be given just before skin incision, given the low platelet count.",
        "B. In children, intravenous immunoglobulin is the initial approach to management.",
        "C. The spleen is typically palpable on abdominal examination.",
        "D. Children with platelet counts of 50,000 or fewer cells/µL should be hospitalized.",
        "E. In adults, this occurs more frequently in females."
      ],
      "answer": "E",
      "explanation": "* Idiopathic thrombocytopenic purpura (ITP) is an autoimmune disorder caused by antiplatelet IgG autoantibodies, leading to premature platelet removal and low platelet count.\n* In adults, ITP is 2-3 times more common in women; in children, it occurs with equal frequency in boys and girls.\n* Patients typically present with ecchymoses or petechiae; minor bleeding (gums, nose, menstruation, urine/stool) is also common.\n* Life-threatening bleeding as initial presentation is uncommon.\n* In children, presentation is often preceded by a viral illness.\n* The spleen is usually not enlarged (C).\n* Diagnosis is one of exclusion, based on history, physical exam, CBC, and peripheral smear (showing large, immature platelets) to exclude other causes of thrombocytopenia.\n* Bone marrow aspiration is not routine but appropriate for patients >60 or considering splenectomy; it shows normal or increased megakaryocytes.\n* Management depends on age, platelet count, and symptom severity.\n* In children, most mild cases are self-limited and don't need medical therapy (B).\n* Children with platelet counts >30,000 cells/µL should not be hospitalized or routinely treated if asymptomatic or with minor purpura (D).\n* In adults, that threshold is greater than 20,000 per µL.\n* First-line therapy is oral prednisone (1-1.5 mg/kg/day).\n* IV immunoglobulin is an effective therapy if corticosteroids are ineffective.\n* Splenectomy is indicated for medical therapy failure, prolonged steroid use with side effects, and most first relapses, particularly if there is preoperative bleeding.\n* Patients with low platelet counts (<10,000 cells/µL) should have platelets available for surgery but not preoperatively because they will be consumed.\n* Platelets should be given for those who continue to bleed after ligation of the splenic pedicle (A). The one exception is if there is preoperative bleeding; platelets can be given before or at the time of incision during splenectomy.\n* Urgent splenectomy plays a role in severe, life-threatening bleeding, in conjunction with medical therapy in both adults and children.\n* Splenectomy provides a permanent response in 75-85% of patients."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is the best indication for splenectomy?",
      "options": [
        "A. Sarcoidosis",
        "B. Gaucher disease",
        "C. Myelofibrosis",
        "D. Hairy cell leukemia with neutropenia",
        "E. Secondary hypersplenism in a cirrhotic patient"
      ],
      "answer": "D",
      "explanation": "* General indications for splenectomy include symptomatic splenomegaly, hypersplenism, hemolytic anemia, thrombocytopenia, or other cytopenia.\n* Splenectomy is not indicated for sarcoidosis, Gaucher disease, or myelofibrosis unless hypersplenism is present (A-C).\n* Splenectomy is not indicated for patients with portal hypertension (E).\n* Hairy cell leukemia, characterized by hairlike cytoplasmic projections in lymphocytes, is primarily treated with chemotherapy.\n* Splenectomy is useful in hairy cell leukemia for increasing cell counts, improving pain, and early satiety, though its role is decreasing with newer chemotherapeutic agents."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 30-year-old woman is found to have a signet ring calcification in the left upper quadrant on a plain abdominal radiograph. A computed tomography (CT) scan confirms a 2-cm splenic artery aneurysm just beyond the take-off of the celiac axis. The pancreas appears normal. Which of the following is true regarding this condition?",
      "options": [
        "A. It is an uncommon visceral artery aneurysm.",
        "B. In this patient, it is most likely a pseudoaneurysm.",
        "C. It is associated with a double-rupture phenomenon.",
        "D. The aneurysm typically arises in the proximal portion of the splenic artery.",
        "E. Most patients require intervention."
      ],
      "answer": "C",
      "explanation": "* Splenic artery aneurysms are the most common visceral artery aneurysms (A).\n* Women are four times more likely to be affected than men.\n* Aneurysms usually arise in the middle to distal splenic artery (D).\n* Rupture risk is very low, dependent on size and hormonal influences; mortality is 35-50% if rupture occurs.\n* Problematic in pregnancy due to high maternal and fetal mortality risk.\n* Most patients are asymptomatic, found incidentally (e.g., ringlike calcification on X-ray).\n* Treatment indications for true aneurysms include symptoms, pregnancy, and women of childbearing age planning pregnancy.\n* Pseudoaneurysms are usually associated with inflammatory processes (e.g., pancreatitis) and are inherently unstable, and as such should be treated. The patient has no pancreatitis evidence.\n* For asymptomatic patients, size >2 cm is an indication for surgery.\n* Most splenic artery aneurysms can be observed; however, because this woman is of childbearing age, treatment would be indicated (E).\n* The majority of splenic artery aneurysms are true aneurysms (B).\n* Splenic artery aneurysms are associated with a double-rupture phenomenon: initial herald bleed into lesser sac, then rupture into peritoneal cavity."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Two months after a splenectomy for ITP, the patient is noted to have petechiae and a decrease in platelet count. A peripheral blood smear is noteworthy for the absence of Howell-Jolly bodies. Which of the following is the best recommendation for a workup?",
      "options": [
        "A. CT scan of the abdomen",
        "B. Bone marrow biopsy",
        "C. No workup needed; administer steroids",
        "D. Radiolabeled RBC scan",
        "E. No workup needed; administer immunoglobulin"
      ],
      "answer": "D",
      "explanation": "* Recurrence of platelet count decrease after splenectomy for ITP suggests a missed accessory spleen.\n* Absence of Howell-Jolly bodies on peripheral blood smear also suggests an accessory spleen.\n* Workup should start with radionuclide imaging to detect an accessory spleen (C, E).\n* CT scan sensitivity for accessory spleen is 60% (A).\n* Bone marrow biopsy has no role (B).\n* If an accessory spleen is identified and the patient remains severely thrombocytopenic, surgical excision is warranted.\n* Rituximab may also be considered."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following is true regarding ITP?",
      "options": [
        "A. In adults, splenectomy should be performed once the diagnosis is established.",
        "B. A chronic form is more likely to develop in adults than in children.",
        "C. The diagnosis is effectively established by a peripheral blood smear.",
        "D. Immunoglobulin is ineffective in increasing the platelet count.",
        "E. In adults, splenectomy should be delayed until after the second relapse."
      ],
      "answer": "B",
      "explanation": "* Adults are more likely to develop a chronic, insidious form of ITP than children.\n* In adults, women are affected 2-3 times more often; in children, it's equally common in boys and girls.\n* Diagnosis of ITP is one of exclusion; peripheral blood smear shows low platelet count and large, immature platelets but does not establish the diagnosis (C).\n* Intravenous immunoglobulin therapy is effective in both children and adults for increasing platelet count (D).\n* In adults, splenectomy is indicated for medical therapy failure (steroids, immunoglobulin), prolonged steroid use (>3-6 months), and most first relapses (A, E)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Which of the following is true regarding thrombotic thrombocytopenic purpura (TTP)?",
      "options": [
        "A. It does not lead to hemolysis.",
        "B. It is associated with liver failure.",
        "C. Splenectomy is the first line of treatment in adults.",
        "D. The Coombs test result is positive.",
        "E. The most common cause of death is intracerebral hemorrhage."
      ],
      "answer": "E",
      "explanation": "* First-line treatment for TTP is plasma exchange with fresh-frozen plasma (C).\n* Splenectomy is not very effective and used as salvage therapy for refractory cases.\n* TTP features include thrombocytopenia, microangiopathic hemolytic anemia, and neurologic complications.\n* Pathophysiology involves abnormal platelet clumping (likely due to large von Willebrand factor multimers) causing thrombotic episodes in microvascular circulation.\n* Narrowed microvascular lumens lead to increased shear stress on RBCs, causing them to lyse (A).\n* Symptoms include petechiae, fever, neurologic symptoms (headaches, seizures, coma), and renal failure (B).\n* Peripheral blood smear shows schistocytes, nucleated RBCs, and basophilic stippling.\n* The most common cause of death is intracerebral hemorrhage.\n* TTP is distinguished from autoimmune hemolytic anemia by a negative Coombs test result (D)."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is least likely to be seen in a postsplenectomy patient?",
      "options": [
        "A. Erythrocytes containing iron deposits",
        "B. Irregularly shaped and fragmented RBCs",
        "C. Persistent monocytosis",
        "D. Acanthocytes",
        "E. Erythrocytes containing nuclear fragments"
      ],
      "answer": "B",
      "explanation": "* After splenectomy, target cells, Howell-Jolly bodies (erythrocytes containing nuclear fragments), Heinz bodies, Pappenheimer bodies (erythrocytes containing iron deposits), and spur cells (acanthocytes) are commonly seen (A, D-E).\n* These inclusions are normally pitted by the spleen.\n* Leukocytosis, persistent monocytosis, and increased platelet counts commonly occur (C).\n* WBC count primarily increases due to mature neutrophils, typically within 1 day post-splenectomy, and may remain elevated for months.\n* Asplenic patients have subnormal IgM levels.\n* The spleen is a major site for properdin and tuftsin production; splenectomy decreases serum levels of these opsonins.\n* Schistocytes (irregularly shaped and fragmented RBCs) are pathologic, indicating disseminated intravascular coagulation or traumatic hemolytic anemia (e.g., TTP), and are *not* typically seen in a postsplenectomy patient unless there is an underlying pathology."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "The most common source of splenic abscess is:",
      "options": [
        "A. Hematogenous spread",
        "B. Secondary infection of a hematoma",
        "C. Secondary infection of a cyst",
        "D. Local extension of colonic perforation",
        "E. Local extension of a pancreatic abscess"
      ],
      "answer": "A",
      "explanation": "* Splenic abscesses are uncommon.\n* Five mechanisms of formation: (1) hematogenous infection (70%), (2) contiguous infection, (3) hemoglobinopathy, (4) immunosuppression (including HIV and chemotherapy), and (5) trauma (B-E).\n* Common origins for hematogenous spread include infective endocarditis, typhoid fever, malaria, urinary tract infections, and osteomyelitis.\n* Presentation is often delayed, with clinical manifestations including fever, left upper quadrant pain, leukocytosis, and splenomegaly.\n* Diagnosis confirmed by ultrasonography or CT.\n* Treatment involves starting broad-spectrum antibiotics, adjusted based on culture results, for 14 days.\n* Unilocular abscesses can be managed with CT-guided aspiration; multilocular abscesses usually require splenectomy."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "After splenectomy for a myeloproliferative disorder, a 40-year-old woman presents with anorexia, abdominal pain, and a low-grade fever. Her white blood cell (WBC) count is 14,000 cells/µL and her platelet count is 500,000 cells/µL. A noncontrast CT scan reveals diffuse small bowel edema and mild ascites. The most likely diagnosis is:",
      "options": [
        "A. Overwhelming postsplenectomy infection (OPSI)",
        "B. Portal vein thrombosis",
        "C. Primary peritonitis",
        "D. Ischemic colitis",
        "E. Perforated duodenal ulcer"
      ],
      "answer": "B",
      "explanation": "* This patient likely has portal vein thrombosis (PVT).\n* PVT should be suspected in postsplenectomy patients with fever and abdominal pain.\n* Predisposition to PVT is due to hypercoagulability from postsplenectomy thrombocytosis combined with a myeloproliferative disorder.\n* PVT is uncommon (2-8% occurrence) but has greatest risk with splenomegaly and myeloproliferative disorder.\n* Postsplenectomy PVT typically presents with anorexia, abdominal pain, leukocytosis, and thrombocytosis.\n* High suspicion, early contrast-enhanced CT diagnosis, and immediate anticoagulation are crucial for successful treatment.\n* Splenectomy patients should receive deep venous thrombosis prophylaxis (pneumatic compression devices, subcutaneous/low-molecular-weight heparin).\n* OPSI (A) is an uncommon postsplenectomy complication, presenting with nonspecific flu-like symptoms rapidly progressing to fulminant sepsis.\n* Primary peritonitis (C) is often a monobacterial infection in cirrhotic patients with ascites.\n* Ischemic colitis (D) presents with left-sided abdominal pain and bloody diarrhea in elderly patients with low-flow states (severe dehydration, heart failure, shock, trauma).\n* Perforated duodenal ulcer (E) initially presents with epigastric pain, then diffuse tenderness, abdominal rigidity, and rebound tenderness."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is true regarding hairy cell leukemia?",
      "options": [
        "A. Leustatin (cladribine) is hepatotoxic and should be avoided in patients with underlying cirrhosis.",
        "B. Splenectomy is the first-line treatment.",
        "C. It is a clonal disorder of T-lymphocytes that involves blood and bone marrow.",
        "D. 5-Fluorouracil is frequently used.",
        "E. It is associated with increased risk of thyroid cancer."
      ],
      "answer": "E",
      "explanation": "* Hairy cell leukemia is a clonal disorder of B lymphocytes involving blood and bone marrow (C).\n* Most therapies start with Leustatin (cladribine), which is cardiotoxic and used cautiously in patients with coronary artery disease, but not shown to be hepatotoxic (A).\n* Nipent (pentostatin) is the next most common treatment.\n* If these are ineffective, interferon-alpha and rituximab are used.\n* Splenectomy is rarely used, only to control pain, early satiety, or if cell counts fail to increase (B).\n* 5-Fluorouracil is frequently used in colorectal cancer patients, not typically for hairy cell leukemia (D).\n* Patients with hairy cell leukemia have an increased risk of thyroid cancer, Hodgkin lymphoma, non-Hodgkin lymphoma, and a decreased risk of lung cancer."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "The most common cause of spontaneous splenic rupture worldwide is:",
      "options": [
        "A. Leukemia",
        "B. Malaria",
        "C. Hemophilia",
        "D. Hemolytic anemia",
        "E. Hodgkin lymphoma"
      ],
      "answer": "B",
      "explanation": "* Spontaneous splenic rupture is an uncommon, dramatic abdominal emergency that requires immediate diagnosis and treatment.\n* True spontaneous rupture (normal spleen) is rare; pathologic spontaneous rupture (diseased spleen) is more common.\n* Infectious diseases are cited in most cases of splenic rupture, while hematologic malignancies (A, E) are rare despite frequent splenic involvement.\n* Malaria is the number one cause worldwide; infectious mononucleosis is the number one cause in the US.\n* Malaria can cause changes in splenic structure leading to hematoma, rupture, hypersplenism, torsion, or cyst.\n* An abnormal immunologic response may result in massive splenic enlargement.\n* Spontaneous rupture is a life-threatening complication of *Plasmodium vivax* infection, but rarely *Plasmodium falciparum* malaria.\n* Other less frequent causes include hemolytic anemia, hemophilia, myelodysplastic disorders, lupus, dialysis, and multiple myeloma (C, D)."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "The most common indication for elective splenectomy is:",
      "options": [
        "A. Staging for Hodgkin lymphoma",
        "B. Hereditary spherocytosis",
        "C. Immune thrombocytopenic purpura",
        "D. Thrombotic thrombocytopenic purpura",
        "E. Autoimmune hemolytic anemia"
      ],
      "answer": "C",
      "explanation": "* The most common indication for splenectomy overall is trauma (iatrogenic or accidental).\n* Historically, staging for Hodgkin disease (A) was the most common elective indication.\n* Currently, immune thrombocytopenic purpura (ITP) is the most frequent indication for elective splenectomy.\n* This is followed by hereditary spherocytosis (HS), autoimmune hemolytic anemia, and thrombotic thrombocytopenic purpura (TTP) (B, D-E)."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "In comparing laparoscopic with open splenectomy for hematologic disorders, which of the following is true?",
      "options": [
        "A. Open splenectomy has better long-term results with respect to response rates.",
        "B. The length of hospital stay is the same.",
        "C. The operative mortality rate is lower with laparoscopic splenectomy.",
        "D. Laparoscopic splenectomy has emerged as the standard of care.",
        "E. Laparoscopic splenectomy is frequently associated with increased cost to the patient."
      ],
      "answer": "D",
      "explanation": "* Laparoscopic splenectomy typically results in longer operative times, shorter hospital stays, and lower morbidity rates (B, E).\n* It has similar blood loss and mortality rates compared to open splenectomy (A, C).\n* While operating room charges are higher for laparoscopic splenectomy, the total cost to the patient is often less due to shortened hospital stay (E).\n* Laparoscopic splenectomy has emerged as the standard of care for non-traumatic, elective splenectomy."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "The most common location for an accessory spleen is:",
      "options": [
        "A. Splenic hilum",
        "B. Gastrocolic ligament",
        "C. Greater omentum",
        "D. Splenorenal ligament",
        "E. Adjacent to the left testicle"
      ],
      "answer": "A",
      "explanation": "* More than 80% of accessory spleens are found in the splenic hilum and vascular pedicle.\n* Other locations, in descending order of frequency, include: gastrocolic ligament (B), tail of the pancreas, greater omentum (C), greater curvature of the stomach, splenocolic ligament, splenorenal ligament (D), small and large bowel mesenteries, left broad ligament of the uterus (women), and left spermatic cord (men) (E).\n* Accessory spleens have clinical implications; in one series, 18% were found during splenectomies for hematologic disorders.\n* Recurrence of ITP was often attributed to a missed accessory spleen, for which reoperation was curative."
    }
  ]
}
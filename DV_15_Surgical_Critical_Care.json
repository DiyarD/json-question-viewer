{
  "chapter_name": "Surgical Critical Care",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding medications commonly used for sedation in the intensive care unit?",
      "options": [
        "A. Propofol is associated with tachycardia.",
        "B. Midazolam can lead to propylene glycol toxicity when given as a continuous infusion.",
        "C. Dexmedetomidine has a similar method of action to clonidine.",
        "D. Lorazepam has active metabolites leading to a longer duration of action.",
        "E. Ketamine inhibits protective airway reflexes."
      ],
      "answer": "C",
      "explanation": "- Benzodiazepines (lorazepam and midazolam) are commonly used for long-term sedation in the ICU.\n- Midazolam has active metabolites that prolong its duration, especially with hepatic or renal failure.\n- Lorazepam has no active metabolites but slower mobilization from peripheral tissues.\n- Propylene glycol toxicity is associated with lorazepam (due to its diluent), not midazolam.\n- Propofol has significant cardiovascular effects, including hypotension and bradycardia.\n- Ketamine is a potent sedative that blocks glutamate NMDA receptors, creating a dissociative anesthetic effect where patients remain conscious without inhibition of respiratory drive or protective airway reflexes.\n- Dexmedetomidine and clonidine are both selective alpha-2 receptor antagonists, with dexmedetomidine having a much higher affinity.\n- Dexmedetomidine is a sedative with anxiolytic and analgesic properties without significant respiratory depression."
    },
    {
      "id": 2,
      "question_type": "clinical_scenario",
      "question": "A 70-year-old male with chronic obstructive pulmonary disease (COPD) presents to the emergency department (ED) after a stab wound to the left anterior thoracoabdominal region. His vitals are stable. The patient develops progressively worsening shortness of breath and noninvasive positive pressure ventilation (NPPV) with bilevel positive airway pressure (BiPAP) is started for a presumed COPD exacerbation. The patient's blood pressure then abruptly drops to 70/40 mm Hg. Which of the following statements is true?",
      "options": [
        "A. This complication could have been prevented with a higher expiratory pressure on BiPAP.",
        "B. The cardiopulmonary compromise is likely secondary to obstructive shock.",
        "C. Immediate endotracheal intubation is mandatory.",
        "D. BiPAP is contraindicated with COPD.",
        "E. A nasogastric tube should have been placed before initiation of BiPAP."
      ],
      "answer": "B",
      "explanation": "- Traumatic pneumothorax should be suspected in all patients with a penetrating thoracoabdominal injury.\n- The addition of NPPV increases intrathoracic pressure and can convert a pneumothorax into a tension pneumothorax.\n- Tension pneumothorax can subsequently decrease venous return and result in obstructive shock.\n- Endotracheal intubation also increases intrathoracic pressure and can result in shock.\n- In a stable patient without classic exam findings for pneumothorax, a chest x-ray can be performed, followed by insertion of a tube thoracostomy.\n- BiPAP allows for a lower amount of pressure support during the expiratory phase, which helps patients blow off carbon dioxide, making it useful for COPD patients.\n- NPPV is a useful adjunct for respiratory failure in select patients without contraindications and is recommended for first-line treatment of acute respiratory failure from COPD and congestive heart failure.\n- Contraindications to NPPV include: cardiac or respiratory arrest, inability to cooperate and protect the airway or clear secretions, severely impaired consciousness, nonrespiratory organ failure, facial trauma or deformity, high risk of aspiration, recent upper gastrointestinal (GI) anastomosis, anticipated prolonged duration of mechanical ventilation, bullous lung disease (risk of pneumothorax), or hypotension.\n- Placement of a nasogastric tube can potentially complicate NPPV by impairing its effective seal and increasing the risk of pressure ulcer formation; it has not been definitively shown to decrease aspiration risk."
    },
    {
      "id": 3,
      "question_type": "clinical_scenario",
      "question": "A 24-year-old obese male with a traumatic brain injury is 6 hours post procedure from a percutaneous dilatational tracheostomy tube placement. The nurse calls to state that the tracheostomy tube was accidentally dislodged. Which of the following is recommended?",
      "options": [
        "A. Immediately reinsert the tube",
        "B. Immediately reinsert the tube using ultrasound guidance",
        "C. Bag patient and urgently transport to the operating room for open reinsertion",
        "D. Perform bedside cricothyroidotomy",
        "E. Endotracheal intubation"
      ],
      "answer": "E",
      "explanation": "- Percutaneous tracheostomy placement is widely used in critically ill patients.\n- Early tracheostomy dislodgment is a rare but potentially fatal complication.\n- Before a mature tract develops, the tracheostomy can be inadvertently placed into subcutaneous tissue, leading to subcutaneous emphysema and oxygen desaturation.\n- While replacement by experienced hands is possible, immediate endotracheal intubation is the recommended management.\n- Ultrasonography or a tracheostomy obturator can facilitate easier placement, but placement into false tissue tracts is still possible."
    },
    {
      "id": 4,
      "question_type": "clinical_scenario",
      "question": "A 50-year-old female was admitted to the intensive care unit (ICU) 36 hours ago with worsening hypoxic respiratory failure secondary to pulmonary contusion following a motor vehicle collision. The most recent chest radiograph shows new bilateral pulmonary infiltrates. Current arterial blood gas shows a Pao2 of 70 mm Hg. Current ventilator settings include a Fio2 of 60% and a positive end-expiratory pressure (PEEP) of 8 cm H2O. She has no history of heart disease. Which of the following is true?",
      "options": [
        "A. An objective surrogate for pulmonary artery capillary wedge pressure (PAWP) must be obtained before making a diagnosis.",
        "B. Prone ventilation should be initiated and can potentially improve her survival.",
        "C. Inhaled nitric oxide will confer a mortality benefit.",
        "D. If initiated early, high-frequency oscillatory ventilation (HFOV) can potentially improve her survival.",
        "E. Neuromuscular blockade in this setting has been shown to increase ventilator days and hospital stay."
      ],
      "answer": "B",
      "explanation": "- Acute respiratory distress syndrome (ARDS) was redefined in 2012 by the Berlin Definition into a three-tiered grading system: mild (PaO2/FiO2 = 200–300), moderate (100–200), and severe (<100 mm Hg).\n- The purpose of the consensus was to correlate a new naming system with predicted mortality and remove outdated requirements, such as the inclusion of PAWP in the definition.\n- Clinical suspicion and a known inciting factor of ARDS in the last 7 days are sufficient for inclusion in the definition.\n- This patient falls into moderate ARDS (PaO2/FiO2 = 117).\n- A lung protective strategy of ventilation (<6 mL/kg of tidal volume and higher levels of PEEP) continues to be the mainstay of treatment.\n- Prone ventilation for more than 12 hours per day has shown a mortality benefit when instituted early in moderate to severe ARDS, but not in mild ARDS.\n- Inhaled nitric oxide will improve a patient's oxygenation but has no definitive mortality benefit; it may increase the risk of renal impairment.\n- HFOV showed a trend toward increased mortality with early initiation in a 2013 study.\n- Neuromuscular blockade (e.g., cisatracurium) may increase ventilator-free days and days outside of the ICU, and potentially provide a mortality benefit."
    },
    {
      "id": 5,
      "question_type": "clinical_scenario",
      "question": "A 52-year-old male is preadmitted for a coronary artery bypass graft for three-vessel disease. While attempting to obtain a pulmonary artery capillary wedge pressure with the balloon inflated, the patient begins to cough and has a small amount of hemoptysis. However, this resolves quickly, and the patient shows no other signs of distress. Which of the following is the next best step in management?",
      "options": [
        "A. Deflate the balloon, withdraw the catheter into the right ventricle and refloat into the pulmonary artery.",
        "B. Deflate the balloon and remove the pulmonary artery catheter entirely.",
        "C. Leave the balloon inflated and prepare the patient for a catheter-based angiography.",
        "D. Take immediately to the operating room for emergent thoracotomy.",
        "E. Hyperinflate the balloon and advance the catheter as much as possible."
      ],
      "answer": "C",
      "explanation": "- Pulmonary artery rupture is one of the most dreaded complications of pulmonary artery catheter placement.\n- Common etiologies include a balloon inflated too distal or too much force used to obtain a wedge pressure.\n- Rupture is often heralded by an initial small volume hemoptysis as the injury is initially contained within a pseudoaneurysm.\n- In suspected cases, the balloon should be left inflated, and the patient taken for catheter-based angiography.\n- Leaving the catheter in place allows for an immediate route of access for angiography and may stop further bleeding.\n- Overinflation of the balloon or repeated attempts at placement should be avoided.\n- Open repair in the operating room is technically possible but is a morbid and time-consuming procedure.\n- Embolization of the pseudoaneurysm before full rupture is the preferred treatment modality."
    },
    {
      "id": 6,
      "question_type": "clinical_scenario",
      "question": "A 68-year-old male has new onset of an irregular, narrow complex tachycardia with a ventricular rate of 125 beats per minute. A single dose of metoprolol is administered with minimal affect. The patient subsequently becomes diaphoretic and the blood pressure drops to 72/35 mm Hg. What is the next best step in management?",
      "options": [
        "A. Unsynchronized cardioversion",
        "B. Synchronized cardioversion",
        "C. Defibrillation",
        "D. Amiodarone push followed by a continuous drip",
        "E. Intravenous (IV) push of adenosine"
      ],
      "answer": "B",
      "explanation": "- The patient's new onset irregular, narrow complex tachycardia is likely atrial fibrillation with a rapid ventricular response.\n- While medical cardioversion is reasonable in a stable patient, conversion to unstable tachycardia requires immediate electronic synchronized cardioversion (as outlined in ACLS).\n- Synchronization refers to delivering a low energy shock at the peak of the QRS complex to avoid precipitating ventricular fibrillation.\n- Unsynchronized cardioversion (defibrillation) delivers a high-energy shock immediately and is reserved for pulseless ventricular tachycardia/fibrillation.\n- Amiodarone should be used with caution if a patient has paroxysmal atrial fibrillation or unknown chronicity, as it can chemically convert the patient to a sinus rhythm and embolize any clot that has formed.\n- Adenosine is typically reserved for monomorphic narrow complex tachycardia consistent with supraventricular tachycardia."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding septic shock?",
      "options": [
        "A. It is characterized by poor perfusion of end organs.",
        "B. Maintaining hemoglobin level greater than 10 g/dL is recommended.",
        "C. In early septic shock, whole body oxygen consumption is decreased.",
        "D. Positive fluid balance is associated with increased mortality.",
        "E. The liver can serve as a continued source of inflammatory products."
      ],
      "answer": "D",
      "explanation": "- Essential management of septic patients includes early recognition, broad-spectrum IV antibiotics, pressors (norepinephrine first, then vasopressin), and fluid resuscitation.\n- Sepsis is an inflammatory cascade triggered by injury or bacterial invasion.\n- Blood delivery and perfusion to end organs are not significantly impaired in septic shock; maintaining hemoglobin above a certain threshold provides little benefit.\n- Inflammatory mediators primarily impair mitochondrial oxidation, destroying the cell's ability to produce ATP (cytopathic hypoxemia).\n- Whole oxygen body consumption is actually increased in early septic shock as inflammatory mediators induce production of toxic oxygen free radicals (respiratory burst).\n- Systemic venodilation leaves the majority of intravascular volume dormant in the venous system, which is why fluid resuscitation is essential early.\n- A large positive fluid balance is associated with increased mortality.\n- Despite systemic vascular dilation, there is relative splanchnic vasoconstriction, leading to gut ischemia and mucosal injury, which allows for enteric pathogen translocation and additional inflammatory mediators (the \"motor\" of multiorgan failure)."
    },
    {
      "id": 8,
      "question_type": "clinical_scenario",
      "question": "A 27-year-old male (75 kg) with severe peritonitis due to perforated appendicitis develops hypotension requiring pressors following laparotomy. He has low systemic vascular resistance and high cardiac output. Over the past 12 hours his urine output dropped to less than 10 cc/hour despite receiving adequate IV fluids. His creatinine increased from a baseline of 0.9 mg/dL on admission to 2.2 mg/dL. He is not acidotic nor hyperkalemic and does not appear to be volume overloaded. Which of the following is true for this patient?",
      "options": [
        "A. Hemodialysis (HD) should be initiated.",
        "B. Increased level of interleukin-8 (IL-8) is associated with decreased dependence on renal replacement therapy (RRT).",
        "C. Early initiation of continuous renal replacement therapy (CRRT) will improve survival.",
        "D. CRRT will require vascular access that differs from that of HD.",
        "E. The timing of initiating CRRT does not change the length of hospital stay."
      ],
      "answer": "C",
      "explanation": "- Normal urine output is at least 0.5 to 1 cc/kg/hour.\n- In a septic patient, oliguria is a result of intrinsic renal dysfunction secondary to widespread inflammation, so a fluid bolus is unlikely to improve urine output.\n- RRT (HD or CRRT) is provided for acute kidney injury/failure, especially with acidosis, hyperkalemia, volume overload, and azotemia.\n- Both HD and CRRT are started using a nontunneled multilumen dialysis catheter.\n- HD allows rapid fluid and solute removal (4-5 hours), which can cause hypotension during dialysis.\n- CRRT works continuously with slower unloading of fluid and solutes, allowing for a larger overall amount of fluid removed.\n- CRRT is the primary modality for RRT in septic patients because HD is relatively contraindicated in hypotensive patients requiring pressors.\n- CRRT in ultrafiltration mode can lower plasma concentrations of inflammatory mediators, reducing the risk of multiorgan failure.\n- The ELAIN trial (2016) showed improved 90-day mortality (39% vs 54%) with early initiation of CRRT (within 8 hours of AKI onset).\n- Early CRRT also resulted in significantly shorter duration of renal replacement therapy and length of hospital stay (but not ICU stay).\n- An increased level of IL-8 is associated with an increased risk of RRT dependence after hospital discharge."
    },
    {
      "id": 9,
      "question_type": "clinical_scenario",
      "question": "A 21-year-old man who was the driver in a head-on collision has a pulse of 140 beats per minute, respiratory rate of 36 breaths per minute, and systolic blood pressure of 70 mm Hg. His trachea is deviated to the left, with palpable subcutaneous emphysema and absent breath sounds over the right hemithorax. The next best step in the management of this patient is:",
      "options": [
        "A. Resuscitative thoracotomy",
        "B. Ultrasonography or chest radiograph to confirm diagnosis",
        "C. Intubation and ventilation",
        "D. Tube thoracostomy",
        "E. Needle thoracostomy"
      ],
      "answer": "E",
      "explanation": "- As with all trauma patients, the primary survey begins with checking airway and breathing.\n- The patient is exhibiting signs of a tension pneumothorax: hypotension, tracheal deviation, and decreased breath sounds over the right hemithorax.\n- Tension pneumothorax is a clinical diagnosis and does not require radiographic confirmation before instituting therapy.\n- Treatment options include needle thoracostomy first, followed by chest tube insertion.\n- Intubation and application of positive pressure ventilation should not occur before decompressing a tension pneumothorax because this will worsen the tension physiology and further impede preload and cardiac output.\n- If the patient continues to decompensate after tube thoracostomy, intubation can be considered.\n- Resuscitative thoracotomy or tracheostomy is not indicated in this patient."
    },
    {
      "id": 10,
      "question_type": "numerical",
      "question": "A 68-year-old (70-kg) male nursing home resident is admitted for an altered mental status. His vital signs demonstrate orthostatic hypotension. Laboratory studies reveal a serum sodium level of 168 mEq/L, a serum potassium level of 4.0 mEq/L, a serum chloride level of 118 mEq/L, an HCO3 level of 28 mEq/L, a blood urea nitrogen (BUN) of 30 mg/dL, and a serum creatinine level of 1.6 mg/dL. His free water deficit is:",
      "options": [
        "A. 3 L and all of it should be replaced over the next 12 hours",
        "B. 4 L and all of it should be replaced over the next 24 hours",
        "C. 5 L and 2.5 L should be replaced over the next 24 hours",
        "D. 6 L and 3.0 L should be replaced over the next 24 hours",
        "E. 10 L and 5 L should be replaced over the next 24 hours"
      ],
      "answer": "E",
      "explanation": "- Free water deficit = (serum sodium – 140) / 140 × total body water.\n- Total body water is 50% of lean body mass in men and 40% in women.\n- The free water deficit calculates to be 10 L, half of which should be replaced over the next 24 hours.\n- The correction must be made slowly to avoid neurologic complications such as cerebral edema."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which of the following electrocardiographic changes is least likely to occur with hypokalemia?",
      "options": [
        "A. ST segment depression",
        "B. T-wave inversion",
        "C. Second- or third-degree atrioventricular block",
        "D. Premature ventricular complexes",
        "E. U waves"
      ],
      "answer": "C",
      "explanation": "- Electrocardiographic changes associated with hypokalemia include U waves, T-wave flattening, ST-segment changes, and arrhythmias.\n- Atrioventricular block is more common with hypercalcemia and hyperkalemia.\n- Hypokalemia is a common electrolyte abnormality in surgical patients, often due to inadequate supplementation with total parenteral nutrition and excessive IV fluids."
    },
    {
      "id": 12,
      "question_type": "clinical_scenario",
      "question": "A 42-year-old woman with metastatic breast cancer is lethargic and has mental status changes. Her serum calcium is 14.5 mg/dL, serum alkaline phosphatase is 2000 IU/L, BUN is 42 mg/dL, and serum creatinine is 1.1 mg/dL. Initial treatment of the hypercalcemia should be:",
      "options": [
        "A. Mithramycin",
        "B. Bisphosphonates",
        "C. Loop diuretics",
        "D. Thiazide diuretics",
        "E. Normal saline infusion"
      ],
      "answer": "E",
      "explanation": "- The initial treatment of hypercalcemia of malignancy should begin with inducing calciuresis.\n- This is accomplished by saline volume expansion.\n- Once volume has been expanded, the next step is to administer loop diuretics to induce further calciuresis.\n- Thiazide diuretics have the opposite effect (they increase calcium).\n- Mithramycin acts directly on bones, lowering calcium levels, but its effect takes more than 24 hours.\n- Bisphosphonate drugs are indicated in addition to IV hydration and loop diuretics in patients with cancer; these agents may take 48 to 72 hours for full therapeutic effect.\n- Calcitonin lowers serum calcium levels within hours by inhibiting bone resorption.\n- Corticosteroids are most useful in hypercalcemia related to sarcoidosis and multiple myeloma, but they take about 1 week to work."
    },
    {
      "id": 13,
      "question_type": "clinical_scenario",
      "question": "A 75-year-old man becomes hypotensive (systolic blood pressure of 70 mm Hg) after repair of an inguinal hernia. Urine output is low, and he is unresponsive to fluid administration. A pulmonary artery catheter is inserted. Cardiac output is 3 L/min; systemic vascular resistance (SVR) is 2140 dynes/sec × cm-5; Svo2 is 55%; pulmonary capillary wedge pressure (PCWP) is 24 mm Hg. Which of the following is most likely to elevate the systolic blood pressure?",
      "options": [
        "A. 500 mL of Ringer's lactate to improve preload",
        "B. Lasix (furosemide) 20 mg intravenously to improve urine output",
        "C. Nitroprusside at 0.5 µg/kg/L/min to decrease the SVR",
        "D. Dobutamine at 5 to 10 µg/min for inotropic support",
        "E. Neo-Synephrine (phenylephrine) at 1 µg/L per min to increase blood pressure"
      ],
      "answer": "D",
      "explanation": "- The patient is in cardiogenic shock, evidenced by low cardiac output, elevated SVR, and elevated PCWP.\n- He has already shown no persistent response to fluids, so an additional bolus is unlikely to be helpful.\n- Inotropic support, such as dobutamine, is indicated to improve cardiac contractility and cardiac output, while decreasing afterload.\n- Other alternative inotropes include epinephrine and phosphodiesterase inhibitors like milrinone.\n- Given the patient's elevated PCWP, further fluid resuscitation to increase preload is not necessary.\n- Lasix (furosemide) is not a good option because low urine output reflects poor forward flow, not volume overload.\n- Nitroprusside is a vasodilator that could potentially improve cardiac output, but blood pressure is unlikely to improve without inotropic agents.\n- Phenylephrine (Neo-Synephrine) is an alpha1-agonist that increases SVR (afterload) and can increase blood pressure, but the patient is already maximally vasoconstricted, making it a poor choice in cardiogenic shock."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Nosocomial pneumonia among intensive care unit patients:",
      "options": [
        "A. Has the same mortality rate as does community-acquired pneumonia (CAP)",
        "B. Is the most common nosocomial infection",
        "C. Can be avoided by early tracheostomy",
        "D. Is directly related to the duration of intubation",
        "E. Can be prevented by early institution of prophylactic IV antibiotics"
      ],
      "answer": "D",
      "explanation": "- Nosocomial pneumonia is the second most common nosocomial infection (after urinary tract infection) and the most common nosocomial infection among ventilated patients.\n- The risk of ventilator-associated pneumonia (VAP) increases 5% per day and can be as high as 70% at 30 days.\n- The 30-day mortality rate from nosocomial pneumonia can be as high as 40%, which is significantly higher than community-acquired pneumonia (CAP).\n- Nosocomial pneumonias are frequently polymicrobial, with gram-negative rods being the predominant organisms.\n- Prophylactic IV antibiotics have not been shown to reduce rates of nosocomial infection or improve survival.\n- Oral decontaminant regimens have shown some data to reduce VAP rates but are not yet standard of care.\n- Early tracheostomy can reduce the number of days on the ventilator but does not lead to reduced rates of pneumonia."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Blood samples for the determination of mixed venous oxygen saturation (Svo2) are ideally obtained from:",
      "options": [
        "A. Right atrium",
        "B. Pulmonary artery",
        "C. Pulmonary vein",
        "D. Two peripheral veins mixed together",
        "E. Central venous pressure line"
      ],
      "answer": "B",
      "explanation": "- Svo2 is an indirect measurement of oxygen delivery.\n- It is measured from a blood sample obtained from the pulmonary artery.\n- A true Svo2 includes blood from the vena cava and the coronary sinus.\n- Svo2 is a marker for adequacy of resuscitation and reversal of hypoxemia.\n- Mixed venous gas is most commonly sampled from the superior vena cava using a central venous catheter."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following variables has the least influence on oxygen delivery?",
      "options": [
        "A. Hemoglobin",
        "B. Cardiac contractility",
        "C. Heart rate",
        "D. Carbon monoxide concentration",
        "E. Partial pressure of dissolved oxygen in the blood"
      ],
      "answer": "E",
      "explanation": "- Oxygen delivery (DO2) is determined solely by cardiac output (CO) and the oxygen content of blood (CaO2).\n- Anything affecting CO (stroke volume, heart rate, cardiac contractility) or CaO2 will directly influence DO2.\n- CaO2 = (Hg × 1.34 × SaO2) + (Pao2 × 0.003).\n- Hemoglobin (Hg) and carbon monoxide (which decreases SaO2) significantly affect CaO2.\n- The partial pressure of oxygen dissolved in the blood (Pao2) contributes only 1% to 2% of the total oxygen content.\n- SaO2 is partly reliant on Pao2, as demonstrated by the oxyhemoglobin dissociation curve."
    },
    {
      "id": 17,
      "question_type": "clinical_scenario",
      "question": "A 25-year-old man with insulin-dependent diabetes mellitus is admitted to the intensive care unit with severe hyperglycemia. He has a 1-day history of nausea, vomiting, and diarrhea, and he withheld insulin because of poor oral intake. His blood pressure is 100/60 mm Hg, his heart rate is 104 beats per minute, his respiratory rate is 28 breaths per minute, and his temperature is 99°F. Physical examination reveals dry mucous membranes and mild diffuse abdominal tenderness. Laboratory testing reveals a serum sodium level of 135 mmol/L, a serum potassium level of 3.5 mmol/L, a serum chloride level of 110 mmol/L, a CO2 of 8 mmol/L, a BUN of 22 mg/dL, a serum creatinine level of 1.2 mg/dL, a serum albumin level of 4.1 g/dL, and a serum glucose level of 350 mg/dL. Arterial blood gas demonstrates pH of 7.25, Paco2 of 20 mm Hg, and Pao2 of 95 mm Hg on room air. Serum ketones are present at a 1:8 dilution. Which one of the following is the best explanation for the acid-base abnormality in this patient?",
      "options": [
        "A. Diabetic ketoacidosis",
        "B. Diabetic ketoacidosis with hyperventilation",
        "C. Diabetic ketoacidosis and diarrhea",
        "D. Diabetic ketoacidosis and nausea/vomiting",
        "E. Laboratory error"
      ],
      "answer": "C",
      "explanation": "- The first step in approaching an acid-base disorder is to identify the primary metabolic disorder. The low pH (7.25) and low CO2 (8 mmol/L) point toward a primary metabolic acidosis.\n- The next step is to determine the anion gap: Na - (Cl + HCO3) = 135 - (110 + 8) = 17. An anion gap of 17 clearly indicates an anion gap metabolic acidosis.\n- Combined with hyperglycemia (350 mg/dL) and serum ketones, diabetic ketoacidosis (DKA) is the clear primary disorder.\n- Next, calculate the bicarbonate gap (Change in anion gap - change in CO2). Using normal values of 12 for anion gap and 27 for CO2:\n    - Change in anion gap = 17 - 12 = 5.\n    - Change in CO2 = 27 - 8 = 19.\n    - Bicarbonate gap = 5 - 19 = -14 mmol/L.\n- A negative bicarbonate gap indicates that the CO2 has changed more than would be expected, suggesting an additional non-anion gap metabolic acidosis.\n- The only cause of this non-anion gap metabolic acidosis is diarrhea, which causes a metabolic acidosis due to gastrointestinal loss of bicarbonate.\n- Hyperventilation would cause respiratory alkalosis.\n- Nausea and vomiting would cause a metabolic alkalosis from loss of hydrogen chloride.\n- There is no reason to believe there was a laboratory error."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which one of the following findings is most likely to be present in a patient with severe magnesium deficiency?",
      "options": [
        "A. Respiratory depression",
        "B. Bradycardia",
        "C. Tetany",
        "D. Hypotension",
        "E. Loss of patellar reflex"
      ],
      "answer": "C",
      "explanation": "- Gastrointestinal and renal losses are the two major mechanisms of hypomagnesemia.\n- Other causes include starvation, malabsorption, inadequate IV fluids or total parenteral nutrition, and chronic alcohol use.\n- Neuromuscular and central nervous system hyperactivity is a primary manifestation of magnesium deficiency.\n- Symptoms are similar to those of calcium deficiency, including hyperactive reflexes, muscle tremors, and tetany with a positive Chvostek sign.\n- Severe deficiency can lead to delirium and seizures.\n- Respiratory arrest and cardiac arrest, with loss of tendon reflexes, are characteristic of hypermagnesemia.\n- Abnormalities in cardiovascular repolarization, calcium metabolism, and hypokalemia are also common in patients with hypomagnesemia."
    },
    {
      "id": 19,
      "question_type": "clinical_scenario",
      "question": "A 54-year-old man who weighs 100 lb comes to the ED after vomiting for 3 days and losing 10 lb. His serum electrolytes are as follows: sodium 136 mEq/L, potassium 3.1 mEq/L, chloride 88 mEq/L, and carbon dioxide 37 mEq/L. Which one of the following would be most helpful in determining the cause of his acid-base disorder?",
      "options": [
        "A. Urine sodium",
        "B. Urine creatinine",
        "C. Urine chloride",
        "D. Urine pH",
        "E. Urine potassium"
      ],
      "answer": "C",
      "explanation": "- With a bicarbonate level of 37 mEq/L, this patient has a metabolic alkalosis.\n- The cause of metabolic alkalosis can be determined by whether it is chloride responsive or resistant.\n- Chloride-responsive cases (urine chloride < 15 mEq/L) are common in surgical patients and result from vomiting (gastrointestinal loss of hydrogen ions), diuretics (genitourinary loss of chloride), and volume depletion (aldosterone-stimulated hydrogen ion loss in urine).\n- Chloride-resistant types (urine chloride > 25 mEq/L) result from mineralocorticoid excess or potassium depletion."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "In hemorrhagic shock, which of the following is the most accurate sign of adequate fluid resuscitation?",
      "options": [
        "A. An increase in blood pressure",
        "B. An increase in urine output",
        "C. An increase in arterial oxygenation",
        "D. A decrease in thirst",
        "E. A decrease in tachycardia"
      ],
      "answer": "B",
      "explanation": "- Hemorrhagic shock is a form of hypovolemic shock and the most common cause of shock in trauma patients.\n- In response to hypovolemia, the sympathetic and cardiovascular systems increase heart rate, myocardial contractility, and SVR to maintain blood pressure.\n- The cardiovascular system also redistributes blood flow to the brain, heart, and kidneys, shunting it away from the skin, muscle, and gastrointestinal tract.\n- The kidneys respond by increasing reabsorption of sodium and water, resulting in a small volume of concentrated urine.\n- When a patient is adequately resuscitated, the first sign is an improvement in urine output.\n- Hemorrhagic shock is classified into four classes based on blood volume loss, with varying hemodynamic changes."
    },
    {
      "id": 21,
      "question_type": "clinical_scenario",
      "question": "A 50-year-old woman who is septic from ascending cholangitis is transferred to the surgical ICU. She undergoes cholecystectomy and common bile duct exploration after a failed endoscopic sphincterotomy. Because of hypotension and marginal urine output, a Swan-Ganz catheter is placed. Which of the following readings is least consistent with the patient's clinical course?",
      "options": [
        "A. Central venous pressure 5 cm H2O",
        "B. SVR 300 dynes/sec × cm-5",
        "C. Cardiac index 2.0 L/min/cm²",
        "D. Pulmonary capillary wedge pressure 10 cm H2O",
        "E. Svo2 86%"
      ],
      "answer": "C",
      "explanation": "- Sepsis typically produces high-output cardiac failure with an elevated cardiac index.\n- If untreated, the cardiac index will eventually decrease.\n- SVR is decreased due to toxins that produce vasodilation, reflected in a low systemic blood pressure.\n- Central venous pressures are low due to intravascular volume loss from increased capillary permeability.\n- Wedge pressures are generally unaffected.\n- Svo2 will be high because the tissues are unable to extract oxygen from the blood for consumption."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "Prolonged QT intervals are seen in association with:",
      "options": [
        "A. Hypomagnesemia",
        "B. Hypercalcemia",
        "C. Hyperphosphatemia",
        "D. Hyperkalemia",
        "E. Hypokalemia"
      ],
      "answer": "A",
      "explanation": "- Magnesium depletion is a common problem in hospitalized patients, particularly in the intensive care unit.\n- The kidney is primarily responsible for magnesium homeostasis.\n- Hypomagnesemia results from neuromuscular and central nervous system hyperactivity.\n- Electrocardiographic changes associated with hypomagnesemia include prolonged QT and PR intervals, ST-segment depression, flattening or inversion of P waves, torsade de pointes, and arrhythmias.\n- When hypokalemia or hypocalcemia coexists with hypomagnesemia, magnesium should be aggressively replaced to assist in restoring potassium or calcium homeostasis."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "Acute symptoms of hypermagnesemia are treated by:",
      "options": [
        "A. Fluid hydration with normal saline",
        "B. IV insulin",
        "C. Calcium chloride",
        "D. Dextrose",
        "E. Dialysis"
      ],
      "answer": "C",
      "explanation": "- Treatment of hypermagnesemia includes withholding exogenous sources of magnesium, correcting volume deficits, and correcting acidosis if present.\n- To manage acute symptoms, calcium chloride should be administered to antagonize the cardiovascular effects.\n- If elevated levels or symptoms persist, dialysis is indicated.\n- Insulin, dextrose, and dialysis are typically used in the treatment of hyperkalemia."
    },
    {
      "id": 24,
      "question_type": "clinical_scenario",
      "question": "A morbidly obese 48-year-old male is admitted to the ICU following an open cholecystectomy via a midline incision. The patient's Pao2 is 50 mm Hg on a Fio2 of 60% and PEEP of 5 cm H2O. After increasing PEEP to 10 cm H2O, which of the following parameters is likely to increase?",
      "options": [
        "A. Arterial partial pressure of carbon dioxide (Paco2)",
        "B. Cardiac output",
        "C. Functional residual capacity (FRC)",
        "D. Left ventricular end-systolic volume",
        "E. Pulmonary edema"
      ],
      "answer": "C",
      "explanation": "- PEEP increases intrathoracic pressure, which may result in a decreased cardiac output via decreased preload, particularly in hypovolemic patients.\n- PEEP does not decrease lung water, reduce vascular permeability, or hasten the resolution of pulmonary edema.\n- PEEP may shift some edema fluid from the alveolar to the extra-alveolar interstitial space, but it does not reduce the overall degree of pulmonary edema.\n- PEEP is often an effective way of increasing arterial oxygen content by increasing FRC through the recruitment of collapsed or atelectatic alveoli in patients with decreased lung compliance, thereby improving SaO2.\n- PEEP does not affect Pco2 nor does it alter cardiac contractility.\n- PEEP can improve cardiac output by reducing left ventricular (LV) afterload and is a useful adjunct in patients with CHF exacerbations.\n- Changing PEEP will not have an immediate effect on oxygenation because it takes time to increase the FRC."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "Which of the following is most commonly associated with transfusion-transmitted bacterial infection?",
      "options": [
        "A. Staphylococcus aureus",
        "B. Staphylococcus epidermidis",
        "C. ẞ-Hemolytic streptococcus",
        "D. Bacillus fragilis",
        "E. Gram-negative organisms"
      ],
      "answer": "E",
      "explanation": "- Although rare, the incidence of bacterial contamination of infused blood is higher than that of viral infection transmission.\n- Contamination can be acquired from environmental sources (collection bags or contaminated water baths) or from the donor's skin, blood, or phlebotomist's skin.\n- Gram-negative organisms, especially Yersinia enterocolitica and Pseudomonas species (capable of growth at 4°C), are the most common cause.\n- Gram-positive organisms are more frequently encountered as platelet contaminants.\n- Clinical manifestations include fever, chills, abdominal cramps, vomiting, and diarrhea; hemorrhagic manifestations and increased bleeding may also occur.\n- If diagnosis is suspected, the transfusion should be discontinued and resuscitative efforts initiated.\n- Blood should be cultured, and a workup for a transfusion reaction should be performed.\n- Emergency treatment includes oxygen, adrenergic blocking agents, and administration of broad-spectrum antibiotics."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "Abdominal compartment syndrome (ACS) should be suspected when bladder pressures exceed:",
      "options": [
        "A. 10 cm H2O",
        "B. 20 cm H2O",
        "C. 35 cm H2O",
        "D. 40 cm H2O",
        "E. 45 cm H2O"
      ],
      "answer": "B",
      "explanation": "- Intra-abdominal hypertension (IAH) is defined as a sustained increase in intra-abdominal pressures greater than or equal to 12 mm Hg.\n- Abdominal compartment syndrome (ACS) is defined as sustained intra-abdominal pressures greater than 20 mm Hg associated with new organ dysfunction.\n- ACS occurs in patients with multiple traumas, severe burns, retroperitoneal injuries, massive intra-abdominal infection, or complicated/prolonged abdominal operations.\n- Massive IV fluid resuscitation with resultant third spacing of fluid and marked bowel wall edema places patients at high risk.\n- Symptoms and signs include progressive abdominal distention, increasing peak airway pressure, decreased cardiac output, and oliguria.\n- These complications result from abdominal pressure decreasing venous return from the inferior vena cava and renal veins, and from decreased pulmonary compliance.\n- Renal failure, severe pulmonary compromise, and intracranial hypertension can eventually develop.\n- Intra-abdominal pressures transduced from the bladder are readily measured by instilling 25 mL of saline into the aspiration port of a Foley catheter with the drainage tube clamped.\n- A pressure greater than 20 mm Hg with evidence of physiologic compromise (renal, respiratory, or neurologic) is considered diagnostic.\n- Treatment consists of opening the abdomen or paracentesis in select cases."
    },
    {
      "id": 27,
      "question_type": "clinical_scenario",
      "question": "After an elective low anterior resection for rectal cancer, palpitations develop in a 59-year-old man with a history of congestive heart failure and an ejection fraction of 20% in the ICU. On the electrocardiogram, he is noted to be in a ventricular tachycardia (VT) at a rate of 120 beats per minute. He is currently awake and conversing with the nurse. His blood pressure is 130/75 mm Hg. The best initial treatment of this arrhythmia would be:",
      "options": [
        "A. Epinephrine 1 mg IV push",
        "B. Amiodarone 150 mg IV over 10 minutes",
        "C. Immediate defibrillation with 360 J",
        "D. Synchronized cardioversion with 150 J",
        "E. Diltiazem 15 mg IV over 2 minutes"
      ],
      "answer": "B",
      "explanation": "- Patients with underlying cardiac disease are at increased risk of arrhythmias and are more sensitive to hypoxia, hypercarbia, and electrolyte abnormalities.\n- VT is a serious wide-complex tachycardia that warrants immediate treatment because it may progress to unstable ventricular rhythms.\n- Management of VT depends on the stability of the patient.\n- For stable patients (without hypotension, altered mental status, signs of shock, chest pain, or acute heart failure), pharmacologic treatment with antiarrhythmic infusions is indicated.\n- Amiodarone is the drug of choice, although procainamide and sotalol are also acceptable if the QT interval is not prolonged.\n- If the patient exhibits altered mental status and/or hypotension, immediate synchronized cardioversion is indicated with an initial recommended dose of 100 J.\n- Consideration should be given to sedation or analgesia before cardioversion, if possible.\n- Epinephrine is indicated in pulseless VT and is not first-line management in the stable patient.\n- Diltiazem is useful in atrial tachycardia but has no place in VT.\n- Most importantly, a search for and correction of any reversible causes should be undertaken."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "In patients with acute kidney injury, the most immediate threat to the patient is:",
      "options": [
        "A. Acidosis",
        "B. Hyperkalemia",
        "C. Platelet dysfunction",
        "D. Fluid overload",
        "E. Malnutrition"
      ],
      "answer": "B",
      "explanation": "- All listed are consequences of acute kidney injury.\n- Hyperkalemia is generally the most immediate life-threatening complication and can predispose the patient to ventricular tachycardia and fibrillation."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "Which of the following is true regarding hepatorenal syndrome?",
      "options": [
        "A. Type II is rapidly progressive with a poor prognosis.",
        "B. It is associated with intense renal vasodilation.",
        "C. It is associated with splanchnic vasoconstriction.",
        "D. The urine sodium is typically less than 10 mEq/L.",
        "E. Type I is relatively stable."
      ],
      "answer": "D",
      "explanation": "- Hepatorenal syndrome (HRS) is a functional renal problem that likely results from relative hypovolemia, splanchnic and peripheral arterial vasodilation, and intense vasoconstriction of the renal circulation.\n- It is probably the final consequence of extreme underfilling of the arterial circulation secondary to arterial vasodilation in the splanchnic vascular bed.\n- It is characterized by azotemia, oliguria, a very low urinary sodium (<10 mEq/day), and a high urine osmolarity.\n- Prognosis is poor.\n- Type 1 HRS is mainly associated with acute liver failure or alcoholic cirrhosis, and it is characterized by rapid deterioration of renal function.\n- Optimal treatment for HRS is liver transplantation.\n- Type 2 HRS is a more stable form, with moderate decrease in glomerular filtration rate and increase in creatinine.\n- A combination of midodrine, an alpha-agonist, and octreotide has been shown to improve 30-day survival in one study for Type 2 HRS."
    },
    {
      "id": 30,
      "question_type": "clinical_scenario",
      "question": "A 19-year-old man presents to the ED after a motor vehicle collision. The patient is alert and oriented but is unable to move his arms and legs. Results of a focused assessment with sonography for trauma (FAST) scan and chest and pelvic radiographs are all negative. On physical examination, the patient has a blood pressure of 80/60 mm Hg and a heart rate of 70 beats per minute. His feet are warm and pink, and he is noted to have priapism. Which of the following is the next best step in management?",
      "options": [
        "A. Phenylephrine",
        "B. Intravenous fluid administration",
        "C. Dobutamine",
        "D. Epinephrine",
        "E. Norepinephrine"
      ],
      "answer": "B",
      "explanation": "- The presentation is consistent with neurogenic shock.\n- Findings suggestive of neurogenic shock include hypotension with relative bradycardia, warm, well-perfused extremities (reflecting loss of sympathetic tone), evidence of a high spinal cord injury, and priapism (sustained erection due to unopposed parasympathetic stimulation).\n- In a patient with a high cervical spine injury and evidence of hypercarbic or ventilatory failure, the first step is to secure an airway (phrenic nerve supplied by C3 to C5 nerve roots).\n- After the airway is secured and ventilation is adequate, fluid resuscitation and restoration of intravascular volume will often improve perfusion in neurogenic shock.\n- Most patients with neurogenic shock will respond to restoration of intravascular volume alone.\n- It is always important to rule out hypovolemia due to hemorrhage in the trauma setting.\n- An abdominal and pelvic CT scan would be indicated to rule out visceral injury.\n- If the patient does not respond to fluids, administration of vasoconstrictors will improve peripheral vascular tone, decrease vascular capacitance, and increase venous return.\n- Vasoconstrictors should only be considered once hypovolemia is excluded as the cause of hypotension and the diagnosis of neurogenic shock is established.\n- Restoration of blood pressure and circulatory perfusion is important to improve perfusion to the spinal cord, prevent progressive spinal cord ischemia, and minimize secondary cord injury."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "Pulmonary artery occlusion pressure (PAOP) reflects which of the following physiologic variables?",
      "options": [
        "A. Cardiac output",
        "B. Pulmonary arterial pressure",
        "C. Left atrial pressure",
        "D. Pulmonary compliance",
        "E. Systemic vascular resistance (SVR)"
      ],
      "answer": "C",
      "explanation": "- PAOP (or pulmonary artery wedge pressure, PAWP) provides an indirect estimate of both left atrial and left ventricular diastolic pressure.\n- These pressures can be measured using a Swan-Ganz or pulmonary artery catheter, which is inserted into the pulmonary artery and inflated to occlude pulmonary artery pressures, thereby reflecting left heart pressures.\n- In diastole, there are no valves between the open mitral valve and closed pulmonic valves, creating an unobstructed pathway from the catheter tip in the pulmonary artery through the pulmonary capillary bed, pulmonary vein, left atrium, and left ventricle.\n- The measured pressure approximates the pressure in the LV during end-diastole and is used as a measure of LV preload.\n- With the balloon wedged and the ventricles in systole, PAWP measures pressures reflected by the LA (provided there are no significant mitral valve abnormalities).\n- Swan-Ganz catheters provide both direct and indirect measurements of cardiac performance, contingent on when during the cycle the measurements are taken and whether the catheter is wedged."
    },
    {
      "id": 32,
      "question_type": "mcq",
      "question": "Argatroban:",
      "options": [
        "A. Activates antithrombin",
        "B. Is cleared by the kidneys",
        "C. Is reversed with fresh-frozen plasma",
        "D. Can be monitored by the activated partial thromboplastin time",
        "E. Has a 3-hour half-life"
      ],
      "answer": "D",
      "explanation": "- Argatroban and lepirudin are both direct thrombin inhibitors used for heparin-induced thrombocytopenia (HIT) and thrombosis.\n- Both can be monitored by the activated partial thromboplastin time (aPTT).\n- Both have relatively short half-lives (lepirudin 60-90 minutes, argatroban 40-50 minutes).\n- Neither can be reversed with fresh-frozen plasma.\n- Neither requires the presence of antithrombin to be effective.\n- Argatroban is cleared by hepatic metabolism, whereas lepirudin is cleared by the kidneys.\n- Argatroban is approved for patients with or at risk of HIT who are undergoing percutaneous coronary intervention.\n- Argatroban has a short half-life (40–50 minutes) and reaches a steady state with IV infusion at 1 to 3 hours.\n- Argatroban is the drug of choice for patients with HIT and renal insufficiency."
    },
    {
      "id": 33,
      "question_type": "mcq",
      "question": "Lepirudin:",
      "options": [
        "A. Is a direct thrombin inhibitor",
        "B. Is cleared by the liver",
        "C. Is reversed with cryoprecipitate",
        "D. Is monitored by the international normalized ratio",
        "E. Binds to platelet factor 4"
      ],
      "answer": "A",
      "explanation": "- Lepirudin is a direct thrombin inhibitor, originally derived from leech (hirudin).\n- The loading dose is 0.4 mg/kg, followed by a continuous infusion of 0.15 mg/kg.\n- It is cleared by renal metabolism.\n- It is the drug of choice for patients with HIT and hepatic insufficiency.\n- It does not bind to platelet factor 4."
    }
  ]
}
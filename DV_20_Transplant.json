{
  "chapter_name": "Transplant",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is the best indication for pancreas transplantation in type 1 diabetes?",
      "options": [
        "A. 45-year-old male with stage 2 chronic kidney disease and recurrent episodes of marked hyperglycemia",
        "B. 66-year-old female with end-stage renal disease who underwent kidney transplantation 10 years ago",
        "C. 41-year-old male with severe emotional problems associated with insulin therapy, refractory gastroparesis, and recurrent episodes of marked hyperglycemia",
        "D. 38-year-old female that was recently hospitalized for metabolic complications associated with diabetes",
        "E. 51-year-old male with stage 3 chronic kidney disease and recurrent episodes of marked hyperglycemia"
      ],
      "answer": "C",
      "explanation": "- Pancreas transplantation has been shown to improve survival and quality of life in patients with type 1 diabetes, potentially halting or reversing disease progression (retinopathy, neuropathy, autonomic dysfunction). It does not reverse vascular disease.\n- The American Diabetes Association provides indications for pancreas transplantation: (1) diabetic patients with imminent or established end-stage renal disease who have had or plan to have a kidney transplant, or (2) patients meeting all three of the following criteria: frequent episodes of metabolic complications related to diabetes (hypoglycemia, ketoacidosis, hyperglycemia), severe emotional problems with insulin therapy that are incapacitating, and consistent failure of insulin-based management to prevent complications.\n- From the given choices, option C (41-year-old male with severe emotional problems associated with insulin therapy, refractory gastroparesis, and recurrent episodes of marked hyperglycemia) is the best indication.\n- Pancreas transplantation should be avoided in patients older than 45 to 65 due to poor graft and 5-year survival (option B is 66-year-old)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following poses the highest risk of death in a patient awaiting renal transplantation?",
      "options": [
        "A. Chronic obstructive pulmonary disease (COPD)",
        "B. Cerebrovascular accident",
        "C. Smoker",
        "D. Black race",
        "E. Congestive heart failure"
      ],
      "answer": "A",
      "explanation": "- While cardiac-related death is common in diabetic patients, a history of coronary artery disease (E) is not the highest risk factor for death while awaiting renal transplantation.\n- A large multivariable survival model analyzing over 160,000 patients demonstrated that COPD is the most significant factor independently associated with death among patients awaiting renal transplantation (adjusted hazard ratio 1.31).\n- This is followed by, in descending order, smoker status, nonambulatory status, coronary artery disease, peripheral vascular disease, congestive heart failure, cerebrovascular disease, and hypertension (B, C).\n- Black patients awaiting kidney transplantation survive longer than white patients, but this reverses when black patients receive kidney transplantation (D).\n- Additionally, COPD is the most significant risk factor associated with poor graft function and survival following kidney transplant."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding kidney transplant donation?",
      "options": [
        "A. The most common cause of death postoperatively for kidney donors is acute renal failure.",
        "B. The most common postoperative complication for kidney donors is acute tubular necrosis.",
        "C. Donors must prove to have a glomerular filtration rate (GFR) greater than 80 mL/min to be considered appropriate candidates.",
        "D. The serum creatinine will be persistently higher following kidney donation.",
        "E. The rate of live kidney donation has increased in the past 10 years."
      ],
      "answer": "C",
      "explanation": "- The rate of live kidney donation has dropped in the past 10 years, despite an increase in deceased donors (E).\n- One prevailing requirement for live kidney donors across all governing bodies is a GFR greater than 80 mL/min, confirmed with a nuclear test or 24-hour urine collection.\n- The most common cause of death postoperatively for kidney donors is pulmonary emboli (A).\n- The most common postoperative complication for kidney donors is wound infection (B).\n- Although serum creatinine may be higher in the immediate postoperative period, it will eventually return to or near baseline as the donor will continue to have one functioning kidney remaining (D)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A brain dead trauma victim is being considered for kidney donation. Which of the following donor conditions would be a contraindication to kidney donation?",
      "options": [
        "A. History of arm melanoma status post wide local resection 10 years ago",
        "B. History of low-grade glioblastoma multiforme diagnosed 4 months ago",
        "C. Current urinary tract infection",
        "D. Recent hospitalization for meningococcemia, now with negative blood cultures",
        "E. Open cholecystectomy 4 months ago"
      ],
      "answer": "A",
      "explanation": "- Absolute contraindications to organ donation include patients with HIV (unless the recipient also has HIV), hepatitis (unless the recipient also has the same hepatitis type), cirrhosis, and active systemic infection with positive blood cultures.\n- A previous hospitalization for systemic infection is not considered an absolute contraindication as long as the patient has proven to have negative blood cultures (D).\n- Urinary tract infection in and of itself will not preclude organ donation, but urosepsis would (C).\n- A history of cholecystectomy in a patient without significant liver disease does not preclude organ donation (E).\n- A history of cancer often precludes organ donation. Exceptions can be made for patients with a remote history of low-grade visceral malignancy (e.g., colorectal cancer) or less aggressive cancers (e.g., basal cell carcinoma).\n- Melanoma, in particular, poses a risk for transmission even with a remote history, thus preventing the patient from being an eligible donor (A).\n- Low-grade primary central nervous system (CNS) tumors have not been demonstrated to have a high risk for transmission, so these patients can be successful deceased organ donors (B)."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 45-year-old male arrives at clinic 1 year after liver transplantation. He would like to discuss his recent laboratory studies and the health of his liver. Which of the following is the best measure of the function of his liver?",
      "options": [
        "A. Aspartate aminotransferase (AST)",
        "B. Alanine transaminase (ALT)",
        "C. Total bilirubin",
        "D. Serum albumin",
        "E. International normalized ratio (INR)"
      ],
      "answer": "E",
      "explanation": "- Liver function tests (LFTs) such as AST and ALT measure enzyme levels but do not reflect the synthetic function of the liver (A, B).\n- The best test to determine the liver's synthetic function is the prothrombin time (PT) or INR.\n- Albumin and PTT are also helpful (D).\n- Total bilirubin is influenced by biliary tree obstruction, intrinsic hepatic disease, and hemolysis (C)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 42-year-old male with end-stage renal disease secondary to glomerulonephritis has been matched with a deceased donor kidney and arrives at the hospital for transplantation. Which of the following is a guiding principle in this surgery?",
      "options": [
        "A. The right peritoneum is the preferred initial implant site.",
        "B. The left retroperitoneum is the preferred initial implant site.",
        "C. Baseline biopsy of the donor kidney should be obtained at the conclusion of the case.",
        "D. The native kidney should not be removed.",
        "E. The renal artery should be anastomosed to the internal iliac artery."
      ],
      "answer": "D",
      "explanation": "- The peritoneum is a poor choice for implantation due to a high risk of graft contamination and infection. The retroperitoneum and pelvic fossa are the preferred sites (A).\n- Most surgeons prefer the right side because the iliac vessels are longer and more horizontal, allowing for an easier anastomosis (B). However, the left side can be chosen if there are previous dissections or operations involving mesh on the right side.\n- It is generally preferable to perform an end-to-side arterial anastomosis first, followed by venous anastomosis, and then ureteral reconstruction, to reduce vein clamping time, graft thrombosis risk, and cold ischemia time.\n- The external iliac vein and artery are the preferred targets for anastomosis (E). Dissection of the internal iliac vessels is technically challenging, increases operative time, and subjects the patient to additional risks like autonomic plexus injury.\n- The standard ureteral reconstruction is ureteroneocystostomy.\n- Obtaining a baseline biopsy of the donor kidney is controversial as it exposes the patient to biopsy-induced vascular thrombosis, which can compromise the graft (C).\n- The native kidney should remain in place because it can often continue to have a small role by secreting erythropoietin."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 28-year-old female with end-stage renal disease secondary to lupus nephritis undergoes a living-related donor kidney transplant and is making appropriate urine at the conclusion of the case. On postoperative day 2, the surgical intern finds that her urine output has dropped from 180 cc the previous hour to only 4 cc in the last hour. The indwelling Foley is flushing well. Which of the following is the most appropriate next step in management?",
      "options": [
        "A. Take patient to the operating room (OR)",
        "B. Ultrasound",
        "C. Magnetic resonance angiography (MRA)",
        "D. Computed topography (CT)",
        "E. Urinalysis"
      ],
      "answer": "B",
      "explanation": "- Adequate fluid resuscitation is essential post-kidney transplantation to prevent graft failure. Crystalloids are the volume replacement of choice, aiming for urine output greater than 100 cc per hour.\n- Acute tubular necrosis (ATN) is the most common cause of postoperative oliguria, typically presenting as a gradual decrease in urine output that responds to a fluid bolus; it can be initially worked up with a urinalysis (E).\n- A sudden drop in urine output or anuria is concerning for graft thrombosis, which can have catastrophic outcomes if not diagnosed early. It is the main cause of graft failure in the first year (majority occurring at 48 hours) and typically involves the renal vein, but can also affect the renal artery.\n- The first step for a sudden decrease in urine output is to flush the Foley to ensure no kinking.\n- The next step is to perform a bedside ultrasound to look for vascular thrombosis.\n- If vascular thrombosis is identified, the next step is surgical revascularization or intra-arterial thrombolytic therapy in the OR (A).\n- If ultrasound findings are equivocal, adjunct imaging such as MRA, CT, or renal scintigraphy should be performed (C, D)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "A 46-year-old male with end-stage renal disease secondary to diabetes arrives at clinic to discuss his placement in the kidney transplant list. His panel reactive antibody (PRA) score is 85%. He had a failed kidney transplant 5 years ago. Which of the following is true?",
      "options": [
        "A. He has a low risk of rejection.",
        "B. Given his high PRA, he will be given priority on the transplant list.",
        "C. He will lose points in the kidney allocation algorithm because he had a previous kidney transplant.",
        "D. He will experience a shorter wait time compared to a similar patient with a lower PRA.",
        "E. PRA is calculated using nationally pooled data."
      ],
      "answer": "B",
      "explanation": "- PRA (Panel Reactive Antibody) is performed for all patients listed for a kidney transplant, testing the patient's blood against a panel of donors in the same geographic area to assess the HLA makeup of potential organs available for donation (E).\n- Patients with a high PRA are considered \"highly sensitized\" and have a higher likelihood of rejection (A).\n- Patients with a PRA greater than 80% will need to wait much longer to match with a compatible donor, so they are given additional points on the kidney allocation algorithm, prioritizing them to the top of the list.\n- However, despite this prioritization, their wait times are often much longer than patients with lower PRAs due to frequent incompatibilities (D).\n- A previous kidney transplant likely contributed to his high PRA, but this in itself does not factor into the kidney allocation algorithm (C)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 41-year-old male with end-stage renal disease secondary to diabetes is undergoing routine renal ultrasound 1 month after kidney transplantation. He has a 4-cm fluid collection next to the donor kidney. He has no complaints and he is making adequate urine. Which of the following is the best next step?",
      "options": [
        "A. Observation",
        "B. Ultrasound-guided aspiration for culture and creatinine",
        "C. CT scan",
        "D. Internal drainage in the OR",
        "E. External pigtail catheter drainage"
      ],
      "answer": "A",
      "explanation": "- Fluid collections around the donor kidney are common post-transplantation, often asymptomatic and incidentally discovered during routine imaging in the first year.\n- Small fluid collections (<5 cm) are unlikely to cause symptoms, and the patient can initially be observed without additional studies (C).\n- Possible etiologies include lymphocele (most common, due to severed lymphatic vessels, often self-limited), seroma, urine leak, and hematoma.\n- Larger or symptomatic fluid collections (causing oliguria, graft failure, or infection) require treatment with image-guided or surgical drainage (E).\n- In recurrent cases, a peritoneal window for internal drainage can be performed (D).\n- Comparing fluid creatinine level to serum level helps determine if there is a urine leak (B), which might necessitate a renal stent, nephrostomy tube, or rarely, ureteral reconstruction.\n- Given the 4-cm size, no complaints, and adequate urine output, observation is the best next step."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true regarding posttransplant lymphoproliferative disorder (PTLD)?",
      "options": [
        "A. It is usually of monoclonal T-cell origin.",
        "B. It occurs more commonly in renal transplants compared to heart transplants.",
        "C. The risk of developing PTLD is lowest in the first year following transplant.",
        "D. Epstein-Barr virus (EBV)-negative patients are at a lower risk than EBV-positive patients.",
        "E. Cytomegalovirus (CMV)-negative patients are at higher risk once they seroconvert following transplant."
      ],
      "answer": "E",
      "explanation": "- PTLD is the second most common cancer affecting solid organ transplant patients, with the majority occurring in the first year (C). The most common cancer overall in this population is squamous cell carcinoma of the skin, typically occurring about 8 years post-transplant.\n- The most common type of PTLD is of monoclonal B-cell origin (A).\n- PTLD occurs more commonly in heart and lung transplants compared to liver and renal transplants (B).\n- Early diagnosis requires a high index of suspicion, as it can present with nonspecific symptoms like fevers (most common), lymphadenopathy, night sweats, weight loss, and declining graft function.\n- Diagnosis begins with checking serum EBV viral load. EBV-negative patients are at higher risk than EBV-positive patients for developing PTLD (D), although EBV-negative patients can still develop it.\n- CMV-negative patients are at increased risk of PTLD once they seroconvert following transplant."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 39-year-old female is undergoing kidney transplant. Shortly after performing the arterial anastomosis, the surgeon notes that the donor kidney appears soft, flabby, mottled, and edematous. The patient's heart rate is 136 beats per minute and blood pressure is 90/60 mm Hg. Which of the following is true?",
      "options": [
        "A. This is a T-cell mediated response.",
        "B. The patient should be started on pressors and the operation completed.",
        "C. The donor kidney should be immediately removed without further workup.",
        "D. Lymphokines are involved in this process.",
        "E. This complication occurs more commonly in liver transplants than with kidney transplants."
      ],
      "answer": "C",
      "explanation": "- The patient is experiencing hyperacute rejection, which presents with a soft, flabby, mottled, and edematous donor kidney, potentially progressing to widespread interstitial hemorrhage and necrosis.\n- This occurs minutes to hours after arterial anastomosis and is mediated by pre-formed recipient antibodies to donor HLA antigens (A). The antibodies bind the graft endothelium, leading to tissue necrosis.\n- This is an uncommon complication, but renal grafts are more commonly affected. Liver transplants are largely resistant to hyperacute rejection, possibly due to the liver's large size and ability to absorb circulating antibodies (E).\n- The only treatment for hyperacute rejection is immediate removal of the donor kidney, as leaving it untreated can result in hemodynamic instability, multiorgan failure, and death (B). This is particularly important in a hypotensive patient.\n- Acute rejection is a T-cell mediated response with activated monocytes secreting soluble mediators including lymphokines IL-1 and IL-2 (D). It typically occurs 1 to 2 months after transplant, should be confirmed with a renal biopsy, and is treated with high-dose steroids.\n- Chronic graft rejection is a poorly understood process that can occur years after a well-functioning donor graft, and immunosuppression is largely ineffective in these cases."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 50-year-old male trauma patient was recently pronounced brain dead. He is accompanied by various family members including his ex-wife and male life partner of the past 10 years. An organ procurement agency has been called and would like to discuss organ donation with the family. From whom should they get permission for organ donation?",
      "options": [
        "A. Father",
        "B. Mother",
        "C. Adult son from previous marriage",
        "D. Ex-wife",
        "E. Male life partner"
      ],
      "answer": "E",
      "explanation": "- Organ donation should always be discussed by a third party, such as an organ procurement agency, and never by the physician.\n- The hierarchy for permission from next of kin for organ donation is as follows: spouse, adult child, either parent, and adult sibling.\n- This hierarchy is determined based on who is best positioned to use the standard of substituted judgment, making decisions based on the patient's known wishes or preferences.\n- For this patient, his life partner of the past 10 years would be the most appropriate person to grant permission for organ donation (A-D)."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following patients with hepatocellular carcinoma is eligible for liver transplantation?",
      "options": [
        "A. Single 3-cm tumor in segment 2 with regional lymphadenopathy",
        "B. Single 6-cm tumor in segment 4 with no regional lymphadenopathy",
        "C. Single 2-cm tumor in segment 5 with vascular invasion",
        "D. 1-cm, 2-cm, and 2.5-cm tumors in segments 3 and 4 with no evidence of lymphadenopathy",
        "E. 1-cm and 3.5-cm tumors both in segment 4 with no lymphadenopathy or distant disease"
      ],
      "answer": "D",
      "explanation": "- Liver transplantation can be offered to patients with hepatocellular carcinoma, and outcomes can be favorable if appropriate candidates are selected.\n- The Milan criteria, used by UNOS to select appropriate candidates, are as follows:\n  - Single tumor 5 cm or smaller, OR\n  - Up to three tumors with none larger than 3 cm.\n  - No evidence of vascular invasion, regional lymphadenopathy, or distant disease (A-C, E).\n- Tumors limited to a particular liver segment do not factor into selection criteria.\n- Option D (1-cm, 2-cm, and 2.5-cm tumors in segments 3 and 4 with no evidence of lymphadenopathy) fits the Milan criteria (up to three tumors, none >3 cm, no lymphadenopathy)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "The most clinically important viral infection in transplant recipients is:",
      "options": [
        "A. Varicella zoster",
        "B. Cytomegalovirus (CMV)",
        "C. Epstein-Barr virus",
        "D. Hepatitis C virus",
        "E. Herpes simplex"
      ],
      "answer": "B",
      "explanation": "- Cytomegalovirus (CMV), a member of the herpesvirus family, is the most clinically significant viral infection in transplant recipients.\n- In healthy, nonimmunosuppressed individuals, CMV is clinically silent or mild.\n- In immunosuppressed transplant recipients, CMV is associated with increased mortality and graft loss.\n- Studies have shown CMV infection to be an independent risk factor for graft failure in liver transplant recipients and associated with impaired distal epicardial endothelial function and an increased incidence of cardiovascular-related events and death in cardiac transplant recipients."
    }
  ]
}
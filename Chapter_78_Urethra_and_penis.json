{
    "chapter_name": "78 Urethra and penis",
    "questions": [
        {
            "id": "1",
            "question_type": "msq",
            "question": "1. Which of the following statements are true?",
            "options": [
                "A The verumontanum is situated in the membranous urethra.",
                "B The membranous urethra is the primary location of continence.",
                "C The anterior urethra is composed of a bulbar and a penile part.",
                "D The posterior urethra comprises of preprostatic, prostatic and membranous segments.",
                "E The major portion of the female urethra is lined by stratified squamous epithelium."
            ],
            "answer": [
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "The membranous urethra, about 1.5 cm long, lies distal to the verumontanum and is the primary site of urinary continence. The urethral sphincter mechanism consists of the intrinsic striated and smooth muscle of the urethra and the pubourethralis component of the levator ani, which surrounds the membranous urethra in the male and the middle and lower thirds of the female urethra. In the female, it blends proximally with the smooth muscle of the bladder neck and distally with the lower urethra and vagina.\nThe anterior urethra is subdivided into a proximal bulbar part that is surrounded by the bulbospongiosus and situated within the perineum and a distal penile part, the tip of which is the navicular fossa. The posterior urethra is constituted by the preprostatic, prostatic and membranous segments. The female urethra, about 4 cm long, is lined proximally by transitional epithelium whereas the major portion is lined by stratified squamous epithelium distally. In pregnancy, the urethra is considerably elongated.\nThe verumontanum (colliculus seminalis) is an important endoscopic landmark situated in the prostatic urethra that is 3 to 4 cm long; this is much elongated in benign prostatic hypertrophy when there is a considerable intravesical projection of the prostate. The verumontanum is a midline-rounded eminence that marks the proximal extent of the external urethral sphincter and is a very important landmark for the urologist performing transurethral resection of the prostate; all resection must be proximal to this vital landmark."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "2. Which of the following statements is false?",
            "options": [
                "A Posterior urethral valves causing obstruction can be diagnosed antenatally.",
                "B The incidence of hypospadias is 1 in 200–300.",
                "C Hypospadias is the most common congenital urethral anomaly.",
                "D Glandular hypospadias should be surgically treated early in life.",
                "E Circumcision must be avoided in boys with hypospadias."
            ],
            "answer": "D",
            "explanation": "Glandular hypospadias does not need surgical treatment unless the meatus is stenosed, in which case a meatotomy is performed. Posterior urethral valves can be diagnosed at antenatal US when proximal urinary tract dilatation will be seen. Treatment is endoscopic valve destruction and treatment of any concomitant infection or renal impairment.\nThe incidence of hypospadias is 1 in 200–300 live male births and is the most common congenital abnormality of the urethra. Once diagnosed the baby must be referred to a paediatric urologist. According to the position of the meatus, the condition is classified in order of severity as glandular, coronal, penile and perineal. Surgery is undertaken before the age of 1 year. Circumcision should be avoided in these boys, as the prepuce would be invaluable in the repair of the deformity."
        },
        {
            "id": "3",
            "question_type": "msq",
            "question": "3. In bulbous urethral rupture, which of the following statements are true?",
            "options": [
                "A Urethral rupture is caused by direct blow to perineum.",
                "B Acute retention occurs.",
                "C There is perineal haematoma with blood at the urethral meatus.",
                "D In a full bladder, suprapubic catheterisation is carried out.",
                "E Urethral catheterisation might be attempted as an alternative."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "A fall astride a projecting object, such as might occur in scaffolders, gymnasium accidents caused by a fall across a beam, or cycling accidents, are the usual causes of direct blow to the perineum. Recently skateboarding injuries have become a recognised cause of rupture of the bulbar urethra. (Figure 78.2). The clinical triad is acute urinary retention, blood at the external meatus and perineal haematoma. In delayed cases, urinary extravasation occurs. The anatomical attachments of the Colles' fascia to the triangular ligament and Scarpa's fascia just below the inguinal ligament cause the extravasated urine to collect in the scrotum and penis and beneath the deep layer of the superficial fascia of the abdominal wall.\nDiagnosis is confirmed by retrograde cystourethrogram. A suprapubic cystostomy is carried out to divert the urine and allow the damaged urethra to heal. Significant urinary extravasation is drained. The patient is placed on an antibiotic and referred to the urologist for definitive treatment. This would be delayed urethroplasty in complete rupture. In partial rupture the patient will require treatment for a stricture, which would be internal visual urethrotomy or dilatation. Urethral catheterisation, rarely advocated, is best avoided for fear of converting a partial tear into a complete tear."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "4. In rupture of the membranous urethra, the following statements are true except:",
            "options": [
                "A It is almost always associated with a pelvic fracture.",
                "B In fractured pelvis 5% will have associated urethral injury.",
                "C It is usually a part of multiple trauma.",
                "D The prostate might be high-riding and out of reach on rectal examination.",
                "E A urethral catheter is inserted as a part of initial resuscitation."
            ],
            "answer": "E",
            "explanation": "In a fractured pelvis as seen on a plain x-ray, a urethral catheter should not be passed as more damage might be created by converting a partial rupture into a complete one; in the majority it is a complete rupture to start with. When a patient has not passed urine and there is blood at the meatus, ruptured urethra should be suspected unless otherwise proved. The diagnosis is confirmed by an ascending urethrogram. A suprapubic catheter is inserted.\nAs the membranous urethra passes through the bony pelvis, a fracture more often results in complete tear with an interposed haematoma. It is almost always a part of multiple trauma, the most common cause being a road-traffic accident.\nRectal examination will reveal a high-riding prostate, which would not be felt. Treatment is suprapubic cystostomy, the procedure being straightforward in a distended bladder; if a distended bladder cannot be felt, ultrasound guidance will be required. If there is coincidental extraperitoneal rupture of the bladder, emergency surgical repair is carried out along with suprapubic catheter drainage and drainage of the retropubic space. Delayed urethroplasty is carried out by the urologist 3 to 6 months later."
        },
        {
            "id": "5",
            "question_type": "msq",
            "question": "5. Which of the following statements are true?",
            "options": [
                "A Meatal ulcer occurs in middle-aged men from sexually-transmitted disease.",
                "B Gonorrhoeal urethritis might lead to urethral stricture.",
                "C The causative agent in nonspecific urethritis (NSU) is unknown in 50% of patients.",
                "D In Reiter's disease conjunctivitis is a feature in 50% of patients.",
                "E Bulbar periurethral abscess might cause urinary extravasation."
            ],
            "answer": [
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "Gonorrhoeal urethritis, a sexually-transmitted disease caused by Neisseria gonorrhoea, which is a Gram-negative diplococcus, infects the anterior urethra in men and the urethra and cervix in women. Men complain of urethral discomfort, urethral discharge and burning dysuria; it might be asymptomatic in women. Diagnosis is confirmed by identifying the organism in a urethral smear or better still in polymerase chain reaction (PCR)-based techniques. Besides urethritis it can cause prostatitis, epidydimo-orchitis and periurethral abscess. Ceftriaxone is the antibiotic of choice as there is increasing resistance to penicillin and ciprofloxacin. Strictures are treated with dilatation.\nIn NSU the causative organism is not identified in 50%; in 40% it is caused by Chlamydia and caused by sexual transmission. Dysuria and mucopurulent urethral discharge are the symptoms. Diagnosis is confirmed by PCR techniques on a urethral swab or urine sample. Oxytetracycline, doxycycline, or azithromycin are the antibiotics of choice.\nReiter's disease, also sexually transmitted, is an autoimmune condition that presents with urethritis or diarrhoea, conjunctivitis and polyarthritis. Conjunctivitis occurs in 50% of sufferers, the causative organisms being Chlamydia, gonococci, Salmonella, Shigella, or Campylobacter. Treatment is with the appropriate antibiotics and analgesia.\nPeriurethral abscesses can be penile or bulbar, the latter presents as spreading cellulitis as a result of infection form streptococci and anaerobic organisms. It might be associated with a stricture and urinary extravasation might occur. Under antibiotic cover pus is drained and the urethra bypassed by a suprapubic cystostomy.\nMeatal ulcer does not occur in middle-aged men, but is a complication of neonatal circumcision. This is the result of friction from clothing and ammoniacal dermatitis due to lack of protection of the glans because of the absent prepuce. Measures to soften the scab and alkalinise the urine cure the condition, although rarely meatotomy of an acquired pinhole meatus might be necessary."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "6. The following statements are true except:",
            "options": [
                "A Urinary flow trace will show a prolonged flow with a plateau-shaped curve.",
                "B In acute retention suprapubic catheterisation is required.",
                "C Causes are inflammatory, traumatic and iatrogenic.",
                "D Traumatic strictures are best treated by urethroplasty.",
                "E The ideal treatment in the majority is urethral dilatation."
            ],
            "answer": "E",
            "explanation": "In the majority the ideal treatment is not urethral dilatation, a mode of treatment reserved for the elderly man with a short stricture that needs infrequent dilatation. It is also used for a bladder neck stricture following radical prostatectomy.\nThe usual sufferer is a young man with features of BOO with prolonged micturition and post-micturition dribbling. Urinary flow rate shows a decrease in the maximum and average rate of <10 mL/second, with the trace showing a prolonged flow with a typical plateau-shaped curve. Rarely the patient might present with acute retention when attempts at urethral catheterisation will result in a false passage; hence suprapubic catheterisation should be done.\nCauses of urethral strictures are inflammatory, such as secondary to urethritis, traumatic as after external trauma as in fractured pelvis, or blunt perineal trauma and iatrogenic secondary to TURP or radical prostatectomy. When the cause is due to external trauma, urethroplasty should be the treatment of choice."
        },
        {
            "id": "7",
            "question_type": "msq",
            "question": "7. Which of the following statements are true?",
            "options": [
                "A The bladder neck is the most important entity for urinary continence.",
                "B Urethral prolapse occurs as a result of childbirth.",
                "C Fowler's syndrome is best treated by urethral dilatation.",
                "D Urethral caruncle is premalignant.",
                "E Urethral diverticulum is more common in women than men."
            ],
            "answer": [
                "B",
                "E"
            ],
            "explanation": "Urethral prolapse, also called urethrocele, often occurs with cystoceles. The condition occurs in later life and is partly due to trauma at childbirth. Weakening of the tissue that hold the urethra in place cause it to move, producing pressure on the vagina and resulting in prolapse of the anterior vaginal wall.\nUrethral diverticulum is much more common in women. It occurs due to rupture of a distended urethral gland or urethral injury during labour. It causes local pain and repeated cystitis. Diagnosis is by MRI or transvaginal US. Excision is the treatment that should be carried out with great caution, as it might damage the urethral sphincter.\nBladder neck has hardly any role in maintaining urinary continence, which is maintained by the external urethral sphincter, which consists of striated muscle that envelops the whole length of the female urethra. Fowler's syndrome causes urinary retention. It is caused by abnormal myotonic discharge in the striated urethral sphincter. Treatment is by intermittent self-catheterisation, as urethral dilatation is ineffective. Urethral caruncle is a pedunculated granuloma and is not premalignant."
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "8. The following statements are true except:",
            "options": [
                "A The most common indication for circumcision is cultural reasons.",
                "B In children circumcision is the treatment for non-retractile foreskin due to adhesions.",
                "C Circumcision is indicated in true phimosis with balanoposthitis.",
                "D Balanoposthitis is precancerous.",
                "E Monopolar diathermy should never be used during a circumcision."
            ],
            "answer": "B",
            "explanation": "Circumcision is not indicated in children with non-retractile foreskin due to preputial adhesions; no treatment is necessary. The most common indication for circumcision worldwide is for cultural reasons. Medical indications are true phimosis and balanoposthitis and infection of the prepuce and glans that results in phimosis. Balanoposthitis is a precancerous condition. When performing circumcision, monopolar diathermy should never be used for fear of causing burns."
        },
        {
            "id": "9",
            "question_type": "emq",
            "question": "Match the diagnoses with the scenarios that follow:",
            "options": {
                "items": [
                    "1 Balanitis xerotica obliterans (BXO)",
                    "2 Balanoposthitis",
                    "3 Carcinoma of penis",
                    "4 Chordee",
                    "5 Persistent priapism",
                    "6 Peyronie's disease",
                    "7 Rupture of bulbous urethra",
                    "8 Rupture of membranous urethra"
                ],
                "choices": [
                    "A A 35-year-old man complains of deformity of his penis during erection. He has increasing difficulty in sexual intercourse. In the past he had urethritis, which was treated successfully with antibiotics.",
                    "B A 68-year-old man complains of bloody, foul-smelling discharge from his penis. He has a hard ulcerated lesion under his prepuce (Figure 78.1). He also complains of lumps in his groin.",
                    "C A 45-year-old man complains of progressive deformity of his penis, which is very pronounced during erection; this has been going on for the past 2 years. On examination, indurated plaques can be palpated around the penile shaft. On questioning he has thickening of his palmar fascia on both hands.",
                    "D A 60-year-old man who is under treatment for leukaemia recently started developing penile erection without any reason. This is prolonged and painful and is now distressing him.",
                    "E A 22-year-old man complains of itching around his glans penis and prepuce. Recently, he has developed purulent discharge from the subpreputial area. His glans and foreskin look red and inflamed. He is a type I diabetic on insulin.",
                    "F A 32-year-old man was involved in a road-traffic accident in which he sustained polytrauma, chief among which was fracture of pelvis with fractured femoral shaft. After stabilisation according to the ATLS protocol, it became apparent that he has a distended bladder and unable to pass urine.",
                    "G A 24-year-old man while performing on a Pommel Horse in a gymnastics competition, slipped and fell astride on the Pommel Horse. He complains of severe perineal pain in the peno-scrotal junction where there is a haematoma. He has blood in his external urinary meatus.",
                    "H A 52-year-old man complains of thickening of his foreskin over a period of 2 years. During this period he has had difficulty in retracting his foreskin, as a result of which he has been having difficulty in maintaining good hygiene. He finds that his urinary stream tends to spray around."
                ]
            },
            "answer": {
                "1": "H",
                "2": "E",
                "3": "B",
                "4": "A",
                "5": "D",
                "6": "C",
                "7": "G",
                "8": "F"
            },
            "explanation": "1. H Balanitis xerotica obliterans (BXO)\nBXO is a chronic inflammatory condition of the foreskin of unknown aetiology in which the foreskin becomes thickened by fibrosis and sclerosis of subepithelial connective tissue. The glans is white and indurated. Fibrosis constricts the urethral meatus, causing phimosis and meatal stenosis. The foreskin forms a constricting band; recurrent balanitis causes problems in hygiene. The condition is precancerous.\nCircumcision is the treatment. When the glans is affected, topical steroid cream in the early stages helps. In late cases, meatotomy or meatoplasty might be necessary.\n\n2. E Balanoposthitis\nBalanitis is inflammation of the glans, whereas posthitis is inflammation of the prepuce. The two anatomical parts are almost always involved together, hence the term. The condition can be mild with itching with some discharge; in severe cases the glans and foreskin would look red and raw with purulent discharge. This young man has balanoposthitis and needs to be treated with the appropriate broad-spectrum antibiotics. One should make sure that his diabetes is under good control. He should be given advice with regard to local hygiene. Monilial infections are a common accompaniment. The condition is associated with penile cancer. In advanced cases circumcision should be considered, particularly if phimosis is present.\n\n3. B Carcinoma of penis\nThis patient has a carcinoma of the penis with probable secondaries in his inguinal lymph nodes. The following usual principles of cancer management should be followed: confirmation of diagnosis, staging of the disease and definitive treatment. In 50% of patients the inguinal lymph node enlargement is from sepsis. He needs confirmation by a biopsy of the lesion, staging by fine-needle aspiration of his groin nodes, CT of pelvis and groin, liver ultrasound and chest X-ray. Thereafter, discussion in a multidisciplinary meeting is followed by the appropriate definitive treatment.\nIt is a squamous cell carcinoma. For the original tumour, treatment will be partial or total amputation of the penis, in the latter situation with a perineal urethrostomy. Involved groin nodes are subjected to bilateral groin dissection, carried out at a second stage. Uninvolved nodes might be treated by prophylactic block dissection for T2 and poorly differentiated tumours. When the growth is confined to the penis the 5-year survival rate is 80%, but it drops to 40% with nodal involvement.\nWhen the condition occurs as a red cutaneous patch on the glans, it is regarded as a carcinoma in situ, also called Bowen's disease or erythroplasia of Queryat. After confirmation by biopsy it is treated by topical 5-FU cream, CO2 laser ablation, or excision.\n\n4. A Chordee\nThis patient suffers from chordee, which is a fixed bowing of his penis resulting in deformed erection. This can be the result of hypospadias. In this patient it is the aftermath of chronic urethritis. Treatment would be to treat the cause and hence surgical.\n\n5. D Persistent priapism\nThis patient, who suffers from leukaemia, has persistent priapism. It can also occur due to sickle cell disease or any hypercoagulable blood disorder. He can be treated by aspiration of the sludged blood in the corpora cavernosa or injection of phenylephrine solution (α-adrenoreceptor agonist). Failure of such treatment might require decompression of the penis by creating a shunt between the corpus cavernosum and the corpus spongiosum.\n\n6. C Peyronie's disease\nThis patient has Peyronie's disease, which is often accompanied by Dupuytren's contracture, as in this case. A plain X-ray of the penis might show up calcification of plaques that might be palpable. The aetiology is unknown, the condition being characterised by focal asymmetric fibrosis of the penile shaft. The condition is self-limiting but surgery might be indicated when the condition interferes with sexual function, some 25% opting for surgical treatment, which is the domain of the specialist.\n\n7. G Rupture of bulbous urethra\nBlunt perineal trauma is the cause of rupture of the bulbar urethra. This might happen for various reasons such as assault from a kick in the perineum, gymnasium injury, contact-sport injuries (football, rugby) and fall astride firm or hard objects. The diagnostic triad consists of blood at the external urethral meatus, perineal bruising and inability to pass urine. Undiagnosed late cases present with urinary extravasation. Confirmation is by ascending urethrogram. The emergency treatment is suprapubic cystostomy. The patient is then referred to an urologist for urethroplasty at a later date.\nFor details please see multiple choice question answer 3 previously.\n\n8. F Rupture of membranous urethra\nMembranous urethral rupture is almost always associated with a fractured pelvis, except when it simulates an extra-peritoneal rupture of the bladder (Figure 76.1 in Chapter 76). The diagnosis is suspected by the history and confirmed by an ascending urethrogram. The immediate treatment is a suprapubic cystostomy. At times a retropubic haematoma and extravasation might need to be drained. Definitive treatment must always be by the urologist who will do a delayed repair and urethroplasty.\nFor details please see multiple choice question answer 4 previously."
        }
    ]
}
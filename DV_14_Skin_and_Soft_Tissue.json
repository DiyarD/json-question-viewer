{
  "chapter_name": "Skin and Soft Tissue",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 29-year-old male presents with left wrist pain. He has a mass at the volar wrist that has been growing in size for the past 4 months and recently started causing him pain. The mass is compressible, freely moving but tethered in place, and transilluminates. Which of the following is true regarding this condition?",
      "options": [
        "A. It affects the volar wrist more commonly than it does the dorsal wrist.",
        "B. It is unlikely to resolve without intervention.",
        "C. Ligation of the tethering pedicle is required to achieve the lowest recurrence rate.",
        "D. Simple aspiration is the preferred treatment option.",
        "E. The pain is likely secondary to compression of the terminal branches of the posterior interosseous nerve."
      ],
      "answer": "C",
      "explanation": "*   This patient has a ganglion cyst, also known as a \"Bible cyst.\"\n*   The etiology is likely multifactorial, with the leading theory being a simple herniation of the joint capsule.\n*   It most commonly affects the dorsal wrist, not the volar wrist (A is false).\n*   About 50% of cases resolve spontaneously within several months to 2 years (B is false).\n*   Intervention is indicated for pain or cosmetic concerns.\n*   Simple aspiration or surgical excision alone has a high recurrence rate (up to 50%).\n*   To achieve a recurrence rate less than 10%, surgical excision with ligation of the pedicle is required, making it the gold standard (C is true, D is false).\n*   Pain in dorsal ganglion cysts may be due to compression of the posterior interosseous nerve's terminal branches, while volar cysts involve median or ulnar nerve branches (E is false for volar wrist)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 45-year-old male presents with a rapidly growing painless mass in the right upper leg. It measures 4 cm in diameter. He is otherwise healthy. The initial step in workup is:",
      "options": [
        "A. Magnetic resonance imaging (MRI)",
        "B. High resolution computed tomography (CT)",
        "C. Incisional biopsy",
        "D. Excisional biopsy",
        "E. Core needle biopsy (CNB)"
      ],
      "answer": "A",
      "explanation": "*   Soft-tissue sarcoma (STS) is a malignant tumor derived from mesodermal tissue, most commonly affecting the extremities.\n*   For tumors larger than 3 cm, MRI should first be performed to identify the anatomic relation to adjacent structures and to plan for surgical removal (A is true).\n*   CT is used in the workup of retroperitoneal sarcoma (B is false).\n*   Excisional biopsy is appropriate for tumors smaller than 3 cm (D is false).\n*   The next step after imaging is a Core Needle Biopsy (CNB), followed by en bloc resection (E is not the initial step).\n*   Incisional biopsy was once the gold standard but has been replaced by CNB due to its low complication rate and high diagnostic accuracy (C is false)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 76-year-old female with a history of chronic lymphocytic leukemia (CLL) presents with a painless blue, firm nodule on the right shoulder. It first appeared several weeks prior and was pink in color. It now has overlying ulceration and measures 2 cm in diameter. Immunohistochemistry analysis of a skin sample demonstrates polyomavirus genome. Which of the following is the best next step in management?",
      "options": [
        "A. Expectant management",
        "B. Wide local excision with 1-cm margin and adjuvant radiation",
        "C. Wide local excision with 1-cm margin, sentinel lymph node biopsy (SLNB), and adjuvant radiation",
        "D. Wide local excision with 2-cm margin and adjuvant chemoradiation",
        "E. Neoadjuvant chemoradiation followed by wide local excision with 2-cm margin"
      ],
      "answer": "C",
      "explanation": "*   This describes Merkel cell carcinoma (MCC), a rare but aggressive skin cancer.\n*   Clinical features can be remembered by the mnemonic \"AEIOU\": Asymptomatic, Expanding rapidly, Immunosuppression, Older than 50 years old, and UV-exposed area.\n*   It often appears as a pink nodule and progresses to a violaceous blue color with or without ulceration.\n*   Wide local excision with 1- to 2-cm negative margins is the mainstay of treatment.\n*   Due to a high propensity of lymph node spread, all patients (with the exception of head and neck MCC) without palpable lymphadenopathy should have SLNB performed at the time of surgery (C is true, B and D are incomplete).\n*   Additionally, all patients should receive adjuvant radiation to control local recurrence (C is true, B and D include radiation, but C is the most complete option).\n*   Chemotherapy is not yet a standard treatment modality for all patients with MCC (D and E are false).\n*   Expectant management is not appropriate for an aggressive cancer (A is false)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is least likely to affect prognosis in patients with melanoma?",
      "options": [
        "A. Level of invasion",
        "B. Regional lymph node involvement",
        "C. Ulceration",
        "D. Mitotic rate",
        "E. Serum lactate dehydrogenase (LDH)"
      ],
      "answer": "A",
      "explanation": "*   The most recent edition of the American Joint Commission on Cancer staging for melanoma has replaced Clark's level of invasion with more predictive factors of prognosis.\n*   These new factors include serum LDH, ulceration, and mitotic rate (C, D, E are factors affecting prognosis).\n*   Tumor size/depth and regional lymph node involvement (B) are still used in staging.\n*   Therefore, Clark's level of invasion (A) is least likely to affect prognosis as it has been replaced by more predictive factors."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding dermatofibrosarcoma protuberans (DFSP)?",
      "options": [
        "A. Gross clinical margins are helpful in guiding width of excision.",
        "B. The tumor is not radiosensitive.",
        "C. If it occurs on the neck, wide local excision is the surgical treatment of choice.",
        "D. Local recurrence rate is lower with Mohs micrographic surgery compared with wide local excision.",
        "E. Sentinel lymph node biopsy should be performed."
      ],
      "answer": "D",
      "explanation": "*   DFSP is a locally aggressive cutaneous soft-tissue sarcoma with low metastatic potential.\n*   The mainstay of treatment is wide local excision, but extension beyond clinical margins is common, so gross clinical margins are not helpful (A is false).\n*   DFSP is radiosensitive, and radiation therapy has been demonstrated to decrease local recurrence (B is false).\n*   DFSP occurring in the head and neck is better served with Mohs micrographic surgery to achieve superior cosmesis (C is false).\n*   A recent meta-analysis demonstrated a lower recurrence rate with Mohs micrographic surgery (1.1%) compared with wide local excision (6.3%) (D is true).\n*   Systemic and local metastases are rare, so sentinel lymph node biopsy is not necessary (E is false)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is true regarding SLNB in melanoma?",
      "options": [
        "A. A 0.5-mm deep melanoma with ulceration does not require SLNB.",
        "B. SLNB is unnecessary for melanoma that has more than a 4-mm thickness.",
        "C. There is a survival benefit for completion lymphadenectomy following a positive SLNB.",
        "D. Blue dye used for lymph node mapping should be injected outside of the planned wide local excision.",
        "E. All nodes whose radioactivity count is greater than or equal to 10% of that of the hottest node should be removed."
      ],
      "answer": "E",
      "explanation": "*   SLNB is recommended for all melanoma larger than 1 mm deep or for those with overlying ulceration, regardless of depth (A and B are false).\n*   The Multicenter Selective Lymphadenectomy Trial (MSLT-1) showed no survival benefit for completion lymphadenectomy following a positive SLNB (C is false). However, NCCN still recommends it.\n*   Blue dye should be injected within the boundary of the planned wide local excision so it is removed with the specimen (D is false).\n*   All nodes whose radioactivity count is greater than or equal to 10% of that of the hottest node should be removed (E is true)."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 51-year-old female presents with complaints of night sweats, fevers, and weight loss. On exam, she has enlarged cervical (2 cm), axillary (2 cm), and inguinal lymph nodes (3 cm). She is otherwise healthy. Which of the following would be the next step in establishing a diagnosis?",
      "options": [
        "A. Fine-needle aspirate (FNA) of inguinal lymph node",
        "B. Surgical biopsy of cervical lymph node",
        "C. Core needle biopsy of inguinal lymph node",
        "D. FNA of cervical lymph node",
        "E. Surgical biopsy of axillary lymph node"
      ],
      "answer": "B",
      "explanation": "*   Diffuse adenopathy with B-symptoms (night sweats, fevers, weight loss) strongly suggests lymphoma.\n*   Workup should begin with a careful history and physical, CBC, and chest x-ray.\n*   Open surgical biopsy of the entire node remains the gold standard for diagnosis due to potential sampling error and false negatives with FNA/CNB (A, C, D are less preferred for definitive diagnosis).\n*   Supraclavicular lymph nodes have the highest diagnostic yield, while inguinal lymph nodes have the lowest yield.\n*   Cervical lymph nodes are a good choice for biopsy, and surgical biopsy provides the most definitive diagnosis (B is true)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding sarcoma?",
      "options": [
        "A. Kaposi sarcoma is a common cause of death in patients with AIDS.",
        "B. Embryonal subtype is a rare childhood rhabdomyosarcoma.",
        "C. Embryonal subtype has the worst prognosis in childhood rhabdomyosarcoma.",
        "D. Osteosarcoma arises from stromal cells.",
        "E. Osteosarcoma is one of the rarest malignant bone tumors."
      ],
      "answer": "D",
      "explanation": "*   Kaposi sarcoma is common in AIDS but rarely a cause of death (A is false).\n*   Rhabdomyosarcoma is the most common soft-tissue sarcoma in childhood, with the embryonal subtype being the most common (B is false).\n*   The embryonal subtype of rhabdomyosarcoma has a good prognosis (C is false).\n*   Osteosarcoma is derived from mesenchymal stromal cells and is considered the most common malignant bone tumor in adults (D is true, E is false)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 19-year-old autistic male presents with severe pain in the second digit of the right hand. He has a fever of 103°F. His mother states that he has recently been biting his nails. On exam, he is tender lateral to the nail fold of the digit, and it appears swollen and red. Which of the following is the best management?",
      "options": [
        "A. Warm compresses and oral antibiotic coverage for skin flora",
        "B. Incision and drainage at the mid-digital pulp",
        "C. Incision at lateral nail fold",
        "D. Incision at lateral nail fold plus oral antibiotic coverage for skin flora",
        "E. Incision at lateral nail fold plus oral antibiotic coverage for skin flora and anaerobic bacteria"
      ],
      "answer": "E",
      "explanation": "*   This patient presents with acute paronychia, an inflammation involving the proximal or lateral fingernail folds, with signs of severe infection (fever, pain, swelling, redness).\n*   Warm compresses are for less severe cases (A is false).\n*   Incision and drainage at the mid-digital pulp is for a felon, which is an abscess of the digital pulp, not paronychia (B is false).\n*   For severe cases of paronychia, incision and drainage should be performed by placing a surgical blade under the cuticle margin and extending laterally along the side of the affected nail fold (C and D are incomplete).\n*   Oral antibiotics should be given for 5 days covering skin flora.\n*   In patients with a history of nail-biting or hand trauma with oral contact, antibiotics should also cover oral flora including anaerobic bacteria (E is true)."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 45-year-old male with human papilloma virus (HPV) presents to clinic to discuss his care after being diagnosed with Bowen disease of the anus. Which of the following is true regarding his condition?",
      "options": [
        "A. This is considered an invasive cancer.",
        "B. Wide local excision should be performed.",
        "C. It can be managed initially with imiquimod.",
        "D. HPV 6 and 11 are the most common subtypes leading up to this condition.",
        "E. Negative margins prevent local recurrence."
      ],
      "answer": "C",
      "explanation": "*   Bowen disease is squamous cell carcinoma in situ (not invasive) of the perianal margin (A is false).\n*   It is most commonly caused by HPV-16 and 18 (D is false).\n*   High-grade lesions can be symptomatic and may progress to ulceration, suggesting malignant transformation.\n*   Previously, wide local excision was standard, but it has come under scrutiny due to high recurrence rates (up to 40%) even with negative margins, especially in HPV-positive patients (B and E are false).\n*   Initial treatment of Bowen disease includes imiquimod or topical 5-FU (C is true).\n*   Surgical excision can be considered for severe symptomatic disease or refractory pruritus."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 65-year-old female presents with a 5-cm right-sided rubber-like mass located on her back that has recently been causing pain. It has been slowly growing for the past year. On imaging, she has an unencapsulated mass with a lenticular shape. It has alternating streaks of fibrous and fatty tissue and is located between the subscapular region at the inferior pole of the scapula and the serratus anterior muscle over the thoracic rib cage. Which of the following is true regarding this condition?",
      "options": [
        "A. This is a malignant condition.",
        "B. It is a benign tumor composed of adipose tissue.",
        "C. Biopsy is necessary even when radiologic findings are typical.",
        "D. Simple excision should be performed.",
        "E. Wide local excision should be performed."
      ],
      "answer": "D",
      "explanation": "*   This describes Elastofibroma dorsi, a benign, slow-growing process often mistaken for a soft-tissue sarcoma.\n*   It is sometimes termed a pseudotumor, and there has never been a report of malignant transformation (A is false).\n*   It is not a lipoma, which is a benign tumor composed of adipose tissue (B is false).\n*   Biopsy is unnecessary when radiologic findings are typical (C is false). MRI is the preferred imaging modality.\n*   Asymptomatic lesions do not require intervention.\n*   Symptomatic patients should undergo simple excision (D is true, E is false). Local recurrence does not occur."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 21-year-old male presents to the emergency department (ED) with pain at his upper mid buttocks. On exam, he has a tender mass at the intergluteal region overlying the natal cleft with a sinus tract draining purulent fluid. A single strand of hair is seen protruding from the tract. He reports that he has been treated for this condition several times. Which of the following is most correct?",
      "options": [
        "A. Control of hair growth at the intergluteal cleft is unlikely to prevent recurrence.",
        "B. Incision and drainage should be performed in the ED.",
        "C. Surgical excision of the sinus tract and marsupialization of the wound should be performed in the OR.",
        "D. The pathogenesis likely involves apocrine glands.",
        "E. CT scan of the pelvis should be performed."
      ],
      "answer": "B",
      "explanation": "*   This patient has a pilonidal cyst with recurrent intergluteal abscess formation.\n*   Pilonidal cysts occur most commonly at the upper border of the intergluteal cleft in young males.\n*   The pathophysiology is unclear but likely involves clogged hair follicles, not apocrine glands (D is false; apocrine glands are involved in hidradenitis suppurativa).\n*   Diagnosis is clinical, not with imaging or laboratory studies (E is false).\n*   Patients with an acute infection (abscess) should be managed with incision and drainage (B is true).\n*   Definitive repair (surgical excision and marsupialization) is typically performed in the OR after the acute condition has resolved (C is for definitive management, not initial ED management of acute infection).\n*   Control of intergluteal hair growth (e.g., with clippers or laser treatment) has been shown to decrease recurrence (A is false)."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "The most common cause of primary lymphedema is:",
      "options": [
        "A. Congenital lymphedema",
        "B. Lymphedema praecox",
        "C. Lymphedema tarda",
        "D. Filariasis",
        "E. Malignancy"
      ],
      "answer": "B",
      "explanation": "*   Lymphedema is divided into primary (no known cause) and secondary (known cause).\n*   Primary lymphedema is subdivided into congenital, praecox, and tarda.\n*   Congenital lymphedema is present at birth (A).\n*   Lymphedema praecox develops during childhood or teenage years and accounts for 80% to 90% of primary lymphedema cases, being 10 times more common in women (B is true).\n*   Lymphedema tarda is defined as starting after age 35 (C).\n*   Filariasis (D) is the most common worldwide cause of secondary lymphedema.\n*   Malignancy (E) or its treatment (e.g., post-axillary node dissection for breast cancer) is the most common cause of secondary lymphedema in the United States."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Primary management of lymphedema consists of:",
      "options": [
        "A. Complete decongestive physiotherapy",
        "B. Benzopyrone (coumarin)",
        "C. Prophylactic long-term antibiotics",
        "D. Graded compression stockings",
        "E. Diuretics"
      ],
      "answer": "D",
      "explanation": "*   There is no curative therapy for lymphedema.\n*   Patients are at significantly increased risk of recurrent infections and progressive swelling.\n*   Compression stockings are useful in reducing edema and are the mainstay of treatment (D is true).\n*   The effect of benzopyrone (coumarin) on lymphedema has been inconclusive in studies (B is not primary management).\n*   Complete decongestive physiotherapy is effective but must be used in combination with compression stockings (A is incomplete as primary management).\n*   Prophylactic long-term antibiotics have no role (C is false).\n*   Diuretics may temporarily improve lymphedema in mild cases but have no long-term benefit (E is false)."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is least likely to be associated with lymphedema?",
      "options": [
        "A. Predisposition to recurrent cellulitis",
        "B. \"Buffalo hump\" appearance of the dorsum of the foot",
        "C. Hyperpigmentation of the skin",
        "D. Peau d'orange appearance of the skin",
        "E. Thickening and squaring of toes"
      ],
      "answer": "C",
      "explanation": "*   Distinguishing between chronic venous stasis and lymphedema can be difficult, especially early on.\n*   Lymphedema is nonpitting, while venous stasis is pitting.\n*   Lymphedema involves the foot and toes, which venous stasis tends to spare.\n*   The swollen dorsum of the foot often has a \"buffalo hump\" appearance, and toes look squared off (B and E are associated with lymphedema).\n*   Recurrent cellulitis is a common complication of lymphedema (A is associated).\n*   In advanced lymphedema, the skin develops a \"peau d'orange\" appearance, lichenification, and hyperkeratosis (D is associated).\n*   Hyperpigmentation of the skin, due to hemosiderin deposition, is seen in venous insufficiency and not usually with lymphedema (C is least likely to be associated with lymphedema)."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "The test of choice for suspected lymphedema is:",
      "options": [
        "A. Lymphoscintigraphy",
        "B. Lymphangiography",
        "C. CT scan",
        "D. MRI",
        "E. Positron emission tomography (PET) scan"
      ],
      "answer": "A",
      "explanation": "*   While lymphedema diagnosis can be obvious in advanced stages, it may be difficult early on based on physical examination alone.\n*   If the cause of lymphedema is obvious (e.g., post-lymph node dissection), further workup is not necessary.\n*   However, in situations where lymphedema is suspected but the diagnosis is unclear, lymphoscintigraphy is the diagnostic test of choice (A is true).\n*   CT and/or MRI can be useful to rule out other pathology or to more accurately stage the degree of lymphedema, but they are not the initial diagnostic test of choice (C, D).\n*   Lymphangiography is more invasive and involves direct injection of dye into lymphatic vessels, potentially causing further damage; it is only recommended for rare patients undergoing direct lymphatic reconstruction (B is not the test of choice).\n*   PET scan is not typically used in the workup for lymphedema (E is false)."
    }
  ]
}
{
    "chapter_name": "Head and Neck",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "A 20-year-old woman has a thyroid nodule on a routine physical examination. She has no concerning historical or examination findings. Ultrasound confirms a 2-cm nodule in the left hemithyroid without enlarged lymph nodes in the neck. Fine needle aspiration confirms the diagnosis of papillary thyroid cancer. During thyroidectomy, no clinically enlarged nodes are found in the central compartment. Which of the following statements is true regarding central neck dissection in this patient?",
            "options": [
                "A. It is contraindicated.",
                "B. Node micrometastases are found in 10% of patients.",
                "C. It will improve this patient's 5-year disease-free survival.",
                "D. It is associated with a 2-fold increase in unilateral recurrent laryngeal nerve injury compared with thyroidectomy alone.",
                "E. The superior border of the central compartment is the hyoid bone."
            ],
            "answer": "E",
            "explanation": "- The preoperative clinical staging for this patient with papillary thyroid carcinoma (PTC) is cTlb (tumor size >1 cm < 2 cm limited to the thyroid gland), NO, MO.\n- Although the prognosis for this patient is favorable, the potential for locoregional recurrence serves as the rationale for some surgeons to advocate for routine prophylactic central lymph node dissection (PCLND).\n- The incidence of lymph node micrometastases ranges from 25 to 50%, and subsequent follow-up using thyroglobulin can lead to unnecessary radioiodine therapy if PCLND is not performed.\n- Detractors of routine PCLND in patients with clinically node-negative disease cite that routine PCLND does not alter overall 5-year survival in patients younger than 45 years.\n- Although PCLND for patients with cNO disease remains controversial, it is certainly not contraindicated.\n- The American Thyroid Association (ATA) has determined that a randomized clinical trial to examine the potential benefits of PCLND for patients with cNO disease is not feasible because the morbidity of PCLND is quite low and the large sample size required to power a study to demonstrate significance would be prohibitive.\n- There is no evidence to support a higher risk of recurrent laryngeal nerve injury with routine PCLND.\n- To standardize the definition of the central neck compartment, the ATA defined the boundaries of level VI and VII nodes to be the hyoid bone superiorly, the carotid arteries laterally, the superficial layer of the deep cervical fascia anteriorly, the deep layer of the deep cervical fascia posteriorly, and the innominate artery on the right and its corresponding axial plane on the left inferiorly."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "A 25-year-old man presents with a nontender, soft mass deep to the right anterior sternocleidomastoid muscle. Fine needle aspiration is negative for malignant cells. Ultrasound reveals a round mass of uniform low echogenicity, no acoustic enhancement, and no internal septations. Which structures most likely associated with this congenital lesion?",
            "options": [
                "A. Eustachian tube",
                "B. Tonsil",
                "C. Thymus",
                "D. Superior parathyroid gland",
                "E. Inferior parathyroid gland"
            ],
            "answer": "B",
            "explanation": "- Branchial cleft anomalies (BCAs) represent the second most common congenital neck mass after thyroglossal duct cyst.\n- They can present as cysts, sinuses, or fistulas.\n- They arise from aberrant development or incomplete obliteration of the external clefts and internal pouches that develop from the 6 mesodermal arches that form on the superior-lateral aspect of a fetus during the fourth to seventh weeks of gestation.\n- Each branchial arch, except the fifth, is associated with the development of specific structures of the head and neck.\n- The first arch forms into the middle ear, eustachian tube, and external auditory canal.\n- The second arch develops into the lining of the palatine tonsils.\n- The third arch becomes the inferior parathyroid glands and the thymus.\n- The fourth arch evolves into the superior parathyroid glands and C-cells of the thyroid.\n- BCAs arising from the second arch are the most common, accounting for 70 to 90%.\n- These anomalies can present anywhere along a tract arising from the tonsillar fossa, running by the glossopharyngeal and hypoglossal nerves, coursing between the internal and external carotids, and ending at the anterior border of the sternocleidomastoid.\n- They are classified into 4 types, based on whether they lie superficial to, adjacent to, within, or posterior to the carotid sheath, respectively.\n- Second arch BCAs most commonly manifest in the third to fifth decade as cysts, presenting as a nontender, soft mass lying deep to the sternocleidomastoid.\n- Ultrasound imaging reveals a round mass of uniform low echogenicity, no acoustic enhancement, and no internal septations.\n- CT scans and MRI also may be used to delineate the BCA and its course.\n- In adults, fine needle aspiration should be performed to rule out malignancy as the origin of the mass.\n- As with all BCAs, complete surgical excision of the cyst or tract is the therapy of choice."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "One week after a wide excision and sentinel node biopsy for a 1.3-mm nonulcerated melanoma of the right upper back, a 37-year-old, otherwise healthy man presents to the emergency department complaining of shoulder pain and inability to raise his right arm. On exam, there are healing scars on his right back and neck, his right shoulder shrug is weak, and he can abduct his right arm to only 90°. Sensation in the face, neck, and arm is intact. Which of the following statements is true?",
            "options": [
                "A. His sentinel node was most likely in the submandibular triangle (level I).",
                "B. Urgent exploration of the neck wound is needed.",
                "C. The patient has sustained injury to the greater auricular nerve.",
                "D. Electromyography can be diagnostic.",
                "E. Brain CT scan should be done."
            ],
            "answer": "D",
            "explanation": "- The patient presents with classic history and exam for a shoulder syndrome secondary to spinal accessory nerve (SAN; 11th cranial nerve) injury.\n- SAN injury impairs motor function to the trapezius muscle, leading to weakness of shoulder abduction and drooping of the shoulder.\n- Other symptoms and signs include shoulder pain and stiffness and winging of the scapula.\n- The spinal root of the SAN exits the skull through the jugular foramen, pierces the sternocleidomastoid muscle, innervates it, and runs lateral to it, where it is close to the greater auricular nerve (which is a sensory nerve and can serve as a landmark for surgeons to find the SAN).\n- The SAN then runs diagonally through the posterior triangle (level V) with a variable course and ends by innervating the trapezius at that muscle's edge a few fingerbreadths above the clavicle.\n- The extracranial course of the SAN is superficial as it lies between the investing and prevertebral layers of fascia.\n- It is small and interdigitates with nodal tissue, leading to its tendency to be injured.\n- Electromyography can be diagnostic, revealing a spectrum of nerve injury ranging from near complete recordable nerve action potential at one extreme to complete denervation on the other.\n- The patient presented can be evaluated by electromyography, and, if the nerve seems innervated, conservative management with physical therapy can be attempted.\n- Electromyography can be monitored to look for signs of regeneration, which can take up to 18 months.\n- The neck should be explored within 3 to 6 months if the patient shows no improvement on clinical exam and electromyography.\n- In a series of 156 patients who failed conservative management and eventually came to operative repair, most nerve injuries were in the upper portion of the triangle, 29 patients needed neurolysis only, and 123 required nerve repair or grafting; 88% of patients improved with operative intervention.\n- This is a peripheral nerve injury; therefore, ruling out a brain metastasis is unnecessary.\n- The patient has stage T2aN0, IB melanoma.\n- Staging with any imaging modality is not indicated for this low stage.\n- Further, the preferred imaging modality for the brain in melanoma patients is MRI, not CT scan.\n- Such injuries are not uncommon during lymph node biopsy in the posterior triangle (level V) of the neck.\n- Approximately 3 to 10% of all lymph node biopsies in that area result in some SAN injury, which can lead to functional deficit in 60 to 90% of cases if not treated.\n- In a review of malpractice cases for a SAN injury, 95% involved lymph node biopsy in the posterior triangle.\n- In that review, only 46% of cases were decided for the defendant, and the average award was in excess of $500,000.\n- SAN injury cases are considered high-risk litigation."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "A 30-year-old woman presents with a slowly enlarging, painless mass in the cheek just in front of the ear (figures 4.1 and 4.2). Ultrasound shows a mass in the parotid gland with no associated cervical adenopathy. Fine needle aspiration suggests pleomorphic adenoma. She is referred for surgical resection. The patient should be told that",
            "options": [
                "A. a confirmatory core needle biopsy of the mass is needed.",
                "B. a neck dissection in addition to parotidectomy is necessary.",
                "C. this mass is probably related to smoking.",
                "D. the pathology specimen has a low chance of showing malignancy.",
                "E. E operative intervention will result in a permanent facial nerve deficit."
            ],
            "answer": "D",
            "explanation": "- Most salivary tumors are in the parotid (the largest salivary gland) and most of these are benign.\n- Conversely, minor salivary gland (the smallest salivary glands) tumors are uncommon, and most are malignant.\n- As a rule of thumb, the likelihood of a salivary tumor is directly proportional to the size of the gland of origin, yet the chance that the tumor is malignant is inversely proportional to the size of the gland.\n- Pleomorphic adenomas, the most common parotid tumors, are usually benign, are accurately diagnosed on fine needle aspiration, and have a low chance (3-10%) of harboring occult malignancy on final pathology.\n- Malignant transformation of a pleomorphic adenoma is more likely if the pleomorphic adenoma recurs.\n- The case presented here is classic: benign parotid tumors are usually slowly growing and painless.\n- Fine needle aspiration is highly accurate.\n- In one study, confirmatory core needle biopsy was needed only 21% of the time, even when malignancy was suspected.\n- Superficial parotidectomy without node dissection has a high chance of cure for pleomorphic adenomas and should be accomplished with a low risk of facial nerve injury in experienced hands.\n- Warthin tumors (monomorphic adenomas), the second most common parotid tumors, are more often seen in older patients, men, and smokers, and they are often bilateral."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "A 5-year-old girl has a 1.5-cm neck mass to the left of midline just above the laryngeal cartilage noted during her annual visit with a pediatrician (figure 5.1). It moves with swallowing and is nontender. She denies any difficulty with breathing or swallowing. An ultrasound examination reveals the mass is solid, and the thyroid is difficult to visualize. What is the most appropriate next step in management?",
            "options": [
                "A. Thyroid scan",
                "B. Excision including the hyoid bone",
                "C. Fine needle aspiration of the mass",
                "D. Serum calcitonin level",
                "E. Direct laryngoscopy"
            ],
            "answer": "E",
            "explanation": "<b>PROBABLE ANSWER: A<b><br>- Neck masses in children must be evaluated.\n- The most common midline mass in a child is a thyroglossal duct cyst, which is a remnant from the migration of the thyroid.\n- Other midline masses include dermoids and ectopic thyroid tissue.\n- Ultrasound is commonly used to determine whether the mass is cystic or solid.\n- In the case of a solid midline mass, ectopic thyroid should be considered.\n- Thyroid scan can confirm the diagnosis (figure 5.2).\n- Ectopic thyroid tissue is most common at the base of the tongue, called lingual thyroid tissue, although it may occur anywhere along the migration route of the thyroid anlage.\n- These patients are often hypothyroid; measuring a thyroid stimulating hormone will confirm a hypothyroid state.\n- Malignancy is rare in children and obtaining a fine needle aspiration (FNA) to exclude malignancy is not necessary with a positive thyroid scan.\n- Although FNA can be done, the risk of malignancy is low and such an invasive procedure would not be the next step.\n- Direct laryngoscopy looking for a malignancy would also not be necessary in this child.\n- Calcitonin would be appropriate if a family history of endocrinopathy was established, including medullary thyroid cancer, which is also not present in this case.\n- Ectopic thyroid tissue can be confused with a thyroglossal duct cyst.\n- A Sistrunk procedure is not necessary and would remove the only thyroid tissue the patient may actually have.\n- Management is variable given the rarity of the condition.\n- Treating a hypothyroid state with thyroid replacement is necessary and such replacement is associated with a reduction in mass size.\n- Surgical excision is possible followed by thyroid hormone replacement.\n- When the diagnosis is delayed or diagnostic findings suggest malignancy, excluding thyroid cancer with an FNA is necessary.\n- Treatment would be guided by the FNA findings."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "Which of the following is lower for percutaneous tracheostomy compared with open tracheostomy?",
            "options": [
                "A. Infection rate",
                "B. Delayed tracheal stenosis",
                "C. Accidental decannulation",
                "D. Procedure costs",
                "E. Intensive care unit length of stay"
            ],
            "answer": "C",
            "explanation": "<b>PROBABLE ANSWER: A<b><br>- Tracheostomy is frequently used to manage patients with pulmonary failure.\n- Although the merit of open tracheostomy versus percutaneous tracheostomy is still debated, most outcomes are similar.\n- There is no evidence that intensive care unit length of stay is favored by either technique.\n- Delayed tracheal stenosis occurs rarely with both techniques and does not occur more frequently with either.\n- Accidental decannulation occurs more frequently with percutaneous tracheostomy.\n- Procedural cost is typically thought to favor the percutaneous technique, especially when comparing bedside percutaneous technique to open tracheostomy in the operating room.\n- However, the cost difference is primarily for the operating room time.\n- When comparing both techniques at the bedside, the open technique costs less.\n- This finding is even more dramatic when bronchoscopy is used to support the percutaneous technique.\n- Finally, although infrequent, most studies support fewer infectious complications with the percutaneous approach because there is less soft tissue dissection with this procedure."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "which of the following statements is true and can be used to counsel patients with thyroid disease concerning the use of intraoperative nerve monitoring (IONM)?",
            "options": [
                "A. Operative time is reduced.",
                "B. Operative cost is reduced.",
                "C. Injurv to the recurrent laryngeal nerve during the initial operation is decreased.",
                "D. Recurrent laryngeal nerve injury is decreased in thyroid reoperative surgery.",
                "E. Vagus nerve stimulation is a substitute for actual identification of the recurrent laryngeal nerve at surgery."
            ],
            "answer": "B",
            "explanation": "<b>PROBABLE ANSWER: D<b><br>- Careful dissection to identify the recurrent laryngeal nerve before removal of the thyroid gland remains the standard of care for nerve protection.\n- The recurrent laryngeal nerve is most vulnerable to injury when neck dissections occur near the inferior thyroid artery, which also supplies all 4 parathyroid glands.\n- The superior glands lie behind the recurrent laryngeal nerve, and the inferior glands lie in front of the nerve.\n- Intraoperative nerve monitoring (IONM) for thyroid surgery as a means of improving this standard is controversial.\n- The use of IONM adds both operative time and cost by an average of 5 to 7% to routine thyroid surgery with no observed increase in value.\n- IONM appears to have a role in repeat operations on the thyroid gland.\n- The prevalence of recurrent laryngeal nerve injury is higher in repeat thyroid surgery, approaching 12.5% for temporary and 3.8% for permanent events.\n- In a retrospective cohort study of patients undergoing thyroid reoperation, IONM resulted in an observed reduction in both temporary and permanent paresis of the recurrent laryngeal nerve compared with patients who had nerve visualization only."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "A 29-year-old man complains of right cheek swelling, pain, and redness. One week ago, he was stabbed in the right cheek just above the angle of the mandible and underwent simple closure of the wound in the emergency department. On examination today, his right cheek is swollen, erythematous, and tender to palpation. The sutures are pulling through the wound. What is the most likely underlying cause of this patient's findings?",
            "options": [
                "A. Parotid duct injury",
                "B. Pseudoaneurysm of the facial artery",
                "C. Superficial wound infection",
                "D. Pharyngeal abscess",
                "E. Periodontal abscess"
            ],
            "answer": "E",
            "explanation": "<b>PROBABLE ANSWER: A<b><br>- Patients presenting with penetrating facial trauma must have their wounds examined closely to rule out deeper anatomic structures.\n- Lacerations to the cheek may cause significant injury to the facial nerve, vascular structures, the parotid gland, or the parotid duct (figure 8.1).\n- The parotid gland lies superficial to the posterior portion of the masseter muscle.\n- The parotid duct is also called the Stenson duct.\n- It measures approximately 7 cm long and ascends from the anterior portion of the gland.\n- It passes anteriorly, superficial to the masseter muscle near the transverse facial artery and buccal branch of the facial nerve.\n- Hence, evidence of injury to either the artery or nerve should raise concern for parotid duct injury.\n- Failure to recognize and treat parotid duct injuries at the time of initial presentation may lead to development of sialocele, cutaneous fistula, or a salivary duct cyst.\n- The most common presentation of missed parotid duct injury is wound breakdown and salivary drainage in the early days after injury.\n- Delayed recognition of parotid duct injury is common and frequently leads to complications.\n- Inspect all cheek lacerations for evidence of injury to the gland, duct, nerve, or artery.\n- If a ductal injury is identified, microsurgical repair is the treatment of choice and should be undertaken at the time of initial presentation.\n- Delayed repair makes primary repair extremely challenging and often necessitates drainage through the parotid duct orifice, an oral fistula, or saliva production suppression.\n- Pseudoaneurysms of the facial artery are another complication of missed injury and, similar to sialoceles, present as swelling without erythema or significant inflammation.\n- A superficial wound infection is possible after any laceration closure; however, infections after closure of facial lacerations are not common, occurring in 3% of patients or less.\n- A laceration on the cheek presenting with local inflammatory changes after closure should prompt concern for missed parotid gland or ductal injury.\n- The description of this patient's wound location and severe inflammatory reaction are not consistent with pharyngeal or periodontal abscesses that rarely present with external facial findings."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "A 32-year-old healthy woman with no significant family history has a palpable 2.5cm left thyroid nodule found on a routine annual exam. She has no symptoms; thyroid function is normal; and the nodule is smooth, firm, and mobile. The neck exam is otherwise unremarkable. Fine needle aspirate is performed and is consistent with a Bethesda category III follicular lesion of uncertain significance. The next step in management is",
            "options": [
                "A. dedicated neck ultrasound in 6 months.",
                "B. total thyroidectomy.",
                "C. left thyroidectomy.",
                "D. repeat fine needle aspirate for gene expression classifier testing.",
                "E. E PET-CT scan."
            ],
            "answer": "B",
            "explanation": "<b>PROBABLE ANSWER: D<b><br>- The management of thyroid nodules is a rapidly changing field in the era of molecular diagnostic techniques guiding surgical decisions.\n- A commonly used and sensitive test for the diagnosis of thyroid cancer is the fine needle aspirate (FNA).\n- This test is cost-effective, safe, and relatively sensitive and specific.\n- Experienced cytopathologists can accurately diagnose threatening lesions based on FNA.\n- The Bethesda classification system, recently revised and updated, categorizes adequate FNA samples into 6 diagnostic classes.\n- Category I and II lesions can be observed, and category V and VI lesions should be surgically removed in the absence of a reason not to intervene.\n- Management of category III and IV lesions are controversial in terms of background malignancy rates.\n- It is in these categories that the sensitivity and specificity of FNA makes the test less reliable for definitive management of thyroid nodules.\n- Until recently, category III and IV nodules diagnosed on FNA were submitted for surgical pathology after resection harbored malignancy in only 15 to 40% of cases; thus, surgery was unnecessary in most patients.\n- In addition, the frozen section diagnosis of such lesions is tricky and unreliable, oftentimes resulting in secondary cancer operations after initial hemithyroidectomy for diagnosis.\n- Management options for a Bethesda category III or IV lesion include observation, surgery, or repeat FNA.\n- Further imaging has no role in management, unless to guide repeat FNA.\n- PET-CT scan has no role in the management of thyroid nodules.\n- Repeat FNA may not yield any new information, but with the addition of gene expression profiling, a high probability of malignancy or benignancy may be obtained and is a very reasonable option for management.\n- FNA can confidently guide the role of interval imaging and observation.\n- Repeat FNA with cytopathology alone does not always add information for decision making, but in combination with gene expression profiling, the test is associated with a high negative predictive value for cancer.\n- Newer molecular techniques to interrogate FNA specimens are associated with a higher positive predictive value for cancer, guiding a decision for surgery."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "A 50-year-old previously healthy man undergoes a course of prolonged intubation after a motor vehicle crash. He recovers and is discharged. He returns 6 weeks after the incident neurologically and hemodynamically normal. He is complaining of shortness of breath and wheezing on exertion. On physical exam, he has inspiratory and expiratory stridor. CT scan of the neck/chest and fiberoptic bronchoscopy reveal a 4-mm diameter, 2-cm long segment of mid-tracheal stenosis with thickened granulation tissue. What is the recommended treatment?",
            "options": [
                "A. Serial balloon dilation",
                "B. Laser ablation of granulation tissue",
                "C. Tracheal resection",
                "D. Self-expanding tracheal stent",
                "E. Tracheal transplant"
            ],
            "answer": "A",
            "explanation": "<b>PROBABLE ANSWER: C<b><br>- Postintubation tracheal stenosis (PITS) remains the most common long-term airway complication after prolonged intubation.\n- PITS is caused by cicatricial healing and fibrosis after an endotracheal tube balloon creates transmural ischemia or necrosis of the trachea.\n- Despite improvements in design of endotracheal and tracheostomy tubes, specifically high-volume, low-pressure cuffs, PITS develop in 1 to 2% of patients after prolonged intubation.\n- Symptoms related to PITS will usually develop within 3 to 6 weeks.\n- Exertional dyspnea begins to occur when the diameter of the trachea is reduced below 10 mm, and wheezing or stridor develops once the airway has a diameter less than 5 mm.\n- For patients with PITS who are not in distress, the optimal management is single-stage tracheal resection and reconstruction.\n- The length of trachea that can be resected safely varies with age and body type, but the amount of resection considered feasible for appropriate reconstruction can involve up to half the length of the trachea.\n- Neck flexion alone is sufficient for most patients having primary repair of PITS to facilitate healing without tension.\n- If additional length is needed, a suprahyoid laryngeal release can provide an additional 1.0 to 1.5 cm.\n- Primary single-stage reconstruction results in good or satisfactory results in 93% of patients.\n- Bronchoscopy with dilation is the initial recommended treatment for acute symptoms of PITS for a patient in respiratory distress.\n- Bronchoscopy can improve symptoms temporarily, but it is not definitive therapy.\n- The transmural nature of the scarring and stenosis explains the limited success of purely endoluminal therapy such as serial dilation and tracheal stents.\n- In addition, tracheal stents can migrate and develop granulation tissue at the end of the stent.\n- Consequently, tracheal stents should be used only in carefully selected patients with PITS who are unfit for surgery or who have a limited life expectancy.\n- Laser ablation can be effective in destroying intraluminal tumors and restoring tracheal patency.\n- However, laser therapy is not effective in treating PITS due to the circumferential, transmural nature of the lesion.\n- Although tracheal transplantation has been attempted in a handful of patients with variable success, it is still considered an experimental treatment."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "The anatomic boundaries of level IV jugular nodes are",
            "options": [
                "A. Superior: Hyoid, Inferior: Cricoid, Medial: Lateral border sternohyoid m, Lateral: Lateral border SCM m",
                "B. Superior: Cricoid, Inferior: Clavicle, Medial: Lateral border sternohyoid m, Lateral: Posterior border SCM m",
                "C. Superior: Hyoid, Inferior: Cricoid, Medial: Carotid sheath, Lateral: Spinal accessory n",
                "D. Superior: Cricoid, Inferior: Clavicle, Medial: Carotid sheath, Lateral: Spinal accessory n",
                "E. Superior: Hypoglossal n, Inferior: Spinal accessory n, Medial: Stylohyoid m, Lateral: Lateral border SCM m"
            ],
            "answer": "C",
            "explanation": "- Lymph node drainage is based on anatomy.\n- Knowledge of lymph node stations of neck is critical because general surgeons often perform lymph node biopsy and must accurately convey anatomic location.\n- If compartment-oriented lymph node dissection is performed, it is important to accurately describe and label the specimen.\n- Figure 11.1 outlines the anatomic boundaries of the different lymph node basins.\n- Level IA nodes are located in the submental region. They drain the floor of the mouth, anterior tongue, anterior mandibular alveolar ridge, and lower lip.\n- Level IB nodes are located in the submandibular region. They drain the oral cavity, anterior nasal cavity, midface, and submandibular gland.\n- Level II nodes are the upper jugular nodes. They are divided into IIA (anterior to spinal accessory nerve) and IIB (posterior to spinal accessory nerve). These nodes provide drainage to oral and nasal cavities, nasopharynx, oropharynx, hypopharynx, larynx, and parotid gland.\n- Level III nodes are the mid jugular nodes. They drain the oral cavity, nasopharynx, oropharynx, hypopharynx, and larynx.\n- Level IV nodes are the lower jugular nodes. This nodal basin drains the hypopharynx, thyroid, cervical esophagus, and larynx.\n- Level V nodes are located in the posterior triangle. This group is divided into VA (superior to level of cricoid) and VB (inferior to level of cricoid). This group drains the nasopharynx, oropharynx, and skin and soft tissue of the posterior scalp and neck.\n- Level VI nodes are the pretracheal and paratracheal nodes. They provide drainage to the thyroid gland, glottis and subglottic larynx, apex of the piriform sinus, and cervical esophagus."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "A 49-year-old man with a 20-pack-year smoking history presents with a nontender 2-cm mass in his right neck at the anterior border of the sternocleidomastoid muscle and inferior to the hyoid bone. The patient has no significant medical or family history. The remainder of his physical exam is unremarkable. The most appropriate next step is",
            "options": [
                "A. oral antibiotics.",
                "B. excisional biopsy of the mass.",
                "C. laryngoscopy.",
                "D. esophagoscopy.",
                "E. ultrasound-guided fine needle aspiration of the mass."
            ],
            "answer": "A",
            "explanation": "<b>PROBABLE ANSWER: E<b><br>- Cancer is the most common cause of a new neck mass in patients older than 40.\n- A neck mass in an adult should be considered malignant until proven otherwise.\n- Prompt diagnosis is crucial, as delayed diagnosis and treatment worsens prognosis.\n- A trial of oral antibiotics and no additional diagnostic workup is not appropriate in this patient who reports no infectious symptoms.\n- After detailed history and focused head and neck examination, ultrasound-guided fine needle aspiration (FNA) is the most appropriate next step.\n- Biopsy of the solid portion of the mass is important for correct diagnosis, and ultrasound will help facilitate the procedure.\n- FNA is diagnostic in more than 90% of cases.\n- FNA is also amenable to real-time cytologic evaluation.\n- The risk of seeding a tumor in the biopsy tract is negligible.\n- Excisional biopsy is rarely indicated and is reasonable only after repeat FNA, consideration of core needle biopsy, and thorough investigation of the primary disease.\n- If FNA demonstrates carcinoma but a primary site is not identified on physical exam, laryngoscopy and then esophagoscopy and bronchoscopy should be performed.\n- CT scan of the neck with intravenous contrast will identify the primary source of malignancy in a patient with a neck mass believed to be associated with a head and neck malignancy."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "A 70-year-old man presents with foul-smelling breath and repeated episodes of aspiration pneumonia. On examination, there are wheezes auscultated at the bases of both lungs and no neck masses. He reports of a sticking feeling in the throat with dysphagia. A CT scan of the chest shows signs of pneumonia. After pneumonia treatment, what is the best diagnostic test?",
            "options": [
                "A. Esophagogastroduodenoscopy",
                "B. Esophageal manometry",
                "C. Barium esophagram",
                "D. Capsule endoscopy",
                "E. Neck ultrasound"
            ],
            "answer": "E",
            "explanation": "<b>PROBABLE ANSWER: C<b><br>- Patients with a pharyngoesophageal (Zenker) diverticulum are initially asymptomatic until the diverticulum grows.\n- Symptoms may then include a sticking feeling in the throat with dysphagia, retrosternal pain, excessive salivation, halitosis, and respiratory infections.\n- Barium esophagram, with lateral views, will show a barium-filled diverticulum at the level of the cricothyroid cartilage, posterior to the esophagus (figures 13.1 and 13.2).\n- Esophagogastroduodenoscopy is not the recommended initial diagnostic test, because the small opening of a diverticulum in a proximal location may be easily missed.\n- However, diverticula are found incidentally in patients being evaluated for dysphagia.\n- Esophageal manometry is useful in the diagnosis of esophageal motility disorders but does not aid in the diagnosis of Zenker diverticulum.\n- Capsule endoscopy is used in diagnosing disorders of the small intestine but does not aid in the diagnosis of esophageal diverticulum.\n- Ultrasound of the neck can confuse a diverticulum with a thyroid nodule.\n- If air is seen in the cystic structure, then a diverticulum must be considered instead of a thyroid nodule."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 20-year-old man presents with hoarseness and subcutaneous emphysema after sustaining a blow to his neck during a tackle football game. He is hemodynamically normal and has no other injuries. Plain film shows a large pneumomediastinum. During flexible bronchoscopy, a 3-cm tear is noted in the lower cervical trachea, which extends to approximately one-quarter of the circumference of the trachea. The tissue appears viable without much displacement. What is the most appropriate next step in his management?",
            "options": [
                "A. Placement of an endotracheal tube",
                "B. Primary repair of the injury through a median sternotomy",
                "C. Primary repair through a cervical incision",
                "D. Stent placement",
                "E. Voice rest, antibiotics, and a proton pump inhibitor"
            ],
            "answer": "D",
            "explanation": "<b>PROBABLE ANSWER: E<b><br>- Not all traumatic tracheobronchial injuries require repair.\n- Low-energy, nonpenetrating injuries, in particular, can be managed nonoperatively despite seemingly impressive damage.\n- The diagnosis is suspected by hoarseness, subcutaneous emphysema, and a mechanism that involved the airway system such as a traumatic injury or recent bronchoscopy or even intubation, especially in someone with a stenotic trachea.\n- The diagnosis is confirmed by either rigid or flexible bronchoscopy.\n- Features that favor nonoperative management are injuries that are 4 cm or smaller, involve less than one-third of the circumference of the trachea, have wound edges that are well opposed, and those that do not show significant tracheal tissue loss.\n- Additionally, the patient should be hemodynamically normal, without an associated esophageal injury, and without signs of sepsis.\n- This patient is hemodynamically normal with no other injuries and favorable anatomy.\n- Elective intubation secondary to the tracheobronchial injury is not necessary.\n- If intubation is necessary, care should be taken during intubation so as not to make a partial disruption into a complete one.\n- A nonoperative approach can be used even in patients who require mechanical intubation and would consist of humidified air, voice rest, antibiotics, a proton pump inhibitor, continued observation, and repeat bronchoscopy.\n- A low tidal volume is recommended.\n- There is no role for stenting in these patients.\n- If the patient has difficulty with intubation or mechanical ventilation, then operative management should occur.\n- For patients who require operative repair, most cervical injuries can be managed through a transverse collar incision 2 cm above the sternal notch.\n- The chest should be prepared in case a median sternotomy is required.\n- If the injury is noted to be 2 to 3 cm from the carina, then a right posterolateral thoracotomy through the fourth or fifth intercostal space should be used unless the injury is distal to the carina on the left.\n- In those cases, a left posterolateral thoracotomy should be used through the fifth intercostal space.\n- However, these distal injuries are unlikely in low-energy blunt trauma situations."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "A 47-year-old male smoker is found to have a firm 3-cm mass in the right parotic gland. CT scan indicates that the tumor is located in the superficial lobe. Fine needle aspiration biopsy returns pleomorphic adenoma. Treatment should consist of",
            "options": [
                "A. enucleation of the tumor.",
                "B. superficial parotidectomy.",
                "C. total parotidectomy.",
                "D. total parotidectomy and right modified neck dissection.",
                "E. total parotidectomy and postoperative radiation treatment."
            ],
            "answer": "B",
            "explanation": "- The parotid gland is the most common site for salivary neoplasms (approximately 85% of cases).\n- Most parotid tumors are benign, and the most common type is the pleomorphic adenoma, also known as benign mixed tumor.\n- Unlike some benign tumors, pleomorphic adenomas tend to recur and undergo malignant transformation (carcinoma ex pleomorphic adenoma) if inadequately treated.\n- The mainstay of treatment for pleomorphic adenomas Is surgical resection.\n- Tumor enucleation (or lumpectomy) that leaves the tumor capsule in situ is inadequate, with reported recurrence rates as high as 45%.\n- Dissection of the facial nerve with superficial parotidectomy is the traditional management when the tumor is located in the superficial lobe.\n- Total parotidectomy Is used when the tumor is located in the deep lobe.\n- In the current scenario, because the tumor is located in the superficial lobe, superficial parotidectomy is the indicated treatment.\n- Neither modified neck dissection nor adjuvant radiation therapy is necessary in the treatment of pleomorphic adenomas.\n- Although tumor recurrence is greatly reduced with superficial parotidectomy, associated complications such as facial weakness, Frey syndrome, and esthetic hollowing are debilitating.\n- Thus, some head and neck surgeons have championed lesser resections that dissect fewer branches of the facial nerve and leave more parotid tissue.\n- Partial parotidectomy, as opposed to enucleation, appears to be as effective as superficial parotidectomy when performed by expert surgeons in appropriately selected patients."
        }
    ]
}
{
  "chapter_name": "Immunology",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding apoptosis?",
      "options": [
        "A. It does not occur during embryogenesis.",
        "B. It is characterized by a loss of membrane integrity.",
        "C. It induces an inflammatory response.",
        "D. CD-8 T cells can initiate apoptosis in cells that are virally infected.",
        "E. p53 inhibits apoptosis while BCL-2 promotes apoptosis."
      ],
      "answer": "D",
      "explanation": "*   Apoptosis (programmed cell death) is a critical process governing homeostasis, beginning during embryogenesis with the shedding of skin between digits and continuing lifelong.\n*   It facilitates the disposal of infected, damaged, or transformed cells that may give rise to cancer.\n*   Both intrinsic and extrinsic pathways of apoptosis involve the activation of caspases, which are the final step for cell destruction.\n*   p53 promotes apoptosis, while BCL-2 inhibits it.\n*   CD-8 T cells are responsible for recognizing the FAS-death receptor in virally infected cells and initiating cell destruction.\n*   Apoptosis is characterized by DNA fragmentation, compartmentalization of cytoplasmic particles into apoptotic bodies, and phagocytosis by macrophages without inducing an inflammatory response.\n*   In contrast, cell necrosis involves a violation of the cell membrane, release of cytoplasmic products, and a subsequent inflammatory response."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Spontaneous regression of cancer due to the immune system is best exemplified by which of the following malignancies?",
      "options": [
        "A. Melanoma",
        "B. Thymoma",
        "C. Colon",
        "D. Pancreas",
        "E. Lung"
      ],
      "answer": "A",
      "explanation": "*   Spontaneous regression of malignant tumors refers to cases of complete or partial tumor destruction and/or involution without any particular therapy.\n*   This occurs in most cancers, but certain tumors regress more commonly.\n*   Melanoma, testicular germ cell tumors, and neuroblastoma are cancers that regress with increased frequency.\n*   This phenomenon is attributed to a combination of cell apoptosis, immune mediators, and the tumor microenvironment.\n*   Regression can occur in both primary tumors and metastases.\n*   The remaining answer choices regress less frequently."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the immune response to bacterial infection?",
      "options": [
        "A. CD-4 T cells transform B cells into plasma cells.",
        "B. Class 1 major histocompatibility complex (MHC) molecules harboring bacterial-derived proteins are expressed on the surfaces of antigen-presenting cells.",
        "C. Cells infected by bacteria are destroyed by cytotoxic T cells.",
        "D. Activated CD-4 T cells secrete antibodies.",
        "E. Class-2 MHC cells are present on all nucleated cells."
      ],
      "answer": "A",
      "explanation": "*   Humoral immunity to bacterial invasion is initiated by antigen-presenting cells (dendrites, macrophages, and B cells).\n*   This process begins with endocytosis and processing of bacterial proteins, which are then coupled to class-2 MHC molecules and expressed on the cell surface.\n*   CD-4 T cells recognize the bacterial protein motif and bind to the receptor.\n*   Newly activated CD-4 T cells then help transform B cells (bound to the bacterial antigen) into plasma cells (secreting antibodies) and memory B cells.\n*   The immune response to a viral infection works differently: all nucleated cells (except red blood cells) have class 1 MHC molecules.\n*   Class 1 MHC molecules bind to viral proteins and translocate to the cell surface, where they are recognized by CD-8 or cytotoxic T cells and marked for destruction."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the immediate cellular response to a paper cut injury?",
      "options": [
        "A. L-selectin is expressed on endothelial cells.",
        "B. The majority of the cytokine response is released by circulating platelets.",
        "C. ICAM expressed on endothelial cells binds to beta-2 integrin on leukocytes.",
        "D. This is not affected by diabetes mellitus.",
        "E. Integrins are involved in platelet rolling, while selectins are involved in platelet adhesion."
      ],
      "answer": "C",
      "explanation": "*   The immune response to a paper cut involves three stages: platelet rolling, tight adhesion, and emigration.\n*   Damaged endothelial cells express E-selectin, which binds to P-selectin on platelets and L-selectin on leukocytes, promoting weak binding and platelet rolling.\n*   Circulating macrophages release cytokines and chemokines, inducing the expression of various endothelial receptors.\n*   ICAM, a type of integrin, is a newly expressed endothelial receptor that promotes stable binding for platelet adhesion by binding to beta-2 integrin on leukocytes.\n*   PECAM and VCAM are expressed on the endothelial surface, facilitating the emigration of circulating leukocytes.\n*   Selectins are involved in platelet rolling, while integrins are involved in platelet adhesion.\n*   This response is dampened in patients with diabetes and those with chronic steroid use.\n*   Leukocyte adhesion deficiency, characterized by defunct integrin molecules, leads to recurrent bacterial infection and delayed umbilical cord sloughing."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding cyclosporine?",
      "options": [
        "A. It is primarily excreted by the kidneys.",
        "B. It is associated with thrombocytosis.",
        "C. It inhibits the release of IL-2.",
        "D. It inhibits activation of B cells.",
        "E. It is more potent than FK-506."
      ],
      "answer": "C",
      "explanation": "*   Cyclosporine is an immune modulator commonly used in transplant patients as maintenance therapy, largely replaced by tacrolimus (FK-506).\n*   It works by inhibiting cyclophilin protein on calcineurin, thereby inhibiting the synthesis of IL-2 and IL-4, which are interleukins that activate T cells.\n*   FK-506 works by a similar mechanism but is considered more potent than cyclosporine.\n*   Adverse effects of cyclosporine include nephrotoxicity, gingival hyperplasia, hirsutism, and thrombocytopenia (not thrombocytosis).\n*   The drug undergoes hepatic metabolism and is primarily excreted in bile, with less than 5% undergoing renal excretion."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 28-year-old male with type A blood develops a high fever, chills, jaundice, and hematuria shortly after receiving a blood transfusion. The nurse checks the blood bag and realizes this patient received type B donor blood. Which of the following is true regarding this condition?",
      "options": [
        "A. This is an example of serum sickness.",
        "B. He developed a T-cell mediated response.",
        "C. Direct Coombs test will demonstrate IgG bound to red blood cells.",
        "D. His symptoms are a result of an overexaggerated response from basophils and mast cells.",
        "E. This response does not involve complement activation."
      ],
      "answer": "C",
      "explanation": "*   The patient has developed a type II hypersensitivity reaction from receiving an incorrect blood type transfusion due to ABO incompatibility.\n*   Type II hypersensitivity is an IgG- and IgM-mediated response resulting in complement activation (opsonization), cell lysis, and phagocytosis.\n*   In the case of ABO incompatibility, patients will present with widespread hemolysis.\n*   A direct Coombs test will demonstrate IgG bound to red blood cells.\n*   Type I hypersensitivity is an IgE-mediated reaction that occurs when a stimulus activates eosinophils, which in turn activate mast cells and basophils, resulting in a systemic release of bradykinin, serotonin, and histamine.\n*   Type III hypersensitivity is an immune complex-mediated response (e.g., serum sickness, systemic lupus erythematosus).\n*   Type IV hypersensitivity is a delayed, T-cell mediated response (e.g., tuberculosis skin test, contact dermatitis)."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding cytokines?",
      "options": [
        "A. IL-2 is a major endogenous pyrogen.",
        "B. IL-6 is considered a potent stimulus for the production of acute phase reactants.",
        "C. IL-10 is responsible for enhancing macrophage function.",
        "D. Neutrophils are considered the largest producers of tumor necrosis factor (TNF)-alpha.",
        "E. During an inflammatory response, C-reactive protein production is dampened."
      ],
      "answer": "B",
      "explanation": "*   Cytokines are largely responsible for cell signaling during an inflammatory response.\n*   TNF-alpha and IL-1 are the two main cytokines propagating the inflammatory response during the early stages of injury and/or infection.\n*   Macrophages are considered the largest producers of these cytokines.\n*   IL-1 is considered the primary endogenous pyrogen, regulating the thermal set point in the hypothalamus and causing fever.\n*   IL-2 is primarily produced by T cells and helps recruit and activate additional T cells and enhances interaction between T and B cells.\n*   IL-6 is the most potent stimulus for hepatic acute phase reactants, including C-reactive protein, amyloid A, and ceruloplasmin.\n*   In contrast, prealbumin and transferrin production decrease during inflammation.\n*   IL-10 is considered the largest inhibitor of the inflammatory response, including the function of macrophages."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding natural killer (NK) T cells?",
      "options": [
        "A. NK T cells can commence cell destruction with the presence of both an activation signal and an inhibitory signal on the target cell surface.",
        "B. NK T cells can commence cell destruction with the absence of both an inhibitory signal and an activation signal on the target cell surface.",
        "C. NK T cells can only commence cell destruction when the target cell surface has both the presence of an activation signal and the absence of an inhibitory signal.",
        "D. IL-12 inhibits activation of NK T cells.",
        "E. NK T cells require activation by lymphocytes."
      ],
      "answer": "C",
      "explanation": "*   NK T cells are part of the innate immune system and are responsible for destroying tumor cells and/or virally infected cells.\n*   They do not depend on helper T-cell activation, relying on direct recognition of certain receptor motifs on the target cell surface.\n*   Their activity can be enhanced by IL-12.\n*   Activation of NK T cells for destruction requires a two-step process: the presence of an activation signal (produced by most infected/transformed cells) and the absence of an inhibitory signal.\n*   The inhibitory signal is the class 1 MHC molecule expressed on the surface of all nucleated cells.\n*   When an NK T cell recognizes a self-class 1 MHC molecule, it does not commence cell destruction.\n*   Cancer or virally infected cells often down-regulate production of class 1 MHC molecules to evade NK T cell destruction."
    }
  ]
}
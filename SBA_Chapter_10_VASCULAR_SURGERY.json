{
    "chapter_name": "VASCULAR SURGERY",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "You assess a patient with a plantar ulcer who has poorly controlled diabetes. From the list of options below, select the most likely management plan.",
            "options": [
                "A. Optimise glycaemic control",
                "B. Reduce plantar pressure by ensuring good footwear",
                "C. Ensure podiatry input",
                "D. Assess vascularity of the limb",
                "E. All of the above"
            ],
            "answer": "E",
            "explanation": "Diabetic foot ulceration occurs in 15% of diabetics and is a common cause for major and minor amputations. Many ulcers are preventable if there is good communication between the patient, podiatrist and multidisci- plinary foot team. Patients are screened on a yearly basis and are risk assessed as high, medium or low. These patients need to be signposted to the appropriate foot care providers and educated that if ulceration does occur, then help should be sought within 24 hours. Optimisation of gly- caemic control, reducing pressure at ulcer sites by offloading devices, ensuring podiatry input and assessing the neurovascular status of the foot is essential. Common causes of ulceration are poor vascularity, incomplete sensation and abnormal bone structure or gait of the patient."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "As part of the peripheral vascular examination, you are asked to record the ankle-brachial pressure index of the patient. Which one of the following values reflects a normal ankle-brachial pressure index?",
            "options": [
                "A. Between 0.9 and 0.6",
                "B. Greater than 1.3",
                "C. Between 0.6 and 0.3",
                "D. Greater than or equal to 1.0",
                "E. Less than or equal to 0.3"
            ],
            "answer": "D",
            "explanation": "The ABPI is measured by dividing the highest systolic blood pressure measured in any ankle artery (either the dorsalis pedis or posterior tibial artery) by the systolic pressure at the brachial artery. This test is performed using a Doppler and blood pressure cuff (sphygmoma- nometer). The cuff is inflated above the artery while the Doppler probe, connected to a pulse volume recorder, is placed just below or at the site of the artery. The cuff is gently deflated and the pressure, at which the first pulse sound is heard, is noted.\nAn ABPI greater than or equal to 1.0 is usually normal. ABPI values between 0.9 and 0.6 usually suggest peripheral vascular occlusive dis- ease such as intermittent claudication. This is progressive symptomatic arterial occlusion of the lower limbs due to atherosclerosis, resulting in pain on movement which is relieved by rest. Values between 0.6 and 0.3 usually suggest critical limb ischaemia and these patients usually have limb pain at rest. An ABPI less than or equal to 0.3 implies impending gangrene of the affected limb.\nPatients with diabetes or renal disease may have ABPI of greater than 1.3 which implies that the lower limb arterial walls may be calcified and are incompressible."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "A 55-year-old man, with a positive smoking history, presents to you in the out- patient clinic with pain in the lower leg which is brought on by walking. The pain is cramping in nature, well localized to the left calf only, and is relieved by rest. The patient has noticed that his walking distance has progressively decreased because of the cramps in the left calf. There are no abnormal findings on physical examination. What is the most appropriate way to investigate the patient's symptoms?",
            "options": [
                "A. Measure the ankle-brachial pressure index",
                "B. Angiography",
                "C. Radiograph of the lower limbs",
                "D. Duplex ultrasound",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "The iliac and lower limb arteries are commonly affected in PVD. The main effect of PVD, of which the commonest cause is atherosclerosis, is to restrict blood flow to the limbs due to stenotic narrowing or occlusion of the arterial lumen. An increase in metabolic demand from muscles due to an increase in physical activity cannot be met due to the reduced blood flow and results in ischaemia. Patients are usually asymptomatic until a critical arterial stenosis is attained (75% of the cross-sectional area or 50% of the vessel diameter is reached).\nIntermittent claudication can be clinically described as cramp-like pain experienced in the muscles of the leg on walking, which is alleviated in minutes of resting. Cramp-like pain of intermittent claudication can be experienced in the calf, thigh or buttock muscles depending on the level at which the arterial occlusion is present.\nThe ABPI may be used as a first line diagnostic investigation for PVD in patients presenting with lower limb symptoms. This test is non- invasive, quick and cheap and is usually performed in an outpatient clinic setting. Duplex ultrasound scanning enables assessment of the distribution and extent of the disease and allows the risks and benefits of intervention to be discussed with the patient. A plain film radiograph of the lower limbs may not reveal any abnormalities. Angiography is not used as a first line investigation in the initial stages of forming a diagnosis of PVD. It is used for surgical planning in patients who are to undergo surgical or radiological interventional revascularization."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "A 60-year-old woman has been diagnosed as having claudication of the lower limbs which does not impair her lifestyle. The patient is a smoker and has hyper-lipidaemia for which she is taking a ‘statin'. You are asked to discuss with the patient the treatment options available to her. From the list below, choose the recommended treatment option for this patient.",
            "options": [
                "A. Angioplasty",
                "B. Amputation",
                "C. Lower limb bypass",
                "D. Start an antiplatelet, increase exercise and quit smoking",
                "E. Continue with the cholesterol-lowering medication and follow up in outpatients in 3 months"
            ],
            "answer": "D",
            "explanation": "A majority of patients who are initially diagnosed with vascular clau- dication will usually be counselled about their condition, and in most cases, no further treatment is required providing the claudication is not severe. Risk factors (e.g. hyperlipidaemia, smoking, poor exercise, and obesity) are usually identified and the patient is asked to correct these as part of managing their condition. Exercise and smoking ces- sation are factors which, if taken up by the patient, will most likely improve symptoms of claudication as well as decreasing overall car- diovascular risk.\nStructured exercise programmes are relatively cheap and safer than endovascular intervention (e.g. percutaneous transluminal angioplasty) and surgery, and have shown to be beneficial if followed for at least 6 months. Patients are asked to walk to near maximum pain tolerance as well as increasing their maximum walking distance; compliance is usually a confounding factor.\nWhere claudication is concerned, percutaneous transluminal angioplasty and surgery are usually offered to patients after careful assessment of long-term efficacy of intervention, balanced by procedural risks and costs. These are patients who have severe claudication that has major implications on their social and working lifestyle (e.g. if the patient is unable to work or unable to look after themselves without help)."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "You see a 60-year-old man with a history of coronary heart disease, diabetes and hyperlipidaemia in your clinic. The patient has found it increasingly hard to walk due to the gradual increase in intensity of the cramping pain he experi-ences in his right leg on walking, which is relieved by resting a few minutes. In addition, he tells you that cramps have started to occur at night when he is sleeping. On examination of the right leg, you notice that there is a ‘punched out’ ulcer on the right heel. The right posterior tibial and dorsalis pedis pulses are weak. You suspect that this patient has critical limb ischaemia. What is the most appropriate next line investigation that would support your diagnosis?",
            "options": [
                "A. Computed tomography angiography",
                "B. Ankle-brachial pressure index",
                "C. Radiograph the lower limbs",
                "D. Magnetic resonance angiography",
                "E. None of the above"
            ],
            "answer": "B",
            "explanation": "This patient is showing signs of critical limb ischaemia which is char- acterized by gradual worsening of claudication progressing to rest pain, ulceration and ultimately gangrene. Nocturnal limb pain, which occurs when the patient is asleep, results from a decrease in cardiac output, which in turn decreases systemic blood pressure, leading to a reduc- tion of perfusion pressure on the foot; hence ischaemic pain ensues. The ABPI would be the most appropriate next line investigation in this scenario. An ABPI between 0.6 and 0.3, coupled with a clinical history of rest pain, is highly suggestive of critical limb ischaemia.\nDoppler ultrasound, which was not an option in the question, is also another non-invasive investigation that can be performed to locate the stenosed area and confirm diagnosis. A plain film radiograph of the lower limbs would not be informative. Magnetic resonance imaging and CT angiography are possible investigations, but would not classically be the next line in this situation."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "You are asked to see a 67-year-old woman admitted with severe limb ischaemia. Your senior colleague asks you to examine the patient and report your findings. What are the two most likely clinical features that suggest the patient has severe limb ischaemia?",
            "options": [
                "A. Pulselessness and pain",
                "B. Paraesthesia and paralysis",
                "C. Perishingly cold limb and pallor",
                "D. Pallor and pain",
                "E. Paraesthesia and pallor"
            ],
            "answer": "B",
            "explanation": "The clinical signs and symptoms associated with acute limb ischaemia can be remembered using the list of ‘6 Ps':\n• Pain\n• Pallor\n• Pulselessness\n• Perishingly cold\n• Paresthesia\n• Paralysis\nParaesthesia and paralysis are late signs of severe limb ischaemia and urgent surgical intervention is required as these features threaten loss of the limb. Acute limb ischaemia results either from a thrombus in situ (~40% of cases), an embolus (~38%) or graft/angioplasty occlusion (~15%) or trauma."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "A 65-year-old man presents for the first time to your clinic with a painless wound in his right leg, which has been present for over 2 months. On examina-tion you notice a 3 cm x 4 cm leg ulcer in the gaiter area of the right leg, covering the medial malleolus. The shallow bed of the ulcer is covered with granulation tissue, which is surrounded by sloping edges. There is no history of trauma. From the list below, choose the most likely diagnosis.",
            "options": [
                "A. Arterial leg ulcer",
                "B. Neuropathic ulcer",
                "C. Venous ulcer",
                "D. Traumatic ulcer",
                "E. Neoplastic ulcer"
            ],
            "answer": "C",
            "explanation": "Venous ulcers: These account for 80% of all skin ulcers, the majority being painless. They occur due to venous hypertension, which develops as a result of either increased hydrostatic pressure due to valve failure and weight of blood pressing distally, or due to the transmission of blood from the deep venous system to the superficial system (subcu- taneous veins and dermal capillaries) through incompetent valves. It is thought that white cells become trapped, leading to an increase in peripheral resistance and tissue ischaemia. Another school of thought postulates that tissue ischaemia develops due to the formation of fibrin plugs. Patients with venous ulcers usually have varicose veins, and 95% of venous ulcers occur in the gaiter area and characteristically around the medial malleoli. Venous ulcers may be discrete or circumferential, shallow, with irregular sloping edges and prominent granulation tissue in the bases. Prolonged ulceration with lipodermatosclerosis gives the leg a look of an inverted champagne bottle.\n• Arterial ulcers: These can be painful, have deep bases and bear a 'punched out' appearance. They are well demarcated and usually occur on the toes, heels and bony prominences of the foot. The base of the arterial ulcer may be pale, non-granulat- ing and necrotic. The surrounding skin may be cool to touch, hairless, thin, brittle, and erythematous and have a shiny texture. There are usually associated stigmata with peripheral arterial disease.\n• Neuropathic ulcers (cross-over with patients with peripheral arterial disease and diabetes): Patients with diabetes are more likely to get neuropathic ulcers. These occur at high pressure sites (i.e. the heel and metatarsal heads) and usually appear cleanly punched out of the surrounding callous. The patient may be suffering from neuropathic pain in the leg and the foot may be numb. Neuropathic ulcers are often painless and the patient may not have noticed them.\n• Traumatic ulcers: The patient will usually present with symmetrical damage, i.e. across the toes and margins of the feet due to wearing tight shoes. Other causes include burns, injections, sclerosants and cortisone.\n• Malignant ulcers: This can either be due to a primary or a secondary malignant lesion or may be caused by a malignant change in a pre-existing ulcer (e.g. Marjolin's ulcer). Some examples of malignant ulcers are epithelioma, basal cell carcinoma, squamous cell carcinoma and lymphoma."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "You are asked to see a 56-year-old homeless man who presented to the emer-gency department with a severe pain in his right leg, which started over 12 hours ago. On examination, the right leg is pale in colour in comparison with the left leg from below the knee to the toes and has fixed mottling. The right leg is cold and the popliteal, posterior tibial and dorsalis pedis pulses are absent. There is no sensation in the right leg and the patient is unable to flex the knee or move the toes due to fixed flexion deformities. In addition, the patient is apyrexial and heart rate is 85 beats per minute and regular. What is the most likely diagnosis?",
            "options": [
                "A. Critical limb ischaemia",
                "B. Acute limb ischaemia",
                "C. Intermittent claudication",
                "D. Necrotizing fasciitis",
                "E. Spinal claudication"
            ],
            "answer": "B",
            "explanation": "This patient has classic clinical signs of an acute ischaemic limb. The patient has the ‘6 Ps' (pain, pallor, pulselessness, paraesthe- sia, paralysis and perishingly cold) which indicate that the limb is unsalvageable.\n• Necrotizing fasciitis is an infection of the deep layers of the skin and subcutaneous tissues which spreads within the fascial plane of the subcutaneous tissue. Of the many organ- isms that cause this condition (group A streptococcus, Vibrio vulnificus, Clostridium perfringens, Bacteroides fragilis), group A streptococcus is the most common. The infection usually starts at the site of local trauma and clinical features may include severe pain in the affected area and evidence of cellulitis, followed by swelling, erythema, vesicle and bul- lae formation on the skin surface; these may be absent if the bacteria are deep within the tissue. Patients are usually very ill with fever and, sometimes, diarrhoea and vomiting. Blood cultures and aspiration of pus at the site of the infected tis- sue can confirm the diagnosis. Prompt antibiotic therapy is required and the patient should be sent for emergency surgical debridement.\n• Spinal stenosis/claudication occurs as a result of nerve root compression (a history of recent trauma may be evident) at the level of the lumbosacral vertebra and usually affects patients in a dermatomal distribution. Weakness and paraesthesia of the limb supplied by the compressed nerve may be present. The pain is of rapid onset and made worse by movement and may be relieved when the patient sits down. Peripheral vascular examination is usually normal and diagnosis is made using MRI, although a plain film radiograph may show signs of vertebral disk space narrowing."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "From the list below, select the most appropriate treatment option for the patient in Question 8.",
            "options": [
                "A. Percutaneous transluminal angioplasty",
                "B. Revascularization through endarterectomy",
                "C. Revascularization through bypass grafting",
                "D. Endoluminal stent grafting",
                "E. Amputation"
            ],
            "answer": "E",
            "explanation": "In addition to having pain, pallor, absent pulses and cold right leg, there is loss of sensation coupled with complete paralysis which indicates that the right limb (below the knee) is completely gangrenous, warranting an amputation procedure.\nIndications for amputation are\n• Useless limb (i.e. fixed flexion deformities, vestigial fingers)\n• Dead limb (i.e. extensive tissue loss due to trauma or wide- spread necrosis or peripheral vascular disease that cannot be treated with reconstructive surgery)\n• Lethal limb (i.e. malignancy or ischaemia)\nTypes of amputations include:\n• Hind quarter (the entire lower limb is removed from the sacroiliac joint – Not commonly performed)\n• Above knee amputation\n• Through knee amputation\n• Below knee amputation (knee joint left intact)\n• Foot amputation\n• Forefoot amputation (transmetatarsal amputation)\n• Metatarsal amputation – A ray amputation may be used if necrosis is present in the digits and the muscles of the foot. The incision is made from either side of the affected digit(s) to the base of the metatarsal. This creates a ‘V shape' and narrows the foot.\n• Toe amputation – Removal of the head of the metatarsal (requires revascularization in order to be successful)"
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "You see a 50-year-old woman with a history of atrial fibrillation, who presents to the emergency department with a sudden onset of pain in the left forearm. The pain started 3 hours ago, and has been increasing in intensity since. On examination, the left forearm is cold and pale. The left axillary pulse is present, but distal pulses are absent. Movement and sensation are intact in the left hand. There is no history of trauma. What is the most appropriate next step in this patient's management?",
            "options": [
                "A. Commence a heparin infusion and send the patient to theatre for vascular intervention",
                "B. Give analgesia and manage the patient in the emergency department",
                "C. Administer oral aspirin and send the patient to theatre for vascular intervention",
                "D. Request an angiogram",
                "E. Request anteroposterior and lateral plain radiographs of the left forearm"
            ],
            "answer": "A",
            "explanation": "Emboli are the commonest cause of acute upper limb ischaemia. Occlusive disease leading to in situ thrombosis is rare in the upper limbs. Acute limb ischaemia is a surgical emergency and needs prompt surgical intervention. The classic clinical picture of severe pain, pal- lor, coldness with absent pulses, loss of sensation and paralysis points to acute limb ischaemia (the ‘6 Ps': pain, pallor, pulselessness, per- ishingly cold, paraesthesia and paralysis). The patient has a history of atrial fibrillation, which most likely points to the origin of the embolus.\nMovement and sensation of the left upper limb are preserved, indi- cating that the limb is salvageable. The fact that the left axillary pulse is present and distal pulses absent suggests that the level of the occlusion is in the brachial artery. Although collateral blood supply to the left arm will keep the limb viable, revascularization of the bra- chial artery will need to be initiated in order to alleviate symptoms and prevent claudication. Therefore, definitive management includes commencing a heparin infusion and sending the patient immediately to theatre for surgical exploration and embolectomy using a Fogarty catheter.\nThe anticoagulant effects of aspirin are not as effective as heparin. Aspirin therefore is not commonly used in the setting of interven- tion of acute limb ischaemia. Requesting an angiogram will delay the definitive management of this patient and should not take priority over surgical intervention. There is no history of trauma, making an under- lying fracture unlikely; and being a surgical emergency, managing the patient in A&E with analgesia is wrong."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "In association with a diagnosed popliteal aneurysm, a patient is more likely to have",
            "options": [
                "A. A berry aneurysm",
                "B. A femoral aneurysm",
                "C. An aortic aneurysm",
                "D. A carotid artery aneurysm",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Popliteal aneurysms account for 80% of all peripheral aneurysms and patients diagnosed with popliteal aneurysms (of which 50% are bilateral) are more likely to have an associated aortic aneurysm (approximately 40% of cases) compared with other types of aneu- rysms. Reasons for operative intervention are size, distal embolisa- tion, or occlusion."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "You see a 65-year-old man in your clinic who is under surveillance for an abdominal aortic aneurysm. The patient smokes 20 cigarettes a day and has a 25-year history of poorly controlled hypertension. From the list below, select the most appropriate investigation that can be used to monitor the progression of this patient's condition.",
            "options": [
                "A. Computed tomography scan of the abdomen",
                "B. Angiography",
                "C. Abdominal plain film radiography",
                "D. Magnetic resonance imaging",
                "E. Ultrasound"
            ],
            "answer": "E",
            "explanation": "An aneurysm can be defined as an abnormal permanent widening of a portion of a weakened or diseased blood vessel. It can occur in the aorta (most common), popliteal vessels (arterial and venous), circle of Willis, mesenteric arteries (rare) and splenic arteries (rare). The exact aetiology of aneurysms is unclear, although they are associated with hypertension, atherosclerosis, connective tissue disorders and trauma. Abdominal aortic aneurysms are common in the elderly (over 60 years old) with men more commonly affected than women. A patient with an AAA usually presents with a pulsatile and expansile mass visible in the abdomen. Most AAAs are asymptomatic and discovered on either routine abdominal examination or by ultrasonography.\nUltrasound scanning is usually used to screen for, and monitor the growth of, AAAs. CT imaging is regarded as the investigation of choice in terms of diagnostic confirmation, defining aortic size, aneurismal position, that is, assessing the extension of the aneurysm into the suprarenal aorta. It has a sensitivity of nearly 100% where AAAs are concerned. Once an AAA is diagnosed, and is found to be less than 5.5 cm, the patient is routinely monitored. Ultrasound scanning (safe, non-invasive and usually requiring no patient preparation) is preferred for screening and monitoring patients with abdominal aortic aneu- rysms. Abdominal plain film radiography may show calcification of the abdominal aortic walls (this may suggest an AAA) but will be of no use in terms of screening and diagnosis. The role of angiography is uncer- tain in the assessment of patients with AAAs; it is invasive, and carries potential renal and embolic complications."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "During a ward round you are asked about the conditions that must be met in order to qualify a patient for elective abdominal aortic aneurysm repair. From the list below, select the most likely abdominal aortic aneurysm size that war-rants elective repair providing the patient is fit for surgery.",
            "options": [
                "A. Greater than 5.0 cm",
                "B. Greater than 5.5 cm",
                "C. Less than 5.0 cm",
                "D. Greater than 4.5 cm",
                "E. Less than 5.5 cm"
            ],
            "answer": "B",
            "explanation": "Patients diagnosed with an AAA greater than or equal to 5.5 cm, who are otherwise fit for surgery, qualify for elective repair of the AAA. Abdominal aortic aneurysms greater than 5.5 cm carry a significant risk of rupture and mortality. Therefore, prompt surgical intervention is required. The risk of mortality secondary to surgical intervention is lower when compared with mortality resulting from a ruptured aneu- rysm of greater than 5.5 cm in diameter.\nAbdominal aortic aneurysms which are less than 5.5 cm are usually monitored with yearly ultrasound scanning. Abdominal aortic aneurysms up to 5 cm in size grow at an average rate of 1-4 mm per year, whereas those greater than 5.0 cm grow at a rate of 4-6 mm per year. Other indications for surgical repair year and the rate of the AAA of greater than 1 cm per year and the aneurysm becoming symptomatic (e.g. back pain, distal embolisation of one or both legs causing acute ischaemia) or tender. In addition, if a patient suddenly experiences an acute onset of back pain associated with hypotension, tachycardia and hypovolaemic shock, this indicates rupture of the AAA and emergency surgery is war- ranted, which has a mortality rate between 50% and 75%.\nElective surgical repair of an AAA can be performed either via the traditional laparotomy route, whereby a Dacron artificial graft is used to replace the aneurysmal aorta, or via the minimally invasive route known as endovascular aneurysm repair. EVAR is increasingly being practised for the elective repair of AAAs. EVAR involves accessing the femoral artery and, under radiological guidance, and endoluminal stent- graft is placed at the site of the aneurysm. Successful EVAR leads to a shorter hospital stay and decreased frequency of blood transfusions. In addition, EVAR can be performed in patients who are unfit for surgery, such as the elderly or those with other significant co-morbidities."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 41-year-old woman, diagnosed with varicose veins in the left leg, presents to your clinic with a 2-month history of severe pain in the left leg on prolonged standing. The patient is obese and the pain has affected her working and social lifestyle and she asks you about the most effective treatment option. From the list below, choose the most effective treatment option that you would discuss with this patient.",
            "options": [
                "A. Use of compression stockings",
                "B. Injection sclerotherapy",
                "C. Surgery",
                "D. Weight loss",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Patients with asymptomatic varicose veins can either be treated conser- vatively (i.e. patient education: avoiding long periods of standing; use of compression stockings; losing weight; frequent periods of walking – this helps to aid superficial to deep venous return in the legs) or by injec- tion sclerotherapy, which is particularly effective in below-the-knee varicosities. Sclerosants, such as ethanolamine and sodium tetradecyl, work by increasing the amount of intravascular granulation tissue, resulting in the occlusion of the vein lumen. Sclerosant is injected into the superficial varicosities at various sites, after which compres- sion bandaging is applied for a few weeks to prevent the formation of thrombi. Other techniques include the injection of sclerosant foam into the superficial venous system. The injection is placed in a superficial varicose vein (at one single site) and the distribution of foam is moni- tored using ultrasound. Sclerosant therapy may cause long-term hypo/ hyperpigmentation and ulceration at the injection site. If the sclerosant is passed into the femoral vein, anaphylaxis may ensue.\nIf quality of life is severely affected by varicose veins (i.e. severe impact on working and social lifestyle due to leg pain, venous ulceration, thrombophlebitis) surgery can be offered. Surgery is the most effec- tive treatment for large varicose veins, and aims to correct the deep to superficial reflux and to remove varicosities. Various forms of surgery for varicose veins are now available, for example:\n• Ligation of either the saphenofemoral (tributaries of long saphenous vein are also ligated) or saphenopopliteal (ligation of short saphenous vein deep in the popliteal fossa) junctions\n• Multiple avulsions of the varicosities and endoluminal radiofrequency ablation of the long saphenous vein followed by multiple avulsions of superficial varicosities\n• Multiple avulsions of the varicosities and laser ablation of the long saphenous vein followed by multiple avulsions of superfi- cial varicosities\nPostoperatively, compression stockings are worn for several weeks and exercise is encouraged. Patients are able to resume normal daily activi- ties considerably quicker compared with the conventional methods of varicose vein surgery. In this question the patient's quality of life is being affected by the varicose veins in her left lower limb. Surgery is therefore the most appropriate treatment modality, although recurrence rates are approximately 50%."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "A 55-year-old woman, who is obese and has a positive smoking history, is to have varicose vein surgery in the next 12 hours. Your senior colleague asks you to ensure that deep vein thrombosis prophylaxis is commenced. From the list below, choose the most appropriate form of deep vein thrombosis prophylaxis that you would use.",
            "options": [
                "A. Low-molecular-weight heparin",
                "B. Warfarin",
                "C. Aspirin",
                "D. Clopidogrel",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "Low-molecular-weight heparin has been shown to be effective for the use of DVT prophylaxis in those undergoing surgery. It is given subcu- taneously and does not require laboratory monitoring. It should be used with caution in patients with renal dysfunction.\nWarfarin has a prothrombotic effect within the first 48 hours of adminis- tration and usually takes up to 72 hours to exert its antithrombotic effect. It is usually given along with LMWH (where high-risk DVT patients are concerned) and is monitored using the INR (the ratio of a patient's pro- thrombin time to a normal control sample). When the INR reaches 2–3, LMWH can be stopped and warfarin can be continued for 3-6 months postoperatively, depending on the patient's clotting risk. Aspirin and clop- idogrel are not as effective as LMWH and warfarin at preventing venous thrombus. They are preferred in anti-arterial thrombus prophylaxis."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "You are told by your colleague that a 44-year-old woman, who underwent elec-tive right hip replacement, is suspected of having deep vein thrombosis of the left calf. You are asked to carry out a pretest clinical probability score (Wells score) and a D-dimer test. Which is the most likely scenario where deep vein thrombosis can be excluded from your list of differential diagnoses?",
            "options": [
                "A. Wells score of 2 and a positive D-dimer result",
                "B. Wells score of 1 and a positive D-dimer result",
                "C. Wells score of O and a negative D-dimer result",
                "D. Wells score of 3 and a positive D-dimer result",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "described by Virchow (also known as Virchow's triad). The legs are common sites for the development of DVT.\nThere are two main types of DVT: below knee and above knee. Below knee DVTs occur most frequently in the calf veins, with those in the soleal plexus being commonly affected. Above knee DVTs are consid- ered relatively more dangerous than below knee DVTs as there is a higher risk of developing pulmonary emboli.\nThere are numerous risk factors for developing DVTs. The major risk factors include age over 40; pregnancy; obesity; contraceptive pill; clotting abnormalities; malignancy; recent pelvic or orthopaedic surgery; trauma; immobility; long-haul flights; and failure to provide DVT prophylaxis for high-risk patients postoperatively. The majority of patients who have DVT are asymptomatic. If symptoms are present, pain is the commonest followed by swelling of the affected limb. In some cases, distension of the superficial veins with erythema may be present.\nD-dimers are small protein fragments of fibrin (fibrin degradation prod- uct) which are formed when a thrombus is degraded by fibrinolysis. D-dimer blood tests are sensitive but not specific for DVT.\nThe pretest clinical probability (Wells) score (based on a series of ques- tions) is used to assess the probability of a patient having a DVT.\nA score above or equal to 2 is regarded as a ‘likely DVT’ and the patient is treated as suspected DVT. A proximal leg vein ultrasound scan should be carried out within 4 hours of being requested and if the result is neg- ative, a D-dimer test should be carried out. If a proximal leg vein ultra- sound scan cannot be obtained within 4 hours, a D-dimer test should be carried out and an interim 24-hour dose of parenteral anticoagulant should be given; however, the proximal leg vein ultrasound should be performed within 24 hours of being requested. A repeat proximal leg vein ultrasound scan should be performed 6–8 days later for all patients with a positive D-dimer test (and Wells score of 2 or above) and a nega- tive proximal leg vein ultrasound scan.\nA score less than or equal to 1 is regarded as an ‘unlikely DVT’and with this a D-dimer test is performed. If this is positive, the patient should undergo a proximal leg vein ultrasound scan within 4 hours of being requested. If a proximal leg vein ultrasound cannot be performed within 4 hours, the patient is commenced on an interim 24-hour dose of parenteral anticoagulant whilst waiting for an ultrasound scan which should be performed within 24 hours of being requested.\nA DVT can be excluded if the D-dimer result is negative."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "You are told that a 45-year-old woman, who presented to the vascular surgery clinic, has a positive tourniquet test in the left leg. On the basis of the informa-tion conveyed to you, choose the most likely diagnosis that is associated with a positive tourniquet test.",
            "options": [
                "A. Varicose veins",
                "B. Chronic leg ischaemia",
                "C. Deep vein thrombosis",
                "D. Arterial ulcer",
                "E. Acute leg ischaemia"
            ],
            "answer": "A",
            "explanation": "The tourniquet test, a modification of Trendelenburg's test, where the SFJ is occluded using a tourniquet rather than the fingers, is used to assess the level at which venous insufficiency occurs – commonly at the SFJ. This test is used as part of the vascular examination of varicose veins. Varicose are long, tortuous and dilated veins of the superficial venous system and can either be primary, due to congenital abnormal- ity or even absence of valves in the perforator system, or secondary, due to thrombosis of deep or superficial veins, pregnancy, abdominal and pelvic masses and obesity. Although this test is not commonly per- formed, it is worth knowing the principles for the purposes of exams.\nThe patient is asked to lie down on the examination couch and the affected leg is elevated and the varicosities are milked and emptied. After sufficient drainage of the veins, with the patient's leg still ele- vated, a tourniquet is placed as high on the thigh as possible. The patient is then asked to stand up and the rate of filling of the varicosities is assessed. If the varicosities do not fill, it implies that the defect lies above the tourniquet. On the other hand, if the veins refill rapidly, this means that the defect lies below the tourniquet. This has largely been replaced by a venous duplex which is now the gold standard."
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "Your colleague consults you with regard to a 56-year-old patient who has suf-fered an episode of amaurosis fugax. From the list below, choose the most likely site of pathology which may give rise to amaurosis fugax.",
            "options": [
                "A. Vertebrobasilar artery territory",
                "B. Carotid artery territory",
                "C. Posterior communicating artery territory",
                "D. Spinal artery territory",
                "E. Anterior communicating artery territory"
            ],
            "answer": "B",
            "explanation": "Amaurosis fugax, a Greek derived word which means ‘fleeting blind- ness', can be described as transient monocular loss of vision. The description usually given by patients is of a ‘black curtain descend- ing vertically and obscuring vision in one eye'. It usually occurs as a result of atherogenic emboli arising from the carotid artery territory (therefore, option B is the most likely from the list), which unilater- ally obstruct the lumen of the retinal arterial circulation. This leads to decreased blood flow to the retina, resulting in ischaemia.\nOther less common causes of amaurosis fugax are cardiac emboli and temporary vasospasm of the retinal artery (usually occurs in young people during exercise) and atherosclerosis of the ophthalmic artery. Giant cell arteritis causes chronic granulomatous inflammation of the central retinal artery, which can occlude and produce symptoms similar to that of amaurosis fugax."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "You have decided to investigate the symptom experienced by the patient in Question 18. From the list below, select the most appropriate investigation that you would order first to investigate the site of pathology.",
            "options": [
                "A. Magnetic resonance angiography",
                "B. Digital subtraction angiography",
                "C. Computed tomography scan of the head and neck",
                "D. Duplex ultrasound scanning",
                "E. None of the above"
            ],
            "answer": "D",
            "explanation": "Amaurosis fugax is highly suggestive of carotid artery disease (i.e. atherosclerosis of the carotid arteries) and patients will usually undergo duplex ultrasound scanning of the carotid arteries for fur- ther assessment. In comparison with DSA, the duplex ultrasound scan is cheap, time efficient and non-invasive. Therefore, the duplex scan is considered the mainstay of an initial assessment. MRI angi- ography is used, but is usually performed after screening with duplex ultrasound scanning. Plain CT scanning of the head (and neck) is not usually recommended for the initial assessment of carotid artery disease."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "You are in the vascular surgery outpatient clinic explaining the indications for undergoing carotid endarterectomy to a patient. From the list below, select the most likely scenario where carotid endarterectomy is likely to be indicated.",
            "options": [
                "A. Symptomatic carotid artery stenosis of greater than 50%",
                "B. Asymptomatic carotid artery stenosis of between 70% and 80%",
                "C. Asymptomatic carotid artery stenosis of between 50% and 60%",
                "D. Symptomatic carotid artery stenosis of less than 50%",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "Studies have shown that patients who are otherwise well, but have symptomatic carotid artery stenosis (i.e. transient ischaemic attacks and amaurosis fugax) greater than 50% are good candidates for carotid endarterectomy; the procedure carries a morbidity and mortality rate of approximately 3%. If this patient group is given optimal medical ther- apy (i.e. lipid-lowering medication and anti-hypertensives coupled with stopping smoking and an increase in physical activity) after the carotid endarterectomy, this reduces the risk of stroke by 6- to 10-fold. On the other hand, if patients who fall into this category are treated medi- cally, rather than surgically, they have a significant increased chance of developing a stroke.\nPatients with a symptomatic carotid stenosis of 50%–70% are usually given optimal medical therapy first. If symptoms continue, carotid endarterectomy is warranted within 48 hours. Patients with symp- tomatic carotid stenosis of less than 50% are usually given optimal medical therapy, and if symptoms persist they are usually referred for investigations.\nAsymptomatic patients with carotid stenosis greater than 80% are can- didates for carotid endarterectomy, although this is a controversial topic."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "The most common postoperative complication associated with carotid endarter-ectomy is",
            "options": [
                "A. Surgical site infection",
                "B. Cranial nerve injury",
                "C. Stroke",
                "D. Hypertension",
                "E. Patch rupture"
            ],
            "answer": "D",
            "explanation": "Approximately 66% of patients who undergo carotid endarterectomy suffer from postoperative hypertension (aetiology unclear). Therefore, close control of blood pressure is warranted within usually the first 72 hours of postoperative care. The risk of stroke ranges from 3% to 8%, of which two-thirds are due to postoperative carotid stenosis and one- third are because of intracranial haemorrhage. Cranial nerve injury occurs in approximately 5% of patients. Wound infection and patch rupture occur in approximately 1% of procedures."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "From the list below, select the most appropriate investigation for the prompt diagnosis of an aortic dissection.",
            "options": [
                "A. Electrocardiogram",
                "B. Echocardiogram",
                "C. Computed tomography scan",
                "D. Chest radiograph",
                "E. Magnetic resonance imaging"
            ],
            "answer": "C",
            "explanation": "Providing the patient is stable, the CT scan is used for rapid diagnosis of an aortic dissection although MRI has a greater sensitivity.\nAn aortic dissection, a surgical emergency, can be defined as a split in the intimal lining and internal portion of the tunica media of the aorta. Blood then passes into the media and extends either proximally or dis- tally leading to the formation of a double lumen (occluding important branches of the aorta: coronary, carotid or renal arteries) or rupture into the pericardium (leading to cardiac tamponade) or mediastinum (resulting in a fatal haemorrhage) or affecting the attachments of the aortic valve (leading to aortic incompetence). The most common site for an aortic dissection is in the arch of the aorta.\nSeventy per cent of aortic dissections affect the ascending aorta (type A) while 30% affect the descending aorta (type B). Congenital causes include associations with Marfan's disease and Ehlers-Danlos syn- drome. Acquired causes include hypertension and atherosclerosis. Patients usually present with sudden onset of severe tearing chest pain that radiates to the back between the scapulae. The pain may radiate to the neck, shoulder or abdomen. Associated symptoms include short- ness of breath, dizziness, hemiplegia (carotid involvement) and hae- maturia (renal involvement). The patient may be pale, sweaty (signs of shock) and there may be differing blood pressure measurements in each arm with the disappearance and reappearance of distal pulses. Fundamental aspects of management include fluid resuscitation while maintaining systolic blood pressure below 100 mmHg (to prevent excessive blood loss), cross-matching 10 units of blood, blood tests (full blood count, urea and electrolytes and coagulation screen) and call for senior help. Usually type A dissections are treated surgically due to high risk of tamponade. Type B dissections tend to be managed conservatively, but secondary symptoms may necessitate an endovas- cular approach."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "Raynaud's syndrome can be caused by which one of the following antihypertensives?",
            "options": [
                "A. α-blockers",
                "B. Angiotensin-converting enzyme inhibitors",
                "C. β-blockers",
                "D. Calcium channel blockers",
                "E. Angiotensin receptor blockers"
            ],
            "answer": "C",
            "explanation": "Raynaud's disease (primary Raynaud's – idiopathic cause) can be described as a syndrome of unknown aetiology that causes digital isch- aemia by reflex vasospasm of normal arterioles. It occurs predominantly in women and clinically presents as digital pallor due to vasoconstric- tion, followed by cyanosis (relaxation of arterioles, but not venules) and reactive hyperaemia (a complete reversal of vasospasm).\nRaynaud's syndrome (secondary Raynaud's), which presents as the same clinical features as Raynaud's disease, can occur as a result of scleroderma, systemic lupus erythematosus, polyarteritis nodosa, rheumatoid arthritis, cervical rib, cryoglobulinaemia, polycythaemia and drugs such as β-blockers and ergot alkaloids. Raynaud's syn- drome can be unilateral whereas Raynaud's disease is systemic and occurs bilaterally.\nRaynaud's disease is diagnosed by exclusion of the other causes which may be due to Raynaud's syndrome. Blood tests (such as full blood count, thyroid function tests, liver function tests, cryoglobulins, anti- nuclear antibodies and rheumatoid factor), cold provocation tests and upper limb and digital pressures can be performed to search for an underlying cause. Treatment may be conservative (i.e. remove underly- ing cause, avoid cold, stop smoking), medical (i.e. calcium antagonists, 5-HT antagonists or admission as inpatient and treatment with pros- tacyclin) and surgical (i.e. sympathectomy – although symptoms may return)."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "You see a 26-year-old woman in clinic presenting with lower limb lymphoedema. Which of the following conditions is associated with lymphoedema?",
            "options": [
                "A. Post lymph node dissection",
                "B. Radiotherapy",
                "C. Filarisis",
                "D. Post trauma",
                "E. All of the above"
            ],
            "answer": "E",
            "explanation": "Lymphoedema is classified as primary and secondary. Primary lymph- oedema has a genetic cause and therefore there is a hereditary compo- nent seen in families and is seen more commonly in females. There are many causes of secondary lymphoedema including post lymph node dissection for cancer clearance, post radiotherapy due to infections such as filarisis as well as post trauma. Other recurrent bacterial infections leading to cellulitis can also trigger lymphoedema. Venous disease can lead to swelling secondary to superficial or deep venous incompetence or thrombosis."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "A 45-year-old man presents to A&E with acute onset of abdominal pain. Following clinical assessment, he is found to have acute mesenteric ischaemia. Which of the following is the diagnosis of acute mesenteric ischaemia based on?",
            "options": [
                "A. An elevated lactate",
                "B. A high white cell count",
                "C. A metabolic acidosis",
                "D. Pain out of keeping with the clinical signs",
                "E. Any of the above and a high index of suspicion"
            ],
            "answer": "E",
            "explanation": "This may occur due to an arterial or venous occlusion to the bowel mesentery which, if untreated, leads to bowel infarction and a high risk of mortality. The clinical condition can be diagnosed with a high index of suspicion in an arteriopath, a patient with previous abdominal surgery and documented atrial fibrillation who presents with sudden severe abdominal pain. This is out of keeping with the clinical signs and is associated with a metabolic acidosis, very high white cell count and an elevated lactate. Early diagnosis allows treatment prior to the development of irreversible bowel ischaemia."
        }
    ]
}
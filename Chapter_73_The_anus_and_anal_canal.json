{
    "chapter_name": "The anus and anal canal",
    "questions": [
        {
            "id": 1,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A The junction between the rectum and anal canal is the anorectal ring.",
                "B The puborectalis muscle is an important component of the continence mechanism.",
                "C The external sphincter forms the bulk of the anal sphincter complex.",
                "D. The longitudinal muscle is a direct continuation of the smooth muscle of the outer muscle coat of the rectum.",
                "E The internal anal sphincter is the continuation of the circular muscle coat of the rectum."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "The region where the puborectalis (part of the levator ani) fuses with the external sphincter and the upper end of the internal sphincter is called the anorectal ring. It is the junction between the rectum and the anal canal, the last 4 cm of the alimentary tract. Clinically on rectal examination the anorectal ring can be felt posteriorly as a shelf over which the fingertip can be hooked when the patient is asked to strain.\nThe understanding of the anatomy of the anorectal muscles has been studied by endoanal US and MRI in recent years. The puborectalis is part of the pubococcygeus section of the levator ani. It clasps the gut, forming a U-shaped sling which angles the anorectal junction forward. It blends with the external anal sphincter, the two becoming one single component, which plays an important role in maintaining continence. The external anal sphincter (previously described as consisting of deep, superficial and subcutaneous parts) is an oval muscular tube of striated skeletal muscle well suited to prolonged contraction, forming the major part of the anal sphincter. It is supplied by the pudendal nerve (S2-S4).\nThe longitudinal muscle is a continuation of the outer muscle coat of the rectum strengthened in the upper part by fibres from the puborectalis. It extends distally dividing into several septa, which divide the external sphincter terminating in the perianal skin. It has an important role in defecation in widening the anal lumen and subsequently forming an airtight seal.\nThe internal anal sphincter is an involuntary muscle which is a thickened downward continuation of the inner circular muscle coat of the rectum; the muscle is in a tonic state of contraction. It extends from the pelvic diaphragm to the anal orifice. It is innervated by the autonomic nervous system. It receives non-adrenergic and non-cholinergic fibres, which release the nitric oxide that induces internal sphincter relaxation – a principle used for the treatment of anal fissure with glyceryl trinitrate (GTN) and diltiazem application to relax the internal sphincter."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "The following statements are true except:",
            "options": [
                "A The dentate line (pectinate line) divides the anal canal into an upper two-thirds and lower one-third.",
                "B The mucosa and submucosa above the dentate line form anal cushions.",
                "C The anal glands drain into the anal sinuses and are the source of anal sepsis.",
                "D The lymphatics from the anal canal drain into the inguinal group of lymph nodes.",
                "E The lower part of the anal canal is lined by stratified squamous epithelium."
            ],
            "answer": "D",
            "explanation": "The lymphatics of the anal canal drain to two different sites. Those from the upper end of the anal canal drain upward to join the epicolic nodes of the rectum and then on to the pararectal nodes in the mesorectum. The upward drainage is via nodes along the inferior mesenteric vessels to the preaortic nodes. From the lower half of the anal canal, the lymphatics drain to the superficial and then the deep inguinal group of nodes.\nThe dentate line, an important landmark, divides the rectum into an upper two-thirds and lower one-third developmentally, anatomically and clinically. Embryologically it is the junction between the postallantoic gut above and the proctodeum below. Anatomically it is the site of the crypts of Morgagni (anal crypts, anal sinuses). Anal glands drain through ducts into the crypts, the junction of columnar epithelium above with stratified squamous epithelium below. The clinical significance lies in the fact that the mucosa proximal to the dentate line is not very pain sensitive whereas the distal mucosa is extremely pain sensitive. This means injection of piles higher up will be relatively painless, while the same carried out distally will be very painful.\nThe mucosa and submucosa above the dentate line is in folds or columns containing a radicle of the superior rectal artery and vein. The numbers of these columns vary but they are largest in the left lateral, right anterior and right posterior quadrants of the anal canal where they are called anal cushions – the traditionally described sites of haemorrhoids, which are in effect abnormal enlargement of anal cushions.\nThe anal glands, found in the submucosa and intersphincteric space, is the source of cryptoglandular anal sepsis and fistula-in-ano. The infection drains downward between the internal and external sphincters, appearing as a perianal abscess which on rupturing will form a fistula. The lower part of the anal canal is lined by stratified squamous epithelium and hence extremely sensitive to any minor surgical procedures or surgical conditions; malignancies in this area can take the form of any of those occurring in the skin anywhere else – squamous cell cancer or a malignant melanoma."
        },
        {
            "id": 3,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A The resting tone is a reflection of internal sphincter activity.",
                "B A maximal anal pressure of 60 cm of water is abnormal.",
                "C Pelvic dyssynergia can be identified by evacuatory proctogram.",
                "D Megarectum might be a finding in rectal hyposensitivity.",
                "E Perineal position and descent reflects pelvic floor and pudendal nerve function."
            ],
            "answer": [
                "A",
                "C",
                "D",
                "E"
            ],
            "explanation": "The resting tone reflects the internal sphincter activity, whereas squeeze increment reflects the external sphincter activity. Perineal position and degree of descent on straining are parameters to gauge function of the pelvic floor and pudendal nerve. These can be quantified, and functional anal length can be measured by manometric techniques.\nThe structural integrity of the sphincters can be visualised by endoanal ultrasonography (EUS) to detect external anal sphincter defects by obstetric injury or internal anal sphincter defects after sphincterotomy. Electromyogram (EMG) studies or pudendal nerve-conduction velocity will assess the structural integrity of the sphincters.\nMRI evacuation proctography is a method of assessing the dynamics of defecation. In this procedure radio-opaque pseudo-stool is inserted into the rectum and the patient is asked to rest, squeeze and bear down to evacuate the contents (simulate defecation) under real-time imaging. Pelvic dyssynergia can thus be identified. Rectal hyposensitivity is a diminished perception of rectal distension and might result in megarectum."
        },
        {
            "id": 4,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Imperforate anus are classified into high and low types.",
                "B Fistula with the urethra is uncommon.",
                "C The most common abnormality in girls is a fistula into the vagina.",
                "D The finding of a single perineal orifice suggests a persistent cloaca.",
                "E Meconium on the perineum indicates a low defect."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "The condition is divided into high and low depending on whether the rectum terminates above or below the pelvic floor. The management will obviously be different in each category. Low defects are relatively easier to correct than high ones. In both sexes low defects include rectoperineal fistula, covered anus and anal membrane. In boys the most common abnormality is where the distal rectum is sited within the puborectalis sling but has a fistula with the urethra. In girls the most common abnormality is a rectovestibular fistula where the fistula opens into the posterior vestibule and not the vagina. A single perineal orifice indicates a persistent cloaca where the rectum, vagina and urethra form a confluence.\nIn both sexes, low defects embrace rectoperineal fistula and covered anus and anal membrane. The most frequent defect in boys with imperforate anus is one in which the distal rectum is sited within the puborectalis sling, but terminates as a fistula into the bulbar urethra or prostatic urethra above the main anal sphincter complex. The most common defect in girls is a rectovestibular fistula, in which the fistula opens into the posterior vestibule and not the vagina.\nClinically meconium on the perineum indicates a low defect; when mixed with urine it confirms a urinary fistula. This condition is the domain of the specialist paediatric surgeon. The reader, if interested, is advised to refer to relevant textbooks."
        },
        {
            "id": 5,
            "question_type": "msq",
            "question": "The following statements are true except:",
            "options": [
                "A The condition always occurs in the natal cleft.",
                "B It is a disease of the elderly.",
                "C The condition predominantly affects males.",
                "D Recurrent abscesses are common.",
                "E Treatment is always surgical excision."
            ],
            "answer": [
                "A",
                "B",
                "E"
            ],
            "explanation": "While the natal cleft is the most common site of this condition, pilonidal sinus does not always occur on the natal cleft. It is an occupational hazard amongst hairdressers who suffer from the condition in their interdigital cleft. It is thought that the customers' hair grows into an opening in the skin. It is also known to occur in the axilla and umbilicus.\nAlmost exclusively young men are affected by this condition. More than 80% of sufferers are men in their third decade. They have hairy buttocks where friction causes hair that has been shed to burrow through the midline skin, forming a track and an abscess. Therefore recurrent abscesses are common which will require incision and drainage with curettage of the granulation tissue and hair. Surgical excision of the track is not always necessary. Conservative management in the form of cleaning of the tracks, removal of all hair and regular shaving of the buttocks with good hygiene might suffice. Various surgical procedures are described, a sure indication that none of them are universally successful."
        },
        {
            "id": 6,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Neurological pathways must be intact to maintain anal continence.",
                "B Structural integrity of the gastrointestinal tract and pelvic floor musculature is essential to maintain continence.",
                "C History and clinical examination might be enough to determine aetiology.",
                "D Surgical treatment is tailored to the cause.",
                "E A permanent stoma is a choice."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "Normal anal continence is maintained by the pressure within the anal canal being higher than in the rectum. Therefore any damage to the neurological pathways such as multiple sclerosis, spinal cord injury, cerebrovascular accident and Parkinson's disease might result in incontinence. Loss of integrity of the musculature of the pelvic floor for reasons such as obstetric injury or surgical damage might account for this problem. In the vast majority a good history covering all aspects of psychobehavioural factors, previous surgery and thorough clinical examination should be enough to come to a decision with regard to the cause.\nOnce the cause is determined, treatment is tailored to the needs of the individual patient. Management of these patients will require a team effort between medical and other non-medical professionals. Any surgical treatment should be the domain of the specialist colorectal and pelvic floor surgeon. In general, operations, to be considered by the specialist, are procedures to reunite divided sphincter muscles, procedures to reef the external sphincter and puborectalis muscle and procedures to augment the anal sphincters. As a last resort, a left iliac end colostomy provides some relief."
        },
        {
            "id": 7,
            "question_type": "msq",
            "question": "Which of the following statement(s) is/are false?",
            "options": [
                "A Anal fissure occurs most commonly on the anterior midline at 12 o'clock position.",
                "B Acute anal fissure results from trauma from the passage of a hard stool.",
                "C A fissure at an unusual site might have an underlying cause.",
                "D Operation is the treatment of choice.",
                "E Anal dilatation should be tried as the first surgical procedure."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "The most common site of an anal fissure is posterior midline at 6 o'clock position, probably because of the excessive shearing force acting at that part during defecation. The usual cause is trauma caused by the passage of a constipated hard stool. Anterior fissure is more commonly seen in women probably as a result of a vaginal delivery. In women 10% of fissures are anterior, whereas in men it is 1%.\nWhen a fissure occurs at a site away from the usual point in the anus, almost always there is an underlying cause such as Crohn's disease, tuberculosis, HIV-related ulcers, or a squamous cell carcinoma. In such a situation, the patient should be examined under anaesthetic (EUA) and relevant biopsies taken. After confirmation of the diagnosis, if necessary after EUA, if there is no underlying cause, conservative measures should be instituted first as they are successful in all of acute fissures and most of chronic fissures. This consists of stool-bulking agents, topical application of glyceryl trinitrate (GTN) and diltiazem.\nSurgery should not be the first-line management. In recurrent or indolent cases only, surgery should be considered. Anal dilatation is an obsolete procedure and might result in incontinence. Lateral anal sphincterotomy or anal advancement flap are the choice of procedures for anal fissure when less invasive methods have failed."
        },
        {
            "id": 8,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Haemorrhoids are symptomatic anal cushions.",
                "B Traditionally, four degrees are recognised.",
                "C Conservative treatment should be the first line of management.",
                "D Urgent surgery is justified in certain complications.",
                "E Operation when indicated is usually carried out by the ‘open technique'."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "Anal cushions (see previously on anatomy) are normal anatomical anal mucosal and submucosal vascular folds just above the dentate line. Haemorrhoids occur when these cushions enlarge, become symptomatic, bleeding being the main feature for which the patient seeks advice. Typically it is bright-red blood separate from the motion, painless, sometimes associated with mucous discharge and prolapse. Symptoms are worse when there is any cause producing raised intra-abdominal pressure. While theories abound in their development, it is accepted that forces causing increased pressure on the anus (for various reasons) cause the anal cushions to descend with trauma to the overlying mucosa resulting in bleeding. Prolonged straining at defecation due to constipation is the initiating trauma.\nTraditionally four degrees are described: First, only bleeding; second, rectal bleeding + prolapse that reduces spontaneously; third, rectal bleeding + prolapse that requires manual reduction; fourth, rectal bleeding + prolapse that cannot be reduced. Since these vascular anal cushions form a continuous venous plexus, the differentiation of haemorrhoids into external and internal is rather artificial. Normally the higher internal haemorrhoids merge with their lower counterparts to form what is commonly called ‘interno-external piles'. They should be regarded as external extensions of internal haemorrhoids.\nIn the management, in the vast majority, reassurance that there is no serious underlying condition such as colorectal cancer, along with conservative measures is all that is necessary. When complications such as strangulation, thrombosis and gangrene occur, some advocate urgent surgery. Under antibiotic cover, open haemorrhoidectomy can be carried out although conservative management with analgesics, bed rest, hot baths, or cold compresses will cure the problem in almost all cases. Moreover, late anal stenosis might be one of the complications associated with early operation.\nWhen operation is decided upon (for third and fourth degree), open haemorrhoidectomy is the usual procedure. There are various surgical procedures, minor and operative, details of which are beyond the scope of this book. However, less-invasive measures such as injections and banding should be tried first. These measures will be relatively painless when it is carried out in the upper anal canal, because it is lined with insensate columnar epithelium; the same treatment in the lower anal canal is very painful because the stratified squamous mucosa is rich in sensory nerve endings."
        },
        {
            "id": 9,
            "question_type": "msq",
            "question": "Which of the following statements are not true?",
            "options": [
                "A Usually there is an underlying cause.",
                "B Diabetes must be excluded.",
                "C Treat the cause of pruritis ani.",
                "D Surgical treatment is required in the majority.",
                "E Hydrocortisone should be the first line of conservative treatment."
            ],
            "answer": [
                "D",
                "E"
            ],
            "explanation": "In the management, surgery is not the treatment. Conservative management is the treatment, which should be directed toward the cause. Hydrocortisone ointment should not be used universally. It should only be used as 0.5% or 1% prednisolone cream when the cause is dermatitis.\nPruritis ani, intractable perianal itching, is a very distressing condition, not to mention the embarrassment it causes. There almost always is a cause. Lack of hygiene, parasites (particularly in children), allergic skin condition, bacterial infection and psychoneurosis are but a few. The last cause should not be assumed unless all other causes have been excluded. Diabetes should be excluded. Treatment is to find the cause and treat it. The letter 'P' is a useful reminder of possible causes: polyp, pus, parasites, piles, psyche."
        },
        {
            "id": 10,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Anorectal abscesses might be a manifestation of a generalised disease.",
                "B Primary colorectal disease might be a cause.",
                "C The main cause is infection of the anal glands.",
                "D Presentation is always as a very tender, fluctuant lump in the perianal region.",
                "E Immediate fistulotomy should be performed if a fistula is present."
            ],
            "answer": [
                "A",
                "B",
                "C"
            ],
            "explanation": "An anorectal abscess might be a local manifestation of a generalised disease, such as diabetes or acquired immunodeficiency syndrome (AIDS), when the presentation can be fulminating. It is also important to exclude a colorectal disease such as inflammatory bowel disease (Crohn's disease) or rectal cancer. A good history and clinical examination would make such an aetiology obvious.\nInfection of the anal glands is the main cause that results in cryptoglandular sepsis, which spreads readily into the intersphincteric tissue plane; the most common route taken is between the internal and external anal sphincters to point beneath the skin at the anal verge. Rupture of the abscess before treatment might result in a fistula-in-ano. The presentation is usually a short history of severe perianal pain with swinging pyrexia. Examination shows an excruciatingly tender, hot, indurated lump.\nHowever, in cases where the infection is high within the pelvis, the presentation might not be as obvious. The patient might complain of fever or vague anorectal discomfort with urinary symptoms with nothing obvious externally; rectal examination might reveal painful induration above the anorectal junction. As treatment, immediate fistulotomy should not be performed. Under general anaesthetic, immediate drainage with a cruciate incision and deroofing of the abscess is the treatment. EUA and biopsy of the abscess walls and sigmoidoscopy is carried out to exclude underlying colorectal disease."
        },
        {
            "id": 11,
            "question_type": "msq",
            "question": "The following statements are true except:",
            "options": [
                "A There is always an underlying associated specific cause.",
                "B The most common cause is persistent infection of the anal glands.",
                "C MRI is an essential investigation in all cases.",
                "D Classification is into high and low-anal fistula.",
                "E The majority can be treated by fistulotomy."
            ],
            "answer": [
                "A",
                "C"
            ],
            "explanation": "An underlying specific cause is not present in all cases; it is the exception rather than the rule. Nonetheless underlying conditions as a primary cause must be excluded when the condition is recurrent, indolent, or unusual. Crohn's disease and colloid carcinoma of the rectum should be excluded when there are multiple external openings; rare causes are tuberculosis, lymphogranuloma venerum (LGV) and actniomycosis. A clinical axiom called Goodsall's rule, which follows, is worth remembering: When an external opening is anterior to a transverse mid-anal line, the fistula usually runs radially into the anal canal; when the opening is posterior to this imaginary line, the track is usually curvilinear opening into the anal canal in the posterior midline.\nMRI, whilst being regarded as the 'gold standard' for imaging, is not essential in all cases. It is mandatory in Crohn's disease and complicated fistulae with multiple tracks to distinguish the high from the low fistula. EUS and manometry are other useful investigations in these situations.\nThe underlying pathology is a cryptogenic fistula as a result of persistent infection of the anal glands in the intersphincteric space. Fistulae are classified as the following: trans-sphincteric (40%) where the primary track passes through the external sphincter at varying levels into the ischiorectal fossa; intersphincteric (45%) when the track passes from the anal canal across the internal sphincter into the perianal skin; and suprasphincteric and extrasphincteric, which are rare.\nIdeally they are classified into high-anal and low-anal depending upon whether the internal opening is above or below the external sphincter. The surgical management is completely different in the two types. The majority can be treated by fistulotomy as they are uncomplicated and below the sphincter."
        },
        {
            "id": 12,
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A MRI and EUS should be undertaken before surgical treatment.",
                "B Fistulotomy is the treatment for intersphincteric and trans-sphincteric types.",
                "C Setons are used in the treatment of high and complicated fistulae.",
                "D Anal advancement flaps aims to preserve anatomy and function.",
                "E Biological agents have been used with variable results."
            ],
            "answer": [
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "As trans-sphincteric and intersphincteric fistulae constitute 85% of all fistulae and the majority are uncomplicated, fistulotomy is the surgical treatment in the vast majority. The procedure involves division and laying open all the structures between the internal and external openings. Although it involves division of a small part of the voluntary musculature, there still might be some compromise of continence. Secondary tracks are also laid open and curetted and the wound marsupialised. High and complicated fistula need to be treated in a staged manner by using a seton. These are of two types – loose and cutting. Different types of seton materials are used, all non-absorbable. Surgery involving the use of a seton is the domain of a specialist colorectal surgeon and the reader interested in the procedures should refer to specialised sources. Anal advancement flap procedure, an operation for the expert, is indicated where the sphincter-complex is not too indurated with adequate intra-anal access. It should be done after elimination of all sepsis and secondary tracks.\nSpecialised investigations such as MRI and EUS are not necessary before surgery in all cases. It is mandatory only in complicated cases and where there is an underlying colorectal pathology. Because of the incidence of recurrence following sphincter-saving techniques, biological agents to plug and seal the track have been tried. Fibrin glue, porcine small intestinal submucosa and cross-linked porcine dermal collagen have all been tried, with variable results."
        },
        {
            "id": 13,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:",
            "options": {
                "items": [
                    "1 Anal fissure",
                    "2 Anal incontinence",
                    "3 Anal intraepithelial neoplasia (AIN)",
                    "4 Anal stenosis",
                    "5 Condylomata accuminata (anal warts)",
                    "6 Fistula-in-ano",
                    "7 Haemorrhoids",
                    "8 Hydradenitis suppurativa",
                    "9 Perianal abscess",
                    "10 Pilonidal sinus",
                    "11 Pruritis ani",
                    "12 Squamous cell carcinoma"
                ],
                "choices": [
                    "A A 25-year-old woman complains of bright-red rectal bleeding for 6 weeks. This is not mixed with her stools and comes on every time she opens her bowels. It started toward the end of her pregnancy and got worse after the birth of her baby 2 months ago. She has no other symptoms.",
                    "B A 38-year-old man complains of severe pain on defecation for a week. He has seen streaks of blood every time he has a bowel action. He has been very constipated ever since he has been on strong analgesia for his fractured ankle, which is in plaster.",
                    "C A 32-year-old woman complains of severe perianal itching, which she finds very distressing. She has also had foul-smelling vaginal discharge for which she is taking antibiotics.",
                    "D A 26-year-old man complains of recurrent discharge from his natal cleft. It started 6 months ago with an abscess that burst on its own.",
                    "E A 42-year-old man who is on medical treatment for Crohn's disease complains of severe pain in his left perianal area. On examination he has a very tender, shiny, fluctuant mass.",
                    "F A 32-year-old man complains of serosanguinous discharge from his right perianal area. He had a tender lump about 1 week ago that burst on its own, after which he felt much better but has been left with a smelly discharge.",
                    "G A 35-year-old woman complains of recurrent abscesses in her buttocks. On examination she has several tender, raised, discharging lesions with fibrosis and scarring.",
                    "H A 27-year-old man complains of perianal itching, bleeding, discharge, pain and lumps for a few months. On examination he has pinkish-white excrescences outside and inside the anal canal, partially obscuring the anal orifice.",
                    "I A 56-year-old man complains of pruritis, pain intermittent bleeding and discharge from the perianal area for several weeks. On examination there is a raised, greyish-white, irregular plaque-like lesion.",
                    "J A 66-year-old man complains of pain and bleeding from the perianal area where he has felt a lump for 6 weeks. On examination there is an irreducible lump protruding from the anus that is indurated, and the edge looks everted.",
                    "K A 47-year-old man complains of difficulty in passing stools for 2 months in spite of using increasing amounts of laxatives. The stools are ‘tape-like'. About 3 months ago, he underwent an urgent haemorrhoidectomy for prolapsed, thrombosed, strangulated piles.",
                    "L A 72-year-old woman complains of continuous faecal leak for 6 weeks. Prior to this the problem was intermittent. She gradually developed constipation and has not had a proper bowel action for almost the same period. On examination she has faecal incontinence with soiled underwear. Rectal examination reveals a rectum completely loaded with hard stools."
                ]
            },
            "answer": {
                "A": "7",
                "B": "1",
                "C": "11",
                "D": "10",
                "E": "9",
                "F": "6",
                "G": "8",
                "H": "5",
                "I": "3",
                "J": "12",
                "K": "4",
                "L": "2"
            },
            "explanation": "1. B Anal fissure\nThis young man has an acute fissure-in-ano. The history suggests that constipation is the cause in this patient brought about by the ingestion of analgesics. Clinical examination would confirm the diagnosis. If clinical examination in the clinic is too painful, EUA would confirm the presence of a hypertrophied anal papilla and sentinel pile – both being tell-tale evidence of healing and breakdown. He needs to be given stool-bulking agents and stool softeners to treat his constipation. As his analgesic intake reduces, his constipation should improve. In the interim he could be given GTN for local application.\n\n2. L Anal incontinence\nIn most patients history and clinical examination would elucidate the cause. In this patient incontinence is due to faecal impaction arising from a disorder of rectal evacuation. A plain abdominal x-ray will confirm that the entire large bowel is loaded with hard faeces. At the outset the patient will require manual evacuation under general anaesthetic. This should be followed by regulation of bowel habit by drugs and diet.\n\n3. I Anal intraepithelial neoplasia (AIN)\nAIN is the result of HPV infection and is encountered in the HIV-positive patients. It exhibits multifocal dysplasia. The disease is classified as AIN I, AIN II and AIN III, depending upon the extent of dysplasia. Left untreated it would become anal cancer. The condition should be treated in specialised centres. Local excision suffices where less than 30% of the anal circumference is involved. In extensive disease wide local excision with closure of the defect by flap or skin graft is carried out. The procedure and immediate postoperative period might have to be covered by a temporary stoma.\n\n4. K Anal stenosis\nWhile there are several causes of anal strictures, in this patient it is the result of complication following haemorrhoidectomy. This has resulted from removal of too much anoderm and mucosa without adequate skin bridges, causing scarring and stricture. This is treated initially by dilatation under general anaesthetic followed by self-dilatation by an anal dilator. In intractable or severe cases anoplasty using an advancement flap can be done.\n\n5. H Condylomata accuminata\nThis patient should undergo a thorough clinical examination and, if necessary, EUA for complete evaluation of the extent of the warts as there might be extension into the genitalia. Careful application of 25% podophyllin to external warts and surgical excision is the treatment. Complete long-term cure is a problem unless there is a change in the patient's lifestyle.\n\n6. F Fistula-in-ano\nThis patient's history is suggestive of a fistula-in-ano, which has resulted from a perianal abscess that burst on its own a while ago. Besides clinical examination, which should include a proctosigmoidoscopy, complete assessment is best carried out by EUA. While under the anaesthetic a flexible sigmoidoscopy is performed to make sure that there is no colorectal pathology and ascertain the position of the internal opening. It is then treated by fistulotomy.\n\n7. A Haemorrhoids\nThis young woman's history is suggestive of piles, resulting from pregnancy. After a history, she is examined by proctosigmoidoscopy to confirm and ascertain the degree of piles. The history is suggestive of first-degree piles. At the outset, she is given advice regarding conservative management – normalising bowel habits, stool-softening agents and minimising straining. If after a period of conservative management, matters do not improve, injection sclerotherapy with 5% phenol in almond oil or banding is considered.\n\n8. G Hydradenitis suppurativa\nThis condition is a difficult condition to treat mainly because of its intractability. The lesions start as multiple raised boils, which are recurrent leading to discharge, sinus formation and scarring. It also occurs in the axilla, groin, neck and perineum giving rise to physical and psychological morbidity.\nTreatment includes general measures such as antiseptic soaps and antibiotics which keep the condition at bay only to recur. Surgical interventions consist of incision and drainage of abscesses in the acute stage. In a quiescent phase, consideration should be given to radical excision of all apocrine gland-bearing skin. This might require closure by skin graft or rotation flap.\n\n9. E Perianal abscess\nThis patient has a typical perianal abscess (see Figure 69.2 in Chapter 69) from his underlying Crohn's disease. It is almost certain he will have colorectal involvement with the disease. At the outset, the emergency management would be to give him analgesia and antibiotics and drain the abscess immediately. During drainage, EUA should be carried out, including a sigmoidoscopy, biopsy of tissue from the abscess cavity and biopsy of suspicious colonic mucosa.\nOnce the patient has recovered, a thorough assessment of the extent of the patient's disease must be carried out (if it has not already been done) with the gastroenterologist. This patient will almost certainly develop a fistula-in-ano. When that happens an MRI is mandatory and the patient is treated according to the findings. Patients with perianal Crohn's disease might need to be treated with infliximab (a tumour necrosis factor-a, TNF-α antagonist).\n\n10. D Pilonidal sinus\nThis patient has developed a post-anal pilonidal sinus after initially suffering from an abscess. After thorough examination of the original tract and any openings on the skin, the condition is assessed and the options of treatment discussed with the patient. The fact that there are several surgical treatment options means that they all have a rate of failure.\nTherefore, as the condition has a history of regression, conservative measures such as cleaning out of the tracks, removal of all hair with regular shaving of the buttocks and strict hygiene are advised.\n\n11. C Pruritis ani\nWhile there are many causes of pruritis ani, in this patient it is highly likely that it is the result of the patient's vaginal discharge. In this regard she needs a gynaecological opinion; a vaginal swab is taken to exclude Trichomonas vaginalis infection, and she is started on the appropriate antibiotics. This should be supplemented by strict measures of hygiene and cleanliness.\n\n12. J Squamous cell carcinoma (SCC)\nSCC of the anus is associated with HPV and is more common in those with HIV infection. This patient has the hallmarks of a squamous cell carcinoma of the anus with an indurated mass with everted edges at the anal verge. The inguinal group of lymph nodes need to be palpated for evidence of secondaries although enlargement might be due to infection. The diagnosis has to be confirmed, the carcinoma staged and then definitive treatment instituted. The condition should be managed in a specialised centre.\nConfirmation is by biopsy best carried out under general anaesthetic so that at the same time EUA can be performed for local staging. This can be complemented by MRI and PET/CT, the latter helping to seek inguinal node involvement if present; this can also be done by FNAC. CT of chest and abdomen would complete the staging.\nDefinitive treatment is chemoradiotherapy (combined modality therapy, CMT) using 5-fluorouracil (5-FU) with mitomycin C or cisplatin. Local control is the mainstay of treatment because only 5% have distant metastasis at diagnosis. Small, marginal tumours are best treated by local excision. In spite of good results with CMT, almost one-quarter will have a relapse. Such patients will need an abdominoperineal resection."
        }
    ]
}
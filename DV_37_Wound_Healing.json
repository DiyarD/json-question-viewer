{
  "chapter_name": "Wound Healing",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "The following agent has been shown to clinically reduce the deleterious effects of corticosteroids on wound healing:\nA. Vitamin C\nB. Vitamin A\nC. Zinc\nD. Copper\nE. Transforming growth factor-ẞ (TGF-β)",
      "options": [
        "A. Vitamin C",
        "B. Vitamin A",
        "C. Zinc",
        "D. Copper",
        "E. Transforming growth factor-ẞ (TGF-β)"
      ],
      "answer": "B",
      "explanation": "- Vitamin A has been shown to counter the deleterious effects of both corticosteroids and radiation on wound healing in both human and animal studies.\n- The benefit was seen even in the absence of vitamin deficiency, whether administered topically or systemically.\n- The mechanism of action of vitamin A is thought to be reversal of the antiinflammatory effects of steroids.\n- Vitamin A increases lysosomal membrane lability, increases macrophage influx and activation, and stimulates collagen synthesis.\n- Hepatic stellate cells (Ito cells) in the perisinusoidal space (space of Disse) can store high levels of vitamin A.\n- TGF-ẞ released during local injury to the liver can lead to the differentiation of Ito cells into myofibroblast-like cells, causing hepatic fibrosis and, ultimately, liver cirrhosis.\n- TGF-ẞ is considered to be immunosuppressive.\n- Vitamin C, a free radical scavenger, has been investigated as a possible adjunct in the management of reactive oxygen species generated by thermal injury (A).\n- Zinc deficiency has numerous manifestations, including alopecia, poor wound healing, immunosuppression, night blindness or photophobia, impaired taste or smell, neuritis, and a variety of skin disorders (C).\n- Copper deficiency manifests as microcytic anemia, pancytopenia, depigmentation, and osteopenia (D)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is true about wound healing?\nA. Angiogenesis is the major contributor to the erythema seen in wounds.\nB. Pain in the first 48 hours is secondary to newly active fibroblasts attempting to contract the wound edges.\nC. At 48 hours, phagocytic cells predominate in the wound bed.\nD. In the first 36 hours, macrophages are the predominate cells in the wound bed.\nE. While erythema and pain can be normal, induration is typically pathologic.",
      "options": [
        "A. Angiogenesis is the major contributor to the erythema seen in wounds.",
        "B. Pain in the first 48 hours is secondary to newly active fibroblasts attempting to contract the wound edges.",
        "C. At 48 hours, phagocytic cells predominate in the wound bed.",
        "D. In the first 36 hours, macrophages are the predominate cells in the wound bed.",
        "E. While erythema and pain can be normal, induration is typically pathologic."
      ],
      "answer": "C",
      "explanation": "- Wound healing is typically divided into three or four phases: hemostasis/inflammation (combined in the three-phase model), proliferation, and maturation (or remodeling).\n- The hemostasis/inflammation phase is initiated with the disruption of capillaries resulting in hemorrhage, immediately causing vasoconstriction to assist with platelet plug formation.\n- After 10 to 15 minutes, local tissue factors and platelets facilitate vasodilation and increased vascular permeability.\n- Infiltration of fluid and cells (mainly neutrophils) causes the wound to become erythematous (A).\n- Changes in tissue pH and local tissue destruction cause the wound to be painful (B).\n- The first cells to arrive after platelet plug formation are neutrophils, which primarily help with phagocytosis of bacteria and destruction of dead tissue.\n- Neutrophil predominance persists for 48 hours, at which point they are largely replaced by macrophages.\n- Macrophages remain in the wound until the completion of healing (D) and are arguably the most important cells due to their effects on angiogenesis, matrix deposition, and remodeling via the release of cytokines and growth factors.\n- By day 4, the proliferative phase begins, and endothelial cells and fibroblasts appear in the wound.\n- By days 5 to 7, there is no longer a significant population of inflammatory cells.\n- The previously created matrix of type III collagen is slowly replaced with type I collagen, angiogenesis takes place, granulation tissue begins to form, and wound contraction commences.\n- This phase persists for 3 to 4 weeks and finally gives way to the remodeling phase.\n- At this point, vascularity decreases, collagen continues to be synthesized but is broken down at the same rate, and collagen cross-linking occurs.\n- While erythema and pain can be normal, induration (swelling) is also a normal part of the inflammatory process (E)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is NOT true regarding hypertrophic scarring and keloid formation?\nA. Both have an increased deposition of collagen.\nB. Both have a normal amount of fibroblasts.\nC. Both have a genetic predisposition.\nD. Both have a propensity to develop following a postsurgical wound infection.\nE. Both tend to recur with re-excision.",
      "options": [
        "A. Both have an increased deposition of collagen.",
        "B. Both have a normal amount of fibroblasts.",
        "C. Both have a genetic predisposition.",
        "D. Both have a propensity to develop following a postsurgical wound infection.",
        "E. Both tend to recur with re-excision."
      ],
      "answer": "C",
      "explanation": "- Hypertrophic scarring and keloid formation are both examples of pathologic excessive healing, caused by increased deposition of collagen with a relatively normal number of fibroblasts (A).\n- Formation of keloids has a large genetic component that is inherited in an autosomal dominant fashion and is more prominent in darker skinned individuals.\n- Hypertrophic scarring is generally caused by a delay in wound healing or by excessive tensile forces on a new wound.\n- Hypertrophic scars do not spread outside of the borders of the original wound, unlike keloids.\n- Hypertrophic scars tend to respond better to surgical excision if the initial etiology of the wound healing has been treated, such as infection.\n- While steroids have been used to treat keloids and hypertrophic scarring as a primary treatment, it is now largely an adjuvant therapy to surgical excision, similar to radiation.\n- In general, surgery should be avoided if possible because the lesions are at high risk of recurrence (E).\n- While steroids have been shown to improve both types of abnormal healing, use as an adjuvant to surgery or early on for scar prevention is the main indication (D).\n- Several other adjuncts have also been shown to reduce scarring, including silicone bandages, occlusive dressings, and extremity compression devices."
    },
    {
      "id": 4,
      "question_type": "clinical_scenario",
      "question": "A severely malnourished 12-year-old boy presents with multiple pigmented spots on his bilateral thighs, bleeding gums, loose and missing teeth, and several weeping wounds. He recently arrived as a refugee from an underdeveloped country. His medical history is sparse. His diet primarily consisted of cooked grains. Which of the following is true regarding the most likely vitamin deficiency in this patient?\nA. It plays an essential step in proteoglycan synthesis.\nB. Delayed wound healing is caused by failure to hydroxylate lysine and proline during collagen synthesis.\nC. It does not affect iron absorption.\nD. Exogenous administration has been shown in animals to have a corticosteroid-like effect on wound healing.\nE. After hydroxylation by the liver and kidney, it helps with bone mineralization.",
      "options": [
        "A. It plays an essential step in proteoglycan synthesis.",
        "B. Delayed wound healing is caused by failure to hydroxylate lysine and proline during collagen synthesis.",
        "C. It does not affect iron absorption.",
        "D. Exogenous administration has been shown in animals to have a corticosteroid-like effect on wound healing.",
        "E. After hydroxylation by the liver and kidney, it helps with bone mineralization."
      ],
      "answer": "B",
      "explanation": "- This patient most likely has scurvy, caused by a deficiency in vitamin C, which is uncommon in the modern age.\n- Scurvy is typically seen in patients with severe malnutrition, often from underdeveloped countries, without access to fresh fruits and vegetables.\n- Patients present with loose or missing teeth, open sores, pigmented spots on the extremities, bleeding mucous membranes, and vague myalgias and fatigue.\n- Vitamin C is a key cofactor in the hydroxylation of lysine and proline during collagen synthesis; as such, collagen cross-linking is extremely diminished in patients with vitamin C deficiency.\n- Vitamin C deficiency can even cause the involution of previous scars because remodeling continues, but patients are unable to synthesize new collagen.\n- Vitamin C is also involved in iron absorption (C).\n- Vitamin A is another essential vitamin in wound healing and assists with epithelialization, proteoglycan synthesis, and normal immune function (A).\n- Vitamin A has also been shown to reverse the effects of steroids on wound healing.\n- Vitamin D is consumed in the diet and produced in the skin, then undergoes activation (hydroxylation) by the liver and kidney to play an essential role in calcium metabolism (E).\n- Exogenous vitamin E has been shown in animal trials to cause delayed wound healing via an inflammatory mechanism similar to corticosteroids (D)."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding cell junctions in humans?\nA. Hemidesmosomes do not interact with intermediate filaments.\nB. Tight junctions, by definition, do not allow the passage of solutes through adjacent cell membranes.\nC. Connexons allow for direct communication between two adjacent cells.\nD. Adherens junctions are a specialized type of tight junction.\nE. Desmosomes function primarily to anchor a cell to the extracellular matrix.",
      "options": [
        "A. Hemidesmosomes do not interact with intermediate filaments.",
        "B. Tight junctions, by definition, do not allow the passage of solutes through adjacent cell membranes.",
        "C. Connexons allow for direct communication between two adjacent cells.",
        "D. Adherens junctions are a specialized type of tight junction.",
        "E. Desmosomes function primarily to anchor a cell to the extracellular matrix."
      ],
      "answer": "C",
      "explanation": "- All humans have three main types of cell junctions: anchoring junctions, communicating (gap) junctions, and tight junctions.\n- Anchoring junctions are subdivided into desmosomes, hemidesmosomes, and adherens junctions (D).\n- Hemidesmosomes and desmosomes both connect with intermediate filaments in the cytoskeleton.\n- Hemidesmosomes connect cells to the underlying extracellular matrix.\n- Desmosomes connect adjacent cells to one another (A, E).\n- Adherens junctions serve the same purpose but use actin filaments as their cytoskeletal anchor.\n- Anchoring junctions, as a whole, provide structural integrity to a tissue made up of individual cells.\n- Communicating junctions allow direct chemical communication between adjacent cells.\n- This communication is facilitated by six individual subunits, called connexins, which form a central pore, called a connexon.\n- When two connexons from adjacent cells come in contact, a channel is formed allowing communication between the two cells.\n- Tight junctions refer to a group of proteins that allow the selective diffusion of molecules based mainly on size, molecular charge, and polarity.\n- These primarily act as selective barriers such as in the different layers of the skin (B)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is true regarding nutritional status and nonhealing wounds?\nA. Short periods of starvation before surgery generally have minimal effect on wound healing.\nB. Malnutrition prolongs the inflammatory phase of wound healing.\nC. Prealbumin will provide an accurate estimation of nutritional status over the previous several weeks.\nD. Nutritional supplements have been shown to decrease interval time to complete healing of pressure ulcers.\nE. Presence of granulation tissue is not predictive of adequate wound healing ability.",
      "options": [
        "A. Short periods of starvation before surgery generally have minimal effect on wound healing.",
        "B. Malnutrition prolongs the inflammatory phase of wound healing.",
        "C. Prealbumin will provide an accurate estimation of nutritional status over the previous several weeks.",
        "D. Nutritional supplements have been shown to decrease interval time to complete healing of pressure ulcers.",
        "E. Presence of granulation tissue is not predictive of adequate wound healing ability."
      ],
      "answer": "B",
      "explanation": "- Delayed wound healing is a multifactorial problem with many identifiable risk factors including malnutrition, vitamin deficiencies, smoking, obesity, diabetes, and hypoxemia.\n- Few systemic factors have been shown to speed up wound healing.\n- Short periods of starvation can have negative effects on postoperative wound healing (A), primarily by prolonging the inflammatory phase due to inadequate building blocks for cell proliferation, protein synthesis, and creation of new DNA.\n- The notion that malnutrition plays a key role in the development of chronic wounds led to multiple studies on nutritional supplementation.\n- A Cochrane review (2014) evaluating the effect of enteral and parenteral nutrition on pressure ulcers found no clear benefit of any intervention (D).\n- Knowing the half-lives and current serum measurements of certain proteins allows estimation of the liver's synthetic ability over a given time period.\n- Albumin (14-20 days), transferrin (8-9 days), and prealbumin (2-3 days) give a snapshot into nutritional status but need to be combined with the entire clinical picture (C).\n- Granulation tissue, if present, is predictive of adequate wound healing (E)."
    },
    {
      "id": 7,
      "question_type": "clinical_scenario",
      "question": "A 22-year-old female with history of a gun-shot wound to the abdomen requiring multiple bowel resections has been on chronic total peripheral nutrition (TPN) for short gut syndrome. She presents for a clinic follow-up stating that her hair has started to fall out, and she has developed multiple bruises over her arms and legs. In addition, she has a diffuse scaly rash and dry skin. Which of the following nutrients or trace elements is she likely deficient in?\nA. Copper\nB. Vitamin C\nC. Linoleic acid\nD. Zinc\nE. Selenium",
      "options": [
        "A. Copper",
        "B. Vitamin C",
        "C. Linoleic acid",
        "D. Zinc",
        "E. Selenium"
      ],
      "answer": "C",
      "explanation": "- A deficiency of trace elements and essential fatty acids is rare in patients taking food by mouth but has occurred with increased frequency with TPN, particularly in short gut syndrome patients.\n- Copper deficiency is primarily associated with anemia resistant to iron supplementation, leukopenia, and neurologic defects (A).\n- Vitamin C deficiency (scurvy) causes delayed wound healing, bleeding gums, loose teeth, and abnormal bone deposition in children (B).\n- Selenium deficiency is associated with a fatal cardiomyopathy (E).\n- Zinc and essential fatty acid deficiency (linoleic acid and alpha-linolenic acid) share many features, including delayed wound healing, increased infections, diarrhea, and a rash.\n- The essential fatty acid rash tends to be more scaly and associated with dry skin.\n- The rash from zinc is primarily located in the perioral area and intertriginous skin of the fingers and toes.\n- While alopecia and thrombocytopenia can be found with both conditions, they are more closely associated with free fatty acid deficiency.\n- Conversely, loss of appetite, impaired taste, and night blindness are more closely related with zinc deficiency (D)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the care of chronic wounds?\nA. Necrotic tissue should be debrided regardless of etiology.\nB. OPSITE dressing provides an impermeable barrier between the environment and the wound.\nC. Compression is the mainstay of treatment for heel wounds.\nD. Negative pressure wound therapy works primarily by increasing wound contraction.\nE. Wet-to-dry dressings can cause wound desiccation, which can potentially delay healing.",
      "options": [
        "A. Necrotic tissue should be debrided regardless of etiology.",
        "B. OPSITE dressing provides an impermeable barrier between the environment and the wound.",
        "C. Compression is the mainstay of treatment for heel wounds.",
        "D. Negative pressure wound therapy works primarily by increasing wound contraction.",
        "E. Wet-to-dry dressings can cause wound desiccation, which can potentially delay healing."
      ],
      "answer": "E",
      "explanation": "- The mainstay of wound care is ensuring a moist, sterile environment with adequate blood supply and freedom from excess necrotic material.\n- While removal of dead tissue and exudate is generally suggested, an exception is noninfected, dry eschar of arterial ulcers, which should be revascularized before debridement (A).\n- Compression is standard for venous insufficiency (medial malleolar) wounds but will likely worsen ischemic arterial wounds or pressure ulcer wounds, both likely etiologies in heel wounds (C).\n- The ideal dressing for chronic wounds should keep the wound from drying, remove excess exudate, relieve pain, and prevent additional trauma to the tissue bed.\n- While wet-to-dry dressings have been a cornerstone of wound care, there is evidence they can cause wound desiccation (extreme drying), are often inadequate at controlling heavily exudative wounds, and provide inadequate barrier protection from the environment (E).\n- OPSITE and Tegaderm dressings are semipermeable barriers that allow passage of water vapor and oxygen but remain impermeable to liquids and organisms (B).\n- Negative pressure wound therapy is believed to primarily work by removing edema, increasing blood flow, and promoting granulation tissue formation.\n- Increased wound contraction is not a primary mechanism for wound healing in negative pressure therapy (D)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is true regarding diabetic foot wounds?\nA. Patients generally remember the inciting injury that led to the nonhealing wound.\nB. Foot deformity in this patient population can significantly increase ulcer formation.\nC. Most of these ulcers are due to ischemia.\nD. This complication is multifactorial and generally independent of blood glucose levels.\nE. Noninfected wounds should not be casted because it limits evaluation of the wound.",
      "options": [
        "A. Patients generally remember the inciting injury that led to the nonhealing wound.",
        "B. Foot deformity in this patient population can significantly increase ulcer formation.",
        "C. Most of these ulcers are due to ischemia.",
        "D. This complication is multifactorial and generally independent of blood glucose levels.",
        "E. Noninfected wounds should not be casted because it limits evaluation of the wound."
      ],
      "answer": "B",
      "explanation": "- Diabetic foot wounds are multifactorial, with neuropathy, foot deformity, and ischemia playing the three largest roles (D).\n- Neuropathy is the most significant factor (C).\n- Most diabetic foot ulcers result from unrecognized injury due to occult trauma (e.g., tight-fitting shoes) (A).\n- Motor neuropathy causes a distinct foot deformity called Charcot's foot, involving collapse or dislocation of interphalangeal and metatarsophalangeal joints.\n- This changes the pressure points of the foot to relatively unprotected areas.\n- In the setting of noninfected wounds, specialized orthotics or even casting can be an adjuvant to healing (E)."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true regarding skin antiseptic techniques before surgery?\nA. Iodine-based preps are superior to chlorhexidine for preventing surgical site infections.\nB. Chlorhexidine-based preps are safe on all body surfaces as a preoperative cleanser.\nC. Preoperative bathing with chlorhexidine has been shown to reduce incidence of surgical site infections.\nD. The bactericidal effect of iodine is from its ability to form an extracellular crystal matrix and destabilize cell membranes.\nE. Povidone iodine was formulated to decrease the availability of molecular iodine.",
      "options": [
        "A. Iodine-based preps are superior to chlorhexidine for preventing surgical site infections.",
        "B. Chlorhexidine-based preps are safe on all body surfaces as a preoperative cleanser.",
        "C. Preoperative bathing with chlorhexidine has been shown to reduce incidence of surgical site infections.",
        "D. The bactericidal effect of iodine is from its ability to form an extracellular crystal matrix and destabilize cell membranes.",
        "E. Povidone iodine was formulated to decrease the availability of molecular iodine."
      ],
      "answer": "E",
      "explanation": "- Surgical site infections increase hospitalization costs and length of stay, prompting the Surgical Care Improvement Project (SCIP).\n- While preoperative bathing with antiseptic solution reduces bacterial colonization of skin, it has not been proven to decrease surgical site infection rates (C).\n- Multiple preparations for preoperative skin antisepsis exist, with iodine-based and chlorhexidine-based solutions being most common.\n- Iodine works primarily by passing through bacterial cell membranes, replacing intracellular ions with molecular iodine, and oxidizing bacterial structures (D).\n- Iodine is toxic to normal tissues, so it is generally combined with a carrier molecule (e.g., povidone) to reduce systemic availability and toxicity of molecular iodine.\n- Chlorhexidine works by destabilizing cellular membranes.\n- A Cochrane review (2015) comparing iodine-based and chlorhexidine-based preoperative antiseptic techniques found chlorhexidine to be superior in preventing surgical site infections (A).\n- Chlorhexidine is generally not recommended for use above the chin due to ototoxicity and potential for corneal damage in higher concentrations (B)."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which of the following drugs has not been shown to directly affect wound healing?\nA. Corticosteroids\nB. Nonselective nonsteroidal antiinflammatory drug (NSAID)\nC. Infliximab\nD. Sirolimus\nE. Bevacizumab",
      "options": [
        "A. Corticosteroids",
        "B. Nonselective nonsteroidal antiinflammatory drug (NSAID)",
        "C. Infliximab",
        "D. Sirolimus",
        "E. Bevacizumab"
      ],
      "answer": "C",
      "explanation": "- While some studies implicate infliximab as a potential factor in postoperative infection, there is no definitive evidence that it directly affects wound healing in the absence of infection.\n- All other choices (A, B, D, E) have been shown in selected studies to directly slow wound healing through various mechanisms.\n- Any drug that inhibits angiogenesis, epithelialization, collagen synthesis, cell proliferation, or DNA synthesis will have a potentially negative effect on wound healing.\n- Most authorities recommend perioperative cessation of these types of medications in the absence of direct contraindications."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following diseases is correctly paired with the type of collagen that is affected?\nA. Alport syndrome: type III collagen\nB. Ehlers-Danlos syndrome: type VII collagen\nC. Epidermolysis bullosa: type VII collagen\nD. Osteogenesis imperfecta: type II collagen\nE. Bullous pemphigoid: type I collagen [?]",
      "options": [
        "A. Alport syndrome: type III collagen",
        "B. Ehlers-Danlos syndrome: type VII collagen",
        "C. Epidermolysis bullosa: type VII collagen",
        "D. Osteogenesis imperfecta: type II collagen",
        "E. Bullous pemphigoid: type I collagen [?]"
      ],
      "answer": "C",
      "explanation": "- The most common types of collagen in the body include types I to V, though many more are clinically relevant in certain diseases.\n- Type I collagen makes up 90% of the body's collagen and is found in most tissues, including skin, bones, tendons, arterial walls, and scars. It is implicated in diseases like osteogenesis imperfecta (D).\n- Type II collagen makes up about 50% of the protein in hyaline cartilage.\n- Type III collagen is found in bone, cartilage, and multiple types of connective tissue; abnormalities have been found in Dupuytren's contracture and aneurysm formation.\n- Type IV collagen is found primarily in the basement membrane and is associated with Alport and Goodpasture syndrome (A).\n- Type V collagen is closely associated with type I and is in most of the same tissues, with the addition of placental tissue.\n- Clinically significant collagens outside of the main five include type VII (epidermolysis bullosa) and type XVII (bullous pemphigoid), though they are not as prevalent (E).\n- Ehlers-Danlos is a spectrum of connective tissue disorders that can affect multiple types of collagen (B), but the most common is type V (seen in classic type Ehlers-Danlos)."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the healing of a small-bowel anastomosis?\nA. Leaks are less likely to occur with a hand-sewn anastomosis as compared with stapled.\nB. There is an increased level of collagenase when compared to healing skin wounds.\nC. The serosa plays a minimal role in the healing of a small-bowel anastomosis.\nD. The submucosa provides the most significant strength layer of the entire gastrointestinal tract.\nE. Free omental flaps have been shown to improve outcomes when doing a small-bowel anastomosis.",
      "options": [
        "A. Leaks are less likely to occur with a hand-sewn anastomosis as compared with stapled.",
        "B. There is an increased level of collagenase when compared to healing skin wounds.",
        "C. The serosa plays a minimal role in the healing of a small-bowel anastomosis.",
        "D. The submucosa provides the most significant strength layer of the entire gastrointestinal tract.",
        "E. Free omental flaps have been shown to improve outcomes when doing a small-bowel anastomosis."
      ],
      "answer": "B",
      "explanation": "- While healing of the gastrointestinal tract follows basic steps similar to skin wound healing, there are key differences.\n- Skin wounds show a relatively steady increase in tensile strength over time.\n- In contrast, the increased collagenase activity in the small bowel allows collagen breakdown to exceed collagen deposition at days 3 to 5 after an anastomosis (B).\n- This is why anastomotic leaks in the gastrointestinal (GI) tract occur with increased frequency during this critical period.\n- However, the GI tract reaches maximal tensile strength quicker than the skin.\n- The submucosa provides most of the tensile strength for an anastomosis due to its coarse, interwoven fibers.\n- The mucosa and serosa are equally important, and both help provide a quick, leakproof barrier for the first several days (C)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Match the surgery, the correct wound class, and prophylactic antibiotic recommendation:\nA. Cardiac surgery, class I, no need for prophylactic antibiotics\nB. Carotid endarterectomy, class I, no need for prophylactic antibiotics\nC. Breast cancer surgery, class I, administer prophylactic antibiotics\nD. Hemodialysis access surgery, class II, no need for prophylactic antibiotics\nE. Elective laparoscopic cholecystectomy, class II, administer prophylactic antibiotics",
      "options": [
        "A. Cardiac surgery, class I, no need for prophylactic antibiotics",
        "B. Carotid endarterectomy, class I, no need for prophylactic antibiotics",
        "C. Breast cancer surgery, class I, administer prophylactic antibiotics",
        "D. Hemodialysis access surgery, class II, no need for prophylactic antibiotics",
        "E. Elective laparoscopic cholecystectomy, class II, administer prophylactic antibiotics"
      ],
      "answer": "",
      "explanation": ""
    }
  ]
}
{
    "chapter_name": "17 Anaesthesia and pain relief",
    "questions": [
        {
            "id": "1",
            "question_type": "msq",
            "question": "In which of the following scenarios is the maximum safe dose of local anaesthetic calculated correctly?",
            "options": [
                "A 30 mLs of 0.5% bupivacaine for a 50 kg patient.",
                "B 7 mLs of 2% lidocaine with adrenaline for a 20 kg child.",
                "C 28 mLs of 0.5% levobupivacaine for a 70 kg patient.",
                "D 6 mLs of 4% prilocaine for a 60 kg patient.",
                "E 16 mLs of 1% lidocaine for a 80 kg patient."
            ],
            "answer": [
                "B",
                "C",
                "E"
            ],
            "explanation": "To convert to mg/mL from %, simply move the decimal point one digit to the left, i.e., 1% = 10 mg/mL.\nMaximum doses of local anaesthetics are:\nLidocaine 3 mg/kg (7 mg/kg with adrenaline)\nBupivacaine/levobupivacaine 2 mg/kg\nPrilocaine 6 mg/kg (9 mg/kg with adrenaline)\nThe correct calculations therefore are:\nA 50 kg x 2 mg/kg = 100 mg → 100 mg/(5 mg/mL, i.e., 0.5%) = 20 mL\nB 20 kg x 7 mg/kg = 140 mg → 140 mg/(20 mg/mL, i.e., 2%) = 7 mL\nC 70 kg x 2 mg/kg = 140 mg → 140 mg/(5 mg/mL, i.e., 0.5%) = 28 mL\nD 60 kg x 6 mg/kg = 360 mg → 360 mg/(40 mg/mL, i.e., 4%) = 9 mL\nE 80 kg x 3 mg/kg = 240 mg → 240 mg/(10 mg/mL, i.e., 1%) = 24 mL\nThe doses above refer to administration into tissues with a poor blood supply. Local anaesthetics are more likely to cause toxicity if injected into vascular tissues, and the previously mentioned doses could well be fatal if inadvertently injected intravascularly."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "Which of the following statements about general anaesthesia are true?",
            "options": [
                "A Rapid sequence inductions are only indicated for unfasted patients undergoing non-elective surgery.",
                "B IV access must always be obtained prior to induction of anaesthesia.",
                "C Nitrous oxide is a useful agent due to its analgesic effect and low risk of postoperative nausea and vomiting.",
                "D The triad of general anaesthesia is amnesia, analgesia and muscle relaxation.",
                "E Propofol has replaced thiopentone as the most widely used induction agent because of concerns about adrenocortical depression."
            ],
            "answer": "D",
            "explanation": "The aims of anaesthesia are analgesia amnesia and muscle relaxation.\nRapid sequence inductions (RSI) are indicated in unfasted patients to reduce the risk of pulmonary aspiration. Even patients who are fasted will have a small amount of residual acidic gastric fluid, so patients who have severe GORD, for example, may also need an RSI. While IV access is desirable, induction of anaesthesia with an inhaled anaesthetic agent is often used in children or severely needle-phobic patients. Nitrous oxide is less commonly used for several reasons, including an increased risk of nausea and vomiting. It does however provide analgesia and is used for pain relief in labour as a first-line agent. Propofol is the most commonly used induction agent due to its reduced hangover effect compared with thiopentone and because it facilitates the insertion of laryngeal masks being a potent suppressor of laryngeal reflexes. Etomidate causes adrenal suppression."
        },
        {
            "id": "3",
            "question_type": "msq",
            "question": "Which of the following advantages does ketamine have when compared with other anaesthetic agents?",
            "options": [
                "A Haemodynamic stability",
                "B Potent analgesic effect",
                "C Low incidence of postoperative delirium",
                "D Preservation of airway reflexes",
                "E Fastest speed of onset"
            ],
            "answer": [
                "A",
                "B",
                "D"
            ],
            "explanation": "Ketamine is an ideal anaesthetic agent for field anaesthesia and severely shocked patients, as it preserves laryngeal reflexes, maintains airway patency and also has a positive inotropic effect, thus minimising hypotension. By inhibiting NMDA receptors, it also provides potent analgesia. In a monitored environment it can be administered as a low-dose infusion as part of a pain management strategy in patients whose pain is insufficiently controlled by IV opiates.\nUnfortunately there is a significant incidence of unpleasant postoperative delirium and hallucinations, which precludes routine use. It takes longer to act than other IV induction agents but has the advantage of also being able to be administered intramuscularly."
        },
        {
            "id": "4",
            "question_type": "msq",
            "question": "Classical features of local anaesthetic toxicity include:",
            "options": [
                "A Hypertension",
                "B Transient blindness",
                "C Seizures",
                "D Cardiac arrhythmias",
                "E Loss of consciousness"
            ],
            "answer": [
                "C",
                "D",
                "E"
            ],
            "explanation": "Local anaesthetics (LA) act by reversibly blocking Na+ channels in nerves, preventing depolarisation. Toxic effects occur when LA enters the circulation and blocks Na+ channels in the heart and brain. Initial symptoms are often nonspecific; a patient may complain of ‘feeling strange' or of light-headedness. Other symptoms include tinnitus, tingling lips and a metallic taste. Severe effects include arrhythmias, seizures, reduced GCS and cardiac arrest. Treatment of these severe effects should proceed according to standard resuscitation algorithms, with one key difference – the administration of Intralipid®20% IV should be started as soon as possible. Intralipid is a lipid emulsion, which acts as a reservoir for lipophilic LA molecules, effectively removing them from the circulation and causing LA to dissociate from Na+ channels. Intralipid should be immediately available in all settings where potentially toxic doses of LAs are administered.\nTransient blindness and hypertension are not symptoms of LA toxicity."
        },
        {
            "id": "5",
            "question_type": "msq",
            "question": "Which of the following statements regarding Bier's block are true?",
            "options": [
                "A Lidocaine is the local anaesthetic of choice.",
                "B The minimum duration of cuff inflation is 20 minutes.",
                "C Bupivacaine is not recommended.",
                "D If used on the lower limb carries a higher risk of toxicity.",
                "E Patients do not need to be fasted."
            ],
            "answer": [
                "B",
                "C",
                "D"
            ],
            "explanation": "The minimum duration of cuff inflation is 20 minutes when performing a Bier's block. Bupivacaine must not be used, as it has a high affinity for cardiac Na+ channels with an increased risk therefore of cardiac toxicity. Bier's blocks on the lower limb are less frequently used due to an increased risk of LA toxicity.\nPatients undergoing a procedure under Bier's Block should be fasted, as occasionally conversion to GA is required due to patient discomfort. Prilocaine is the local anaesthetic of choice due to its low toxicity and short duration of action."
        },
        {
            "id": "6",
            "question_type": "msq",
            "question": "Which of the following statements are true regarding laryngeal masks?",
            "options": [
                "A Modern versions of laryngeal masks provide the same level of airway protection as an endotracheal tube.",
                "B Laryngeal masks are not suitable for airway management of a patient in cardiac arrest.",
                "C Laryngeal masks can be used in a mechanically ventilated patient.",
                "D Laryngeal masks are less traumatic to a patient's airway than an endotracheal tube.",
                "E Laryngeal masks are always easy to insert."
            ],
            "answer": [
                "C",
                "D"
            ],
            "explanation": "Laryngeal masks (LMAs) cause less trauma and irritation of the airway than endotracheal tubes and hence present a lower incidence of postoperative sore throats and laryngospasm in patients. LMAs can be used in spontaneously breathing and mechanically ventilated patients.\nModern LMA designs provide a better seal and increased protection against gastric aspiration than the original LMA. However, LMAs do not provide the same level of airway protection as endotracheal tubes. LMAs are usually easy to insert and provide a patent airway that can be maintained by one person. Their use is therefore encouraged in cardiac arrest situations where there is not a skilled intubator present, as minimal training is required to place an LMA correctly."
        },
        {
            "id": "7",
            "question_type": "msq",
            "question": "Which of the following statements about neuropathic pain are correct?",
            "options": [
                "A It is classically described as ‘burning', 'shooting', or 'stabbing.'",
                "B Opiates are the mainstay of treatment.",
                "C Allodynia describes an increased sensitivity to a normally painful stimulus.",
                "D Tricyclic antidepressants are a useful treatment modality.",
                "E May be due to dysfunction in both peripheral and central nerves."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "Neuropathic pain is a complex and incompletely understood phenomenon that occurs due to dysfunction of both peripheral and central nerves. There may be a trigger, such as trauma or surgery, but neuropathic pain often continues even after the original tissue damage has healed. Burning, shooting and stabbing are adjectives classically used to describe neuropathic pain. Tricyclics, ketamine and anticonvulsants are a few examples of drug treatment modalities.\nNeuropathic pain is often very resistant to treatment with opiate analgesia. Several terms are used to describe the abnormal sensations that accompany neuropathic pain: Allodynia describes a painful sensation to a stimulus that is not normally painful such as light touch; hyperalgesia describes an increased sensitivity to painful stimuli; and dysaesthesia describes spontaneous unpleasant abnormal sensations."
        },
        {
            "id": "8",
            "question_type": "msq",
            "question": "Which of the following statements regarding epidural analgesia are correct?",
            "options": [
                "A If used intra-operatively, epidural analgesia can reduce blood loss.",
                "B Can be safely left in situ for 5 days.",
                "C Reduces postoperative respiratory complications following abdominal surgery.",
                "D Patients should not mobilise with an epidural, due to the risk of postural hypotension.",
                "E Treatment of epidural-associated hypotension includes IV fluid administration and vasopressor infusions."
            ],
            "answer": [
                "A",
                "C",
                "E"
            ],
            "explanation": "The resultant sympathetic blockade following epidural local anaesthesia causes vasodilation, reduced venous pressure and, thereby, reduced venous bleeding intraoperatively. Epidurals can provide excellent postoperative analgesia, facilitating chest physiotherapy and have been shown to reduce the incidence of postoperative chest infections following major surgery.\nEpidural catheters should be removed after 72 hours, as the risk of epidural infection increases markedly if left in situ for longer. Catheters should not be removed if the patient has significant coagulation abnormalities, as there is a risk of epidural haematomas forming on removal as well as insertion. Epidurals facilitate early, even same-day, mobilisation, and are a key component of enhanced recovery care pathways. The treatment of epidural-associated hypotension requires replacing any intravascular volume deficit and potentially commencing a vasopressor infusion (e.g., phenylephrine, noradrenaline) to counteract vasodilation. Reducing the dose of local anaesthetic must be done cautiously to prevent pain."
        },
        {
            "id": "9",
            "question_type": "msq",
            "question": "Which of the following statements about the WHO pain step ladder are correct?",
            "options": [
                "A If simple analgesics are ineffective, they should be stopped and intermediate-strength opioids prescribed.",
                "B The breakthrough dose of strong opiates should be approximately 1/6 of the total daily dose of long-acting opiates.",
                "C Most patients being treated for cancer pain with strong opiates will develop addiction.",
                "D Nausea is usually a transient problem for people on strong opiates.",
                "E Pethidine is the recommended strong opiate."
            ],
            "answer": [
                "B",
                "D"
            ],
            "explanation": "In general, patients on long-acting opiates should have breakthrough doses prescribed of around 1/6 of the total daily amount of long-acting opiate; smaller doses are likely be to ineffective due to tolerance. Nausea is usually a transient problem with long-term opiate use. Many patients will develop features of dependence following long-term opiate administration (i.e., tolerance and withdrawal symptoms on cessation); however, addiction, a psychosocial phenomenon, is not usually a problem when opiates are prescribed appropriately. Pethidine is no longer recommended for severe continuing pain due to the risk of neurotoxicity, arrhythmias and severe cor pulmonale that can occur from accumulation of toxic metabolites. The underlying principle for treating severe pain is combining several classes of drugs to achieve a synergistic effect. Therefore, simple analgesics should be continued for patients on strong opiates."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "Patients vary greatly in their requirement for postoperative analgesia. What is the best way to assess adequacy of pain relief?",
            "options": [
                "A Measure the degree of tachycardia.",
                "B Ask the patient to measure the pain.",
                "C Assess the level of hypertension.",
                "D Look for tachypnoea.",
                "E Assess level of sedation."
            ],
            "answer": "B",
            "explanation": "In general, the patient is the best person to assess his or her own pain and analgesia. This can be done by using verbal rating scales such as 0 to 10 or mild/moderate/severe, or by getting the patient to mark where he or she thinks is best on a 10 cm line (visual analogue scale) where one end denoted as ‘no pain' and the other end as ‘worst pain'. Trends in pain scores are more useful than isolated measurements, as they allow clinicians to assess whether an intervention to reduce pain is working.\nClinicians can also be guided by other signs of adequate analgesia, e.g., if a patient can cough and breathe deeply without distress following abdominal surgery. Tachycardia, hypertension, agitation and tachypnoea are nonspecific features of inadequate analgesia."
        },
        {
            "id": "11",
            "question_type": "matching",
            "question": "Match each of the following operations with an appropriate analgesic modality from the choices that follow the list of operations. Each option may only be used once.",
            "options": {
                "items": [
                    "1 Elective abdominal aortic aneurysm repair in a 68-year-old patient with ischaemic heart disease",
                    "2 Elective laparoscopic cholecystectomy in a 37-year-old ASA 1 patient",
                    "3 Emergency sigmoid colectomy for perforated diverticulitis in a 76-year-old patient",
                    "4 Mastectomy with axillary node clearance in a 57-year-old patient with stage 4 chronic kidney disease",
                    "5 Open cholecystectomy in a 42-year-old patient with mild asthma",
                    "6 Open inguinal hernia repair in a 65-year-old patient with severe COPD"
                ],
                "choices": [
                    "A Intercostal nerve blocks",
                    "B Opiate patient controlled analgesia (PCA)",
                    "C Oral morphine",
                    "D Oral non-steroidal anti-inflammatory drugs (NSAIDs)",
                    "E Spinal anaesthesia",
                    "F Thoracic epidural"
                ]
            },
            "answer": {
                "1": "F",
                "2": "D",
                "3": "B",
                "4": "C",
                "5": "A",
                "6": "E"
            },
            "explanation": "1. F Thoracic epidural\nThoracic epidurals can provide excellent analgesia for major surgery and prevent the adverse effects of parenteral opiates. The main contraindications are patient refusal, local or systemic sepsis, coagulopathy, or administration of anticoagulant drugs.\nAll patients with epidurals should be managed in a monitored environment. They allow patients to comply with physiotherapy, and thereby reduce postoperative pneumonias and enable mobilisation.\nThe epidural mixture is usually a low concentration of bupivacaine (0.0625%-0.125%) with a small amount of added opiate (e.g., 2 mcg/mL fentanyl). It may be administered as a continuous infusion, patient-controlled epidural analgesia (PCEA), or a combination of both. Typical infusion rates are 6–15 mL/hour.\nEpidurals should generally be removed after 3 days to minimise the risk of infection. Timing of catheter removal will also depend on concurrent anticoagulant administration and coagulopathy.\nComplications and problems include the following:\n• Inadequate analgesia – May require epidural top-up, catheter adjustment, epidural resiting. Discuss problems early with the on-call anaesthesia team.\n• Hypotension – Replace any intravascular volume deficit and consider vasoconstrictor infusion.\n• Urinary retention – May require short-term catheterisation.\n• Headache – A common symptom. Rule out post-dural puncture headache (PDPH), which has an incidence of less than 1:100. PDPH can be treated effectively with an epidural blood patch.\n• Epidural haematoma/abscess – A rare but serious complication. If suspected, requires an emergency MRI scan and neurosurgical assessment. IV antibiotics must also be started immediately if infection is suspected.\n• Nerve/spinal cord injury – Very rare. Fully document any deficit and make appropriate referrals.\n2. D Oral non-steroidal anti-inflammatory drugs (NSAIDs)\nOral NSAIDs have potent analgesic, anti-inflammatory and antipyretic properties. They act by inhibiting the cyclooxygenase enzyme, which converts arachidonic acid to prostaglandins. Oral NSAIDs should be considered as part of any analgesic regimen, however, their use is limited by several of the following adverse effects:\n• Gastric ulceration, perforation and bleeding.\n• Impaired platelet function.\n• Renal injury, especially in the context of dehydration, chronic kidney disease, or concomitant use of ACE inhibitors.\n• A small minority of asthmatics experience exacerbations following administration.\n3. B Opiate patient controlled analgesia (PCA)\nOpiates have a relatively narrow therapeutic window between plasma levels that provide effective analgesia and levels that cause significant side effects. Compounding the issue is the large variation in opiate requirements between individual patients. Patient-controlled analgesia delivery systems aim to circumvent this problem by allowing the patient to self-administer the drug.\nA bolus of morphine 1–2 mg or fentanyl 10–30 mcg followed by a five to 10 minute lockout are standard regimens. A low-dose background infusion may be added with caution, as this increases the risk of overdose.\nAll patients should have 2 L of supplemental O₂ administered and should have at least hourly observations, with particular attention paid to sedation scores and respiratory rate.\n4. C Oral morphine\nAll opiates act by inhibiting mu, delta and kappa receptors, which are found in the brain and spinal cord. A typical starting oral morphine dose would be between 5 and 20 mg, the main determinant being the patient's age, with elderly patients being more sensitive to the effects. Peak effect following oral administration of the immediate release preparations is around 30 to 60 minutes.\nNB! When converting between IV and oral formulations of morphine remember that 10mg PO and 3mg IV are equipotent doses. This is because the oral bioavailability of morphine is 30%. Twelve- and 24-hour sustained release versions of morphine are also available. In general, the PRN dose should be 1/6 of the total daily sustained release dose.\nThe most serious potential side effects of opiates are sedation and respiratory depression – naloxone is an opiod antagonist. For life-threatening opiate overdose, 0.4–2 mg IV repeated at intervals of 2 to 3 minutes up to a total dose of 10 mg can be administered. The duration of action is around 40 minutes, so a continuous infusion may need to be started. Naloxone will also reverse all analgesia, so for mild overdose consider more cautious administration in 40 mcg increments. Other adverse effects are nausea, constipation, pruritus and urinary retention.\n5. A Intercostal nerve blocks\nIntercostal nerve blocks are a simple yet effective mode of analgesia in a variety of situations. Indications include the following:\n• Fractured ribs\n• Thoracotomy\n• Open cholecystectomy\n• Renal surgery\n• Breast surgery\nTechnique:\nIn general, the nerves from T2 to T11 may be blocked. It is important to block the nerves before they give off the lateral cutaneous branch; aim to be at or proximal to the angle of the rib. Positioning can be either leaning forward with arms crossed, or in the lateral position with the arm pulled across the chest. This keeps the scapula out of the way and enables access to T2 to T6. As with all blocks asepsis is important.\nPalpate each rib with two fingers and insert the needle perpendicularly between them until you hit bone. Then walk off the bottom of the rib, and just under it, until you feel a slight loss of resistance. Aspirate prior to injection, as the intercostal artery runs in close proximity to the nerve, and then deposit 3–5 mLs of local anaesthestic. The block should work within 5 to 10 minutes and lasts for 8 to 12 hours. The main complications are pneumothorax, bleeding and intravascular injection.\n6. E Spinal anaesthesia\nSpinal anaesthesia is a useful for abdominal and lower limb surgery. The main contraindications are the same as for epidural analgesia – patient refusal, local or systemic sepsis, coagulopathy, or administration of anticoagulant drugs. The main advantages of spinal anaesthesia are avoidance of general anaesthesia, reduced intraoperative blood loss and reduced incidence of DVTs.\nFollowing a single dose of local anaesthetic, a spinal can be expected to provide anaesthesia for 2 to 3 hours. For prolonged analgesia, a small dose of opiate may be added such as 0.1-0.3 mg of morphine or diamorphine. This provides excellent analgesia for 12 to 16 hours. Continuous analgesia with spinal catheters is used uncommonly.\nPotential problems include the following:\n• Delayed respiratory depression if spinal opiates are used. The patient will require hourly observations for 24 hours postoperatively.\n• Hypotension\n• Nerve damage\n• Post dural puncture headache\n• Urinary retention"
        }
    ]
}
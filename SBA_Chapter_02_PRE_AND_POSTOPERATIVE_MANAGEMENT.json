{
    "chapter_name": "PRE- AND POSTOPERATIVE MANAGEMENT",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "You are asked to review a 45-year-old man on the surgical ward by the nursing staff. Checking through the notes, you observe that he is 1 day following an open anterior resection for rectal carcinoma. He describes severe central abdominal pain associated with dyspnoea. The abdomen is soft but generally tender throughout. His symptoms have occurred despite an epidural that was inserted prior to surgery. What is the most effective form of analgesia in this setting?",
            "options": [
                "A. Four-hourly intramuscular morphine",
                "B. Patient-controlled opiate analgesia (PCA)",
                "C. Intravenous paracetamol",
                "D. Per rectum diclofenac",
                "E. Intravenous oxycodeine hydrochloride"
            ],
            "answer": "B",
            "explanation": "This patient is 1 day following a major bowel resection. The best form of analgesia in this setting is an epidural; however, this appears not to be functioning. Hence, a PCA system is indicated. This mode of delivery has been shown to be effective for control of postoperative pain. In addition, it reduces the risk of development of basal atelectasis and other respiratory complications. The drawback with PCA is that it requires a level of patient cooperation and understanding, and the patient has to be able to use the device. Intravenous oxycodeine hydrochloride and intramuscular morphine are strong and effective analgesics. The rationale for preferring PCA is that it has been shown to provide a superior background of analgesia, with fewer episodes of breakthrough pain. The parental opioid administration is preferred in patients who are less suitable for PCA, that is those unable to understand instructions, those under sedation and those with vision impairment or mobility/coordination issues. Paracetamol and diclofenac are simple analgesics, which you are told have not relieved the patient's pain. These drugs may be appropriate to use in conjunction with a PCA system or other morphine analgesia, although candidates must be aware that PR drugs should be strictly avoided in patients with a recent low rectal resection."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "A 64-year-old man undergoes a laparoscopic gastric bypass for obesity. His baseline blood pressure is 150/80 mmHg. Intraoperatively, there was a small serosal tear which was sutured laparoscopically. The patient had some bleeding during the dissection of the lesser omentum, which was controlled with diathermy. The patient did not require intraoperative transfusion. Postoperatively on return to the high dependency unit, the patient is mechanically ventilated and his blood pressure is 80/40 mmHg. His urine output is 15 mL/h. Which of the following is the best means of improving his urine output?",
            "options": [
                "A. Commence an infusion of furosemide",
                "B. A trial of dobutamine",
                "C. O-negative blood transfusion",
                "D. Insert a Swan-Ganz catheter",
                "E. Give a fluid challenge and monitor the clinical response"
            ],
            "answer": "E",
            "explanation": "In a surgical patient, it is typically safe to assume that the cause of postoperative hypotension is hypovolaemia until proved otherwise. This patient may be suffering from a reactionary haemorrhage from a vessel within the lesser omentum. The most appropriate management plan would be to give a fluid challenge and monitor the clinical response while simultaneously checking the full blood count and clotting. Inotropic support with drugs such as noradrenaline and dobutamine is the reserve of patients who are fluid replete but who still struggle to maintain their urinary output. Use of these drugs might be indicated once there is confirmation that the patient is adequately filled. There is little value to be gained from inserting a Swan-Ganz catheter, unless there is a clear cardiac cause for shock. Insertion of pulmonary artery catheters is controversial and some studies even suggest their use is associated with increased mortality. Furosemide may play a role in the management of a patient with low urine output and fluid overload but not in cases of hypovolaemia."
        },
        {
            "id": "3",
            "question_type": "mcq",
            "question": "A 46-year-old woman re-presents to the emergency department 48 hours following an ‘uncomplicated' laparoscopic cholecystectomy and on-table cholangiogram. She describes a history of progressive, constant, right upper quadrant pain radiating to the shoulder tip since the surgery. The pain is worse on coughing and moving. On direct questioning, she describes a 24-hour history of nausea and vomiting. The abdomen is rigid. Her liver function tests are abnormal as follows: bilirubin 60 µmol/L, alkaline phosphatase 550 IU/L and alanine aminotransferase 220 IU/L. Her international normalized ratio is <1.5. Which single investigation is more likely to be diagnostic?",
            "options": [
                "A. Endoscopic retrograde cholangiopancreatography",
                "B. Computed tomography scan of the abdomen and pelvis",
                "C. Erect chest radiograph",
                "D. Amylase or lipase levels",
                "E. Urine Ketostix to detect ketonuria"
            ],
            "answer": "A",
            "explanation": "This question requires careful consideration because of its wording: ‘Which single investigation is more likely to be diagnostic'. An urgent CT scan of the abdomen and pelvis will reveal a small amount of free air secondary to the recent laparoscopy and free fluid; however, it would not be able to determine the source of the fluid. In this setting, ERCP would be required to determine the site of a leak and a CT would help in the assessment. If the question had asked which investigation is likely to be performed first, the correct answer might be a CT or ultrasound scan. Optimal care would be for a scan to confirm a collection followed by an operation to identify a cause. The most likely diagnosis in this case is of a biliary leak (commonly secondary to either slipped Ligaclip, a high pressure ductal system, or a duct of Luschka). An erect chest plain film radiograph is an appropriate investigation in the work-up of a patient with an acute abdomen, but in this setting it is likely to reveal a small amount of free air secondary to the recent laparoscopic cholecystectomy. Urgent amylase or lipase levels should be performed as a matter of routine to exclude pancreatitis secondary to the on-table cholangiogram. However, pancreatitis is unlikely to be the cause of this patient's peritonism or subphrenic irritation. Urine Ketostix to detect ketonuria should be performed as part of the assessment. It is likely to show dehydration-associated ketonuria, but this will not aid the diagnosis."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "You are called urgently to see a 67-year-old man who is 24 hours following uncomplicated laparoscopic cholecystectomy. The patient is human immunodeficiency virus-positive and has a past history of thrombocytopenia and at pre-assessment his platelet count was 60 × 109/L. He is complaining of chest pain and breathlessness and his abdomen is noticeably more distended than in the initial postoperative period with significant peri-umbilical tenderness. His postoperative electrocardiogram shows lateral ischaemia and his current haemoglobin level is 7.5 g/dL. He is tachycardic and his blood pressure is 115/75 mmHg. The next appropriate step is",
            "options": [
                "A. Bleep the on-call cardiologist",
                "B. Start treatment dose heparin",
                "C. Start an infusion of glyceryl trinitrate",
                "D. Start blood transfusion",
                "E. Return the patient to operating theatre for re-look laparoscopy"
            ],
            "answer": "D",
            "explanation": "It is likely that this patient has had an umbilical port-site bleed/ haematoma (not uncommon following laparoscopic procedures). Subsequent blood loss and anaemia are the likely precipitant of the angina-like chest pain and dyspnoea. Note that atherosclerosis is more common in retroviral-positive individuals, and they are therefore at increased risk of underlying undiagnosed cardiovascular disease. Treating the cause of the anaemia is likely to be the most important step. It may be appropriate to call a cardiologist and ultimately commence a GTN infusion, although GTN should be avoided in haemodynamic compromise as it can cause profound hypotension. Heparin should be used cautiously in patients with thrombocytopenia and the advice of a haematologist should be sought."
        },
        {
            "id": "5",
            "question_type": "mcq",
            "question": "The nursing staff asks you to review an erect chest radiograph of a 60-year-old woman who has undergone open colonic surgery for a pelvic mass 3 days ago. She is comfortable at rest. Her abdomen is distended, with absent bowel sounds. Free air under the hemi-diaphragms is likely to be due to",
            "options": [
                "A. Perforated peptic ulcer",
                "B. Anastomotic leakage",
                "C. Perforated sigmoid diverticulum",
                "D. A normal finding 4 days post laparotomy",
                "E. A diaphragmatic injury"
            ],
            "answer": "D",
            "explanation": "The presence of free air under the diaphragm is not uncommon following open and laparoscopic surgery and is the most likely explanation for this finding. This represents a normal finding 3 days post laparotomy. Other less likely causes of free intraperitoneal air in this setting include anastomotic leakage, perforated sigmoid diverticulum and perforated peptic ulcer; however, these are extremely unlikely in a patient who is otherwise well."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "A 22-year-old woman with known Crohn's disease is about to undergo an emergency subtotal colectomy with ileostomy. Prior to surgery the patient has been on 30 mg of prednisolone daily for more than 3 months. The best management to prevent an addisonian crisis would be",
            "options": [
                "A. Additional steroid cover is not required",
                "B. Usual preoperative dose only (30 mg oral prednisolone)",
                "C. 50 mg of hydrocortisone intravenously preoperatively, followed by 50 mg of hydrocortisone intravenously 8-hourly for 72 hours",
                "D. 25 mg of hydrocortisone intravenously preoperatively, then resume the normal steroid dose postoperatively",
                "E. 25 mg of hydrocortisone intravenously preoperatively, followed by 25 mg of hydrocortisone intravenously for 24 hours"
            ],
            "answer": "C",
            "explanation": "The amount of steroid cover required perioperatively relates to the duration of preoperative steroid use, the amount used and the nature of the surgery. The following table shows a guide to pre- and postoperative steroid regimens for different types of surgery.\nPreoperative steroid use: <10 mg daily, Nature of surgery: Minor, Suggested steroid regimen: No cover required\nPreoperative steroid use: >10 mg daily, Nature of surgery: Minor, Suggested steroid regimen: 25 mg intravenous hydrocortisone preoperatively Resume normal steroid use postoperatively\nPreoperative steroid use: >10 mg daily, Nature of surgery: Intermediate, Suggested steroid regimen: 25 mg intravenous hydrocortisone preoperatively 25 mg intravenous hydrocortisone every 8 hours for 24 hours then resume normal steroid dose\nPreoperative steroid use: >10 mg daily, Nature of surgery: Major, Suggested steroid regimen: 50 mg intravenous hydrocortisone preoperatively 50 mg intravenous hydrocortisone every 8 hours for 72 hours then resume normal steroid dose"
        },
        {
            "id": "7",
            "question_type": "mcq",
            "question": "You are asked to assist your consultant who is operating on a 43-year-old human immunodeficiency virus-positive man involved in a road traffic accident. The following precautions have been shown to decrease risk of HIV transmission, with the exception of",
            "options": [
                "A. Gowns",
                "B. Double glove with indicator system",
                "C. Protective eye wear",
                "D. Laminar flow ventilation",
                "E. Surgical masks"
            ],
            "answer": "D",
            "explanation": "The US Centers for Disease Control and Prevention recommends wearing gloves and surgical masks for all invasive procedures. Protective eyewear or face shields should be worn for procedures that commonly result in the generation of droplets, splashing of blood or other body fluids, or the generation of bone chips. Gowns or aprons made of materials that provide an effective barrier should be worn during invasive procedures that are likely to result in the splashing of blood or other body fluids. There is no evidence that laminar flow ventilation reduces the risk of contraction of HIV."
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "You are called to the ward to review a 72-year-old man who is pyrexial at 38.0°C, 8 hours following an anterior resection for rectal adenocarcinoma without defunctioning stoma. He is asymptomatic and pain-free with an epidural. A urinary catheter inserted in theatre is draining concentrated urine. He has a history of chronic airways disease controlled with inhalers. He has no respiratory distress, but both lung bases sound quiet. The most likely explanation for the patient's pyrexia is",
            "options": [
                "A. Epidural abscess",
                "B. Systemic response to surgical trauma",
                "C. Basal atelectasis",
                "D. Infective exacerbation of chronic airways disease",
                "E. Urinary sepsis"
            ],
            "answer": "B",
            "explanation": "This patient is only 8 hours following major abdominal surgery. The pyrexia is likely to be due to the systemic response to surgical trauma. The patient is at risk of pulmonary atelectasis, but this would be a more likely answer 24-48 hours postoperatively. An infective exacerbation of chronic airways disease is less likely in the absence of respiratory symptoms or signs and more commonly occurs as a consequence of pulmonary atelectasis between 3 and 7 days postoperatively. The urinary catheter was inserted in theatre, making urinary catheter sepsis less likely. While an epidural abscess is a recognized cause of postoperative pyrexia, it is unlikely to be responsible for early postoperative pyrexia."
        },
        {
            "id": "9",
            "question_type": "mcq",
            "question": "You are called to see the same patient 7 days postoperatively as he has become unwell and pyrexial with a temperature of 39.0°C. The patient has generalized abdominal discomfort. The abdomen is tender with generalized guarding and rebound. The chest is clear to auscultation. The patient's catheter and epidural were removed 2 days ago. The most likely explanation for the patient's pyrexia is",
            "options": [
                "A. Deep vein thrombosis",
                "B. Infective exacerbation of chronic airways disease",
                "C. Pulmonary embolus",
                "D. Anastomotic leakage",
                "E. Pre-existing chest infection"
            ],
            "answer": "D",
            "explanation": "The patient is 7 days following an anterior resection without a defunctioning stoma. The patient has generalized peritonitis. The most likely answer is an anastomotic leakage. Pulmonary embolus and deep vein thrombosis are recognized causes of postoperative pyrexia and should be excluded but are less likely. Pre-existing chest infection and infective exacerbations are common in patients with COPD but are less likely to be responsible for increasing abdominal pain and peritonitis."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "A 62-year-old man is admitted to the emergency department with abdominal pain. The patient has a past history of ischaemic heart disease and atrial fibrillation. Computed tomography scan features are highly suggestive of ischaemic bowel. The patient's blood gases are as follows:\n• pH = 7.25\n• pa02 = 10\n• paCO2 = 2.8\n• HCO3 = 18\n• Base excess = -8\nWhich of the following best describes the patient's acid-base status?",
            "options": [
                "A. Metabolic acidosis",
                "B. Metabolic acidosis with respiratory compensation",
                "C. Respiratory acidosis with metabolic compensation",
                "D. Metabolic acidosis with inadequate respiratory compensation",
                "E. Cannot be sure without a serum lactate level"
            ],
            "answer": "D",
            "explanation": "This patient probably has ischaemic bowel. This is a common cause of metabolic acidosis. However, the patient's paCO2 level is low, suggesting that there is an element of respiratory compensation, but the continued low pH suggests that the respiratory compensation is inadequate. The most likely answer therefore is metabolic acidosis with inadequate respiratory compensation. A serum lactate level may help determine the underlying cause of the metabolic acidosis, but is not a consideration when determining the nature of the acid-base derangement."
        },
        {
            "id": "11",
            "question_type": "mcq",
            "question": "You are called urgently to see an 80-year-old man who is 6 days following open anterior resection for rectal carcinoma with defunctioning stoma. The patient reported seeing a gush of pink fluid from the central laparotomy wound. You notice that the small bowel is eviscerating from the wound. Following initial resuscitation, the next best step is to",
            "options": [
                "A. Cover the small bowel with a sterile saline-soaked gauze",
                "B. Call for senior help",
                "C. Administer intravenous cefuroxime 1.5 g",
                "D. Return the patient to theatre for deep-tension abdominal wall closure",
                "E. Apply vacuum-assisted closure therapy"
            ],
            "answer": "A",
            "explanation": "The most appropriate next step following resuscitation is to protect the bowel from the atmosphere with a saline-soaked gauze. This should precede the subsequent management, which would include calling a senior colleague, administering intravenous antibiotics and returning the patient to theatre for immediate closure of the abdomen using deep tension sutures. Vacuum-assisted closure therapy can be used in cases of wound dehiscence, but not where the bowel is eviscerated. (Note that the use of VAC dressings in full abdominal dehiscence, evisceration and fistula formation has been described, but involves the use of a protective layer of the bowel; trials are ongoing to determine efficacy.)"
        },
        {
            "id": "12",
            "question_type": "mcq",
            "question": "The surgical registrar is about to obtain informed consent from a 16-year-old boy for an open appendicectomy. Which of the following statements regarding consent in minors is most correct?",
            "options": [
                "A. Parental consent must be sought prior to obtaining patient consent",
                "B. If the child refuses treatment, the parent's consent is required",
                "C. The registrar must determine if the child is competent to obtain informed consent",
                "D. A court order is required",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "The law regarding consent of a minor is complex and often confusing. Remembering a few basic rules, however, will aid understanding. First, the legal age of consent is 18 in the UK. Second, no person may consent to or refuse treatment for another person, not even the parents of the child concerned. Children aged 16-18 may consent to treatment if it is thought that they comprehend the decision they are being asked to make; the medical professional seeking consent is responsible for deciding whether this is the case. Children aged less that 18 cannot refuse treatment, although this area of law is muddied and a court order is often necessary to force treatment, with the burden of proof being on the medical professional to argue that the management is beneficial and life-saving. Although not legally required, it is good medical practice to seek the consent of the parents of the child concerned. In the event of parents refusing consent for a child to have life-saving treatment, such as an appendicectomy, medical professionals can overrule the decision of the parents if they consider treatment is undoubtedly in the child's best interest."
        },
        {
            "id": "13",
            "question_type": "mcq",
            "question": "A 72-year-old woman is about to undergo an elective total hip replacement for osteoarthritis. She has a history of hypertension and type 2 diabetes mellitus but no ischaemic heart disease or peripheral vascular disease. Which of the following is the most appropriate thromboembolic prophylaxis?",
            "options": [
                "A. Intermittent pneumatic calf compression",
                "B. Calf-length thromboembolic deterrent elastic stockings and early ambulation",
                "C. Full-dose unfractionated heparin to increase the activated partial thromboplastin time to two time control",
                "D. Insertion of an inferior vena cava filter",
                "E. Subcutaneous low-molecular-weight heparin"
            ],
            "answer": "E",
            "explanation": "Venous thromboembolism is an important cause of hospital morbidity and mortality. It is estimated that between 5% and 10% of all hospital deaths are directly caused by thromboembolic complications. Post-mortem studies show up to 70% of all patients who die in hospital have some venous thrombus formation. Effective prophylaxis is therefore paramount. A systematic review published in the New England Journal of Medicine in 1988 demonstrated that LMWH administration alone reduced risk of all venous thrombus formation by 67%, with a reduction in the incidence of pulmonary embolism by 47% and fatal pulmonary embolism by 64%. This question may seem confusing to candidates as most will recognize that optimal management in a patient of this age and co-morbidities undergoing hip surgery would be a combination of different prophylactic measures; a combination of LMWH and intermittent calf compression stockings would give the optimum protection. Correct answering of this question, therefore, requires knowledge of the relative efficacy of the different prophylaxis methods. According to published data, following hip surgery elasticised stockings alone reduce risk of VTE by 23%, intermittent compression stockings reduce the incidence by 63% and LMWH alone reduces the risk by 70%. Unfractionated heparin is no better at preventing VTE than LMWH, it is more difficult to administer and is associated with a greater incidence of bleeding complications. The correct answer is therefore option E."
        },
        {
            "id": "14",
            "question_type": "mcq",
            "question": "A 22-year-old man (O blood group) sustained a splenic injury in a road traffic accident. He is undergoing a transfusion of 4 units prior to surgery. You are asked to review the patient 10 minutes into the transfusion as he has become unwell and agitated. He has pyrexia (39.5°C) with associated tachycardia (120 beats/min) and hypotension (80/50 mmHg). Which of the following is the most likely cause?",
            "options": [
                "A. Non-haemolytic febrile transfusion reaction",
                "B. Transfusion-related acute lung injury",
                "C. Bacterial contamination",
                "D. Air embolus",
                "E. Haemolytic transfusion reaction (ABO incompatibility)"
            ],
            "answer": "E",
            "explanation": "Patients becoming unwell within minutes of starting a blood transfusion should arouse the suspicion of a haemolytic transfusion reaction (ABO incompatibility) especially in a patient with O group status. In this scenario we are not told whether the blood was cross-matched or type specific. Non-haemolytic febrile transfusion reactions are more likely to occur >30 minutes following transfusion, and generally, the patient remains well. Bacterial contamination is a possibility and should be excluded, but is less likely than ABO incompatibility. Air embolus and transfusion-related acute lung injury are recognized complications of blood transfusions, but are less likely given the patient's symptoms."
        },
        {
            "id": "15",
            "question_type": "mcq",
            "question": "You are called to the ward to see an agitated 68-year-old man who is 3 days following radical prostatectomy. He is wandering aimlessly around the ward convinced that he is the Duke of Wellington. His Mini-Mental Test score is 4/10. His latest observations reveal pyrexia of 37.6°C, pulse 100 beats/min, blood pressure 146/88 mmHg and respiratory rate 20 breaths/min. You note that the urinary catheter bag contents are cloudy. Which is the most likely explanation for the patient's confusion?",
            "options": [
                "A. Preoperative dementia",
                "B. Delirium secondary to chest infection",
                "C. Delirium secondary to reactionary haemorrhage",
                "D. Delirium secondary to urinary tract sepsis",
                "E. Stroke"
            ],
            "answer": "D",
            "explanation": "Acute confusion is common in elderly patients in the early postoperative period. A history of dementia should be sought, but is unlikely to be responsible for the acute confusion in this patient. The most common causes include dehydration and sepsis. This patient has had a urological procedure and was noted to have cloudy urine. Therefore the most likely explanation is delirium secondary to urinary tract sepsis. Confusion may occur following reactionary haemorrhage, but this is less likely in a patient 3 days following their operation."
        },
        {
            "id": "16",
            "question_type": "mcq",
            "question": "A 49-year-old woman weighing 65kg is 5 days following gastrectomy for gastric carcinoma. Her observations are as follows:\n• Temperature = 39.0°C\n• Pulse = 110 beats/min\n• Blood pressure = 90/50 mmHg\n• Urine output = 10mL/h\n• Respiratory rate = 30 breaths/min\nWhich of the following best describes this patient's pathophysiological status?",
            "options": [
                "A. Sepsis",
                "B. Septic shock",
                "C. Systemic inflammatory response syndrome",
                "D. Multiple organ dysfunction syndrome",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "This patient is displaying features of SIRS, which is defined as two or more of the following:\n• Temperature >38°C or <36°C\n• Heart rate >90 beats/min\n• Tachypnoea (respiratory rate >20 breaths/min) or hyperventilation (paCO2 <4.25 kPa)\n• White blood cell count >12 × 10º/L or <4 × 109/L or the presence of more than 10% immature neutrophils\nSepsis and septic shock by definition require a confirmed source of infection, which is not supported by the information supplied in the clinical scenario. The multiple organ dysfunction syndrome is the presence of altered organ function in acutely ill patients such that homeostasis cannot be maintained without intervention. It usually involves two systems and there are specific scoring systems required to make the diagnosis."
        },
        {
            "id": "17",
            "question_type": "mcq",
            "question": "A 62-year-old man is about to undergo an elective abdominoperineal resection for a low rectal carcinoma. He usually takes 5 mg warfarin per day for atrial fibrillation. His most recent international normalized ratio (INR) is 2.9. Which of the following is the best preoperative strategy?",
            "options": [
                "A. Admit the patient 1 day prior to surgery to stop warfarin and check the INR",
                "B. Admit the patient 3–5 days prior to surgery to stop the warfarin and check the INR <1.5",
                "C. Admit the patient 3-5 days prior to surgery to stop the warfarin, check the INR <1.5 and start aspirin",
                "D. Admit the patient 3–5 days prior to surgery to stop the warfarin, check the INR <1.5 and start heparin infusion",
                "E. Admit the patient 1 day prior to surgery to stop warfarin, check the INR <1.5 and start low-molecular-weight heparin"
            ],
            "answer": "B",
            "explanation": "The patient is about to undergo a major colonic resection with risk of haemorrhage. As the indication for the warfarin therapy is atrial fibrillation, the best strategy is to admit the patient 3–5 days prior to surgery to stop the warfarin and check the INR is <1.5 the day prior to the procedure. No intervening aspirin or heparin is necessary, and indeed these may exacerbate haemorrhage at the time of surgery. Greater consideration needs to be given if the indication for warfarin is recurrent DVT/PE or metallic heart valves. These patients may require admission for conversion of warfarin to heparin injections/infusions. Guidance regarding specific circumstances varies between centres and opinion varies among surgeons. Not all surgery requires cessation of warfarin; for very minor procedures such as examinations under anaesthesia where the risk of serious bleeding is very low, there is no need to stop warfarin."
        },
        {
            "id": "18",
            "question_type": "mcq",
            "question": "A patient on warfarin for multiple deep vein thrombosis is about to undergo an emergency laparotomy for a perforated sigmoid colon. Which of the following is the best preoperative strategy?",
            "options": [
                "A. Discontinue warfarin therapy, administer vitamin K (2–3 mg) and check the international normalized ratio (INR) every 6-8 hours preoperatively",
                "B. Discontinue warfarin therapy and check the INR every 6–8 hours preoperatively",
                "C. Continue warfarin therapy as prescribed",
                "D. Discontinue warfarin therapy, administer vitamin K (2–3 mg), check the INR every 6–8 hours preoperatively, request fresh frozen plasma to cover the procedure",
                "E. None of the above as the surgery should be postponed"
            ],
            "answer": "D",
            "explanation": "This patient has a serious intra-abdominal pathology that requires urgent surgery. Delay in operative management in such a patient increases morbidity and mortality. Therefore, rapid correction of established anticoagulation is necessary in this case. The current recommendation for urgent surgery (i.e. <24 hours) in patients taking oral anticoagulants is to discontinue warfarin therapy, administer vitamin K (2-3 mg), check the INR every 6-8 hours preoperatively and request fresh frozen plasma and cryoprecipitate to cover the procedure. In addition, because of the real risk of major haemorrhage, additional blood and platelets should be requested. It is advisable to liaise with a haematologist in all complex cases such as this."
        },
        {
            "id": "19",
            "question_type": "mcq",
            "question": "A 34-year-old man is about to undergo a left hemicolectomy for colorectal carcinoma. He is an insulin-dependent diabetic. The most appropriate perioperative management is",
            "options": [
                "A. Preoperatively commence 0.9% normal saline (3 L in 3 hours), along with 20 units of intramuscular Actrapid insulin to 6 units per hour thereafter along with potassium supplementation",
                "B. Preoperatively start 50 units of insulin in 500 mL of normal saline and continue through to postoperative period, then restart normal subcutaneous insulin when the patient is eating and drinking normally",
                "C. Start an intravenous infusion of 5% or 10% dextrose (500 mL bags) over 4-6 hours and add insulin and potassium chloride to each bag, titrated to blood glucose and potassium levels",
                "D. Continue usual subcutaneous insulin until and including the day of surgery. Place first on the list and monitor blood glucose preoperatively, intraoperatively and in recovery",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Insulin-dependent diabetic patients undergoing major elective surgery should continue their normal subcutaneous insulin until nil by mouth the night before surgery. Two preoperative regimens are commonlyused: PIG (= potassium, insulin and glucose) as per option C or 50 units of insulin in 50 mL normal saline (i.e. 1:1 regimen) administered according to a sliding scale, run with fluids supplemented with KCl. Option B cannot be considered as the correct answer as it does not take into consideration the need to supplement potassium when infusing insulin. Option A is the appropriate therapy for diabetic ketoacidosis. Note that insulin-dependent diabetic patients undergoing minor surgery may not require additional insulin, and only require close monitoring of blood glucose in the perioperative period."
        },
        {
            "id": "20",
            "question_type": "mcq",
            "question": "A 55-year-old man is about to undergo a diagnostic knee arthroscopy as a day case. He has type 2 diabetes mellitus for which he takes metformin 850 mg/day. The most appropriate perioperative management is",
            "options": [
                "A. Start an intravenous infusion of 5% or 10% dextrose (500 mL bags) over 4-6 hours and add insulin and potassium chloride to each bag, titrated to blood glucose and potassium levels",
                "B. Continue oral hypoglycaemic agents until and including the day of surgery",
                "C. Provided that blood glucose <10mmol/L, continue oral hypoglycaemic agents until the day of surgery, then omit morning dose, restart oral hypoglycaemic with first meal",
                "D. Provided that blood glucose <10mmol/L, preoperatively start 50 units of insulin in 50mL of normal saline and continue through to postoperative period, then restart oral hypoglycaemics with first meal",
                "E. None of the above as management depends on HbA1c levels"
            ],
            "answer": "C",
            "explanation": "The management of type 2 diabetic patients undergoing minor to intermediate surgery is to continue oral hypoglycaemic agents until the day of surgery, then omit the morning dose, restarting oral hypoglycaemics with the first meal. If the patient's blood glucose is >10 mmol/L or they are undergoing major surgery, one of the two commonly used regimens for insulin-dependent diabetic patients should be followed, i.e. either PIG (potassium, insulin and glucose) or an insulin sliding scale. Perioperative management does not depend on HbA1c levels, but this is a reasonably good marker of long-term diabetic control."
        },
        {
            "id": "21",
            "question_type": "mcq",
            "question": "A 17-year-old Caucasian woman who underwent a laparotomy 2 weeks ago for a perforated appendix develops a swinging fever, dry cough, and pain in the tip of her right shoulder. Her latest observations are as follows:\n• Temperature = 38.9°C\n• Blood pressure = 120/76 mmHg\n• Pulse rate = 110 beats/min\n• Respiratory rate = 20 breaths/min\nExamination shows tenderness over the lower lateral ribcage. Abdominal and rectal examinations are normal. The white blood cell count is 18000 × 109/L. Which one of the following is the best diagnostic test for this patient?",
            "options": [
                "A. Erect chest radiograph",
                "B. Abdominal radiograph",
                "C. Abdominal ultrasound",
                "D. Abdominal CT scan",
                "E. Gastrografın follow-through"
            ],
            "answer": "D",
            "explanation": "This patient probably has a subphrenic collection/abscess which is not uncommon 15-20 days following laparotomy for a perforated intra-abdominal viscus. The swinging pyrexia and shoulder tip pain are pointers to the diagnosis. An abdominal CT scan is the most accurate at delineating intra-abdominal fluid collection and may be required to guide radiological aspiration or drainage. The chest radiograph may show non-specific signs (pulmonary atelectasis, elevated hemidiaphragm and pleural effusion) that are not diagnostic. Abdominal radiographs and Gastrografın follow-through are unlikely to be helpful in making the diagnosis of a subphrenic abscess, but are useful postoperative tests if there is suspicion of postoperative ileus or obstruction."
        },
        {
            "id": "22",
            "question_type": "mcq",
            "question": "A 45-year-old African Caribbean man is approximately 5 days following right femoropopliteal bypass for superficial femoral artery atherosclerosis. The nursing staff has asked you to see the patient, who is complaining of increasing pain over the right groin wound. The patient has a low-grade pyrexia of 37.6°C. On examination the wound is erythematous, hot and tender on palpation. There is no obvious collection, abscess or crepitation. The right leg is mildly swollen and the calf is soft. All peripheral pulses are palpable. The most likely diagnosis is",
            "options": [
                "A. Cellulitis secondary to Staphylococcus epidermidis infection",
                "B. Deep vein thrombosis",
                "C. Cellulitis secondary to Streptococcus pyogenes infection",
                "D. Lymphoedema secondary to filariasis",
                "E. Occlusion secondary to graft thrombosis"
            ],
            "answer": "C",
            "explanation": "In an immunocompetent patient, the most likely cause of postoperative pain and erythema surrounding an operative wound is cellulitis secondary to Streptococcus pyogenes or Staphylococcus aureus (S. epidermidis is more likely in an immunocompromised patient). Low-grade pyrexia and leg swelling should give rise to a suspicion of deep vein thrombosis, which must be excluded. It is a less likely diagnosis in the present question, given the set of symptoms and signs. Filariasis is a tropical parasitic infection that can give rise to lymphoedema. Occlusion secondary to graft thrombosis is unlikely 5 days following primary reconstruction, especially in the presence of palpable distal pulses."
        },
        {
            "id": "23",
            "question_type": "mcq",
            "question": "A 74-year-old Caucasian man with obstructive jaundice secondary to gallstones is about to undergo urgent laparoscopic cholecystectomy and bile duct exploration following failed endoscopic retrograde cholangiopancreatography. His latest blood tests are as follows:\n• Bilirubin = 180\n• Alkaline phosphatase = 700IU/L\n• Alanine aminotransferase = 250IU/L\n• White cell count = 18 × 109/L\n• Urea = 9.0mmol/L\n• Creatinine = 180 µmol/L\nWhich one of the following is the best statement regarding perioperative management considerations?",
            "options": [
                "A. Rehydration should be approached with caution to prevent the risk of hepatorenal syndrome",
                "B. The patient is at increased risk of bleeding to reduced absorption of clotting factors II, VII, IX and X",
                "C. There is a lower risk of infection so prophylactic antibiotics are not necessary",
                "D. Analgesics are less effective so doses of opiates should be increased",
                "E. Surgery should not be performed in a jaundiced patient"
            ],
            "answer": "B",
            "explanation": "Patients suffering from jaundice are at increased risk of bleeding owing to reduced absorption of clotting factors II, VII, IX and X. Perioperative rehydration should be generous to prevent the risk of dehydration and hepatorenal syndrome. Jaundiced patients are at increased risk of infection and therefore prophylactic antibiotics should not be withheld. The effects of opiate analgesics may be prolonged due to abnormalities with drug metabolism and first pass elimination. Surgery can be safely performed in a jaundiced patient provided the necessary steps are taken toward optimization. It is preferable to relieve jaundice where possible prior to surgery, but in this instance ERCP has failed."
        },
        {
            "id": "24",
            "question_type": "mcq",
            "question": "A 62-year-old man is awaiting an elective femoropopliteal bypass for peripheral vascular disease. He is a smoker of 60 pack years and is being treated for hypertension and hypercholesterolaemia with ramipril 5 mg each morning and simvastatin 10 mg orally at night. Three weeks ago he was admitted following an ST elevation myocardial infarction. His current blood pressure is 170/110 mmHg. Which of the following best describes the preoperative strategy?",
            "options": [
                "A. Preoperative control of blood pressure with nifedipine is mandatory",
                "B. Preoperative unfractionated heparin should be started, with 4-hourly monitoring of the patient's activated partial thromboplastin time",
                "C. Intensive chest physiotherapy three times a day is vital postoperatively",
                "D. A preoperative echocardiogram is required",
                "E. None of the above, as the surgery should be deferred for 6 months"
            ],
            "answer": "E",
            "explanation": "The best strategy would be to postpone the surgery for 6 months. The risk of postoperative reinfarction after a previous myocardial infarction is\n• 0-3 months = 35%\n• 3-6 months = 15%\n• >6 months = 4%\nThe decision is more straightforward in benign disease (vascular disease) versus carcinoma. Unfractionated heparin may be beneficial as an initial therapy in critical ischaemia. Preoperative control of blood pressure is important, but deferring surgery to obtain control is more advantageous than acute control with calcium channel blockers. Routine chest physiotherapy postoperatively should be adequate management of this patient."
        },
        {
            "id": "25",
            "question_type": "mcq",
            "question": "A 37-year-old man is admitted with abdominal pain and treated for pancreatitis; 48 hours following his admission you are asked to assess the patient as he has become increasingly confused and aggressive. Observations are not possible, but you note he appears to be breathing hard, he is tremulous and has pruritus. Choose an appropriate management strategy:",
            "options": [
                "A. Septic screen; urine dip, chest radiograph and blood cultures",
                "B. Chlordiazepoxide 20 mg intravenously, four times daily for 1 week",
                "C. Haloperidol 2 mg intramuscularly and confine to side room",
                "D. Lorazepam infusion",
                "E. Oral chlordiazepoxide-reducing regimen with 48 hours intravenous thiamine"
            ],
            "answer": "E",
            "explanation": "This patient is withdrawing from alcohol; he has been admitted with a condition commonly caused by alcohol excess and the timing (24-72 hours post-cessation of drinking) is classic. The symptoms and signs of acute alcohol withdrawal should be familiar with candidates tachycardia with hypotension followed by tremor, confusion, seizure, coma and death. Patients commonly have acute psychosis, typically extremely unpleasant and vivid tactile and visual hallucinations. Patients suffering withdrawal should be commenced immediately on a reducing regimen of benzodiazepines to wean or ‘detox' from alcohol. The single best drug to use is chlordiazepoxide, which is given orally. Regimens differ between centres. If oral medication is impossible, IM diazepam or lorazepam is the next drug of choice. IV infusion is inappropriate, as is prolonged administration of a set dose since the patient will simply become dependent on the benzodiazepine and require weaning from this. A septic screen is probably also indicated, but failure to treat the withdrawal will lead to further morbidity and possible mortality."
        }
    ]
}
{
  "chapter_name": "Vascular–Access",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 45-year-old male with long-standing diabetes presents to the emergency department (ED) with progressive shortness of breath, vague abdominal pain, and marked leg edema. Laboratory values are remarkable for metabolic acidosis and azotemia. Dialysis is urgently needed. Dialysis access would be best instituted via:",
      "options": [
        "A. Right internal jugular vein permacath",
        "B. Right subclavian vein permacath",
        "C. Left internal jugular vein permacath",
        "D. Left subclavian vein permacath",
        "E. Right femoral vein permacath"
      ],
      "answer": "A",
      "explanation": "*   When hemodialysis is urgently needed, temporary rapid vascular access must be established with a catheter that will support high flow (generally >400 cc/min) via two lumens.\n*   The tunneled hemodialysis catheter, or permacath, is placed into a central vein and exits the skin at least 10 cm away via a subcutaneous tract.\n*   Tunneled catheters are ready to use immediately and are less prone to infection than a non-tunneled catheter (Quinton catheter).\n*   The right internal jugular vein is the first choice because it is the most direct route to the right atrium.\n*   Left-sided placement is less preferable because it jeopardizes venous patency for future permanent access in the left arm (as most patients are right-hand dominant).\n*   Left-sided catheters also result in lower catheter blood flow rates and increase the risk of stenosis/thrombosis due to the longer and more tortuous length of contact with central vein side-wall (C).\n*   The subclavian position is associated with higher rates of complications, namely central vein stenosis, and pneumothorax and in some studies has a higher risk of infection when compared with internal jugular catheters (B-D).\n*   The femoral position carries the highest risk of infection, which is a significant cause of mortality in patients with temporary access catheters (E).\n*   Femoral lines may compromise a future kidney transplant because it may lead to proximal iliac vein stenosis/thrombosis."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "During placement of a central line, the patient takes a sudden deep breath, introducing a large rush of air into the line. What is the best initial step in management?",
      "options": [
        "A. Place the patient in Trendelenburg with the left side down.",
        "B. Place the patient in Trendelenburg with the right side down.",
        "C. Place the patient in reverse Trendelenburg.",
        "D. Quickly aspirate from the catheter.",
        "E. Immediately remove the central venous catheter and hold pressure."
      ],
      "answer": "A",
      "explanation": "*   An air embolism is a potential complication of central venous catheterization as well as in trauma, during craniotomy in sitting position, cesarean section, hip replacement, and cardiac surgery under bypass.\n*   Initial symptoms manifest within the cardiovascular, pulmonary, and neurologic systems. Therefore, patients may experience chest pain, dyspnea, headache, or confusion, and stroke or myocardial infarction may ensue.\n*   Transesophageal echocardiogram is diagnostic. However, treatment should not be delayed if a patient is suspected of having an air embolism.\n*   In the operating room (OR), the only clinical clue may be an abrupt increase in end-tidal CO2 followed by a decrease in end tidal CO2 and hypotension.\n*   When recognized during a procedure, the patient should immediately be placed in Trendelenburg position with left side down (Durant's maneuver) and air aspirated from a central venous catheter.\n*   Trendelenburg position allows air to move to the apex of the right ventricle, and the left-side down position allows air to float away from the pulmonary outflow tract (B, C).\n*   Aspiration is not effective until the patient is correctly positioned (D).\n*   The venous catheter should not be removed because it is required to aspirate the trapped air (E)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A left internal jugular vein central line is placed. Fifteen minutes later, the patient is hypotensive. Distended neck veins are noted. Breath sounds are clear bilaterally. What is the most likely cause of the patient's hypotension?",
      "options": [
        "A. Perforated right atrium",
        "B. Perforated subclavian vein",
        "C. Perforated subclavian artery",
        "D. Tension pneumothorax",
        "E. Perforated right ventricle"
      ],
      "answer": "A",
      "explanation": "*   Clinical signs of cardiac tamponade include hypotension, distended neck veins, and muffled or distant heart sounds (Beck triad).\n*   This patient exhibits two of these signs after an invasive procedure of the chest and likely developed cardiac tamponade as a result of perforation of the right atrium.\n*   Tamponade caused by central venous catheter placement is a known complication resulting from puncture by the wire, introducer, or the catheter itself.\n*   Perforation of the right atrium more often occurs because it has a thinner wall compared to the right ventricle (E).\n*   Placing the catheter tip at the right tracheobronchial angle helps avoid placing the catheter tip in the right atrium.\n*   A perforated subclavian artery or vein would likely lead to hemothorax rather than pericardial tamponade (B, C).\n*   A tension pneumothorax is a known complication of line placement and may result in hypotension and distended neck veins, but breath sounds would not be clear bilaterally (D)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 65-year-old female with end-stage renal disease presents with recurrent episodes of congestive heart failure. She is currently dialyzed via a left arm brachiocephalic arteriovenous fistula. Upon compression of the fistula, her heart rate decreases from 80 to 60 beats per minute, and blood pressure increases from 120/70 to 140/80 mm Hg. Which of the following is true about this condition?",
      "options": [
        "A. The fistula should be ligated.",
        "B. It is unlikely that the fistula is contributing to the patient's heart failure.",
        "C. Plicating the fistula may help prevent another episode of heart failure.",
        "D. She should undergo a distal revascularization and interval ligation.",
        "E. The fistula should be converted to a graft."
      ],
      "answer": "C",
      "explanation": "*   Blood flow through an arteriovenous fistula is essentially a left-to-right shunt and a portion of the cardiac output is stolen by the fistula (B).\n*   Although there is no change in peripheral oxygen consumption after fistula placement, there is a drop in peripheral vascular resistance (PVR).\n*   Consequently, a compensatory increase in cardiac output occurs. The increase in venous return increases cardiac preload and causes rises in atrial natriuretic peptide (ANP) and brain natriuretic peptide (BNP).\n*   The decrease in afterload results in a decrease in aldosterone and renin levels. This subsequently leads to a decrease in afterload as well as suppression of the renin-aldosterone-angiotensin system and thus promotes natriuresis.\n*   Compressing the fistula increases PVR and afterload, leading to a decrease in pulse rate and an increase in blood pressure (Nicoladoni-Branham sign).\n*   Patients with higher fistula flow will exhibit greater hemodynamic changes with fistula occlusion.\n*   Objectively, the minimum fistula flow rate required to support hemodialysis is greater than 400 to 500 cc/min.\n*   However, when the flow rate exceeds 2000 cc/min or 30% of the cardiac output there is a risk of high output cardiac failure.\n*   These patients and those with clinically evident episodes of cardiac failure should undergo intervention aimed at reducing flow rates.\n*   Surgical plication (narrowing the vein just beyond the anastomosis to the artery by suturing or banding) reduces the flow rate and can partially reverse the hemodynamic changes and prevent future episodes of heart failure.\n*   If heart failure continues to occur after appropriate reduction in flow rates, eventual ligation of the fistula is indicated (A).\n*   Distal revascularization and interval ligation (DRIL) is used to treat steal syndrome causing ischemic steal syndrome distal to the fistula. The procedure increases resistance to the fistula and decreases resistance to the distal extremity but may not effectively reduce fistula flow in the setting of cardiac failure (D).\n*   Converting a native fistula to a graft would not help because the large diameter of a graft would maintain high flow rates (E)."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 65-year-old woman undergoes creation of a forearm brachial artery-to-cephalic vein loop arteriovenous (AV) graft for hemodialysis in the left arm using a 6-mm polytetrafluoroethylene graft. Four days postoperatively, the patient reports marked coolness, pallor, and numbness in the hand as well as decreased strength. On examination, there is no palpable pulse at the radial artery and only a monophasic Doppler signal that becomes biphasic on graft compression. Which of the following is the best management option?",
      "options": [
        "A. Distal revascularization and interval ligation of the brachial artery",
        "B. Ligation of the AV graft and placing the upper arm graft in same arm",
        "C. Ligation of the AV graft and placing the fistula in the dominant arm",
        "D. Banding of the AV graft adjacent to the arterial anastomosis",
        "E. Banding of the AV graft adjacent to the venous anastomosis"
      ],
      "answer": "A",
      "explanation": "*   A patient presenting with marked coolness, pallor, decreased strength, and hand numbness in the immediate postoperative period following an AV fistula creation should be suspected of having steal syndrome.\n*   Ischemic steal syndrome occurs in approximately 1% to 2% of patients with AV fistulas created for hemodialysis.\n*   Risk factors for steal syndrome include diabetes, age > 60, and use of the brachial artery.\n*   Proximal fistulas have a higher risk of developing steal syndrome while distal wrist fistulas (Cimino fistulas) have a very low risk.\n*   AV grafts also have a greater risk of steal compared with native AV fistulas (B). This is likely due to the fact that the large diameter of the graft creates a low-resistance bed.\n*   In addition, steal secondary to grafts tends to occur early after the access placement, whereas steal after native AV fistulas has a bimodal distribution, with some presenting early and others late after the native vein has undergone dilation with lowered resistance.\n*   Some degree of physiologic steal occurs in every patient with an AV fistula, but only a small minority manifests severe symptoms.\n*   The steal syndrome is caused by a diversion of blood flow from the anastomosed artery to the low-resistance vein.\n*   In addition, the low-resistance venous anastomosis leads to blood flowing in a retrograde fashion from the distal circulation into the fistula.\n*   Mild steal can be managed conservatively with exercise. More severe symptoms require intervention.\n*   Although ligation of the AV graft would have a great chance of resolving the steal syndrome, the patient will require a new access and will again be at risk of developing steal (C).\n*   Several options exist for the management. The most effective treatment that maintains fistula function is distal revascularization and interval ligation.\n*   The disadvantage of this procedure is that it requires creating a new bypass, usually with saphenous vein, from the native artery proximal to the AV graft to the artery distal to it, with interval ligation of the native artery just proximal to the distal anastomosis.\n*   Banding or plicating of the AV graft, adjacent to the arterial anastomosis, serves to increase the resistance in the graft and reduce steal.\n*   The primary disadvantage of this approach is that inadequate banding leads to persistent steal, and excessive banding causes graft thrombosis (D, E).\n*   Banding or plication is a more attractive option for steal in an autologous AV fistula, such as a brachial artery cephalic vein fistula, because the vein is more resistant to thrombosis. This is not as yet the standard approach, however."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 45-year-old male develops progressive end-stage renal disease secondary to severe hypertension. His glomerular filtration rate is 19 mL/min, and dialysis is anticipated within the next 6 months. He is right handed and appears to have good veins in both arms and normal pulses. Which of the following is the best management plan for dialysis access?",
      "options": [
        "A. Delay access until about a month before anticipated dialysis.",
        "B. Proceed with left radiocephalic arteriovenous fistula (AVF) (Cimino fistula).",
        "C. Proceed with left brachiocephalic AVF.",
        "D. Proceed with left brachiobasilic AVF.",
        "E. Proceed with right radiocephalic AVF."
      ],
      "answer": "B",
      "explanation": "*   When permanent hemodialysis access is needed, the nondominant arm (E) should be considered first in order to mitigate the effects of potentially devastating complications including: severe steal syndrome and limb ischemia, ischemic monomelic neuropathy, and nerve injury.\n*   Once the side is determined, the type of AVF must be considered.\n*   Radiocephalic fistulas should generally be placed first (assuming adequate artery and vein) because subsequent thrombosis will not preclude the placement of a brachiocephalic or brachiobasilic fistula more proximally in the arm.\n*   Additionally, radiocephalic fistulas may cause dilation of the proximal arm veins allowing higher success of future more proximal fistulas.\n*   Radiocephalic fistulas also rarely require a second stage superficialization or transposition procedure because the forearm cephalic vein is close enough to the skin to be used upon maturation.\n*   If radiocephalic is not possible or has failed, a brachiocephalic should be considered next (C).\n*   Brachiocephalic fistulas allow fistulas to form on the dorsal surface of the upper arm and allow easier cannulation and use during hemodialysis.\n*   Further, depending on body habitus, brachiocephalic fistulas may also not require a second stage to superficialize the fistula close to the skin.\n*   The third choice for autogenous fistula is the brachiobasilic fistula. Since the basilic vein is deep, it requires superficialization of the vein. Many surgeons perform this in two stages so as to allow the vein to mature before superficialization (D).\n*   Maturation of a fistula typically requires at least 6 weeks and may require additional interventions.\n*   Waiting until 1 month before dialysis will result in placement of a temporary dialysis catheter, which carries high mortality risks (A).\n*   Despite the advantages, the radiocephalic fistula has a higher early failure or nonmaturation rate and may not be a good option in diabetics due to medial calcinosis within the radial artery.\n*   Further, when a patient is already hemodialysis dependent via tunneled catheter, there is ongoing debate about whether the ability to rapidly cannulate a graft (~2 weeks) shifts the preferences toward initial graft placement rather than fistula first.\n*   A forearm loop graft also has the advantage of dilating the basilic and upper cephalic veins for future fistula creation."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 45-year-old female with end-stage-renal disease presents with recent onset of headaches, hoarseness of her voice, and bilateral arm swelling for 2 days. She has a history of multiple procedures in both arms and legs for hemodialysis access. Most recently she underwent an arteriovenous graft (AVG) in her right upper arm 2 weeks earlier. On examination her neck appears to be engorged and her face swollen. There are numerous visible veins on her chest wall. Which of the following is the best management option?",
      "options": [
        "A. Ligation of the AVG",
        "B. Plication of the AVG",
        "C. Attempt venoplasty of superior vena cava (SVC)",
        "D. Place stent in SVC",
        "E. Move AVG to right arm"
      ],
      "answer": "D",
      "explanation": "*   The patient is presenting with superior vena cava (SVC) syndrome with bilateral arm, neck, and face swelling and hoarseness of the voice.\n*   The patient likely has a preexisting central vein stenosis (in the SVC).\n*   A high proportion of patients with end-stage renal disease have central vein stenosis (25-40%) due to prior central venous access.\n*   These stenoses are often asymptomatic, and if SVC syndrome does develop, it is usually insidious in onset.\n*   However, placement of an upper arm AVG access creates a sudden massive increase in venous return that cannot be accommodated by the stenosis, leading to abrupt venous congestion (E).\n*   Central venous stenosis complicates hemodialysis access because it impairs venous fistula outflow and can reduce flow rates and reduce likelihood of maturation in fistulas.\n*   Further, when access is placed ipsilateral to a stenotic lesion, there is a high likelihood of symptoms due to the increased venous congestion combined with high venous resistance.\n*   Arteriovenous grafts are more likely to cause symptoms than fistulas, and upper arm access is more likely to cause symptoms than forearm access.\n*   When central stenosis is suspected, either from history or symptoms, central venogram should be performed to diagnose the lesion.\n*   Concomitant endovascular venoplasty is a reasonable option and has a high rate of success.\n*   However, first line treatment is now endovascular stenting of the SVC. This is appropriate for both benign and malignant cases of SVC syndrome.\n*   Ligation or plication of the graft is not indicated because this destroys the access and does not address the underlying pathology (A, B).\n*   Open SVC repair via sternotomy for a benign lesion is overly invasive and unnecessary given the high initial success rates of endovascular treatment."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "A 50-year-old male with long-standing history of hemodialysis via a left brachiocephalic AVF presents with an aneurysm within the midportion of the AVF. He reports that there has recently been excessive bleeding when the needles have been pulled out. On physical examination, the aneurysm is about 3 cm in size. The overlying skin appears supple, without ulceration. The next step in the management consists of:",
      "options": [
        "A. Fistulogram",
        "B. Resection/plication of the aneurysm",
        "C. Replacement of fistula with an AV graft",
        "D. Ligation of the fistula",
        "E. Observation"
      ],
      "answer": "A",
      "explanation": "*   Arteriovenous fistula can eventually undergo aneurysmal degeneration over time, and intervention is required to prevent rupture and exsanguination (E).\n*   High outflow resistance is a common cause of aneurysm formation and must be ruled out by fistulogram.\n*   Repeated needle cannulation can cause stenosis resulting in higher pressures distal to the lesion and subsequent aneurysm formation.\n*   Alternatively, repeated needle cannulation can also lead to aneurysmal degeneration of the vein at the stick site. Therefore, cannulation must be avoided in areas undergoing aneurysmal change.\n*   Fistulogram is diagnostic of the stenotic lesion and potentially therapeutic via venoplasty with or without stent placement.\n*   Further, fistulogram will also help distinguish between a true and pseudo aneurysm.\n*   If no lesion is seen on fistulogram, a central venogram should be performed to rule out a central stenosis as a cause of high outflow pressures.\n*   After treatment of the venous stenoses, bleeding may resolve because the abnormally high pressures within the fistula return to normal.\n*   Thinned/atrophic skin, translucent skin, ulceration, suspected infection, intraluminal thrombus, high output cardiac failure, steal syndrome, or spontaneous bleeding from the fistula prompts consideration for revision by resection and plication or reanastomosis with a healthy vein (B).\n*   The size of the aneurysm is not an indicator for revision.\n*   If no healthy vein is available, graft implantation is an option (C).\n*   If outflow cannot be salvaged, the access may require ligation (D)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "In comparing the three modalities used for hemodialysis (central venous catheter [permacath], AV graft, and AV fistula), which of the following is true?",
      "options": [
        "A. They are equal in terms of 1-year patient mortality.",
        "B. The primary patency for AV fistula and AV graft is similar.",
        "C. The secondary patency for AV fistula and AV graft is similar.",
        "D. Time to maturation for AV fistulas and grafts is similar.",
        "E. A permacath is the best dialysis option in the elderly."
      ],
      "answer": "C",
      "explanation": "*   Fistulas are superior to grafts, which are superior to catheters in terms of patient survival, mainly because of infection risks of prosthetic material (A–E).\n*   Diabetics have an exaggerated increase in mortality due to their depressed immune system.\n*   Interestingly, despite the risk of high output cardiac failure associated with fistula and graft, patients with tunneled catheters also have the highest risk of cardiac-related mortality.\n*   When comparing patency, fistulas are known to have higher primary patency (intervention-free patency of 85% at 1 year, 50% at 5 years) compared to grafts (60% at 1 year, 10% at 5 years) (B).\n*   However, fistulas have a higher rate of primary failure (nonmaturation or early thrombosis) of up to 40%.\n*   Further, when comparing secondary patency (patency with interventions to maintain or reestablish flow), fistulas and grafts are similar.\n*   Grafts do not require maturation because their lumen diameter does not change (D).\n*   However, healing time of at least 10 days must be observed after graft placement before cannulation to avoid massive pseudoaneurysm formation.\n*   Fistulas require at least 6 weeks for maturation during which time the outflow vein undergoes remodeling secondary to increased flow resulting in an increase in diameter and further increase in flow.\n*   Fistulas are deemed to be mature if they meet the rule of 6's: at 6 weeks, must be 6 mm in diameter, less than 6 mm from skin surface, support 600 ml/min flow (although a minimum of 400 ml/min is adequate), and have a 6-inch straight segment for use."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "An intubated patient in the OR develops an air embolism after central venous catheter insertion. Which of the following murmurs are associated with this condition?",
      "options": [
        "A. Austin-Flint murmur",
        "B. Carey Coombs murmur",
        "C. Means-Lerman scratch murmur",
        "D. Still's murmur",
        "E. Millwheel murmur"
      ],
      "answer": "E",
      "explanation": "*   Intubated patients with an air embolus may have an abrupt increase in end-tidal CO2 followed by a decrease in end tidal CO2 and hypotension, and auscultation may reveal a \"millwheel\" murmur.\n*   This is often described as a loud churning sound.\n*   An Austin-Flint murmur is associated with aortic insufficiency and is a mid-diastolic rumble heard best at the apex (A).\n*   Carey Coombs murmur is also a mid-diastolic rumble that is associated with rheumatic fever (B).\n*   Means-Lerman scratch murmur sounds similar to a pericardial rub and may be heard in patients with hyperthyroidism (C).\n*   Still's murmur is associated with a small ventral septal defect and is described as a vibratory systolic ejection rumble (D)."
    }
  ]
}
{
  "chapter_name": "Anesthesia 28",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 9-year-old male has been in the pediatric intensive care unit for the last 7 days after presenting to the hospital with influenza infection leading to respiratory failure requiring mechanical ventilation. He is receiving a continuous fentanyl and propofol drip for pain control and sedation, respectively. This morning he developed bradycardia, and his urinary output dropped. Laboratory values show rising creatinine, hyperlipidemia, hyperkalemia, and acidosis. Which of the following is true regarding his condition?",
      "options": [
        "A. It is more common in adults than children.",
        "B. Splenomegaly is common.",
        "C. Early initiation of hemodialysis is curative.",
        "D. Treatment with catecholamines is effective.",
        "E. Daily screening with lactate and creatine phosphokinase (CPK) may prevent this complication."
      ],
      "answer": "E",
      "explanation": "* Propofol infusion syndrome (PRIS) is associated with higher doses of propofol infusion continued for more than 48 hours.\n* It is associated with metabolic acidosis, arrhythmias (most often bradycardia), rhabdomyolysis, hyperlipidemia, hepatomegaly (not splenomegaly), renal failure, and eventual cardiovascular collapse.\n* The first case report was in the pediatric population, and children may be at a higher risk.\n* Once diagnosed, immediate cessation of propofol is mandatory with early hemodialysis; however, treatment is largely ineffective, especially in the setting of arrhythmias.\n* The combination of high-dose propofol with exogenous catecholamine (or steroid) administration appears to trigger the syndrome, promoting rapid and irreversible peripheral and cardiac muscle injury.\n* Current recommendations are to change propofol to another medication if sedation is expected to last more than 48 hours.\n* A novel screening tool includes daily CPK and lactate levels as these may be the first indication of PRIS."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 55-year-old diabetic male underwent right-sided video-assisted thoracoscopic surgery (VATS) for an empyema yesterday. This morning he is complaining of pain along his medial left forearm and paresthesia of his fourth and fifth digits. Which of the following is true regarding this complication?",
      "options": [
        "A. It would have been prevented with appropriate positioning and padding.",
        "B. Obesity is a significant risk factor.",
        "C. Early electromyography (EMG) will show signs of denervation.",
        "D. For complete neuromotor injuries, early operative intervention is indicated.",
        "E. Diabetic neuropathy is a risk factor."
      ],
      "answer": "E",
      "explanation": "* Perioperative peripheral nerve injuries are among the top three medical malpractice claims directed at anesthesiologists and operating rooms' staff.\n* Despite appropriate padding and position, these injuries can still occur.\n* Preoperative risk factors include body weight and pre-existing neuropathy, such as diabetic neuropathy.\n* Obesity is actually protective, and thinner patients are more commonly affected.\n* The risk increases with intraoperative hypotension or preoperative malnutrition.\n* Early electromyography (EMG) is often normal in the immediate postoperative period because denervation can take several days.\n* Most of these injuries heal with time; operative intervention may be performed depending on severity of injury and failure to improve with conservative measures."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding invasive lines used for the monitoring of surgical patients?",
      "options": [
        "A. Trauma patients show improved mortality with placement of a pulmonary artery catheter (PAC).",
        "B. A normal Allen Test before radial artery cannulation will reduce incidence of hand ischemia.",
        "C. PAC will provide direct measurement of systemic vascular resistance, cardiac output, and pulmonary artery pressure.",
        "D. Systolic blood pressure measured on a radial artery catheter will typically be higher than the aortic pressure.",
        "E. Any arrhythmia seen on electrocardiogram is considered a contraindication for PAC placement."
      ],
      "answer": "D",
      "explanation": "* Invasive hemodynamic monitoring provides valuable information, but complications must be weighed against advantages.\n* Pulmonary artery catheters (PACs) are used less frequently now as studies show no improvement in mortality in trauma patients.\n* PACs directly measure cardiac output, central venous pressure, mixed venous oxyhemoglobin saturation, right-sided cardiac pressures, and pulmonary artery pressures.\n* Systemic vascular resistance, cardiac index, and oxygen delivery/uptake can be calculated from PAC data.\n* Before PAC placement, an electrocardiogram must be obtained to rule out left bundle branch block (LBBB) due to high incidence of temporary right bundle branch block with placement, which could incite complete heart block in LBBB patients.\n* Most other arrhythmias are not a contraindication for PAC placement.\n* Invasive arterial blood pressure monitoring provides continuous blood pressure measurement and easy access for arterial blood gas samples.\n* The Allen test is currently considered mandatory before radial arterial line placement but does not accurately predict risk of hand ischemia.\n* Systolic blood pressure in the radial artery will typically be higher than the aorta, but mean arterial pressure should be preserved.\n* A higher systolic pressure occurs with distal progression, smaller arterial caliber, and older age."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 47-year-old female with chronic pain from degenerative disk disease is recovering from pneumonia complicated by multiorgan system dysfunction. She is now dialysis dependent after sepsis-related acute kidney injury. This morning a rapid response was called for respiratory depression and confusion, which improved after administration of naloxone. Which of the following medications most likely contributed to the respiratory compromise?",
      "options": [
        "A. Transdermal fentanyl patch",
        "B. Hydromorphone patient-controlled anesthesia",
        "C. Scheduled morphine injections every 12 hours",
        "D. Scheduled oral methadone every 8 hours",
        "E. Extended-release oxycodone"
      ],
      "answer": "C",
      "explanation": "* Opioid pain medications undergo metabolism in the liver to various metabolites, generally excreted in the urine.\n* Morphine has multiple active metabolites, one of which is more potent than morphine.\n* In renal injury, morphine metabolites can persist for much longer, leading to respiratory depression.\n* Morphine and codeine (metabolized to morphine) should be avoided in renal failure.\n* Hydromorphone (Dilaudid) has an active metabolite, but its potency is not as increased as morphine's.\n* Fentanyl and methadone are generally the safest medications for dialysis patients as all their metabolites are inactive.\n* Oral medications undergo first-pass metabolism in the liver; their metabolites need to be active or higher doses are required.\n* Data on oxycodone in renal failure are lacking, but no evidence suggests its metabolites are as significantly active as morphine.\n* Pruritus is a common adverse reaction with opioids, caused by degranulation of mast cells and histamine release, not a true allergic reaction."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 37-year-old female is postoperative day 1 from a percutaneous bedside tracheostomy tube placement. Over the last hour, she has developed significant subcutaneous emphysema of the neck and her current oxygen saturation is 80%. Respiratory therapy has already attempted directional suctioning, but they were unable to pass the catheter. What is the most appropriate next step in management?",
      "options": [
        "A. Remove the tracheostomy tube and attempt recannulation with a smaller caliber cannula",
        "B. Remove the tracheostomy tube and recannulate over a suction catheter",
        "C. Remove the tracheostomy tube and recannulate over a fiberoptic bronchoscope",
        "D. Replace the tracheostomy tube using a percutaneous tracheostomy kit",
        "E. Orotracheal intubation"
      ],
      "answer": "E",
      "explanation": "* Early dislodgement of a tracheostomy tube is an infrequent but potentially devastating complication.\n* The first tube exchange typically occurs between postoperative days 3 and 7.\n* Accidental removal before a planned exchange can cause loss of the airway.\n* Manipulation of the endotracheal tube by ancillary staff may promote a false passage.\n* Patients may maintain some oxygenation despite a false passage, which can manifest as respiratory distress and subcutaneous emphysema.\n* Tube replacement can be attempted via multiple methods: smaller caliber cannula, suction catheter or fiberoptic bronchoscope as a guide, or a percutaneous tracheostomy kit.\n* If the patient is unstable, securing the airway quickly is the priority, and orotracheal intubation should be performed."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is true regarding invasive mechanical ventilation?",
      "options": [
        "A. Synchronized intermittent mechanical ventilation (SIMV) is associated with the lowest work of breathing.",
        "B. Airway pressure release ventilation (APRV) mandates higher levels of sedation because of patient discomfort.",
        "C. Assist-control (AC) ventilation is associated with lower hemodynamic effects than SIMV.",
        "D. AC ventilation is equivalent to SIMV in a patient that is not breathing spontaneously.",
        "E. High-frequency oscillatory ventilation (HFOV) is contraindicated in paralyzed patients."
      ],
      "answer": "D",
      "explanation": "* Data on improved survival of one mode of ventilation over another are inconsistent.\n* Conventional modes of mechanical ventilation vary in support provided and how the machine supports patient-initiated breaths.\n* Continuous positive airway pressure (CPAP) provides constant pressure, with all breaths triggered by the patient and no additional support.\n* Pressure support ventilation (PSV) allows patient-determined rate and volume but provides additional pressure support for patient-triggered breaths.\n* Synchronized intermittent mechanical ventilation (SIMV) mandates a certain number of breaths at a set volume or pressure, allowing spontaneous breaths in between.\n* SIMV is often combined with PSV to provide additional pressure for patient-triggered breaths.\n* SIMV proponents advocate for respiratory muscle exercise, but this increases work of breathing and can fatigue the diaphragm.\n* Assist-control (AC) ventilation allows patients to trigger breaths, with every breath having a mandated volume or pressure, leading to the lowest associated work of breathing.\n* Airway pressure release ventilation (APRV) aims to maximize alveolar recruitment by maintaining relatively constant higher pressures.\n* While patient-ventilator dyssynchrony can occur with APRV, spontaneous breathing should be encouraged, and sedation kept low.\n* High-frequency oscillatory ventilation (HFOV) tolerates high airway pressures for short durations to maintain constant lung volume and recruit alveoli without overdistention.\n* Current approved ventilators in the United States do not support spontaneous breathing with HFOV; heavy sedation or paralysis is generally required.\n* Recommendations limit HFOV use to high volume centers due to increased staff training and time-intensive treatment."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following parameters is most likely to predict successful discontinuation of mechanical ventilation?",
      "options": [
        "A. Rapid shallow breathing index (RSBI) (f/VT) less than 105",
        "B. Negative inspiratory force (NIF) –20 to –30 cm H₂O",
        "C. Successful spontaneous breathing trial (SBT)",
        "D. Respiratory rate less than 30 breaths per minute",
        "E. Tidal volume greater than 5 mL/kg"
      ],
      "answer": "C",
      "explanation": "* The term 'weaning' is an old concept of slowly reducing ventilator support; 'liberation' is now preferred.\n* Evidence-Based Guidelines for Weaning and Discontinuing Ventilatory Support (2001) recommend daily evaluation of readiness for extubation and correction of underlying conditions.\n* Delaying extubation in ready patients increases mortality, nosocomial pneumonia, and prolonged hospital stay.\n* The most predictive factor for successful extubation is a successful spontaneous breathing trial (SBT).\n* Current recommendations include daily screening for SBT readiness, which involves improvement in underlying disease state, adequate gas exchange (high Pao2, low Fio2, low PEEP:Fio2 ratio), hemodynamic stability off pressors, and capability of generating a spontaneous breath.\n* A patient 'fails' SBT if criteria like worsening gas exchange, hemodynamic instability, increased respiratory rate, mental status changes, diaphoresis, or increased work of breath are met.\n* Patients who pass SBT should be considered for immediate discontinuation of mechanical ventilation.\n* Specific values like RSBI (60–105), tidal volume (4-6 mL/kg), NIF (-20 to -30 cm H2O), minute ventilation (10-15 L/min), and respiratory rate (< 30) have shown predictive value, but consistency between studies is lacking.\n* RSBI is an excellent predictor of failing extubation but should not be used solely to determine readiness.\n* Early extubation must be weighed against the fact that reintubation is associated with an 8-fold increased risk of nosocomial pneumonia and a 6- to 12-fold increased risk of mortality."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding anesthetic induction and maintenance agents?",
      "options": [
        "A. Isoflurane is superior to sevoflurane for neurosurgical anesthesia.",
        "B. Propofol is preferred in hemodynamically unstable patients.",
        "C. Nitrous oxide is contraindicated in patients with pneumothorax.",
        "D. Etomidate can be used as a continuous drip in hypotension to avoid cardiovascular effects of other agents.",
        "E. Desflurane is the preferred agent for inhalation induction."
      ],
      "answer": "C",
      "explanation": "* Each volatile anesthetic has specific advantages and disadvantages.\n* Nitrous oxide is relatively insoluble and readily diffuses into air-containing cavities, potentially doubling the size of a pneumothorax.\n* Halothane is largely replaced by newer agents but remains an inhalation anesthetic of choice for induction due to lower bronchospasm and least pungency.\n* Halothane is associated with significant cardiac depression and, rarely, hepatitis.\n* Desflurane is extremely pungent and associated with significant bronchospasm, making it a poor choice for induction.\n* Desflurane has the advantage of very short induction and emergence times due to its lower solubility.\n* All inhalation anesthetics increase intracranial pressure during neurosurgery, with halothane being the worst offender.\n* A study showed decreased intracranial pressure and increased cerebral perfusion pressure with propofol, but no difference between isoflurane and sevoflurane.\n* Etomidate has the lowest cardiovascular effects of any agent and was previously used as a continuous drip in critical care, but significant adrenal suppression stopped its use.\n* Propofol has relatively significant hemodynamic effects."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 75-year-old female is brought to the operating room for laparoscopic cholecystectomy. She was previously residing in an assisted-living facility because of progressive dementia and is unable to provide a medical history. Fifteen minutes into the operation, anesthesia begins to have difficulty ventilating the patient, and she develops a diffuse maculopapular rash with urticaria. Which of the following is the most likely offending agent?",
      "options": [
        "A. Rocuronium",
        "B. Latex",
        "C. Cefazolin",
        "D. Sevoflurane",
        "E. Propofol"
      ],
      "answer": "A",
      "explanation": "* A study in France (1997-2004) on immediate hypersensitivity reactions presumed to be allergic found the top three offending agents were neuromuscular blocking agents (58%), latex (20%), and antibiotics (13%).\n* Allergy to inhaled anesthetics and hypnotics was much less common.\n* In children, latex was more common than neuromuscular blocking agents, but the sample size for this population was much lower."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following postoperative complications has not been shown to correlate with The American Society of Anesthesiologists' (ASA) classification of physical status?",
      "options": [
        "A. Mortality",
        "B. Operative duration",
        "C. Intraoperative blood loss",
        "D. Wound infection",
        "E. Anastomotic leak"
      ],
      "answer": "E",
      "explanation": "* The ASA Classification of Physical Status has been in use since 1961 and is a top 10 predictor of perioperative complications.\n* A 1996 study showed correlation between ASA Classification and operative duration, blood loss, hospital stay, ICU stay, wound infection, urinary tract infections, pulmonary complications, cardiac complications, and mortality.\n* Anastomotic leak rates were the only studied variable that did not correlate significantly with ASA Classification.\n* Despite significant correlation with surgical outcomes, the test remains flawed in its objectivity, with only 40% to 60% agreement on ASA class among individual anesthesiologists."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 29-year-old male undergoes a laparoscopic cholecystectomy for symptomatic cholelithiasis. Shortly after induction, the anesthesiologist notes an increase in core body temperature and end-tidal CO2. After administration of dantrolene and aborting the operation, his status improves. Which of the following is true regarding this condition?",
      "options": [
        "A. It is an autosomal recessive disorder.",
        "B. Genetic analysis is required for diagnostic confirmation.",
        "C. It is more common in elderly patients.",
        "D. It may present as late as 24 hours after anesthesia.",
        "E. Mortality rate is less than 5%."
      ],
      "answer": "D",
      "explanation": "* This patient likely has malignant hyperthermia (MH), a rare autosomal dominant disorder of skeletal muscle.\n* MH is characterized by a hypermetabolic state triggered by exposure to certain inhalation anesthetics or succinylcholine.\n* MH occurs when uncontrolled amounts of intracellular calcium accumulate in skeletal muscle.\n* Symptoms may develop as early as 30 minutes after anesthetic administration and as late as 24 hours postoperatively.\n* Initial clues occur in the operating room after induction, including masseter muscle rigidity, increased end-tidal CO2, tachycardia, and increased temperature.\n* It is imperative that all anesthetics are immediately stopped and dantrolene (2.5 mg/kg every 5 minutes) is given until symptom resolution.\n* Dantrolene stabilizes muscle channels in the sarcoplasmic reticulum.\n* The mortality rate approaches 30%.\n* A functional test on skeletal muscle biopsy (Caffeine Halothane Contracture Test) is used for diagnosis.\n* More than 50% of families show linkage of the in vitro contracture test phenotype to the gene encoding the skeletal muscle ryanodine receptor.\n* The test requires a muscle biopsy with exposure of the muscle to halothane and caffeine; a positive test causes significant muscle contraction.\n* The majority of cases occur in children or young adults."
    },
    {
      "id": 12,
      "question_type": "numerical",
      "question": "After excision of multiple subcutaneous lipomas under local anesthesia, a 42-year-old woman seizes violently. The surgeon should be aware that the maximum safe dose of a local anesthetic agent in a 70-kg woman is:",
      "options": [],
      "answer": "40 to 50 mL 1% lidocaine with epinephrine",
      "explanation": "* Local anesthetic side effects are few unless injected intravenously by mistake or administered in higher than recommended doses.\n* Toxicity begins with light-headedness, facial paresthesias, blurred vision, and tinnitus, progressing to lethargy, tremors, tonic-clonic seizures, or, rarely, cardiac arrest.\n* Maximum doses for local injection of lidocaine are 5 mg/kg without and 7 mg/kg with epinephrine, as vasoconstriction delays systemic release.\n* A 1% solution of lidocaine contains 10 mg/mL.\n* For a 70-kg patient: 70 kg × 5 mg/kg = 350 mg (without epinephrine), which is 35 mL of 1% lidocaine.\n* For a 70-kg patient: 70 kg × 7 mg/kg = 490 mg (with epinephrine), which is 49 mL of 1% lidocaine.\n* For a 2% lidocaine solution, divide by 20 (24.5 mL and 17.5 mL, respectively, with and without epinephrine).\n* For a 0.5% solution, divide by 5 (70 mL and 98 mL, respectively, with and without epinephrine).\n* Recent case reports suggest 'lipid rescue' using an IV intralipid solution is useful in severe overdose cases."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "A 30-year-old 40-kg male is about to undergo anterior cruciate ligament repair of his left knee. Soon after anesthetic induction, the anesthesiologist notes rigidity of the patient's masseter muscle, an end-tidal CO2 of 65 mm Hg, tachycardia to 120 bpm, and a rise in blood pressure to 160/100 mm Hg. All anesthetic agents are discontinued, and 90 mg of dantrolene is administered. However, 5 minutes later, the aforementioned parameters persist. The next step in the management is:",
      "options": [
        "A. Additional dose of dantrolene",
        "B. Calcium channel blocker",
        "C. Beta-blocker",
        "D. Alpha-blocker",
        "E. Intravenous (IV) fluid hydration"
      ],
      "answer": "A",
      "explanation": "* Dantrolene is a hydantoin derivative that directly interferes with muscle contraction by inhibiting calcium ion release from the sarcoplasmic reticulum, possibly by binding to ryanodine receptor type 1 (RYR-1).\n* The initial dose is 2.5 mg/kg, repeated every 5 minutes until reversal of the reaction occurs or a total dose of 10 mg/kg (or 20 mg/kg, according to some practitioners) is reached.\n* If the condition does not resolve after the total dose is reached, the diagnosis of malignant hyperthermia is unlikely, and additional conditions should be considered."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 20-year-old male is about to undergo arthroscopic surgery of his left shoulder. During anesthetic induction, the anesthesiologist notes trismus that persists for 2 minutes. End-tidal CO2, heart rate, and temperature remain normal. Which of the following is the best recommendation?",
      "options": [
        "A. Administer additional neuromuscular blocker.",
        "B. Proceed with surgery provided trismus resolves within the next minute.",
        "C. Cancel surgery and send patient home.",
        "D. Cancel surgery, administer dantrolene, and admit for 24 hours of observation.",
        "E. Cancel surgery, admit for 24 hours of observation, and refer for muscle biopsy."
      ],
      "answer": "E",
      "explanation": "* Masseter muscle rigidity, or trismus, is a normal reaction to neuromuscular blocking agents.\n* If trismus persists for more than 20 to 30 seconds, it is considered an abnormal response and raises concern for malignant hyperthermia (MH).\n* Persistent trismus is not a sign of inadequate neuromuscular blockade.\n* The surgery should be canceled, and the patient admitted for at least 24 hours of observation for rhabdomyolysis.\n* In the absence of hemodynamic instability, elevated CO2, or temperature, it is unnecessary to administer dantrolene.\n* These patients should be referred to a center that can perform necessary testing, including genetic testing and caffeine halothane contracture test (muscle biopsy test).\n* After muscle biopsy, the tissue is only viable for several hours, so testing must occur in specialized centers."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "The best way to confirm proper placement of endotracheal intubation is:",
      "options": [
        "A. Direct visualization of tube passing through the vocal cords",
        "B. Auscultation of lungs",
        "C. Observation of condensation within tube",
        "D. Chest x-ray",
        "E. End-tidal CO2"
      ],
      "answer": "E",
      "explanation": "* Direct visualization of the tube passing through the vocal cords, auscultation of the lungs, and observation of condensation within the tube are good adjuncts but are subjective and less accurate.\n* The American College of Emergency Physicians and the American Society of Anesthesiologists recommend capnography or end-tidal CO2 detection devices as the preferred confirmatory test for tracheal intubation.\n* Chest x-ray should be performed after endotracheal intubation to ensure the tube tip is 3 to 6 cm from the carina."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "A 65-year-old male is undergoing urgent surgery for gangrenous cholecystitis. The patient has a history of moderate aortic valve stenosis that was recently diagnosed on echocardiography but denies symptoms. Which of the following would be most important in the anesthetic management?",
      "options": [
        "A. Preload reduction",
        "B. Afterload reduction",
        "C. Avoidance of hypotension",
        "D. Heart rate control with beta-blockade",
        "E. Liberal use of ephedrine"
      ],
      "answer": "C",
      "explanation": "* Asymptomatic aortic stenosis is not a contraindication to surgery but requires careful intraoperative monitoring.\n* Increased pressures to overcome stenosis cause concentric hypertrophy of the left ventricle, reducing ventricular compliance.\n* These patients are heavily preload dependent for ventricular filling, requiring careful attention to maintaining adequate intravascular volume.\n* Up to 40% of left ventricular end-diastolic volume is provided by the atrial kick; atrial arrhythmias can quickly lead to heart failure and should be aggressively treated, preferably with defibrillation.\n* Bradycardia should be avoided as cardiac output is significantly affected by heart rate reduction.\n* Hypotension and afterload reduction reduce coronary artery filling and increase cardiac ischemia risk.\n* Any hypotension should be treated with small doses of selective α-adrenergic agents like phenylephrine.\n* Sinus tachycardia and hypertension should be treated by increasing anesthesia depth.\n* Beta-blockers should be used with caution due to potential for bradycardia and hypotension; short-acting agents like esmolol are preferred.\n* Goals of anesthesia in aortic stenosis patients are to avoid hypotension, ensure adequate left ventricular end-diastolic volume (LVEDV), and maintain normal sinus rhythm."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 66-year-old female presents in septic shock due to a perforated duodenal ulcer. She is taken urgently to the operating room for an exploratory laparotomy. Due to persistent hypotension, dopamine is infused by the anesthesiologist and is eventually titrated to a rate of 15 mcg/kg per minute. At that rate, which of the following receptors is exerting the predominant effect?",
      "options": [
        "A. α₁-Adrenergic",
        "B. a2 Adrenergic",
        "C. ẞ1-Adrenergic",
        "D. ẞ2-Adrenergic",
        "E. Dopaminergic"
      ],
      "answer": "A",
      "explanation": "* Dopamine is an α- and β-adrenergic agonist with variable dose-dependent effects, generally weaker than epinephrine and norepinephrine.\n* At lower doses (1 to 2 mcg/kg per minute), its predominant effect is on dopaminergic receptors, causing renal and visceral vasodilation.\n* At doses of 3 to 10 mcg/kg per minute, β1-adrenergic receptors predominate, increasing cardiac output primarily by increasing stroke volume.\n* At doses greater than 10 mcg/kg per minute, α1-adrenergic receptors predominate, leading to peripheral vasoconstriction.\n* Dopamine infusions do not significantly affect α2- and β2-adrenergic receptors."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 55-year-old male with a history of chronic obstructive pulmonary disease (COPD) undergoes regional block using an interscalene approach with bupivacaine for anticipated surgery of a left humerus fracture. Soon after placement of the block, the patient develops significant dyspnea. Breath sounds are equal to auscultation. The shortness of breath is most likely due to:",
      "options": [
        "A. Pneumothorax",
        "B. COPD exacerbation",
        "C. Inadvertent intravascular injection of bupivacaine",
        "D. Air embolism",
        "E. An elevated left hemidiaphragm"
      ],
      "answer": "E",
      "explanation": "* Interscalene nerve block is a frequently performed and well-tolerated adjunct for upper extremity surgery.\n* Local anesthetic is injected into the interscalene groove, blocking the brachial plexus (C5-T1).\n* The phrenic nerve (C3-C5 nerve roots) is in close proximity to the target area, making ipsilateral diaphragmatic paralysis possible.\n* One study showed 100% incidence of diaphragm dysfunction with ultrasound.\n* This complication is generally well tolerated by patients with adequate pulmonary reserve but can be problematic in patients with lung disease.\n* Ultrasound guidance, targeting the brachial plexus at a lower level, and lower volumes of anesthetic agent help prevent this complication, but cranial spread is still possible.\n* Pneumothorax is a known complication, but bilateral breath sounds make it unlikely.\n* COPD exacerbation is unlikely with such an acute onset.\n* Air embolism is unlikely with a percutaneous block.\n* Toxic doses of intravenous bupivacaine are associated with cardiac and neurotoxicity, not isolated dyspnea."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "After completion of surgery, an anticholinesterase is administered to reverse the neuromuscular blockade. Which of the following muscles would be expected to recover first?",
      "options": [
        "A. Diaphragm",
        "B. Adductor pollicis",
        "C. Ocular muscles",
        "D. Pharyngeal",
        "E. Quadriceps femoris"
      ],
      "answer": "A",
      "explanation": "* Not all muscles respond similarly to neuromuscular blockade.\n* Central muscles (e.g., diaphragm) have greater blood supply, leading to quicker onset and recovery from paralysis compared to peripheral muscles (e.g., quadriceps femoris).\n* Due to variability in muscle relaxant duration and complications of incomplete recovery, quantitative train of four testing should be routine.\n* Muscles of the upper airway and pharynx have quick onset but slow offset.\n* Ocular muscles behave like central muscles, making them ideal for monitoring at induction and during surgery.\n* Adductor pollicis is a good muscle group to monitor at the end of anesthesia because its return of function ensures central muscles and pharynx have recovered."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Concerns with the use of propofol to supplement anesthesia would be greatest in a patient with:",
      "options": [
        "A. End-stage renal disease",
        "B. Poor cardiac function",
        "C. Cirrhosis",
        "D. Neutropenia",
        "E. Recent burn"
      ],
      "answer": "B",
      "explanation": "* Propofol is the most widely used induction drug, replacing barbiturates, due to quick onset, quick recovery, and antiemetic properties.\n* Propofol has no analgesic properties and requires coadministration of another drug for pain.\n* It is rapidly metabolized by the liver and excreted in the urine as an inactive metabolite; plasma clearance is greater than expected from liver metabolism alone, suggesting another clearance mechanism (likely pulmonary system).\n* The main side effect of propofol is significant cardiac suppression and hypotension with induction, making its use in patients with depressed cardiac function or preexisting hypotension judicious.\n* Propofol should be used within 8 hours of unsealing the bottle due to bacterial contamination; there is no contraindication to its use in neutropenia.\n* Morphine, hydromorphone, and midazolam can accumulate in renal failure and should be used cautiously.\n* Certain neuromuscular blockers (pancuronium, rocuronium, vecuronium) rely on some renal excretion.\n* The only anesthetic drug contraindicated in burns is succinylcholine, which can cause a rapid increase in intravascular potassium."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 40-year-old cirrhotic male undergoes induction of general anesthesia with succinylcholine for repair of an incarcerated inguinal hernia. At the end of the procedure, a peripheral nerve stimulator demonstrates no recovery of muscle twitches despite 60 minutes of time elapsing. Which of the following is true regarding this condition?",
      "options": [
        "A. It is best treated with transfusion of whole blood.",
        "B. It is best treated with transfusion of fresh frozen plasma.",
        "C. It is unlikely to be related to his liver disease.",
        "D. It also affects the metabolism of cocaine.",
        "E. It is inherited in an autosomal dominant fashion."
      ],
      "answer": "D",
      "explanation": "* Failure to regain muscle twitches after neuromuscular blockade suggests pseudocholinesterase deficiency.\n* This patient received succinylcholine for induction, and pseudocholinesterase is necessary for its degradation.\n* The etiology can be acquired (e.g., liver disease) or a genetic abnormality (autosomal recessive).\n* Treatment is mainly supportive, with patients maintained on mechanical ventilation until spontaneous recovery.\n* Pseudocholinesterase also affects the metabolism of ester local anesthetics and up to 50% of cocaine metabolism, increasing risk of life-threatening cocaine toxicity.\n* Diagnosis is confirmed by laboratory assay showing decreased plasma cholinesterase enzyme activity."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "Which of the following is associated with barbiturate toxicity?",
      "options": [
        "A. Myocardial depression",
        "B. Acute tubular necrosis",
        "C. Hepatotoxicity",
        "D. Peripheral neuropathy",
        "E. Seizures"
      ],
      "answer": "A",
      "explanation": "* Barbiturates were used for anesthetic induction and seizures but are now largely replaced.\n* Barbiturate toxicity is rare.\n* They are central nervous system depressants, causing drowsiness to general anesthesia.\n* They inhibit neuron firing and are protective against seizures.\n* Higher doses inhibit respiratory drive and normal rhythmic respirations.\n* Hepatotoxicity is not seen, but they inhibit CYP enzymes, increasing concentrations of other drugs undergoing hepatic degradation.\n* At the peripheral nervous system level, barbiturates decrease transmission through the autonomic nervous system and suppress nicotinic receptors, contributing to hypotension, not peripheral neuropathy.\n* At anesthetic doses, barbiturates minimally suppress cardiac reflexes due to autonomic ganglia suppression, problematic only in patients with underlying cardiac disease.\n* At toxic doses, there is direct suppression of cardiac contractility (myocardial depression).\n* Renal injury is likely secondary to hypotension rather than a direct effect on kidneys."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A patient is given benzocaine spray in anticipation of a bedside flexible laryngoscopy. After several minutes, he becomes cyanotic. Pulse oximetry continues to read 100%. Which of the following is the most appropriate treatment?",
      "options": [
        "A. Intubation",
        "B. Intravenous methylene blue",
        "C. Discontinue benzocaine and administer prilocaine",
        "D. Metoclopramide",
        "E. Thiosulfate"
      ],
      "answer": "B",
      "explanation": "* Benzocaine toxicity can manifest as methemoglobinemia.\n* In methemoglobinemia, the ferrous component of hemoglobin is oxidized to ferric hemoglobin, which does not effectively carry oxygen.\n* Mild to moderate methemoglobinemia can cause marked cyanosis but is generally well tolerated and typically does not require mechanical intubation.\n* Pulse oximetry will not reliably assess hypoxemia; it will be falsely elevated initially and can be falsely low after treatment.\n* Partial pressure of oxygen in the blood (Pao2) remains normal, so standard arterial blood gas analyzers will show a falsely elevated oxygen saturation.\n* Treatment is with intravenous methylene blue, which reduces hemoglobin back to the ferrous state.\n* Prilocaine has similar toxicity to bupivacaine and will not treat the underlying issue.\n* Metoclopramide is used for delayed gastric emptying.\n* Thiosulfate is used in cyanide toxicity treatment."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "A 16-year-old male trauma patient has been undergoing cardiopulmonary resuscitation for the last 30 minutes. The emergency room physician intubates the patient and confirms tube placement via direct visualization of the endotracheal (ET) tube passing through the cords. Capnography reveals abnormally low end-tidal CO2. What is the next best course of action?",
      "options": [
        "A. Removal of the ET tube and reintubation",
        "B. Chest x-ray to confirm placement",
        "C. Transtracheal ultrasound",
        "D. Arterial blood gas",
        "E. Continue bagging with 100% FiO2"
      ],
      "answer": "C",
      "explanation": "* The gold standard to confirm endotracheal intubation is capnography.\n* Capnography's utility is limited in cardiopulmonary arrest due to dependence on adequate pulmonary blood flow.\n* Capnography requires several breaths for accurate results.\n* Airway obstruction from epinephrine (used in advanced cardiac life support) can produce false-negative results.\n* Ultrasound is a useful adjunct when capnography is limited, with 98% sensitivity and specificity in confirming ET placement.\n* In this case, the low end-tidal CO2 is due to prolonged cardiac arrest, not improper placement.\n* Removal of the ET tube and reintubation would not be helpful.\n* Arterial blood gas is not appropriate for confirming ET tube placement due to long turnaround time.\n* Chest x-ray takes too long for confirmation.\n* Continuing to bag with 100% FiO2 without confirming placement is inappropriate."
    }
  ]
}
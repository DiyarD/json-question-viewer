{
    "chapter_name": "The prostate and seminal vesicles",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "1. The following statements are true except:\nA The prostate is anatomically divided into a peripheral zone, a central zone and a transitional zone.\nB The glands of the peripheral zone are lined by transitional epithelium.\nC Benign prostatic hypertrophy occurs in the transitional zone.\nD Most carcinomas arise in the peripheral zone.\nE Denonvilliers' fascia separates the prostate from the rectum.",
            "options": [
                "A The prostate is anatomically divided into a peripheral zone, a central zone and a transitional zone.",
                "B The glands of the peripheral zone are lined by transitional epithelium.",
                "C Benign prostatic hypertrophy occurs in the transitional zone.",
                "D Most carcinomas arise in the peripheral zone.",
                "E Denonvilliers' fascia separates the prostate from the rectum."
            ],
            "answer": "B",
            "explanation": "1. B The glands of the peripheral zone are not lined by transitional epithelium but by columnar epithelium. It is the peripheral zone that is the site where cancer originates and hence prostate carcinomas are adenocarcinomas. In the past, the prostate was described as divided into lobes. Now the prostate gland is considered to consist of a peripheral zone (PZ, 70% of the glandular substance), central zone (CZ, 25%) and transitional zone (TZ, 5%). The CZ is wedge-shaped, forming the base of the gland with its apex at the verumontanum, and surrounds the ejaculatory ducts. The verumontanum is an important anatomical landmark; in transurethral resection of the prostate (TURP) all resection must be confined proximal to the verumontanum to prevent incontinence. The TZ lies around the distal part of the pre-prostatic urethra proximal to the apex of the central zone. The zonal anatomy is clinically important in that most cancers arise from the PZ and benign prostatic hypertrophy (BPH) affects the TZ. The CZ is rarely involved in any disease process. MRI in T2-weighted images can distinguish the zonal anatomy. The PZ and verumontanum have high-signal intensity (looking intensely white), while the CZ and TZ have low signal (looking grey). The rectovesical fascia of Denonvillier's separates the posterior surface of the gland covered by the capsule, bladder base and seminal vesicles from the rectum anteriorly."
        },
        {
            "id": 2,
            "question_type": "msq",
            "question": "2. Which of the following statements are true?\nA Luteinising hormone (LH) from the anterior pituitary controls the secretion of testosterone.\nB Leydig cells from the testes secrete 90% of the testosterone.\nC. The enzyme 5α-reductase type II is found in high concentration in the prostate.\nD 5α-reductase converts testosterone into 1.5-dihydrotestosterone (DHT).\nE Prostate-specific antigen (PSA) is both specific and sensitive in the diagnosis of prostate cancer.",
            "options": [
                "A Luteinising hormone (LH) from the anterior pituitary controls the secretion of testosterone.",
                "B Leydig cells from the testes secrete 90% of the testosterone.",
                "C. The enzyme 5α-reductase type II is found in high concentration in the prostate.",
                "D 5α-reductase converts testosterone into 1.5-dihydrotestosterone (DHT).",
                "E Prostate-specific antigen (PSA) is both specific and sensitive in the diagnosis of prostate cancer."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "2. A, B, C, D Testosterone is the main hormone acting on the prostate. This hormone (90%) is secreted by the Leydig cells of the testes under the control of the luteinising hormone (LH) of the anterior pituitary. LH is under the control of hypothalamic luteinising hormone-releasing hormone (LHRH). The use of LHRH analogues forms the physiological basis of androgen-deprivation therapy in prostate cancer. The enzyme 5α-reductase type II is found abundantly in the prostate. This enzyme converts testosterone into 1,5-dihydrotestosterone (DHT), which is five times as potent as testosterone. The adrenals contribute 5% to 10% of the testosterone output. Prostate specific antigen (PSA) is neither specific nor sensitive in diagnosing prostate cancer. Although normal values might vary a little in different laboratories, a value of <3 ng/mL is regarded as normal. Both BPH and prostate cancer might show a PSA in the range of 3 to 15 ng/mL. Almost 25% of men with a PSA of 4–10 ng/mL have prostate cancer (hence not very specific) whilst 15%-20% of men with a prostate cancer have a PSA of 1 to 4 ng/mL (hence not very sensitive). In general, men aged 50–69 years with a PSA of >3 ng/mL would be advised to undergo a prostatic biopsy, although the threshold would be lower in the younger age group with a strong family history of prostate cancer."
        },
        {
            "id": 3,
            "question_type": "msq",
            "question": "3. Which of the following statements are true?\nA It is the most common cause of bladder outflow obstruction (BOO) in men >70 years of age.\nB Decrease in serum testosterone levels and therefore relative increase in serum oestrogens cause BPH.\nC The condition affects the transitional zone and the central zone.\nD All lower urinary tract symptoms (LUTS) in men >70 are due to BPH.\nE The prostatic urethra is elongated in BPH.",
            "options": [
                "A It is the most common cause of bladder outflow obstruction (BOO) in men >70 years of age.",
                "B Decrease in serum testosterone levels and therefore relative increase in serum oestrogens cause BPH.",
                "C The condition affects the transitional zone and the central zone.",
                "D All lower urinary tract symptoms (LUTS) in men >70 are due to BPH.",
                "E The prostatic urethra is elongated in BPH."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "E"
            ],
            "explanation": "3. A, B, C, E BPH is the most common cause of BOO in men >70 years of age. It is a condition that occurs in men over the age of 50 years; 50% of those >60 years will have histological evidence of BPH. It affects the submucous group of glands and connective-tissue stroma in the TZ; this forms a nodular enlargement which, as it grows, compresses the PZ into a false capsule giving rise to the ‘lateral lobes'. When the condition affects the CZ glands (rarely), a 'middle lobe' forms. When BPH affects two lateral lobes and a middle lobe, an intravesical ‘prostatic collar' forms. With advancing age there is an unequal reduction in the serum testosterone compared with oestrogen levels; thus BPH occurs from increased effects of oestrogen. Anatomically, as the lateral lobes enlarge, the prostatic urethra elongates – the larger the lobes the longer the urethra becomes with exaggeration of the posterior curve. If only one lateral lobe enlarges, distortion of the urethra occurs. In clinical practice this might result in difficulty in passing a Foley catheter should the patient present with acute urinary retention. In that case a curved (coudé) catheter might have to be used. All lower urinary tract symptoms (LUTS) in men over the age of 70 years are not always the result of BPH causing BOO. The other conditions that can give rise to LUTS are idiopathic detrusor overactivity or instability, neuropathic bladder and degeneration of bladder smooth muscle with impaired voiding."
        },
        {
            "id": 4,
            "question_type": "msq",
            "question": "4. In urodynamic studies, which of the following statements are true?\nA A voided volume >200 mL with a peak flow rate >15 mL/s is normal.\nB A voiding pressure of <60 cm H₂O is normal.\nC Increase in voiding pressures with a low flow rate is diagnostic of BOO.\nD In patients with a residual volume of 250 mL or more, bilateral hydronephrosis will result.\nE Urodynamically proven BOO only occurs from BPH.",
            "options": [
                "A A voided volume >200 mL with a peak flow rate >15 mL/s is normal.",
                "B A voiding pressure of <60 cm H₂O is normal.",
                "C Increase in voiding pressures with a low flow rate is diagnostic of BOO.",
                "D In patients with a residual volume of 250 mL or more, bilateral hydronephrosis will result.",
                "E Urodynamically proven BOO only occurs from BPH."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "4. A, B, C, D In urodynamic studies a decrease in urinary flow rates is a feature of BPH. For a voided volume of 200 mL or more with a peak flow rate of more than 15 mL/second is normal. A flow of 10–15 mL/second is equivocal and one of < 10mL/second is low. Decreased flow rate is caused by BOO, urethral stricture, or a weak detrusor. Increase in voiding pressures is a feature of BOO. Pressures of <60 cm H₂O are normal; a pressure of >80 cm H₂O is high, and anything in between is equivocal. Increase in voiding pressure with a low flow rate is diagnostic of BOO. Chronic retention is one of the complications of BOO. As a result of inefficient bladder emptying, over a period, urine tends to stagnate in the bladder producing residual urine. If this amount reaches 250 mL, high-pressure chronic retention results; this causes back pressure to the upper urinary tract with bilateral hydronephrosis. Urodynamically proven BOO not only occurs from BPH but also from bladder neck stenosis, bladder neck hypertrophy, prostate cancer, urethral stricture and neuropathic bladder."
        },
        {
            "id": 5,
            "question_type": "msq",
            "question": "5. In assessing LUTS in men, which of the following statements are false?\nA Charting a patient's symptoms according to the International Prostate Symptom Score (IPSS) is routinely used.\nB Flow-rate measurement studies and pressure-flow urodynamic studies are done.\nC Thorough nervous system examination is mandatory.\nD The upper urinary tract should always be imaged.\nE Cystourethroscopy is a good guide as an indication for surgery.",
            "options": [
                "A Charting a patient's symptoms according to the International Prostate Symptom Score (IPSS) is routinely used.",
                "B Flow-rate measurement studies and pressure-flow urodynamic studies are done.",
                "C Thorough nervous system examination is mandatory.",
                "D The upper urinary tract should always be imaged.",
                "E Cystourethroscopy is a good guide as an indication for surgery."
            ],
            "answer": [
                "D",
                "E"
            ],
            "explanation": "5. D, E In patients with routine symptoms of BPH, the upper urinary tract does not need to be imaged unless infection or haematuria is present. In that case, the upper tract is imaged by US or IVU. Cystourethroscopy is not a good guide as to the indication for surgical intervention. The decision whether to perform prostatectomy is based on the patient's symptoms, signs and investigations. Cystourethroscopy, however, is mandatory immediately prior to a prostatectomy, either open or transurethrally, to make sure there is no incidental intravesical pathology. It also provides information on the size of the intravesical prostate, length of the prostatic urethra and presence of trabeculation, sacculation or unsuspected diverticula. In assessing men with LUTS, the IPSS score and a frequency-volume diary from the patient is very important before the patient attends the clinic to complement clinical examination and relevant investigations. These should include flow-rate measurement studies and pressure-flow urodynamic studies. Transrectal US scanning is not routine unless, on rectal examination, a carcinoma is suspected. Some surgeons do this investigation, nevertheless, for accurate assessment of the size of the prostatic adenoma. Comprehensive assessment of BPH or BOO should include abdominal and rectal examination and neurological examination to exclude multiple sclerosis, Parkinson's disease and spinal-cord compression. Investigations such as serum PSA, serum biochemistry, full blood count and urine culture are done besides urodynamic studies. The importance of thorough assessment prior to surgery cannot be overstated because surgical treatment in the wrong patient will make the patient worse."
        },
        {
            "id": 6,
            "question_type": "msq",
            "question": "6. Which of the following statements are true?\nA All patients with acute retention ultimately require prostatectomy.\nB Chronic retention accounts for 15% of prostatectomies.\nC Severe symptoms account for 60% of prostatectomies.\nD Drug therapy is with α-blockers and/or 5α-reductase inhibitor.\nE A low maximum flow rate of <10 mL/s and a residual volume of 100–250 mL are indications for surgery.",
            "options": [
                "A All patients with acute retention ultimately require prostatectomy.",
                "B Chronic retention accounts for 15% of prostatectomies.",
                "C Severe symptoms account for 60% of prostatectomies.",
                "D Drug therapy is with α-blockers and/or 5α-reductase inhibitor.",
                "E A low maximum flow rate of <10 mL/s and a residual volume of 100–250 mL are indications for surgery."
            ],
            "answer": [
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "6. B, C, D, E Chronic retention accounts for 15% of prostatectomies. These patients with a residual urine of >200 mL have a degree of renal impairment with features of back pressure. Once the renal impairment has been stabilised and the diagnosis confirmed, prostatectomy is carried out. Severe symptoms, as seen from a high IPSS score in the form of poor stream, hesitancy, marked frequency and a feeling of insufficient evacuation, are strong indications for surgery. A maximum flow rate of <10 mL/second and an increasing residual volume (100–250 mL) as seen on repeated US strengthens the case for surgery. Such a picture accounts for 60% of prostatectomies. A period of drug treatment with α-blockers with a combination of α-reductase inhibitors (in those with an adenoma of >50 g), taken for a period of 6 months or so is worthwhile after full discussion between the patient and urologist. Only 25% of fit male patients with acute retention, where no cause for the retention has been found (e.g., constipation, drugs, recent operation) need a prostatectomy. In some patients after initial catheterisation, drug therapy is used for a while followed by trial without catheter. Such management is sometimes successful. The same is true of patients with chronic retention of urine, provided renal function has been stabilised by catheterisation."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "7. The following statements are true except:\nA α-adrenergic blocking agents inhibit the contraction of prostatic smooth muscle.\nB 5α-reductase inhibitors inhibit the conversion of testosterone to DHT.\nC Drug therapy results in 20% improvement in symptom scores.\nD Transurethral resection of the prostate (TURP) results in 75% improvement in the symptom scores.\nE Retrograde ejaculation occurs in all patients after TURP.",
            "options": [
                "A α-adrenergic blocking agents inhibit the contraction of prostatic smooth muscle.",
                "B 5α-reductase inhibitors inhibit the conversion of testosterone to DHT.",
                "C Drug therapy results in 20% improvement in symptom scores.",
                "D Transurethral resection of the prostate (TURP) results in 75% improvement in the symptom scores.",
                "E Retrograde ejaculation occurs in all patients after TURP."
            ],
            "answer": "E",
            "explanation": "7. E Retrograde ejaculation causing spermaturia occurs in about 65% of patients after prostatectomy because of damage to the internal sphincter, causing disruption of the bladder neck mechanism. This is important to mention when counselling men for TURP. The following two types of drugs are available: α-adrenergic-blocking agents that inhibit the contraction of smooth muscle in the prostate and 5α-reductase inhibitors that inhibit the conversion of testosterone to DHT (the most active form of androgen). α-blockers are more quick-acting, while the 5α-reductase inhibitors need to be taken for a longer period, have fewer side effects and work better in patients with glands >50 g. Drug therapy over 1 year produces a 25% shrinkage of the prostate gland. Drugs result in 20% improvement in symptom scores, while TURP results in 75% improvement."
        },
        {
            "id": 8,
            "question_type": "msq",
            "question": "8. Which of the following statements are true in carcinoma of the prostate?\nA It is the most common cancer in men over the age of 65 years.\nB In the younger age group who develop prostate cancer, 10%–15% have a positive family history.\nC A patient who has had a prostatectomy for BPH can develop prostate cancer.\nD Carcinoma mostly originates in the peripheral zone of the prostate.\nE Prostate-specific antigen (PSA) is an extremely reliable method of screening.",
            "options": [
                "A It is the most common cancer in men over the age of 65 years.",
                "B In the younger age group who develop prostate cancer, 10%–15% have a positive family history.",
                "C A patient who has had a prostatectomy for BPH can develop prostate cancer.",
                "D Carcinoma mostly originates in the peripheral zone of the prostate.",
                "E Prostate-specific antigen (PSA) is an extremely reliable method of screening."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "8. A, B, C, D Carcinoma of the prostate is the most common cancer in men over the age of 65 years. When serial histological sections of the prostate gland is performed at routine autopsy, foci of cancer can be found although their progression to metastatic disease is uncertain. When prostate cancer occurs in younger men, 10%–15% have a family history. At the operation of prostatectomy for BPH, the prostatic adenoma is removed. This arises from the TZ of the prostate whereas cancer arises from the PZ. Therefore after the operation of 'prostatectomy' for BPH, there is no immunity toward carcinoma of the prostate that can therefore occur. PSA is not a reliable method of screening for prostate cancer. There is no consensus about its use as a screening procedure. Detection of cancer using PSA is 2%–4%. About 30% of men with a raised PSA will have proven prostate cancer. A normal PSA will be found in 20% of men with proven prostate cancer. Population-based screening for prostate cancer is carried out within clinical trials and it remains unclear whether national screening programmes should be established."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "9. The following statements are true except:\nA The histological type is an adenocarcinoma.\nB Gleason scoring system is based on the degree of glandular differentiation.\nC The Gleason score correlates well with spread and prognosis.\nD Prostate is the most common site of origin for skeletal metastasis.\nE Skeletal metastases from prostate cancer are mostly osteolytic.",
            "options": [
                "A The histological type is an adenocarcinoma.",
                "B Gleason scoring system is based on the degree of glandular differentiation.",
                "C The Gleason score correlates well with spread and prognosis.",
                "D Prostate is the most common site of origin for skeletal metastasis.",
                "E Skeletal metastases from prostate cancer are mostly osteolytic."
            ],
            "answer": "E",
            "explanation": "9. E Skeletal metastases from prostate cancer are mostly osteosclerotic (osteoblastic) where they form new bone. The spread occurs mainly into the pelvis and lumbar vertebrae (Figure 77.1) through the vertebral venous system of Batson, which are a plexus of valveless veins, the latter fact encouraging the formation of secondaries. It is an adenocarcinoma. A scoring system devised by Donald Gleason is based on the degree of glandular de-differentiation and its relationship to stroma. The score ranges from 2 to 10 and correlates well with the prognosis and possibility of spread. Haematogenous spread occurs to the skeleton, the prostate being the most common site for such metastases. Whilst the pelvis and lumbar vertebrae are the most common sties, the femoral head, rib cage and skull follow closely in incidence (Figure 77.2)."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "10. On rectal examination, which of the following features does not suggest carcinoma?\nA Nodules within the prostate.\nB Obliteration of the median sulcus.\nC Irregular stony hard induration.\nD Mobile rectal mucosa over the prostate.\nE Extension of a hard nodule beyond the capsule into the bladder base.",
            "options": [
                "A Nodules within the prostate.",
                "B Obliteration of the median sulcus.",
                "C Irregular stony hard induration.",
                "D Mobile rectal mucosa over the prostate.",
                "E Extension of a hard nodule beyond the capsule into the bladder base."
            ],
            "answer": "D",
            "explanation": "10. D Mobile rectal mucosa over the prostate is a normal finding of BPH. In prostate carcinoma the rectal mucosa will be adherent to the prostate or nodules might be felt within the gland. Obliteration of the median sulcus with irregular, stony hard induration is a typical feature. In advanced cases extension beyond the capsule infiltrating the bladder base and the seminal vesicles might occur, while in extreme cases the rectum is known to be stenosed from external compression."
        },
        {
            "id": 11,
            "question_type": "msq",
            "question": "11. In the assessment of prostate cancer which of the following investigations are necessary?\nA Transrectal ultrasound-guided biopsy (TRUS)\nB Cross-sectional MRI\nC Bone scan\nD General blood tests, PSA and liver function tests\nE IVU",
            "options": [
                "A Transrectal ultrasound-guided biopsy (TRUS)",
                "B Cross-sectional MRI",
                "C Bone scan",
                "D General blood tests, PSA and liver function tests",
                "E IVU"
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "11. A, B, C, D Once suspected, the diagnosis has to be confirmed and staged. Confirmation is obtained by TRUS (trans-rectal ultrasound-guided) core biopsy. TRUS is very useful in local staging supplemented by cross-sectional MR imaging. Having confirmed the diagnosis, bone scan is performed as a part of the staging procedure; CXR and abdominal x-rays for obvious lung and skeletal metastasis are carried out. All the general blood tests, including LFTs, are done and might be normal unless there are skeletal secondaries with bone-marrow infiltration. PSA, although not specific or sensitive, is used for diagnosis and monitoring the effects of treatment. IVU is not routinely carried out unless there is haematuria. US gives a good idea of any back pressure of the kidneys and ureters."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "12. Regarding treatment, the following statements are true except:\nA Radical prostatectomy is only suitable for T1 and T2 disease (early cancer).\nB Radical external-beam radiotherapy is an alternative to radical prostatectomy.\nC T3 patients are treated by surgery, radical radiotherapy, or androgen ablation.\nD Incidentally diagnosed disease is treated by radical prostatectomy.\nE The incidence of severe stress incontinence after radical prostatectomy is about 2%.",
            "options": [
                "A Radical prostatectomy is only suitable for T1 and T2 disease (early cancer).",
                "B Radical external-beam radiotherapy is an alternative to radical prostatectomy.",
                "C T3 patients are treated by surgery, radical radiotherapy, or androgen ablation.",
                "D Incidentally diagnosed disease is treated by radical prostatectomy.",
                "E The incidence of severe stress incontinence after radical prostatectomy is about 2%."
            ],
            "answer": "D",
            "explanation": "12. D Incidentally discovered disease at TURP (T1a and T1b) for clinically diagnosed BPH is managed by active surveillance with regular digital rectal examination (DRE) and PSA estimation. Radical prostatectomy might be considered in this group in patients below the age of 70 years although some will elect to pursue a conservative approach. Tic tumour, diagnosed after investigations for a raised PSA and T2 tumours (2a is suspicious nodule confined within prostatic capsule in one lobe and 2b involving both lobes) are suitable for radical prostatectomy particularly below the age of 70 years. Radical external-beam radiotherapy (ERBT) is an alternative for early cancer where survival rates is almost similar to radical prostatectomy; in 30% though, persistent tumour is found histologically in treated patients. In T3 disease where the cancer has extended through the capsule, surgery, radiotherapy and androgen ablation or a combination are used. Following radical prostatectomy, carried out by the expert, stress incontinence is <2%."
        },
        {
            "id": 13,
            "question_type": "matching",
            "question": "Match the diagnoses with the clinical scenarios that follow:",
            "options": {
                "items": [
                    "A A 40-year-old man complains of feeling ill with pyrexia of 39°C, rigors with aches all over his body, and flu-like symptoms in general. He has rectal irritation, pain on defecation and perineal discomfort. He has pain on micturition and passes threads in his urine. Rectal examination reveals a tender, swollen prostate.",
                    "B A 70-year-old man complains of poor stream, frequency of micturition both in the day and at night, hesitancy and intermittent stream, a feeling of incomplete emptying and terminal haematuria for about 4 months; recently he has had backache. Clinical examination shows no abnormality. On rectal examination he has a hard, nodular prostate with overlying fixed rectal mucosa.",
                    "C A 72-year-old man has come to the emergency department with severe acute pain in his lower abdomen not having passed urine for almost 10 hours. He has been on some medicines, which he bought across the counter for cold and flu. This has also made him constipated. On examination he is in severe pain from a large mass in his suprapubic region arising from the pelvis. The mass is dull to percussion.",
                    "D A 70-year-old man complains of urgency, frequency and hesitancy of micturition with a feeling of incomplete emptying. He also has poor flow, intermittent stream and post-micturition dribbling. These symptoms have been going on for 2 years and are gradually getting worse. Clinical examination reveals no abnormality. On rectal examination he has an enlarged smooth prostate with overlying mobile rectal mucosa, and the median vertical groove is easily felt.",
                    "E A 75-year-old male complains of general malaise, lethargy, abdominal distension and urinary incontinence. On examination he has a large painless mass in his suprapubic region arising from the pelvis and has continuous urinary dribbling. The mass is dull on percussion. He is a type 2 diabetic on oral medication."
                ],
                "choices": [
                    "1 Acute prostatitis",
                    "2 Acute retention of urine",
                    "3 Benign prostatic hypertrophy (BPH) causing BOO",
                    "4 Carcinoma of prostate",
                    "5 Chronic urinary retention with overflow"
                ]
            },
            "answer": {
                "A": "1",
                "B": "4",
                "C": "2",
                "D": "3",
                "E": "5"
            },
            "explanation": "1. A Acute prostatitis This young male has features of acute prostatitis where the general features are far more predominant than the local. The findings on rectal examination give the diagnosis. The usual causative organism is E. coli; Staphylococcus aureus and albus, Streptoccocus faecalis, Neisseria gonorrhoea and Chlamydia are also the causative organisms. The seminal vesicles and posterior urethra are also usually affected. This is a clinical diagnosis and must be treated vigorously and over long term. After urine has been sent for culture, the patient must be started on trimethoprim or ciprofloxacin. In due course epidydimo-orchitis might occur. Analgesia on a long-term basis in the form of NSAIDs or stronger might be necessary. Rarely this might proceed on to an abscess when the patient has constant perineal and rectal pain with tenesmus. The prostate will be felt as an enlarged, hot, very tender and fluctuant mass; acute urinary retention might occur when suprapubic catheterisation would be the ideal approach. Under antibiotic cover the abscess should be drained by transurethral resection and unroofing of the cavity. Inadequately treated acute prostatitis might lead to chronic prostatitis, the symptoms of which are sometimes loosely referred to as ‘prostatodynia'. This is a combination of perigenital pain and testicular and perineal pain. Chlamydia might be responsible. The diagnosis can be very difficult to make with certainty. Presence of prostatic threads in the urine is confirmatory. Urethroscopy might reveal inflamed prostatic urethra with an enlarged oedematous verumontanum. Long-term treatment with trimethoprim and metronidazole for 1 week helps when anaerobes are involved. Doxycycline is the antibiotic if Chlamydia is suspected. Pain relief might be such a challenge that a referral to the pain clinic might be warranted.\n4. B Carcinoma of prostate This patient has typical LUTS from BOO of short duration. The findings on rectal examination are very suggestive of a carcinoma of the prostate. The backache also of recent onset might indicate skeletal secondaries. After thorough clinical examination, the diagnosis should be confirmed followed by staging and then instituting definitive treatment. After all blood tests (see above) a trans-rectal ultrasound guided (TRUS) biopsy using an automated gun is carried out. The biopsy is scored according to the Gleason system. An MR cross-sectional imaging, bone scan and CXR are essential in the staging process; x-ray of the pelvis might also be done. Now the patient's management is discussed at the urological multidisciplinary team meeting with a major input from the patient with regard to his wishes. Radical prostatectomy is suitable for T1 and T2 disease and carried out in men with a life expectancy of >10 years. The procedure should be a nerve-sparing operation, the choice of approaches being the traditional open procedure, laparoscopic procedure or robotic procedure depending upon the available expertise. An alternative is radical radiotherapy bearing in mind that in 30% of treated patients persistent tumour is found within the prostate. Brachytherapy is another form of radiation treatment in which radioisotopes iodine-125 and palladium-103 are implanted as seeds directly into the prostate through the transperineal route. In advanced disease the treatment is palliative. Those with BOO undergo TURP (‘channel TURP'), which might need to be repeated. Patients with bone secondaries are offered bilateral subcapsular orchidectomy (or zoladex) + local radiotherapy to the bones.\n2. C Acute retention of urine This patient has acute urinary retention almost certainly precipitated by the use of proprietary cough and flu medicines. Constipation might be a contributory factor too. The patient, who will be in agony, needs strong analgesia followed by immediate decompression of his bladder by the passage of a Foley catheter. Even when urine comes out, the catheter should be pushed further into the bladder before inflating the balloon so as not to inflate the balloon within the prostatic urethra, which might be elongated and distorted. If urethral catheterisation is not successful, suprapubic puncture under local analgesia is carried out using a commercially available pack. Once the urine has been drained into a close system of catheter drainage and the patient is comfortable, a detailed history and examination is undertaken. If the patient did not have any LUTS prior this episode of acute retention, a trial without catheter a few days later is likely to be successful. Some units might give the patient a course of α-adrenergic drugs prior to ‘trial without catheter'. If the patient does not succeed in passing urine, then after urodynamic studies TURP is carried out. Acute retention of urine accounts for 25% of prostatectomies.\n3. D Benign prostatic hypertrophy causing BOO This patient has typical LUTS from BOO due to BPH. These symptoms used to be referred to as prostatism. The patient's symptoms would have been stratified according to the IPSS as mild, moderate and severe before he comes to the outpatient clinic. The patient should be fully examined, although there will be very little to find on clinical examination except for a benign enlarged prostate on rectal examination. A neurological examination is essential. The patient should undergo all of the following routine investigations: urine culture, blood tests including serum biochemistry, PSA and full blood count. Special investigation would be pressure-flow urodynamic studies and imaging of the upper tract if indicated because of infection or haematuria. This is done by ultrasound or IVU. In large benign prostates, the typical appearance is that of ‘fish-hook' deformities of the lower ends of ureters (Figure 77.3). This sort of a picture is an extreme rarity, because IVU is not carried out by most urologists for BOO.\n5. E Chronic urinary retention with overflow This patient has chronic retention with overflow, an aftermath of neglected retention. The patient needs immediate catheterisation. This might result in the following: (i) haematuria as the distended bladder veins collapse as the pressure is released and (ii) post-obstructive diuresis, which needs to be monitored carefully with fluid replacement by intravenous saline. US of the upper urinary tract will show hydronephrosis and hydroureter and serum biochemistry will reveal chronic renal failure with metabolic acidosis. This will take several days to stabilise, during which time the patient's electrolytes are closely monitored. Whilst the patient is being stabilised and his renal failure being brought under control, he should be seen by a neurologist for a thorough neurological examination to exclude neurogenic bladder dysfunction as in multiple sclerosis, Parkinson's disease or spinal cord abnormalities. In these conditions chronic urinary retention might be an early sign. Once stabilised, the patient might be found to be anaemic. If the haemoglobin is <9 g/L the patient might need blood transfusion. After pressure-flow urodynamic assessment and excluding any neurological problem and uncontrolled diabetes causing neuropathy, this patient will need an operation in the form of TURP, as trial without catheter and medical treatment is highly unlikely to succeed."
        }
    ]
}
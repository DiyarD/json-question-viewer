{
  "chapter_name": "Head and Neck",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 2-year-old male presents with a well-defined anterior neck mass, located midline and above the cricoid cartilage. The mother reports no other medical history. It elevates when he swallows and is nontender. He has no cervical adenopathy. Which of the following is recommended before considering surgical excision?",
      "options": [
        "A. Computed tomography (CT) scan of the neck",
        "B. Thyroid scintigraphy",
        "C. Fine-needle biopsy",
        "D. Magnetic resonance imaging (MRI) of the neck",
        "E. Ultrasound"
      ],
      "answer": "E",
      "explanation": "*   This patient's presentation is consistent with a thyroglossal duct cyst, the most common midline congenital neck malformation.\n*   Preoperative imaging is necessary to confirm the anatomic location of the thyroid gland, especially given the association of ectopic thyroid tissue with these cysts.\n*   Ultrasonography is the preferred imaging option because it is noninvasive, widely available, cost-effective, and provides high-fidelity characterization of the cyst.\n*   Thyroid scintigraphy is also effective but used less often.\n*   MRI or CT scans are not typically required for diagnosis in young patients.\n*   Fine-needle aspiration (FNA) biopsy is appropriate for suspected thyroid nodules, not for thyroglossal duct cysts.\n*   Observation is not appropriate due to the risk of recurrent infections and malignant transformation."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 42-year-old female smoker presents with bilateral masses overlying the angle of the mandible. She has no other complaints. Which of the following is the most likely diagnosis?",
      "options": [
        "A. Papillary cystadenoma lymphomatosum",
        "B. Mucoepidermoid carcinoma",
        "C. Pleomorphic adenoma",
        "D. Basal cell adenoma",
        "E. Oncocytoma"
      ],
      "answer": "A",
      "explanation": "*   Parotid gland tumors are mostly benign (80%). Mucoepidermoid carcinoma is a malignant lesion.\n*   Papillary cystadenoma lymphomatosum, also known as Warthin tumor, is the only benign parotid gland tumor that commonly presents with bilateral masses (up to 20% of cases).\n*   Warthin tumor has a strong association with smoking.\n*   It is the second most common benign salivary tumor, following pleomorphic adenoma."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 45-year-old male with squamous cell carcinoma at the floor of the mouth is recovering from a resection, mandibular flap reconstruction, and tracheostomy performed at the third tracheal ring. Several hours later the surgical resident gets called to the postoperative recovery suite because the patient develops some bleeding at the tracheostomy site. Which of the following is true?",
      "options": [
        "A. Making the tracheostomy at the second tracheal ring could have prevented this complication.",
        "B. He should be taken to the operating room (OR) to undergo a median sternotomy.",
        "C. He likely has a traumatic injury of the anterior jugular vein.",
        "D. Immediate bronchoscopy should be performed.",
        "E. Overinflating the tracheostomy cuff should be avoided."
      ],
      "answer": "C",
      "explanation": "*   Bleeding from the tracheostomy site requires prompt evaluation.\n*   Hemorrhage within the first 48 hours post-tracheostomy is typically due to local trauma, such as injury to the inferior thyroid artery or anterior jugular veins, or systemic coagulopathy (e.g., from heparin).\n*   Initial management involves applying direct pressure or overinflating the tracheostomy cuff.\n*   If bleeding persists and vital signs are stable, bronchoscopy can be considered.\n*   For massive hemorrhage or airway compromise, immediate return to the OR for neck exploration is necessary.\n*   Tracheoinnominate fistula (TIF) is a rare, fatal complication that typically develops at least 48 hours post-op, often presenting with a 'herald bleed.'\n*   Performing a tracheostomy above the third tracheal ring helps decrease the risk of TIF.\n*   If TIF is suspected, digital pressure applied through the tracheostomy (between the TIF and sternum) can control bleeding until a median sternotomy and fistula ligation can be performed in the OR."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 15-year-old male arrives at the emergency department (ED) with refractory right-sided epistaxis. He has not stopped bleeding for the past 3 hours. Vital signs are normal. On exam, he has a flesh-appearing mass in the right nares. His hemoglobin is 12 g/dL. The next step is:",
      "options": [
        "A. Place nasal packing and discharge home",
        "B. Take to the operating room (OR) for biopsy of mass",
        "C. High resolution CT scan of the head and sinuses",
        "D. Urgent radiation therapy",
        "E. Angiography with embolization"
      ],
      "answer": "C",
      "explanation": "*   This presentation (adolescent male, severe unilateral epistaxis, flesh-appearing nasal mass) is highly suggestive of juvenile nasal angiofibroma (JNA).\n*   JNA is a highly vascular, benign neoplasm originating from the pterygopalatine fossa.\n*   If there is concern for airway compromise or massive bleeding, intubation and blood transfusions (if symptomatic blood loss) are indicated.\n*   The next step is to confirm the diagnosis and assess the extent of the fibroma with a CT scan of the head and sinuses.\n*   Biopsy of the mass is avoided due to the high risk of life-threatening hemorrhage.\n*   Nasal packing can be used initially to control bleeding, but the patient should be admitted and observed. Prolonged nasal packing requires oral antibiotics due to the risk of toxic shock syndrome.\n*   If bleeding continues, angiography with embolization of the internal maxillary artery is performed.\n*   Definitive treatment is surgical excision, often via a transnasal endoscopic approach.\n*   Radiation therapy is no longer performed for JNA, especially in adolescents."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "The most common cause of hearing loss in an adult is:",
      "options": [
        "A. Acute otitis media",
        "B. Chronic otitis media",
        "C. Otosclerosis",
        "D. Cerumen",
        "E. Presbycusis"
      ],
      "answer": "D",
      "explanation": "*   Hearing loss is categorized as conductive or sensorineural.\n*   Conductive hearing loss is most commonly caused by cerumen (earwax).\n*   Otosclerosis can also cause conductive hearing loss.\n*   Cerumen usually does not cause symptoms and provides a protective layer, but it should be removed if it causes hearing loss, earache, or fullness.\n*   Otitis media is a more common cause of hearing loss in children.\n*   Presbycusis is a sensorineural hearing loss that affects older patients."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Sialolithiasis most commonly arises from:",
      "options": [
        "A. Parotid gland",
        "B. Submandibular gland",
        "C. Sublingual gland",
        "D. Minor salivary gland",
        "E. Stensen duct"
      ],
      "answer": "B",
      "explanation": "*   While all salivary glands can form stones, the submandibular gland is the largest contributor, accounting for over 90% of stones.\n*   The parotid gland is the second most common site for sialolithiasis.\n*   Stensen's duct drains the parotid gland.\n*   The small, multiple ducts of Rivinus drain the sublingual gland."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 6-year-old male with recurrent otitis media presents to the ED with fever and right-sided earache. Methylene blue confirms a sinus tract from the right submandibular area to the external auditory canal. Which of the following branchial cleft cysts does this patient most likely have?",
      "options": [
        "A. First",
        "B. Second",
        "C. Third",
        "D. Fourth",
        "E. Fifth"
      ],
      "answer": "A",
      "explanation": "*   There are only four types of branchial cleft cysts.\n*   A first branchial cleft cyst typically presents with recurrent infection and a sinus tract extending from the submandibular area to the external auditory canal, resulting from incomplete ectoderm closure.\n*   Definitive intervention for a first branchial cleft cyst involves a superficial parotidectomy.\n*   The second branchial cleft cyst is the most common type, appearing anterior to the sternocleidomastoid muscle and can also cause recurrent infections.\n*   Third branchial cleft cysts are rare and typically appear on the left side near the lateral neck.\n*   Fourth branchial cleft cysts also appear on the lateral neck and can lead to neck swelling and airway compromise."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "The brachial plexus is located:",
      "options": [
        "A. Posterior to the middle scalene muscle",
        "B. Anterior to the middle scalene muscle",
        "C. Anterior to the anterior scalene muscle",
        "D. Posterior to the posterior scalene muscle",
        "E. Anterior to the posterior scalene muscle"
      ],
      "answer": "B",
      "explanation": "*   The subclavian vein, artery, and brachial plexus are all components of the posterior neck triangle.\n*   The brachial plexus and subclavian artery pass posterior to the anterior scalene muscle but anterior to the middle scalene muscle.\n*   The subclavian vein passes anterior to the anterior scalene muscle and can experience narrowing between the first rib and clavicle.\n*   Understanding these anatomical relationships is crucial for neck and upper extremity dissection and for understanding thoracic outlet syndrome (TOS).\n*   Neurogenic TOS, the most common type, presents with sensory and motor loss in the ulnar nerve distribution."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 44-year-old male with recurrent melanoma of the scalp and cervical adenopathy arrives at clinic to discuss the risks of cervical lymph node dissection. The most likely injured nerve during this procedure is the:",
      "options": [
        "A. Spinal accessory nerve",
        "B. Greater auricular nerve",
        "C. Lesser occipital nerve",
        "D. Transverse cervical nerve",
        "E. Phrenic nerve"
      ],
      "answer": "A",
      "explanation": "*   During cervical lymph node dissection, the spinal accessory nerve (cranial nerve XI) is the most commonly injured nerve, although all listed nerves are at risk.\n*   Its superficial course in the posterior neck triangle makes it particularly vulnerable to injury.\n*   The nerve travels through the sternocleidomastoid muscle.\n*   Injury to the spinal accessory nerve can lead to trapezius palsy, resulting in shoulder weakness and pain.\n*   The phrenic nerve travels anterior to the anterior scalene muscle and posterior to the subclavian vein before entering the chest."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true regarding nasopharyngeal carcinoma?",
      "options": [
        "A. It is not associated with alcohol.",
        "B. Most patients present with cervical lymph node metastasis.",
        "C. The standard of care involves surgical excision followed by chemoradiation.",
        "D. Plummer-Vinson syndrome increases the risk for development of nasopharyngeal carcinoma.",
        "E. It is commonly confused with otitis externa."
      ],
      "answer": "B",
      "explanation": "*   Nasopharyngeal carcinoma is associated with Epstein-Barr virus, and EBV titers can be used to monitor treatment response.\n*   It is endemic in certain areas of southern China.\n*   Recent systemic reviews suggest heavy alcohol use may contribute to its risk.\n*   It is not associated with Plummer-Vinson syndrome.\n*   It often presents with middle ear effusion and can be confused with otitis media.\n*   The majority of patients (up to 90%) present with cervical lymph node metastasis.\n*   Whites born in the United States have a lower risk, while China-born whites have an increased risk.\n*   Combination chemotherapy and radiation therapy yields a higher survival rate than either modality alone.\n*   Surgery is generally not indicated."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "The cranial nerve most commonly injured by a temporal bone fracture is the:",
      "options": [
        "A. Fifth nerve",
        "B. Seventh nerve",
        "C. Eighth nerve",
        "D. Ninth nerve",
        "E. Eleventh nerve"
      ],
      "answer": "B",
      "explanation": "*   The facial nerve (seventh cranial nerve) is the most commonly injured cranial nerve in temporal bone fractures.\n*   Temporal bone fractures are also the most common cause of traumatic facial nerve injury.\n*   Partial or delayed facial paralysis typically resolves spontaneously.\n*   Immediate facial paralysis may benefit from nerve decompression."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is true regarding epistaxis?",
      "options": [
        "A. Ninety percent of bleeds are from the posterior part of the nose.",
        "B. Posterior bleeds are associated with hypertension and atherosclerosis.",
        "C. Anterior bleeds have an associated 5% mortality rate.",
        "D. Posterior bleeds are best managed by applying digital pressure to the nose.",
        "E. Anterior bleeds often require packing combined with a Foley catheter."
      ],
      "answer": "B",
      "explanation": "*   Epistaxis can be life-threatening and originates from anterior or posterior sources.\n*   Anterior epistaxis is most common (90%), caused by trauma to superficial mucosal vessels (Kiesselbach plexus), often stops with direct pressure, and is not considered dangerous.\n*   Posterior epistaxis is more dangerous and potentially life-threatening, commonly originating from a branch of the sphenopalatine artery.\n*   Posterior bleeds are associated with hypertension and atherosclerosis.\n*   Direct pressure is ineffective for posterior bleeds.\n*   Treatment for posterior bleeds involves posterior packing, which necessitates admission to a monitored setting due to the risk of airway compromise and hypoventilation.\n*   The mortality risk associated with posterior bleeds is partly attributed to the elderly patient population with significant underlying disease."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding parotid gland tumors?",
      "options": [
        "A. The majority are malignant.",
        "B. Benign mixed tumor is the most common type.",
        "C. Pleomorphic adenomas are managed by total parotidectomy.",
        "D. All malignant tumors require resection of the facial nerve with the specimen.",
        "E. The most commonly injured nerve in parotid surgery is the facial nerve."
      ],
      "answer": "B",
      "explanation": "*   Most salivary gland tumors are found in the parotid gland, and approximately 80% of parotid gland tumors are benign.\n*   Submandibular and sublingual gland tumors are about 50% malignant, while minor salivary gland tumors are predominantly malignant.\n*   The most common type of parotid gland tumor is a pleomorphic adenoma (also known as a benign mixed tumor).\n*   Bilateral parotid gland lesions are extremely rare (0.2%).\n*   The most commonly injured nerve during parotid surgery is the greater auricular nerve.\n*   Benign parotid tumors are treated with superficial parotidectomy.\n*   For malignant tumors, efforts are made to preserve the facial nerve unless it is invaded by the tumor."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 65-year-old male presents with a persistent firm lateral neck mass that measures approximately 2.5 cm. Careful history and physical examination of the head and neck are negative. The next step in the management is:",
      "options": [
        "A. Positron emission tomography",
        "B. Computed tomography scan of the head and neck",
        "C. Fine-needle aspiration of the neck mass",
        "D. Chest radiograph",
        "E. Panendoscopy (esophagoduodenoscopy, bronchoscopy, laryngoscopy)"
      ],
      "answer": "C",
      "explanation": "*   In adults, a persistent neck mass larger than 2 cm is most likely cancer, often squamous cell carcinoma from the head and neck.\n*   A careful history and physical examination are essential.\n*   If the physical examination is unremarkable, the next step is to determine if the mass is malignant, which is best achieved by fine-needle aspiration (FNA).\n*   Once metastatic cancer is confirmed, panendoscopy with guided biopsies is performed in the OR to locate the primary mass.\n*   CT scans of the head and neck and chest radiographs are also used to help locate the mass.\n*   The role of positron emission tomography (PET) is debatable if the primary mass is not localized, as studies show it has low sensitivity and does not alter outcome.\n*   If the primary mass remains unlocalized after panendoscopy, an excisional biopsy should be performed.\n*   Adenocarcinoma would suggest a primary tumor from the lung, breast, or gastrointestinal tract."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 12-week-old male infant with trisomy 21 presents with a large posterolateral neck mass extending into the axilla that transilluminates. The mass has been growing continuously for the past several weeks. Optimal management would consist of:",
      "options": [
        "A. Radiation therapy",
        "B. Repeat needle aspirations",
        "C. Radical wide excision",
        "D. Observation",
        "E. Conservative excision"
      ],
      "answer": "E",
      "explanation": "*   This presentation (infant, trisomy 21, posterolateral neck/axilla mass, transillumination) is consistent with a cystic hygroma (CH), a lymphatic malformation.\n*   CH is more common in patients with Trisomy 21 and Turner syndrome.\n*   Most CH present in the posterior neck or axilla, often at birth or within the first two years of life.\n*   Intralesional bleeding can cause significant mass growth.\n*   Complete surgical excision is preferred, but if the mass is adjacent to nerves, conservative excision is the best management.\n*   Radiation therapy has no role in the management of CH.\n*   Repeated needle aspirations may shrink the mass but provide only temporary intervention.\n*   Observation is appropriate only for asymptomatic, non-growing masses."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "A 54-year-old man presents with a tender left neck mass with a draining sinus. Microscopic examination reveals sulfur granules. Optimal management would be:",
      "options": [
        "A. Penicillin",
        "B. Radical excision",
        "C. Penicillin and surgical drainage",
        "D. Trimethoprim-sulfamethoxazole",
        "E. Trimethoprim-sulfamethoxazole and surgical drainage"
      ],
      "answer": "C",
      "explanation": "*   The presence of \"sulfur granules\" in a draining neck mass is characteristic of Actinomycosis, caused by *Actinomyces israelii* or other *Actinomyces* species.\n*   *Actinomyces* are anaerobic, gram-positive, branching filamentous bacteria, part of the normal flora of the mouth and tonsillar crypts.\n*   Infections commonly occur in the face and neck, often following minor trauma or tooth extraction, and tend to form draining abscesses.\n*   Optimal treatment is a combination of penicillin and surgical drainage.\n*   Surgical excision alone is rarely successful without concurrent antibiotic therapy.\n*   *Nocardia* is another anaerobic, gram-positive, branching filamentous bacterium, but it is weakly acid-fast and treated with trimethoprim-sulfamethoxazole."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 50-year-old male presents with a right-sided slow-growing rounded neck mass located anterior to the sternocleidomastoid. The mass appears to move side to side only. CT of the neck is performed and demonstrates widening of the carotid bifurcation by a well-defined tumor blush. The mass is 3 cm. Optimal management consists of:",
      "options": [
        "A. Radiographic embolization",
        "B. Radiation therapy",
        "C. Chemotherapy",
        "D. Surgical excision in a periadventitial plane",
        "E. Wide excision including carotid bifurcation"
      ],
      "answer": "D",
      "explanation": "*   \"Widening of the carotid bifurcation by a well-defined tumor blush\" (lyre sign) on CT is pathognomonic for a carotid body tumor.\n*   Carotid body tumors typically present in the fourth or fifth decade as a slow-growing, rounded neck mass, located anterior to the sternocleidomastoid near the angle of the mandible.\n*   These tumors can only be moved side-to-side (Fontaine sign) because they are within the carotid sheath.\n*   Treatment is surgical excision.\n*   A critical surgical pitfall is dissecting too close to the artery, which can inadvertently remove part of the adventitia (the strongest layer), leading to arterial weakening and rupture. Excision should be performed in a periadventitial plane.\n*   Biopsy is contraindicated due to the vascular nature of these tumors.\n*   Routine preoperative embolization is not necessary but should be considered for large tumors (>4 cm).\n*   Radiation therapy may be considered for long-term tumor control in patients unsuitable for surgery (e.g., inaccessible site).\n*   Chemotherapy has no role in management.\n*   Excising the carotid bifurcation should be avoided."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 35-year-old man presents with a new dark mole on the face anterior to the tragus as well as clinically suspicious palpable neck nodes. Excisional biopsy confirms melanoma. Optimal management is:",
      "options": [
        "A. Wide re-excision of the primary tumor and modified radical neck dissection",
        "B. Modified radical neck dissection only",
        "C. Wide re-excision of the primary tumor, modified radical neck dissection, and superficial parotidectomy",
        "D. Wide re-excision of the primary tumor and sentinel node biopsy",
        "E. Interferon"
      ],
      "answer": "C",
      "explanation": "*   For melanoma lesions on the face, anterior scalp, and ear, sentinel lymph node biopsy can be performed but is technically more challenging.\n*   In cases with clinically palpable lymph nodes, the recommended management includes a superficial parotidectomy (to remove parotid nodes) and a modified neck dissection.\n*   The nodes between the primary lesion and the regional nodes are removed in continuity.\n*   If no nodes were palpable, sentinel node biopsy would be the appropriate next step."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "The most likely site of origin for a metachronous cancer in a patient with a history of laryngeal cancer is the:",
      "options": [
        "A. Esophagus",
        "B. Lung",
        "C. Floor of mouth",
        "D. Tongue",
        "E. Hypopharynx"
      ],
      "answer": "B",
      "explanation": "*   Patients with head and neck cancers have approximately a 14% risk of developing a second primary tumor.\n*   Most of these second primaries are metachronous, appearing more than 6 months after the initial diagnosis.\n*   For patients with laryngeal cancer, the most common metachronous malignancy is lung cancer.\n*   For patients with oral cavity and pharyngeal cancers, the most common metachronous cancer is esophageal cancer."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding carcinoma of the lip?",
      "options": [
        "A. Upper lip carcinoma is more common.",
        "B. The majority present with nodal metastasis.",
        "C. Squamous cell carcinoma is the most common type of cancer in the lower lip.",
        "D. Radiation therapy is the treatment of choice for most lip cancers.",
        "E. Prophylactic neck dissection is usually indicated."
      ],
      "answer": "C",
      "explanation": "*   90% to 95% of lip cancers occur on the lower lip.\n*   Sun exposure and tobacco use are the most significant risk factors.\n*   Lip cancers are most common in elderly white men.\n*   Lower lip cancers are most often squamous cell carcinomas, while upper lip cancers are usually basal cell carcinomas.\n*   The most common presentation is an ulcerative lesion on the vermilion or skin surface.\n*   Early-stage lesions can be treated with surgery or radiation therapy, but surgical resection is preferred and is the treatment of choice for larger lesions."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "Which of the following is true regarding salivary gland tumors?",
      "options": [
        "A. Parotid tumors are more likely to be malignant than submandibular gland tumors.",
        "B. Submandibular gland tumors are more likely to be malignant than minor salivary gland tumors.",
        "C. Pleomorphic adenomas may undergo malignant degeneration.",
        "D. Warthin's tumor is malignant.",
        "E. Facial nerve palsy is common, even with benign tumors."
      ],
      "answer": "C",
      "explanation": "*   Salivary gland neoplasms are rare, with most arising in the parotid gland.\n*   The malignancy ratio varies by site:\n    *   Parotid gland tumors: 20% malignant.\n    *   Submandibular and sublingual gland tumors: 50% malignant.\n    *   Minor salivary gland tumors: 75% malignant.\n*   Warthin's tumor is the second most common benign salivary tumor and is strongly linked to smoking.\n*   Facial nerve involvement is highly suggestive of a malignant tumor.\n*   Benign pleomorphic adenomas have a known risk of malignant transformation, which can be as high as 10% to 25% if present for over 15 years.\n*   Fine-needle aspiration is useful for diagnosis."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "The most common malignant salivary gland tumor is:",
      "options": [
        "A. Acinic cell carcinoma",
        "B. Mucoepidermoid carcinoma",
        "C. Adenoid cystic carcinoma",
        "D. Basal cell adenocarcinoma",
        "E. Papillary cystadenocarcinoma"
      ],
      "answer": "B",
      "explanation": "*   Mucoepidermoid carcinoma is the most common malignant salivary gland tumor, ranging from low to high grade.\n*   Treatment depends on the tumor's location: superficial parotidectomy for superficial tumors, and total parotidectomy for tumors extending into the deep lobe.\n*   Every effort should be made to preserve the facial nerve (seventh cranial nerve) unless the tumor encases it.\n*   The second most common malignant salivary gland tumor is adenoid cystic carcinoma.\n*   Other listed salivary gland tumors occur less frequently."
    }
  ]
}
{
  "chapter_name": "Abdomen—Liver",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the portal vein?",
      "options": [
        "A. It typically has one or two valves.",
        "B. It supplies approximately one-third of the blood to the liver.",
        "C. The normal pressure is 10 to 12 mm Hg.",
        "D. It is formed by the confluence of the inferior mesenteric and splenic veins.",
        "E. In the hepatoduodenal ligament, it is usually posterior to both the bile duct and hepatic artery."
      ],
      "answer": "E",
      "explanation": "*   The portal vein has no valves.\n*   It supplies approximately 75% of the blood flow to the liver, compared to 25% from the hepatic arteries.\n*   It is formed by the confluence of the superior mesenteric and splenic veins.\n*   The normal pressure in the portal vein is 3 to 5 mm Hg.\n*   In the hepatoduodenal ligament, the portal vein is most commonly located posterior to both the common bile duct and hepatic artery."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Focal nodular hyperplasia (FNH):",
      "options": [
        "A. Is typically symptomatic",
        "B. Is usually centrally located in the liver",
        "C. Is best confirmed with high resolution computed tomography (CT)",
        "D. Poses a significant risk of rupture",
        "E. Is thought to be due to an embryonic disturbance in liver blood flow"
      ],
      "answer": "E",
      "explanation": "*   FNH is usually an incidental finding on a CT scan as most patients are asymptomatic.\n*   It is not associated with a risk of rupture or subsequent malignancy.\n*   A hallmark feature is the presence of a hypodense central stellate scar on CT or MRI that enhances with contrast.\n*   MRI is often the test of choice to confirm and characterize liver lesions.\n*   FNH is usually located on the periphery of the liver.\n*   It may be difficult to distinguish from hepatic adenoma or fibrolamellar hepatocellular carcinoma.\n*   An early embryologic disturbance in liver blood flow is the postulated cause, supported by regenerative nodules.\n*   Resection is indicated when patients are symptomatic or if a definitive diagnosis cannot be made."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "The best screening approach for detecting early hepatocellular carcinoma (HCC) in patients with chronic viral hepatitis is:",
      "options": [
        "A. Alpha fetoprotein (AFP) level",
        "B. AFP level and ultrasonography",
        "C. Computed tomography",
        "D. Carcinoembryonic antigen (CEA) level",
        "E. Alkaline phosphatase level"
      ],
      "answer": "B",
      "explanation": "*   Screening for HCC is only of potential benefit in patients at high risk.\n*   A combination of ultrasonography and AFP is an effective screening tool, particularly in Asian patients with chronic viral hepatitis.\n*   AFP alone should not be used for screening.\n*   CT imaging helps establish HCC diagnosis by demonstrating a hyperintense lesion on arterial phase and rapid washout on venous phase.\n*   CEA is used to measure response to treatment in colorectal cancer, not HCC.\n*   Alkaline phosphatase levels are not typically used for HCC diagnosis."
    },
    {
      "id": 4,
      "question_type": "clinical_scenario",
      "question": "A 36-year-old woman presents with right upper quadrant pain, jaundice, evidence of ascites, and an enlarged liver on physical examination. CT demonstrates marked hypertrophy of segment 1 of the liver, free fluid in the peritoneum, and inhomogeneous contrast enhancement of the remainder of the liver. This most likely indicates:",
      "options": [
        "A. Budd-Chiari syndrome",
        "B. Ruptured hepatic adenoma",
        "C. Ruptured hemangioma",
        "D. Acute hepatitis",
        "E. Schistosomiasis"
      ],
      "answer": "A",
      "explanation": "*   The patient's symptoms (right upper quadrant pain, jaundice, ascites, enlarged liver) and CT findings (segment 1 hypertrophy, free fluid, inhomogeneous contrast enhancement) are classic for Budd-Chiari syndrome.\n*   Budd-Chiari syndrome is a rare disorder caused by thrombosis of the hepatic inferior vena cava or the hepatic veins, leading to hepatic venous outflow obstruction, postsinusoidal liver failure, and cirrhosis.\n*   The classic triad includes abdominal pain, ascites, and hepatomegaly.\n*   It is often associated with a hypercoagulable state (inherited or acquired).\n*   Diagnosis is made by duplex ultrasonography, showing thrombosed hepatic veins or inferior vena cava.\n*   CT scan typically shows caudate lobe (segment I) hypertrophy and inhomogeneous contrast enhancement.\n*   Immediate treatment involves anticoagulation, followed by percutaneous angioplasty with or without stenting.\n*   Subsequent treatment depends on the primary indication (portal hypertension or liver failure)."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding hepatic adenomas?",
      "options": [
        "A. Acute episodes of bleeding are best managed by surgical resection.",
        "B. They tend to appear “hot” on a sulfur colloid liver scan.",
        "C. Rapid contrast enhancement on CT distinguishes them from FNH.",
        "D. A 5.5-cm lesion should be resected even if it is asymptomatic.",
        "E. They contain an abundance of nonparenchymal (Kupffer) cells."
      ],
      "answer": "D",
      "explanation": "*   Hepatic adenomas often require surgical resection due to their known risk of malignant degeneration, hemorrhage, and spontaneous rupture.\n*   While some authors recommended a selective approach (resect only if symptomatic, >5 cm, or no response to contraceptive cessation), most surgeons now recommend removing all hepatic adenomas regardless of size due to reports of malignant transformation, even if the adenoma is shrinking.\n*   Acute episodes of bleeding should be managed by angioembolization, not surgical resection.\n*   Rapid contrast enhancement on CT does not distinguish hepatic adenomas from FNH, as both may show it in the arterial phase.\n*   Hepatic adenomas tend to appear \"cold\" on a sulfur colloid liver scan, while FNHs appear \"hot\" because of the presence of Kupffer cells in FNHs.\n*   Hepatic adenomas do not contain an abundance of nonparenchymal (Kupffer) cells."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following treatments of a hydatid cyst located in the mid right lobe of the liver is associated with the lowest recurrence rate, morbidity, and mortality?",
      "options": [
        "A. Long-term oral albendazole",
        "B. Long-term oral mebendazole",
        "C. Laparoscopic cyst excision with omentoplasty",
        "D. Surgical total pericystectomy with pre- and postoperative albendazole",
        "E. Percutaneous aspiration and injection of scolicidal agents"
      ],
      "answer": "D",
      "explanation": "*   Cystic hydatid disease of the liver is caused by infection with the tapeworm *Echinococcus granulosus*.\n*   Diagnosis is established by an enzyme-linked immunosorbent assay test for *Echinococcus* antigen, coupled with ultrasound or CT scan.\n*   Drug therapy alone (albendazole, mebendazole) is curative in only a small percentage of patients.\n*   Surgical total pericystectomy with pre- and postoperative albendazole has the lowest rates of recurrence, morbidity, and mortality.\n*   Percutaneous aspiration, injection of a scolicidal agent, and reaspiration (PAIR) is another treatment option.\n*   Laparoscopic cyst excision with omentoplasty is also a treatment option.\n*   Extreme caution must be taken during aspiration or surgical treatment to avoid cyst rupture, which can lead to release of protoscolices into the peritoneal cavity and anaphylaxis."
    },
    {
      "id": 7,
      "question_type": "clinical_scenario",
      "question": "A 51-year-old male with liver cirrhosis presents with a moderately sized, reducible, umbilical hernia that occasionally causes pain. The skin is intact and there is no drainage. He has a significant amount of ascites. Serum bilirubin, albumin, and international normalized ratio are normal. He has no encephalopathy. He does not have any pain at the hernia site. Which of the following would be the most appropriate next step in management?",
      "options": [
        "A. Transjugular intrahepatic portosystemic shunt (TIPS) placement",
        "B. Six-liter paracentesis followed by intravenous (IV) albumin replacement",
        "C. Proceed to surgical repair of the hernia",
        "D. Furosemide, spironolactone, and sodium restriction",
        "E. Observation"
      ],
      "answer": "D",
      "explanation": "*   Patients with cirrhosis are at increased risk for umbilical herniation due to increased intra-abdominal pressure.\n*   Child-Pugh A cirrhotics can proceed with elective surgery after medical optimization.\n*   Child-Pugh B cirrhotics have an increased risk during surgery, and the decision to operate should be individualized.\n*   Child-Pugh C is an absolute contraindication for elective surgery.\n*   Given the patient has poorly controlled ascites, he is a Child-Pugh B, and medical therapy needs to be initiated before surgical intervention.\n*   Fixing the umbilical hernia without addressing the underlying ascites will increase the hernia repair failure rate.\n*   The initial treatment of ascites in a patient with cirrhosis includes a low-sodium diet and the use of diuretics (spironolactone and furosemide).\n*   If ascites is refractory to this management, the next step is large-volume paracentesis followed by IV albumin infusion.\n*   TIPS is an option for refractory ascites but should be reserved for patients with reasonably good liver function.\n*   Peritoneovenous shunting is rarely used due to high rates of shunt clotting and disseminated intravascular coagulation.\n*   Observation is not appropriate for worsening ascites."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "The most common identifiable source of a pyogenic liver abscess is:",
      "options": [
        "A. Seeding from the portal vein",
        "B. The biliary tree",
        "C. Hematogenous from endocarditis",
        "D. Direct extension of a nearby focus",
        "E. Inflammatory bowel disease"
      ],
      "answer": "B",
      "explanation": "*   The classic triad for pyogenic liver abscess is right upper quadrant pain, fever, and jaundice, though only 10% of patients have all three features.\n*   Pyogenic liver abscess remains a highly lethal disease, with mortality rates ranging from 10% to 20%.\n*   The most common etiology of pyogenic liver abscesses is the biliary tract, likely due to its proximity to the biliary tree.\n*   It is more likely to be associated with abnormal liver function tests compared to other infectious hepatic etiologies.\n*   Management typically consists of IV antibiotics with percutaneous aspiration of the abscess, with or without catheter drainage.\n*   Other etiologies include portal vein seeding (from diverticular disease, appendicitis), inflammatory bowel disease, and systemic infections (e.g., bacterial endocarditis).\n*   Amebic liver abscesses more commonly involve seeding from the portal vein.\n*   However, in a high percentage of pyogenic liver abscesses, the source is unclear."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "The principal mediators of fibrosis leading to cirrhosis in the liver are:",
      "options": [
        "A. Kupffer cells",
        "B. Ito (liver stellate) cells",
        "C. Endothelial cells",
        "D. Hepatocytes",
        "E. Clefts of Mall"
      ],
      "answer": "B",
      "explanation": "*   Ito cells, also known as hepatic stellate cells, are located in the space of Disse and store vitamin A in lipid droplets.\n*   Ito cells play an important role in the liver's response to acute and chronic liver injury.\n*   In these settings, Ito cells differentiate into myofibroblast-like cells with a high capacity for fibrogenesis.\n*   The remaining answer choices (Kupffer cells, endothelial cells, hepatocytes, Clefts of Mall) do not play a role in mediating fibrosis."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true with regard to the TNM (tumor, nodes, and metastases) system for patients with HCC?",
      "options": [
        "A. It includes tumor grade.",
        "B. It includes AFP levels.",
        "C. T2 is any solitary tumor regardless of size with vascular invasion.",
        "D. It is considered the best classification system for long-term prognosis.",
        "E. It does not include the number of tumors."
      ],
      "answer": "C",
      "explanation": "*   Numerous classification systems exist for HCC, but none are universally accepted as the gold standard.\n*   The primary critique of the TNM system is that it does not factor in hepatic reserve, which is an important predictor of long-term survival.\n*   The Japan Integrated Staging score, which includes Child-Pugh grade and TNM staging, appears promising.\n*   Important prognosticators in HCC include AFP level, alkaline phosphatase level, portal hypertension, and portal vein thrombosis.\n*   The TNM staging includes the number and size of tumor nodules and whether vascular invasion is present.\n*   T1 is any solitary tumor regardless of size with no vascular invasion.\n*   T2 is any solitary tumor with vascular invasion or multiple tumors with all lesions being smaller than 5 cm.\n*   T3 includes multiple lesions larger than 5 cm.\n*   T4 lesions directly invade adjacent organs.\n*   Tumor grade is not included and does not appear to be an independent predictor of outcome."
    },
    {
      "id": 11,
      "question_type": "clinical_scenario",
      "question": "An 8-year-old girl presents with upper gastrointestinal (UGI) bleeding. The physical examination demonstrates splenomegaly. Her medical history is significant for a prolonged stay in the neonatal intensive care unit at birth due to prematurity, complicated by necrotizing enterocolitis. She has no history of travel outside the United States. Laboratory testing reveals a hematocrit of 20% and normal bilirubin, albumin, and international normalized ratio. After fluid resuscitation, an upper endoscopy is performed that reveals esophageal varices. The patient is given octreotide and undergoes sclerotherapy. Which of the following studies will most likely determine the cause of her UGI bleed?",
      "options": [
        "A. Duplex ultrasonography of the portal vein",
        "B. Duplex ultrasonography of the splenic vein",
        "C. CT scan of the abdomen",
        "D. MRI of the abdomen",
        "E. Liver biopsy"
      ],
      "answer": "A",
      "explanation": "*   Variceal bleeding in children is rare.\n*   The combination of esophageal varices and splenomegaly, without evidence of cirrhosis (normal hepatic function), highly suggests portal vein thrombosis (PVT).\n*   The diagnostic test of choice for PVT is a duplex ultrasound scan of the portal vein.\n*   PVT likely occurs due to a combination of factors contributing to the Virchow triad (injury, stasis, hypercoagulability).\n*   Many children with PVT have a history of neonatal umbilical vein catheterization (leading to portal venous injury), neonatal omphalitis (umbilical sepsis), or neonatal intra-abdominal sepsis (leading to infectious seeding of the portal vein).\n*   Some patients may have congenital webs in the portal vein or inherited hypercoagulable states.\n*   PVT in adults is often associated with malignancy and cirrhosis.\n*   In most children, PVT is clinically silent until esophageal varices and UGI bleeding develop.\n*   Patients with PVT without bleeding should receive anticoagulation.\n*   Initial treatment for bleeding varices is similar to adults (sclerotherapy or banding, octreotide).\n*   Since PVT in children is usually not associated with cirrhosis, liver function is intact, and the overall prognosis is reasonably good.\n*   A portosystemic shunt should be considered for patients refractory to medical management."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "For the patient in question 11, persistent UGI bleeding refractory to repeated efforts at medical management would be best managed by:",
      "options": [
        "A. TIPS placement",
        "B. Superior mesenteric vein-to-left portal vein bypass at the Rex recessus",
        "C. Mesocaval shunt",
        "D. Splenectomy",
        "E. Liver transplantation"
      ],
      "answer": "B",
      "explanation": "*   For children with PVT and recurrent refractory UGI bleeding, the superior mesenteric vein-to-left portal vein bypass at the Rex recessus (Rex shunt) is the most advantageous shunt.\n*   The Rex shunt serves to decompress the portal system and restore blood flow to the liver.\n*   This bypass is often performed using the internal jugular vein as a conduit.\n*   This shunt has the best chance to prevent long-term behavioral, growth, and personality disorders noted after other portosystemic shunts in children.\n*   TIPS placement is often reserved for Child-Pugh A and some Child-Pugh B cirrhotics who have exhausted medical management and continue to have refractory UGIB bleeding from esophageal varices.\n*   Portocaval or mesocaval shunts may be considered in unstable patients with refractory UGIB bleeding who are not candidates for liver transplantation.\n*   Splenectomy is not an appropriate treatment option for PVT."
    },
    {
      "id": 13,
      "question_type": "clinical_scenario",
      "question": "A 45-year-old man with a history of alcohol abuse presents with recurrent UGI bleeding. His history is significant for alcoholic pancreatitis. On upper endoscopy, he is found to have bleeding from isolated gastric varices. The bleeding is controlled medically. On splenoportography, the portal and superior mesenteric veins are patent, but the splenic vein is not visualized. Optimal management for this patient would be:",
      "options": [
        "A. Side-to-side portacaval shunt",
        "B. Mesocaval shunt",
        "C. Distal splenorenal shunt",
        "D. Long-term beta-blocker therapy",
        "E. Splenectomy"
      ],
      "answer": "E",
      "explanation": "*   Isolated gastric varices without esophageal varices are highly suggestive of splenic vein thrombosis.\n*   This condition leads to venous outflow obstruction of the spleen, resulting in massively dilated short gastric veins.\n*   The most common cause of splenic vein thrombosis is chronic pancreatitis, leading to perivenous inflammation.\n*   Splenic vein thrombosis with gastric variceal formation is referred to as left-sided or sinistral portal hypertension.\n*   The mortality rate for gastric variceal bleeding exceeds 20%.\n*   Splenectomy is curative.\n*   Controversy exists regarding prophylactic splenectomy for asymptomatic gastric varices.\n*   Bypass procedures (side-to-side portacaval, mesocaval, distal splenorenal shunts) carry a higher risk of morbidity and would not address the underlying problem.\n*   Long-term beta-blocker therapy is used as a prophylactic agent for esophageal varices secondary to cirrhosis."
    },
    {
      "id": 14,
      "question_type": "clinical_scenario",
      "question": "A 30-year-old Hispanic man with a history of alcohol abuse presents with high fevers, right upper quadrant pain, and leukocytosis. Ultrasonography reveals a 5-cm fluid collection in the right lobe of the liver. On the CT scan, the fluid collection shows a peripheral rim of edema. The cause of the fluid collection is most likely to be determined by:",
      "options": [
        "A. Blood cultures",
        "B. Stool cultures",
        "C. Percutaneous aspiration of liver",
        "D. Serologic tests",
        "E. Liver function tests"
      ],
      "answer": "D",
      "explanation": "*   The diagnosis of an amebic liver abscess is made using a combination of clinical presentation, ultrasound and CT scan features, and serologic testing.\n*   The causative organism is *Entamoeba histolytica*, ingested via fecal-oral route.\n*   The organism reaches the liver via the portal vein, leading to liquefaction necrosis of the liver (anchovy paste fluid).\n*   Infection is common in endemic areas (Central/South America, India, Africa) or in individuals with recent travel to these locations.\n*   Less than one-third of patients have a history of diarrheal illness.\n*   Amebic liver abscesses are more common in patients with a history of heavy alcohol consumption.\n*   CT scanning helps distinguish amebic liver abscesses from other entities.\n*   The classic CT finding is a single fluid collection in the right lobe with a rim of peripheral edema.\n*   Culturing the liver abscess or stool does not usually yield ameba.\n*   The best test to establish the diagnosis is serologic testing using enzyme immunoassays, typically reliable 7-10 days after infection.\n*   Conservative medical management of amebic liver abscess is safe.\n*   Percutaneous ultrasonography-guided aspiration is indicated only if patients fail to improve clinically after 48-72 hours.\n*   Amebic liver abscesses may lead to mildly elevated transaminase and bilirubin levels, but these findings are nonspecific.\n*   Blood cultures are not indicated for amebic liver abscess workup."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Definitive management of the patient in question 14 consists of:",
      "options": [
        "A. Oral metronidazole",
        "B. Broad-spectrum antibiotics and open surgical drainage",
        "C. Broad-spectrum antibiotics and early percutaneous aspiration of the abscess",
        "D. Broad-spectrum antibiotics and CT-guided catheter insertion to drain the abscess",
        "E. Broad-spectrum antibiotics and laparoscopic drainage"
      ],
      "answer": "A",
      "explanation": "*   Amebic liver abscesses respond very well to oral metronidazole.\n*   Aspiration or catheter-directed drainage is unnecessary in the majority of cases due to the rapid response to oral metronidazole.\n*   Aspiration is only indicated if the diagnosis of amebic liver abscess is uncertain or if the patient does not respond appropriately to antibiotics within a few days.\n*   Metronidazole is administered for 7 to 10 days."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "The most common benign tumor of the liver is:",
      "options": [
        "A. FNH",
        "B. Hepatic adenoma",
        "C. Hemangioma",
        "D. Mesenchymal hamartoma",
        "E. Inflammatory pseudotumor"
      ],
      "answer": "C",
      "explanation": "*   Hemangiomas are the most common benign tumors of the liver, usually discovered incidentally and typically asymptomatic.\n*   Diagnosis is generally made by characteristic features on CT and MRI.\n*   Main issues are distinguishing from malignancy and, in children, giant hemangiomas leading to arteriovenous shunting with congestive heart failure and thrombocytopenia (Kasabach-Merritt syndrome).\n*   Hemangiomas should be removed by enucleation, not formal resection.\n*   FNH is a benign, asymptomatic liver lesion located on the periphery, typically discovered incidentally on CT scan.\n*   Hepatic adenomas present in young women and are associated with oral contraceptive use.\n*   Mesenchymal hamartoma typically affects young males and is considered a benign lesion, potentially presenting with intra-abdominal enlargement and respiratory distress in neonates.\n*   Inflammatory pseudotumor is a benign liver lesion requiring needle biopsy for correct diagnosis."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Which of the following is true regarding liver cysts associated with polycystic liver disease?",
      "options": [
        "A. Laparoscopic fenestration is the preferred treatment option.",
        "B. It has an autosomal recessive inheritance pattern.",
        "C. They are typically symptomatic.",
        "D. Oral estrogen therapy can be helpful.",
        "E. Liver function tests are usually abnormal."
      ],
      "answer": "A",
      "explanation": "*   Polycystic liver disease is an autosomal dominant disorder, often seen in patients with polycystic kidney disease, or with liver cysts alone.\n*   The majority of patients are asymptomatic from their liver, but large cysts can rarely cause severe abdominal pain requiring intervention.\n*   Laparoscopic fenestration has emerged as the preferred treatment option with low bleeding risk.\n*   Percutaneous aspiration, alcohol instillation, and reaspiration (PAIR) are optimally suited for single cysts but have been used in polycystic liver patients with a dominant cyst.\n*   Formal lobectomy is another option.\n*   Liver transplantation has been successful when other options are exhausted.\n*   There is no successful medical management to date; patients are instructed to avoid factors associated with increased cyst growth.\n*   Hormone replacement therapy with estrogens has been linked to cyst growth and should be avoided.\n*   Octreotide has shown preliminary promise in retarding cyst growth.\n*   Liver function tests are typically normal but can be elevated if there is gross displacement of liver parenchyma by massive liver cysts."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is the best method to prevent a first bleed in a patient with known large esophageal varices?",
      "options": [
        "A. Beta-blockade",
        "B. TIPS placement",
        "C. Sclerotherapy",
        "D. Endoscopic ligation",
        "E. Selective portosystemic shunt placement"
      ],
      "answer": "D",
      "explanation": "*   Prophylaxis is important due to the high 1-year mortality rate (up to 70%) in cirrhotic patients.\n*   The objective is to reduce portal venous pressure to less than 12 mm Hg without adding morbidity.\n*   Prophylactic sclerotherapy, TIPS placement, and portosystemic shunting have not been shown to be effective.\n*   Both prophylactic β-adrenergic blockade and endoscopic ligation have been shown to be effective.\n*   Two large randomized studies demonstrated that endoscopic ligation is even more effective than beta-blockade in bleed prevention.\n*   Endoscopic ligation may be more appropriate for medium to large esophageal varices.\n*   The combination of beta-blockade and endoscopic ligation is not recommended due to increased risk for adverse effects.\n*   TIPS can be used as part of acute management in patients with refractory variceal bleeding.\n*   Selective portosystemic shunt is reserved for patients who have failed all other management options because it carries a significant mortality rate and risk of hepatic encephalopathy; it is rarely performed today and only in emergency settings."
    },
    {
      "id": 19,
      "question_type": "clinical_scenario",
      "question": "A 45-year-old man with Child-Pugh class B cirrhosis presents with recurrent bleeding esophageal varices and refractory ascites. The patient is currently awaiting liver transplantation. Which of the following would be the best option if the bleeding is not controlled by medical management?",
      "options": [
        "A. TIPS placement",
        "B. End-to-side portacaval shunt placement",
        "C. End-to-end portacaval shunt placement",
        "D. Distal splenorenal shunt placement",
        "E. H-type portacaval shunt placement"
      ],
      "answer": "A",
      "explanation": "*   For patients who are liver transplant candidates and have esophageal bleeding not controlled by medical management, TIPS is the best bridge while awaiting transplantation.\n*   Emergent portacaval shunting is rarely performed today and only in an emergency setting.\n*   Dissection around the portal vein makes subsequent transplantation much more challenging.\n*   Distal splenorenal shunt is technically demanding, a long operation, and not well suited for emergent indications.\n*   The distal splenorenal shunt tends to exacerbate ascites, making refractory ascites a relative contraindication.\n*   It is best indicated in the semielective situation for patients needing long-term decompression, who are not transplant candidates, and who have recurrent variceal bleeding (once medically controlled).\n*   A recent prospective, randomized study comparing TIPS placement with distal splenorenal shunting demonstrated equal effectiveness for refractory bleeding but with more need for reintervention with TIPS."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding bile acids?",
      "options": [
        "A. Deoxycholic acid and lithocholic acid are primary bile acids.",
        "B. Cholic and chenodeoxycholic acids are secondary bile acids.",
        "C. Secondary bile acids are formed by intestinal bacteria.",
        "D. After ingestion of food, bile acid concentration in the portal vein increases.",
        "E. Ingestion of food leads to an inhibition of cholesterol 7-hydroxylase."
      ],
      "answer": "C",
      "explanation": "*   Bile salts are made in the liver and secreted into the biliary tree and intestine.\n*   Bile is composed of bile acids, pigments, phospholipids, cholesterol, proteins, and electrolytes.\n*   Bile salts are important for small intestinal absorption of fats and vitamins.\n*   Cholic acid and chenodeoxycholic acid are primary bile acids, made in the liver from cholesterol and conjugated with glycine and taurine in hepatocytes.\n*   Deoxycholic and lithocholic acids are secondary bile acids, formed by intestinal bacterial modification of the primary bile acids.\n*   Due to enterohepatic circulation, 95% of bile acids are returned to the liver via the portal circulation.\n*   They are reabsorbed passively in the jejunum and actively in the ileum.\n*   Major resection of the distal ileum results in fat malabsorption and deficiency in fat-soluble vitamins because it impairs bile acid circulation.\n*   It also lowers cholesterol levels as more cholesterol is used to make new bile salts.\n*   After ingestion of food, bile acid concentration in the liver decreases, and the inhibition of cholesterol 7-hydroxylase decreases, resulting in increased bile acid secretion in the liver."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "Fibrolamellar carcinoma (FLC) of the liver:",
      "options": [
        "A. Is strongly associated with hepatitis B",
        "B. Most often occurs in elderly men",
        "C. Causes a marked elevation in AFP levels",
        "D. Often contains a central scar",
        "E. Has a worse prognosis than HCC"
      ],
      "answer": "D",
      "explanation": "*   FLC has been considered a variant of HCC, but recent studies suggest it is a distinct pathologic entity.\n*   FLC generally occurs in younger patients (median age, 25 years), while HCC occurs in older patients (median age, 55 years).\n*   Unlike HCC, the majority of patients with FLC do not have cirrhosis, are not hepatitis B positive, and do not have an elevated AFP level.\n*   The tumor is usually well demarcated and may have a central fibrotic area.\n*   This can make it hard to distinguish from FNH.\n*   In the arterial phase of a CT scan, the central scar in FNH enhances, whereas the central scar in FLC does not enhance.\n*   Likewise, the central scar in FNH is hyperintense on gadolinium MRI.\n*   The prognosis overall tends to be better than that of HCC, mostly because of the absence of cirrhosis, but it still carries a 5-year survival rate of 45%.\n*   It is associated with elevated neurotensin levels.\n*   Treatment is surgical resection."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "Which of the following is least likely to increase the risk of HCC?",
      "options": [
        "A. Toxins from Aspergillus",
        "B. Hydrocarbons",
        "C. Smoking",
        "D. Wilson disease",
        "E. Pesticides"
      ],
      "answer": "D",
      "explanation": "*   Both hepatitis B and C virus infections are factors for HCC development; hepatitis A is not.\n*   Cirrhosis is not required for HCC development, and HCC is not an inevitable result of cirrhosis.\n*   Chronic alcohol abuse and smoking are associated with an increased risk of HCC.\n*   Aflatoxin, produced by *Aspergillus* species and found on contaminated peanuts and other grains, is linked to HCC.\n*   Other hepatic carcinogens include nitrites, hydrocarbons, solvents, pesticides, vinyl chloride, and Thorotrast.\n*   HCC has also been linked to metabolic liver diseases such as hereditary hemochromatosis.\n*   Wilson disease and primary biliary cirrhosis have not been consistently demonstrated to increase the risk of hepatocellular carcinoma."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "The Model for End-stage Liver Disease (MELD) score:",
      "options": [
        "A. Includes an assessment of the severity of ascites",
        "B. Includes the presence of encephalopathy",
        "C. Is similar to Child-Pugh in that they both use INR and serum creatinine",
        "D. Is not as useful as the Child-Pugh classification",
        "E. Predicts 3-month mortality in patients awaiting liver transplantation"
      ],
      "answer": "E",
      "explanation": "*   The MELD score is used to prioritize patients awaiting liver transplantation and includes serum total bilirubin and serum creatinine levels and the international normalized ratio (INR).\n*   The presence of encephalopathy or ascites does not factor into this score.\n*   MELD was originally designed to predict mortality after a TIPS procedure.\n*   The score ranges from 6 to 40.\n*   It has been modified to add the serum sodium level because low serum sodium (<126 mEq/L) has been shown to be an independent risk of mortality in liver transplant recipients.\n*   The newly modified MELD score, in combination with American Society of Anesthesiologists class and patient age, has been shown to be predictive of perioperative mortality in patients with cirrhosis undergoing a wide variety of surgical procedures.\n*   The MELD score removes the subjectivity associated with other classification systems.\n*   In patients with end-stage liver disease awaiting transplantation, the 3-month mortality rate was 1.9% for those with a MELD score less than 9, and 71.3% for those with a MELD score of 40 or more.\n*   A MELD score > 15 is required to be enlisted on the liver transplant list.\n*   Child-Pugh grade is another scoring system used to measure hepatic reserve after hepatic resection.\n*   INR and total bilirubin are two variables shared by both MELD and Child-Pugh scores."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the blood supply to the liver?",
      "options": [
        "A. The middle hepatic vein joins the right hepatic vein as it enters the inferior vena cava.",
        "B. Veins from the caudate lobe drain primarily into the right hepatic vein.",
        "C. The ligamentum venosum marks the location of the intrahepatic portal vein.",
        "D. A replaced left hepatic artery most commonly arises from a branch of the celiac axis.",
        "E. The proper hepatic artery gives rise to the gastroduodenal artery in most instances."
      ],
      "answer": "D",
      "explanation": "*   The right hepatic vein drains segments V, VI, VII, and VIII and enters the vena cava.\n*   The caudate lobe drains directly into the inferior vena cava.\n*   The middle hepatic vein drains segments IVA, IVB, V, and VIII, and enters the inferior vena cava jointly with the left hepatic vein via a common orifice.\n*   The left hepatic vein drains segments II and III.\n*   The round ligament is a remnant of the umbilical vein and marks the intrahepatic location of the left portal vein.\n*   The ligamentum venosum is a remnant of the ductus venosus and marks the border between the caudate lobe and the left lateral sector.\n*   In most instances, the common hepatic artery gives rise to the gastroduodenal artery and right gastric artery, after which it becomes the proper hepatic artery.\n*   The proper hepatic artery becomes the right and left hepatic arteries.\n*   A replaced right hepatic artery most commonly arises from the superior mesenteric artery and is posterolateral to the portal vein.\n*   An accessory right hepatic artery also commonly arises from the superior mesenteric artery, but is in addition to the proper hepatic artery's right hepatic artery.\n*   A replaced left hepatic artery most commonly arises from the left gastric artery (branch of the celiac axis)."
    },
    {
      "id": 25,
      "question_type": "clinical_scenario",
      "question": "A 72-year-old woman presents with a sigmoid colon cancer and difficulty having a bowel movement. Metastatic workup reveals a 4-cm mass in the right lobe of the liver involving segments V and VIII. Which of the following is most appropriate?",
      "options": [
        "A. Simultaneous sigmoid colectomy and resection of liver metastasis",
        "B. Chemotherapy followed by sigmoid colectomy",
        "C. Sigmoid colectomy and 8 weeks later performance of hepatic resection after reimaging",
        "D. Sigmoid colectomy followed by chemotherapy",
        "E. Chemotherapy only"
      ],
      "answer": "C",
      "explanation": "*   There is no evidence demonstrating the superiority of initial colectomy, initial liver resection, or simultaneous colon and hepatic resection in patients with metastatic colon cancer to the liver.\n*   The approach needs to be individualized.\n*   In highly experienced hands and well-selected patients, simultaneous resection outcomes are favorable.\n*   Simultaneous resection is best conducted in young patients (<70 years old) with favorable operative risk who do not need a major hepatic resection but rather a segmentectomy.\n*   Given the patient's age and the size and location of the hepatic tumor, the safest answer would be to perform the colonic resection first.\n*   Additionally, the patient's difficulty with bowel movements and tumor removal will help resolve this.\n*   Repeat imaging needs to be done to ensure the liver metastasis remains resectable.\n*   Chemotherapy solely or as an adjunct therapy would not be appropriate."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "Which of the following is not considered a poor predictor of survival after hepatic resection for a metastatic colorectal cancer?",
      "options": [
        "A. Hepatic metastasis measuring 4 cm",
        "B. Nodes positive in colon primary",
        "C. Four small hepatic metastases",
        "D. Hepatic metastasis developing 6 months after primary resection",
        "E. Very high CEA levels"
      ],
      "answer": "A",
      "explanation": "*   Several studies have analyzed predictors of poor long-term outcome after resection of hepatic metastasis from colorectal cancer.\n*   Factors identified as poor predictors include:\n    *   Positive tumor margin\n    *   Presence of extrahepatic disease\n    *   Node-positive primary tumor\n    *   Disease-free interval from primary tumor to metastases less than 12 months\n    *   More than one hepatic tumor (e.g., four small hepatic metastases)\n    *   The largest hepatic tumor being larger than 5 cm\n    *   CEA level greater than 200 ng/mL (or 60 ng/mL in another study)."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "The most common primary liver malignancy in children is:",
      "options": [
        "A. HCC",
        "B. FLC",
        "C. Intrahepatic cholangiocarcinoma",
        "D. Giant cell carcinoma",
        "E. Hepatoblastoma"
      ],
      "answer": "E",
      "explanation": "*   Hepatoblastoma is the most common primary liver malignancy in children.\n*   It has been associated with familial polyposis syndrome.\n*   It typically presents with an asymptomatic abdominal mass, anemia, thrombocytosis, and elevated AFP levels.\n*   Patients may also present with precocious puberty secondary to increased beta-human chorionic gonadotropin (β-hCG).\n*   Fetal histology has the best prognosis.\n*   Treatment involves chemotherapy first, then resection.\n*   Chemotherapy enables subsequent hepatic resection to be less extensive and may make initially unresectable tumors resectable.\n*   Fibrolamellar carcinoma (FLC) has been considered a variant of HCC, but recent studies suggest it is a distinct pathologic entity.\n*   Focal bile duct stenosis in older male patients without biliary instrumentation is highly suggestive of intraductal cholangiocarcinoma.\n*   Giant cell (osteoclast-like) carcinoma of the liver is rare but more commonly seen in bone tumors."
    },
    {
      "id": 28,
      "question_type": "clinical_scenario",
      "question": "A 40-year-old man presents with recurrent bleeding esophageal varices. Medical management and an attempt at TIPS placement also fails. He is still actively bleeding. He is classified as Child-Pugh B. Liver transplantation is a future possibility. Which of the following would be the best shunt option?",
      "options": [
        "A. End-to-side portacaval shunt placement",
        "B. End-to-end portacaval shunt placement",
        "C. Distal splenorenal shunt placement",
        "D. Mesocaval shunt placement",
        "E. Portocaval H graft"
      ],
      "answer": "D",
      "explanation": "*   Portal vein-to-systemic vein bypasses are rarely used due to the success rates of medical management, TIPS placement, and liver transplantation.\n*   The few indications for shunting are when medical management and TIPS have failed.\n*   Shunting can then be a bridge to transplantation.\n*   If the patient is Child-Pugh C, the quoted operative mortality rate is exceedingly high due to further hepatic decompensation.\n*   Thus, shunting is ideal in patients with better hepatic reserve.\n*   The distal splenorenal shunt is too time-consuming for emergent settings.\n*   The mesocaval shunt is the best option among those given, as it avoids dissection of the portal vein, thus avoiding complications for future liver transplantation."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "The most widely used test for assessment of hepatic reserve before major hepatic resection is:",
      "options": [
        "A. Aminopyrine breath test",
        "B. Indocyanine green clearance",
        "C. Bromsulphthalein retention",
        "D. Sulfur colloid scan",
        "E. Bile acid tolerance"
      ],
      "answer": "B",
      "explanation": "*   The Child-Pugh scoring system is generally useful in predicting hepatic reserve after hepatic resection, but it loses its predictive value in Child-Pugh A patients.\n*   The indocyanine green clearance test is the most widely used study for measuring hepatic reserve before hepatic resection in combination with the Child-Pugh score.\n*   Indocyanine green binds to albumin and a₁-lipoproteins in liver parenchymal cells and is rapidly cleared from the plasma, then secreted in the bile.\n*   Hepatic reserve is measured by the amount of indocyanine green retained in the plasma after 15 minutes.\n*   If more than 15% remains in the plasma at 15 minutes, it is considered abnormal (retention rate 15% = clearance rate 85%).\n*   The remaining choices (Aminopyrine breath test, Bromsulphthalein retention, Sulfur colloid scan, Bile acid tolerance) are less effective studies for assessing hepatic reserve."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "Which of the following is true regarding Budd-Chiari syndrome?",
      "options": [
        "A. It may benefit from percutaneous angioplasty and stenting.",
        "B. Diagnosis is best made by portal venography.",
        "C. The jaundice is caused by presinusoidal liver failure.",
        "D. TIPS placement is contraindicated.",
        "E. Liver function test is often normal."
      ],
      "answer": "A",
      "explanation": "*   Budd-Chiari syndrome is due to thrombosis of the hepatic veins or intrahepatic vena cava, often caused by an underlying hypercoagulable state.\n*   It leads to postsinusoidal portal hypertension because it is caused by hepatic venous outflow congestion.\n*   In contrast, presinusoidal portal hypertension develops secondary to congestion within the intrahepatic portal system.\n*   Liver function is often normal in presinusoidal portal hypertension while it is elevated in postsinusoidal portal hypertension.\n*   Diagnosis is made by CT scan and duplex ultrasound scan of the hepatic veins, not portal venography.\n*   Initial management involves heparinization followed by percutaneous angioplasty with or without stenting.\n*   TIPS has been used successfully.\n*   Those with decompensated liver function may require liver transplantation."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "In patients with fulminant hepatic failure, the complication that most frequently leads to death is:",
      "options": [
        "A. Renal failure",
        "B. Hypoglycemia",
        "C. Pneumonia",
        "D. Intracranial hypertension",
        "E. Coagulopathy"
      ],
      "answer": "D",
      "explanation": "*   Cerebral edema and intracranial hypertension (ICH) are the complications of fulminant hepatic failure most likely to result in adverse outcome and death.\n*   Liver failure is accompanied by high levels of ammonia, which are detoxified in astrocytes, leading to astrocyte glutamine accumulation.\n*   This is associated with increased intracellular osmolality, which can lead to cerebral edema and eventually ICH.\n*   It is essential to monitor intracranial hypertension as hepatic coma develops with intracranial pressure monitoring.\n*   This technology is critical for determining a patient's candidacy for liver transplantation.\n*   Patients whose intracranial pressure increases to more than 20 mm Hg or whose cerebral perfusion pressure decreases to less than 60 mm Hg will have a high risk of irreversible brain injury.\n*   If intracranial pressure is more than 50 mm Hg or cerebral perfusion pressure is less than 40 mm Hg, transplantation is contraindicated.\n*   Coagulopathy in this patient population is not considered an absolute contraindication to invasive intracranial pressure monitoring."
    },
    {
      "id": 32,
      "question_type": "mcq",
      "question": "A 30-year-old woman is found to have an incidental 3-cm mass in the liver on CT scan that intensely enhances in the arterial vascular phase. The lesion is “hot” on a technetium-99m-macroaggregated albumin liver scan. Which of the following is true about this lesion?",
      "options": [
        "A. It is usually centrally located.",
        "B. It poses a significant risk of rupture.",
        "C. It poses a significant risk of malignancy.",
        "D. It is thought to be caused by an embryologic vascular injury.",
        "E. It is composed of sheets of hepatocytes with no Kupffer cells."
      ],
      "answer": "D",
      "explanation": "*   The patient has FNH.\n*   In contrast to hepatic adenomas, FNH is typically not associated with symptoms and does not pose any risks of rupture or malignant degeneration.\n*   These lesions intensely enhance in the arterial vascular phase of axial imaging studies.\n*   Characteristically, as many as two-thirds of lesions will demonstrate a central scar that enhances in the arterial phase (versus FLC, which remains hypodense).\n*   The lesions are often peripherally located.\n*   On a technetium-99m-macroaggregated albumin liver scan, FNH appears \"hot\" because of the presence of Kupffer cells, which take up sulfur colloid.\n*   The etiology is thought to be the result of an early embryologic vascular injury.\n*   FNH is rarely symptomatic.\n*   In patients with symptoms related to FNH, resection is indicated.\n*   Because the lesions are often peripheral, minimally invasive (laparoscopic) approaches to resection should be advocated.\n*   Resection of the lesion with a thin margin of normal liver parenchyma is curative, but formal segmental resection should be considered due to lower morbidity."
    },
    {
      "id": 33,
      "question_type": "mcq",
      "question": "Which of the following is true regarding preoperative portal vein embolization before hepatic resection?",
      "options": [
        "A. If liver function is normal, the threshold for portal vein embolization is a calculated future liver remnant of less than 50%.",
        "B. It is contraindicated in patients with cirrhosis.",
        "C. It should not be used after hepatic artery chemoembolization.",
        "D. The preferred approach is the percutaneous transhepatic route.",
        "E. For a planned extended right lobectomy, embolization of segment IV branches should be avoided."
      ],
      "answer": "D",
      "explanation": "*   The primary cause of mortality after major hepatic resection in patients with underlying cirrhosis is liver failure.\n*   Preoperative portal vein embolization (PVE) is an important tool to consider for patients with cirrhosis to increase the safety margin of a planned hepatic resection.\n*   PVE induces atrophy of the planned resection area and compensatory hypertrophy of the remaining liver, reducing the likelihood of liver failure.\n*   In healthy patients, a calculated future liver remnant of at least 20% is appropriate; for patients undergoing chemotherapy, 30% is needed; and for cirrhotic patients, 40% is needed.\n*   There are two approaches: a transileocolic one (requires general anesthesia and laparotomy) and a percutaneous one (generally preferred under local anesthesia).\n*   Hepatocytes in the embolized lobe undergo apoptosis, not necrosis.\n*   Main side effects are pain from the transhepatic access site and low-grade fever.\n*   For a planned extended right lobectomy, it is important to embolize not only the main right portal vein but also the portal venous branches to segment IV.\n*   This approach helps prevent accelerated tumor growth and ensures adequate hypertrophy of segments I, II, and III.\n*   Transarterial hepatic artery chemoembolization can be used before PVE, especially in HCC patients to further prevent tumor growth during the waiting period.\n*   PVE is indicated when the remnant liver volume is expected to be less than 40% with normal liver function and less than 50% when liver function is abnormal (measured by obstructive jaundice or abnormal indocyanine green test)."
    },
    {
      "id": 34,
      "question_type": "mcq",
      "question": "Which of the following factors has the shortest half-life?",
      "options": [
        "A. I",
        "B. II",
        "C. VII",
        "D. IX",
        "E. X"
      ],
      "answer": "C",
      "explanation": "*   Warfarin acts in the liver by blocking vitamin K-dependent factors (II, VII, IX, and X).\n*   Of these, factor VII has the shortest half-life.\n*   A deficiency in factor VII manifests as prolongation of the prothrombin time and international normalized ratio.\n*   Vitamin K is critical in the γ-carboxylation of these factors, which are synthesized in the liver.\n*   Patients with hepatic dysfunction would similarly display prolongation of the prothrombin time."
    },
    {
      "id": 35,
      "question_type": "mcq",
      "question": "Which of the following is true regarding comparisons of amebic and pyogenic liver abscesses?",
      "options": [
        "A. Amebic abscesses have a much higher female preponderance.",
        "B. Mortality rates are similar.",
        "C. Both are more likely to occur in the left lobe.",
        "D. Percutaneous aspiration is more likely to be needed with amebic abscesses.",
        "E. Pyogenic abscesses are more likely to be multiple."
      ],
      "answer": "E",
      "explanation": "*   The male-to-female ratio for amebic liver abscesses is approximately 10:1, versus 1.5:1 for pyogenic abscesses.\n*   Three-fourths of liver abscesses involve the right lobe of the liver.\n*   Pyogenic abscesses are more likely to be multiple.\n*   Amebic abscesses tend to occur in younger patients and in endemic areas.\n*   Heavy alcohol consumption is commonly reported for amebic infection and is also a risk factor for pyogenic abscesses.\n*   The majority of amebic abscesses are managed with antibiotics alone.\n*   Pyogenic abscesses often require aspiration or catheter-based drainage.\n*   The mortality for amebic liver abscesses is 2% to 4%, whereas for pyogenic abscesses it ranges from 10% to 20%."
    },
    {
      "id": 36,
      "question_type": "clinical_scenario",
      "question": "A 30-year-old woman who is taking oral contraceptives is discovered to have a 4-cm asymptomatic solid mass in the right lobe of the liver on an ultrasound scan. CT demonstrates a central stellate scar within the mass that enhances on arterial phase. Management consists of:",
      "options": [
        "A. Observation",
        "B. Discontinuing oral contraceptives, repeating the CT scan in 6 months, and resection if the mass has not decreased in size",
        "C. Resection of the mass with a 1-cm margin",
        "D. Radiofrequency ablation",
        "E. Formal hepatic lobectomy"
      ],
      "answer": "A",
      "explanation": "*   The presence of a central stellate scar that enhances in the arterial phase is considered diagnostic of FNH.\n*   FNH is thought to be the result of a response to an *in utero* disturbance in liver blood supply with subsequent liver regeneration.\n*   There does not seem to be any link between FNH and oral contraceptive use, and FNH carries no risk of rupture or malignancy.\n*   Therefore, the management is observation.\n*   The size of the FNH lesion does not seem to be influenced by oral contraceptive use.\n*   The only indications for surgery would be if the diagnosis cannot be made preoperatively with certainty (particularly to distinguish FNH from FLC) or if the patient has symptoms (though symptoms suggest another pathology).\n*   Change in the size of FNH on follow-up is rare."
    },
    {
      "id": 37,
      "question_type": "mcq",
      "question": "Which of the following is true regarding TIPS?",
      "options": [
        "A. It is contraindicated in patients with poorly controlled ascites.",
        "B. It has a significant rate of causing encephalopathy.",
        "C. It is considered to be a selective shunt.",
        "D. It is best used for long-term portal decompression.",
        "E. It has a low 1-year rate of shunt occlusion."
      ],
      "answer": "B",
      "explanation": "*   TIPS has been shown to be useful in patients who do not respond to medical management of variceal bleeding.\n*   It is considered a nonselective shunt and is highly effective in the short term in preventing rebleeding.\n*   However, because it is nonselective, it has a significant risk of encephalopathy.\n*   Thus, it should be used with caution in patients who already have marginal hepatic reserve.\n*   TIPS is also useful in patients with refractory ascites.\n*   Recent studies suggest that it is also useful as a bridge to liver transplantation in patients with hepatorenal syndrome.\n*   It is not a good alternative for long-term portal decompression because the 1-year patency rate is only approximately 50%.\n*   Absolute contraindications to TIPS placement are polycystic liver disease and right heart failure."
    },
    {
      "id": 38,
      "question_type": "clinical_scenario",
      "question": "A 30-year-old woman with symptoms and signs of symptomatic cholelithiasis is found to have gallstones and a 4-cm mass in the left lateral lobe of the liver on an ultrasound scan. The patient takes oral contraceptives but no other medications. Contrast-enhanced MRI reveals a lesion of low signal intensity with peripheral nodular enhancement, and T2-weighted images reveal high signal intensity. Management consists of:",
      "options": [
        "A. Laparoscopic cholecystectomy with a needle biopsy of the liver mass",
        "B. Laparoscopic cholecystectomy alone",
        "C. A trial of contraceptive cessation",
        "D. Open cholecystectomy with a wedge liver resection",
        "E. Open cholecystectomy with a left lateral segmentectomy"
      ],
      "answer": "B",
      "explanation": "*   The MRI findings (low signal intensity with peripheral nodular enhancement on T1-weighted, high signal intensity on T2-weighted) are characteristic of a hemangioma.\n*   Hemangiomas are common benign liver lesions, generally discovered incidentally.\n*   MRI findings tend to be more specific than CT scan for hemangiomas.\n*   Hemangiomas can be definitively diagnosed by a technetium-99–labeled red cell scan with single-photon emission CT.\n*   Diagnostic CT criteria for hemangioma include diminished attenuation on precontrast scan, peripheral contrast enhancement during dynamic bolus phase, and complete isodense fill-in on delayed imaging.\n*   Given the vascular nature of hemangiomas, needle biopsy is contraindicated.\n*   Resection is also unnecessary.\n*   Hemangiomas are not associated with oral contraceptive use."
    },
    {
      "id": 39,
      "question_type": "mcq",
      "question": "The most common cause of intrahepatic presinusoidal portal hypertension is:",
      "options": [
        "A. Alcohol",
        "B. Budd-Chiari syndrome",
        "C. Schistosomiasis",
        "D. Hemochromatosis",
        "E. Portal vein thrombosis (PVT)"
      ],
      "answer": "C",
      "explanation": "*   Portal hypertension is classified into three types: presinusoidal, sinusoidal, and postsinusoidal.\n*   Distinguishing between these causes is important as treatment may differ.\n*   Unlike sinusoidal and postsinusoidal types, presinusoidal portal hypertension is more likely to be associated with preserved liver function.\n*   Presinusoidal hypertension is further divided into intrahepatic and extrahepatic causes.\n*   Extrahepatic causes include portal and splenic vein thromboses.\n*   The most common intrahepatic etiology is schistosomiasis (*Schistosoma japonicum* and *Schistosoma mansoni*), where infection by a fluke leads to fibrosis and granulomatous reactions.\n*   In children, congenital hepatic fibrosis is another cause.\n*   Sinusoidal causes include alcoholism and other causes of cirrhosis.\n*   Other etiologies include hemochromatosis and Wilson disease.\n*   Postsinusoidal portal hypertension includes Budd-Chiari syndrome and congenital webs in the intrahepatic inferior vena cava."
    },
    {
      "id": 40,
      "question_type": "clinical_scenario",
      "question": "During diagnostic laparoscopy preceding pancreaticoduodenectomy in a patient with pancreatic cancer, a 2-mm, firm, white lesion is noted on the periphery of the liver. Which of the following is true?",
      "options": [
        "A. The procedure should be aborted at this time.",
        "B. The most likely etiology is a bile duct hamartoma.",
        "C. Biopsy of the lesion should not be done at this time.",
        "D. The patient likely has abnormal liver function tests (LFTs).",
        "E. Wedge resection of the liver should be performed."
      ],
      "answer": "B",
      "explanation": "*   Bile duct hamartomas are the most common lesions of the liver seen during laparotomy.\n*   They are often small (1–5 mm), firm, smooth, and white, occurring in the periphery of the liver.\n*   It is important to differentiate these from metastatic lesions by taking intraoperative biopsies and sending them for frozen section.\n*   If it is found to be a metastatic lesion, the procedure should be aborted.\n*   Bile duct hamartomas do not typically distort hepatic parenchyma and do not lead to elevated LFTs.\n*   They do not need to be resected."
    }
  ]
}
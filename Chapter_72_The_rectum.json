{
    "chapter_name": "The rectum",
    "questions": [
        {
            "id": "1",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A The rectum is completely enveloped by peritoneum.",
                "B The rectovesical pouch in the male is 7.5 cm and rectouterine pouch is 5.5 cm from the anal verge.",
                "C The fascia in front of the rectum is the Denonvilliers' fascia and behind is the Waldeyer's fascia.",
                "D The mesorectum contains the superior rectal vessels and lymphatics.",
                "E The lymphatics from the rectum mainly drain upwards."
            ],
            "answer": [
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "The rectovesical pouch in the male is formed by the peritoneal reflection from the front of the lower part of the middle one-third of the rectum on to the bladder; this is 7.5 cm from the anus. In the female this peritoneal reflection from the rectum goes on to the posterior vaginal wall forming the rectouterine pouch of Douglas, which is 5.5 cm from the anal verge. Both points should be within reach on rectal examination by the average index finger.\nThe lower one-third of rectum is separated from the prostate or vagina in front by a condensation of mesorectal fascia called the rectovescial fascia of Denonvilliers. At the back there is another fascial layer that extends from the coccyx and the lower two sacral vertebrae called the presacral fascia (of Waldeyer). These fascial layers are a barrier to the spread of cancer. In mesorectal excision for rectal cancer, the surgeon posteriorly should dissect in the plane between the rectum and mesorectum and presacral fascia – called the 'holy plane' (Heald). The mesorectum is intimately related to the rectum down to the levator ani and contains the superior rectal artery (continuation of the inferior mesenteric artery), accompanying veins, lymphatics and nodes. These should be excised in total mesorectal excision during surgery for cancer.\nThe rectal lymphatics drain upwards along the superior rectal vessels to the nodes at the origin of the inferior mesenteric artery. This fact is important because in low rectal cancer, leaving a small amount of uninvolved tumour-free margin is adequate to perform a curative resection.\nThe rectum is not completely enveloped by peritoneum. The upper one-third is covered by peritoneum in front and both sides; the middle one-third has peritoneum only anteriorly while the lower one-third is completely extraperitoneal."
        },
        {
            "id": "2",
            "question_type": "msq",
            "question": "The following statements are true except:",
            "options": [
                "A Patients with rectal disease might present with extra-rectal symptoms and signs.",
                "B Rectal bleeding is always a sinister symptom.",
                "C Altered bowel habit of recent onset should be of concern.",
                "D Flexible sigmoidoscopy can visualise a maximum distance of 40 cm of the colon.",
                "E Examination of the rectum by finger or endoscope is best carried out in the left lateral position."
            ],
            "answer": [
                "B",
                "D"
            ],
            "explanation": "Rectal bleeding, while alarming for the patient, is not always a symptom from a sinister cause. Painless bright-red rectal bleeding in the young is almost always from haemorrhoids. However, the symptom should never be dismissed as a cause of ‘haemorrhoids' without thorough history and examination. The flexible sigmoidoscope reaches to a distance of 60 cm, usually up to the splenic flexure.\nPatients with rectal disease might present with extra-rectal symptoms such as weight loss, abdominal pain and jaundice. The patient might be aware of an abdominal lump, which can turn out to be hepatomegaly from liver secondaries. When a patient complains of altered bowel habit of recent onset it should be of concern. This might take the form of diarrhoea, constipation, or alternating constipation and diarrhoea. A patient who is constipated might not complain of alteration in bowel habit because he or she routinely started taking laxatives in increasing amounts.\nAn integral part of clinical examination is rectal examination, which should be followed by sigmoidoscopy. This examination is carried out in the left lateral position. This is because of the three anatomical lateral curves of the rectum – the upper and lower are convex to the right and the middle convex to the left. Having the patient in left lateral position allows easier visualisation. Depending upon the surgical unit, if the patient is seen in a ‘one-stop rectal bleeding clinic', flexible sigmoidoscopy might be a routine. Otherwise rigid sigmoidoscopy with a plastic disposable instrument, which visualises up to 25 cm, should be routine."
        },
        {
            "id": "3",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Impalement injury is the usual accidental cause.",
                "B Intraperitoneal rectal injuries might require a staged procedure.",
                "C A temporary colostomy is usually necessary.",
                "D In severe injuries, faecal incontinence might be the long-term outcome.",
                "E When a patient arrives with a self-introduced foreign body (FB), it should be removed immediately."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "While most rectal injuries are accidental, foreign bodies in the rectum are usually self-inflicted. Injuries occur as a result of a fall on a sharp metal object, or a gardening injury from impalement on a garden tool. Other causes might be gunshot injury or prolonged obstructed labour. When a patient is seen with an impalement injury (Figures 72.1 and 72.2a and b) usually the patient will arrive with the impaled object in place, as the paramedics giving first-aid would have been instructed not to remove the impaled object for fear of worsening the effects of the injury. After resuscitation and x-rays, in intraperitoneal injuries the patient is taken to theatre. The abdomen is opened, under controlled conditions, and the impaled object is removed. Depending upon the extent of damage, the rectum is repaired with a proximal defunctioning ileostomy; alternatively the damaged area might be transected, the edges freshened and brought out as an end colostomy with the distal end closed off as a Hartmann's procedure or brought out as a mucus fistula. In extraperitoneal lower one-third rectal injuries, a defunctioning double-barrel left iliac colostomy is done with debridement of the perineal wound. Prophylactic broad-spectrum antibiotics against aerobic and anaerobic organisms are mandatory. In severe injuries after repair and recovery, the patient might experience faecal incontinence from damage to the levator ani. In a case of foreign body (FB) in the rectum (Figure 72.3), the object is removed under general anaesthetic. It might be necessary to do a laparotomy to push the foreign body out to be retrieved through the anal canal. Prior to the laparotomy, an x-ray to rule out intraperitoneal air is advisable."
        },
        {
            "id": "4",
            "question_type": "msq",
            "question": "The following statements are true except:",
            "options": [
                "A In children it is usually a mucosal prolapse.",
                "B In children the differential diagnosis is ileocaecal intussusception.",
                "C In adults it is usually a full-thickness prolapse.",
                "D Majority of children will need an operation.",
                "E Majority of adults can be managed conservatively."
            ],
            "answer": [
                "D",
                "E"
            ],
            "explanation": "In the management of rectal prolapse in children the vast majority, if not all, are treated conservatively by digital repositioning. If this is not successful after a 6-week period, submucosal injection usually cures the condition. In adults as it is usually a full-thickness (complete) prolapse, an operation is most often required. There are several procedures, including laparoscopic approach. In children it is a mucosal prolapse (partial prolapse), the cause usually being diarrhoea and weight loss resulting in loss of fat in the ischio-rectal fossa. It might be confused with an ileocaecal intussusception. In a prolapse the finger cannot be insinuated between the mucosa and anal verge whereas in intussusception the finger will enter a gap between the bowel and anus. In adults, women are six times more often affected than men. It is almost always a full-thickness or complete prolapse, and in 50% there is faecal incontinence. There are several choices of surgical treatment, the option taken depending upon the age of the patient and presence of comorbidities."
        },
        {
            "id": "5",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A The diagnosis is made on sigmoidoscopy followed by colonoscopy.",
                "B Crohn's disease is a common cause.",
                "C Specific infections as a cause must be excluded.",
                "D It is present in majority of patients with ulcerative colitis.",
                "E AIDS due to HIV infection can cause the condition."
            ],
            "answer": [
                "A",
                "C",
                "D",
                "E"
            ],
            "explanation": "The condition is diagnosed by sigmoidoscopy when inflammation is seen confined to the rectum; there is pus, blood, mucus and red mucosa. Once suspected, colonoscopy with multiple biopsies is essential to find out the extent of the disease. Specific infections as a cause must be excluded by histology, bacteriology, stool culture, serological tests and examination of scrapings or swabs from ulcers. Patients known to suffer from ulcerative colitis (UC) will almost certainly have proctitis. Those who are not suffering from UC, specific infections as a cause must be excluded. Such infections are C. difficile, bacillary dysentery, amoebic dysentery, tuberculosis, gonococcal infection, lymphogranuloma venereum, AIDS and bilharziasis. While some of these conditions are rare, a good history and proper patient profile should help make the diagnosis. Crohn's disease is not a common cause of proctitis. Although the rectum might be involved, it is patchy. There might be other perianal manifestations such as fistulae."
        },
        {
            "id": "6",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A A polyp >1 cm is likely to be malignant.",
                "B When a rectal polyp is found a full colonoscopy should be performed.",
                "C In certain cases a patient might present with the effects of hypokalaemia.",
                "D In villous adenoma abdomino-perineal excision is the operation of choice.",
                "E In familial adenomatous polyposis the patient should be treated according to the prescribed protocol."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "E"
            ],
            "explanation": "When, on sigmoidoscopy, a patient is found to have a rectal polyp >1 cm there is a high chance of it being malignant. Therefore it should be removed by endoscopic hot biopsy or snare polypectomy. However, before this is done, a full colonoscopy should be carried out to exclude a proximal colonic cancer. This is to prevent implantation of cancer cells in the polypectomy wound should a cancer be found. Villous adenomas are usually very large with a typical frond-like appearance often occupying the entire rectum. These might present with profuse watery mucoid diarrhoea, making the patient very weak because of loss of large amount of potassium. They have a propensity to malignant change, something that can be strongly suspected on digital examination. If the tumour is not malignant, and the vast majority are benign, abdomino-perineal excision is not required. They can be treated by trans-anal endoscopic microsurgery (TEM). Those with FAP should undergo the whole gamut of genetic counselling and profiling followed by radical surgery (see Chapter 69)."
        },
        {
            "id": "7",
            "question_type": "msq",
            "question": "The following statements are true except:",
            "options": [
                "A Most patients with rectal cancer will require an abdomino-perineal resection (APR).",
                "B Early-morning spurious diarrhoea is a typical symptom.",
                "C In locally advanced tumours preoperative chemoradiotherapy makes curative surgery possible.",
                "D Following an anterior resection, a defunctioning loop ileostomy is usually performed.",
                "E Endoluminal stenting can be done as a temporary or permanent procedure."
            ],
            "answer": [
                "A"
            ],
            "explanation": "Most patients with carcinoma of the rectum do not require an APR. The vast majority (almost 90%) can have a sphincter-saving resection (anterior resection) because of increased refinements of surgical techniques such as use of the stapler and the understanding that spread occurs proximally upwards. This has enabled restorative procedures, anterior resection and abdominotransanal-coloanal anastomosis to be performed in patients with a carcinoma where the lower margin is 2 cm above the anal canal. Surgery for rectal carcinoma is being carried out laparoscopically in certain centres. Patients with rectal carcinoma typically complain of ‘early-morning spurious diarrhoea'. The patient typically complains of having to wake up in the morning earlier than usual because of an intense desire to defecate only to rush to the lavatory to pass ‘wind and water', which the patient refers to as ‘diarrhoea'; this is ‘spurious' because it is false as there are no faeces but really just pent-up mucus secretion proximal to an obstruction. The patient has to make several such trips being left with a constant desire to defecate – a symptom called tenesmus. In locally advanced tumours preoperative neoadjuvant chemoradiotherapy over 6 weeks will downstage the tumour making curative surgery feasible. Following low anterior resection for growths in the middle and lower thirds of rectum, a defunctioning ileostomy is usually carried out and left in place for about 6 weeks. A contrast study is carried out 6 weeks later to confirm the integrity of the anastomosis, after which the ileostomy is closed and bowel continuity restored. In patients with low rectal growths that are inoperable, a self-expanding metallic endoluminal stent is inserted as a means of palliation. This procedure is also done when a patient presents with acute intestinal obstruction. This will get the patient over the acute episode. Over the subsequent week the patient is optimised, the growth is staged and a definitive sphincter-saving operation carried out +/– defunctioning ileostomy."
        },
        {
            "id": "8",
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical features of the various conditions that follow:",
            "options": {
                "items": [
                    "1 Adenomatous polyp",
                    "2 Carcinoma of rectum",
                    "3 Radiation proctitis",
                    "4 Rectal prolapse",
                    "5 Solitary rectal ulcer",
                    "6 Villous adenoma"
                ],
                "choices": [
                    "A An 80-year-old woman complains of a large lump protruding from her back passage for few years. This is associated with mucus discharge and faecal incontinence.",
                    "B A 65-year-old man, having been invited for bowel cancer screening, went through the process diligently. His result came back as abnormal; therefore a colonoscopy was performed. At colonoscopy two polyps less than 1 cm were found and removed.",
                    "C A 78-year-old woman complains of difficulty in evacuating her bowels for many years. Sometimes she has to digitally remove the stools or apply pressure in the vagina to facilitate bowel movement. While straining during her bowel movement, she noticed bright-red rectal bleeding and mucus. She has some pain on defecation but is otherwise well.",
                    "D An 86-year-old man complains of fresh rectal bleeding and loose stools with mucus for few weeks. He had prostate cancer treated many years ago with radiotherapy. He has atrial fibrillation and is on warfarin. He is otherwise well.",
                    "E A 55-year-old man saw his general practitioner with a history of rectal bleeding for a few months. Recently, his symptoms were getting worse and he has also started passing mucus per rectum. He has been otherwise well without any significant past medical and family history. His GP sent him to be assessed at the rectal bleeding clinic.",
                    "F A 52-year-old man complains of watery diarrhoea for several months. Recently the diarrhoea has become so profuse that he feels quite weak, with some loss of power in his muscles. On his blood tests done by his GP he has a serum potassium of 2.1 mmol/L. On rectal examination, a frond-like growth is felt."
                ]
            },
            "answer": {
                "A": "4",
                "B": "1",
                "C": "5",
                "D": "3",
                "E": "2",
                "F": "6"
            },
            "explanation": "For 1. B Adenomatous polyp: All polyps detected at screening are removed for histology. If the polyp is over 1 cm in size, the area is marked with a tattoo and the polyp removed. Tattoo assists with identification of the polyp site for surveillance or if the removed polyp comes back as cancer. The surveillance for adenomatous polyps removed at colonoscopy is based on the British Society of Gastroenterology's (BSG) guidelines, which are based on the number and size of the adenomatous polyps. Hyperplastic or metaplastic polyps do not need surveillance. Patients with multiple polyps should be considered for assessment in a family history clinic for detailed evaluation to exclude FAP when the whole gamut of genetic investigations, assessment and family counselling should be carried out.\nFor 2. E Carcinoma of rectum: A detailed history is taken with regard to recent change in bowel habit such as constipation, early-morning spurious diarrhoea, rectal bleeding with mucus, pain, tenesmus and a feeling of insufficient evacuation. Examination would reveal a palpable indurated mass in the rectum; this is followed by sigmoidoscopy and biopsy. Thereafter the patient needs the full gamut of investigations. A barium enema will show a 'napkin-ring' appearance (Figure 72.4); as an imaging modality it has now been replaced by a CT colonography. A full colonoscopy is done to exclude synchronous carcinoma proximally. Sometimes a colonoscopy might not be possible because of the nature of the lesion; in such a case, CT colonography is done. Besides all routine blood investigations, staging is carried out by CT scan of the abdomen and chest and MRI of the pelvis. Once all investigations are available, the patient is discussed in the colorectal MDT as to the best way to proceed. The decision will depend upon the stage of the disease. The option taken will be from a choice of the following: primary surgical treatment in the form of an anterior resection (Figure 72.5) or preoperative chemoradiotherapy followed by surgery and palliation. Surgery, in the vast majority will be in the form of a sphincter-saving procedure with total mesorectal excision (TME) +/– a defunctioning ileostomy. A minority will require APR with permanent colostomy (Figure 72.6). Palliation can take one of several options, including stenting, interstitial radiation, laser ablation, or a Hartmann's operation (Also see previously).\nFor 3. D Radiation proctitis: Diagnosis is confirmed at endoscopic examination of the rectum. Macroscopically there will be telangiectasia and fibrosis over the anterior rectal wall in the middle and the low one-third of rectum. Biopsies will confirm radiation proctitis, chronic inflammation, ulceration, submucosal fibrosis and crypt abscesses. The treatment involves topical administration of anti-inflammatories such as 5-aminosalicylic acid preparations in the form of enemas or suppositories. Usually a 6-week course is enough to alleviate the symptoms. Sometimes there is a long-term need for anti-inflammtories and occasionally steroid enemas have to be used. If the proctitis is extensive, argon plasma coagulation is performed to gain initial control followed by medical treatment.\nFor 4. A Rectal prolapse: Full-thickness rectal prolapse (complete prolapse) is six times more common in women. The complications are bleeding, incarceration and small-bowel evisceration. The management consists of colonoscopy or a flexible sigmoidoscopy to exclude any mucosal lesions. Surgery is the mainstay of treatment, the options being abdominal or perineal approach, the former being open or laparoscopic. There are several operations all having their own protagonists, a sure indication that most procedures have some limitation or other. Details of these operations are beyond the scope of this book.\nFor 5. C Solitary rectal ulcer: Also called solitary rectal ulcer syndrome (SRUS), this condition is often associated with other pelvic floor disorders. Despite the name, sometimes there might be no ulcer while at times there might be multiple ulcers or erosions. Typically there is an ulcer in the anterior rectal wall when a carcinoma or inflammatory bowel disease must be excluded. It might heal by itself, leaving a polypoid-looking lesion. The cause can be explained as follows: chronic constipation → straining at stool → increase in intra-rectal pressure → prolapse of anterior rectal wall → internal intussusception → ulceration → bleeding. The diagnosis is confirmed by endoscopy, which reveals a red, oedematous mucosa of varying length over the anterior rectal wall 7–10 cm from the anal verge. Biopsies are done to exclude malignancy. The hallmark of SRUS is smooth muscle proliferation from the muscularis mucosa into the lamina propria. Although a benign condition, it is difficult to treat. Treatment is conservative aimed at symptomatic relief. As a last resort, laparoscopic ventral mesh rectopexy is offered.\nFor 6. F Villous adenoma: This is usually a large tumour that secretes potassium-rich mucus, causing profuse watery diarrhoea. Patients are hypokalaemic on two counts – diarrhoea and the secretion of potassium from the tumour. This makes the patient clinically ill both from dehydration and muscle weakness. On rectal examination a frond-like, soft, tumour is felt; a hard indurated area might denote malignancy. Endoscopy confirms the diagnosis when a large, broad-based, elevated lesion with shaggy cauliflower-like surface occupying a section of the bowel wall like a carpet is seen. Multiple biopsies are taken, as there is a high chance of invasive cancer. Histologically, they are composed of finger-like processes with fibrovascular cores with hyperchromatic nuclei. When they are larger than 2 cm, 50% will have invasive cancer. Considering that most villous adenomas are >2 cm in diameter, exclusion of invasive cancer is paramount as the surgical treatment would be different. If cancer is excluded, TEM can be carried out. If cancer is confirmed, anterior resection (see previously) will be the treatment."
        }
    ]
}
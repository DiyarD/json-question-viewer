{
  "chapter_name": "Thoracic Surgery",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 60-year-old male presents to the emergency department (ED) with dyspnea. He has a 40 pack-year smoking history. He reports a 20-pound weight loss over the past 2 months. On exam, he has facial and neck swelling. Chest x-ray demonstrates a large mass in the right upper lobe. Which of the following is the best management?",
      "options": [
        "A. Chemotherapy",
        "B. Chemotherapy and radiation",
        "C. Radiation therapy",
        "D. Endovascular stenting",
        "E. Thoracotomy"
      ],
      "answer": "D",
      "explanation": "*   This patient presents with superior vena cava syndrome (SVC) secondary to lung cancer.\n*   SVC syndrome commonly presents with dyspnea, facial swelling, headache, chest pain, hoarseness, and stridor.\n*   Approximately 65% of cases are due to malignant processes (most commonly small cell lung cancer), with the remainder due to infectious etiologies and iatrogenic sequelae.\n*   SVC syndrome is a contraindication to surgical resection of the primary tumor.\n*   Relief of symptoms is best achieved with endovascular stenting of the SVC, appropriate for both benign and malignant cases.\n*   Radiation was previously first-line but led to persistent symptoms.\n*   Chemotherapy is likely required for the underlying cancer but should be considered after the acute process is addressed and cancer confirmed with tissue biopsy."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 42-year-old male with gastroesophageal reflux disease (GERD) undergoes Nissen fundoplication. A left internal jugular central venous catheter was placed before the case. On postoperative day 3 the patient develops shortness of breath. He is afebrile with a normal white blood cell (WBC) count. Chest x-ray demonstrates a large left-sided pleural effusion, and a chest tube is inserted evacuating 1.5 L of turbid fluid. Fluid analysis for which of the following would be most beneficial in establishing the most likely diagnosis?",
      "options": [
        "A. Sudan stain",
        "B. Lactate dehydrogenase (LDH)",
        "C. Culture and sensitivity",
        "D. Cholesterol",
        "E. Eosinophil count"
      ],
      "answer": "A",
      "explanation": "*   Esophageal dissection is the most common iatrogenic cause of chylothorax, presenting 2 to 7 days post-injury.\n*   Other etiologies include trauma, neoplastic obstruction (lymphoma), and central venous catheter insertion.\n*   The thoracic duct originates from the cisterna chyli, ascends posterior to the abdominal aorta, crosses to the left thorax at T5-6, and drains into the subclavian and internal jugular vein.\n*   Injury to the thoracic duct causes chylothorax, a pleural effusion.\n*   Not all cases are milky; 50% present with bloody, yellow, or serosanguinous effusion.\n*   Gold standard for diagnosis is lipoprotein electrophoresis.\n*   Pleural fluid analysis showing chylomicrons and/or triglycerides is highly suggestive.\n*   Sudan fat stain identifies chylomicrons (stains orange).\n*   Chylothorax fluid is resistant to infection, so IV antibiotics are not indicated."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 45-year-old male presents to the ED with 200 mL of hemoptysis. He continues to expectorate blood but is able to protect his airway and is speaking comfortably. His blood pressure is 110/70 mm Hg and his heart rate is 100 beats per minute. A chest radiograph reveals bilateral infiltrates. Which of the following offers the highest likelihood of definitive control of this patient's bleeding?",
      "options": [
        "A. Intubation with a double lumen endotracheal tube",
        "B. Rigid bronchoscopy with topical application of epinephrine 1:20,000",
        "C. Bronchial artery embolization",
        "D. Pulmonary arteriography with selective embolization",
        "E. Flexible bronchoscopy"
      ],
      "answer": "C",
      "explanation": "*   Massive hemoptysis is defined as 100 to 1000 mL of blood expectorated in 24 hours.\n*   Initial management involves standard resuscitation protocols and securing the airway.\n*   Definitive management depends on bleeding briskness and location, with options including bronchoscopy, interventional radiology (bronchial artery embolization, pulmonary artery catheterization/embolization), and surgery.\n*   For this patient, many therapies could be attempted, but definitive control is unlikely with most.\n*   Intubation with a double lumen tube alone is not therapeutic and can hinder bronchoscopy.\n*   Rigid bronchoscopy is diagnostic and therapeutic, but topical epinephrine is unlikely to be definitive.\n*   Pulmonary arteriography/embolization is sometimes needed, but over 90% of massive hemoptysis cases are due to bronchial artery bleeding (high pressure system), not pulmonary arteries (low pressure, 5% of cases).\n*   Flexible bronchoscopy is diagnostic and can be used with additional interventions like electrocautery or sclerotherapy."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is true regarding pulmonary sequestration?",
      "options": [
        "A. MRI is considered the diagnostic imaging of choice.",
        "B. The majority of cases are asymptomatic.",
        "C. It does not communicate with the tracheobronchial tree.",
        "D. Extra-lobar pulmonary sequestration remains within the visceral pleura of the native lung.",
        "E. The majority of asymptomatic cases can be observed."
      ],
      "answer": "C",
      "explanation": "*   Pulmonary sequestration is a rare lung anomaly, classified as intralobar (more common) or extralobar.\n*   Both types have no connection to the tracheobronchial tree.\n*   Intralobar type remains within the visceral pleura, while extralobar has a separate pleural lining.\n*   They have their own arterial supply, typically from the thoracic aorta for intralobar and abdominal aorta for extralobar.\n*   Left side and lower lobes are more commonly involved; men are affected in a 3:1 ratio.\n*   Most common presentations are productive sputum, fever, and hemoptysis; only 13% are asymptomatic with incidental imaging findings.\n*   Gold standard for diagnosis is pulmonary angiography, but CT angiography is the diagnostic imaging of choice due to less invasiveness and high sensitivity/specificity.\n*   Surgical resection (segmentectomy preferred) is standard of care due to potential for recurrent infections and massive hemoptysis."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 49-year-old male has a right-sided perihilar mass incidentally found on CT scan performed after a motor vehicle trauma 1 month ago. He has a 30 pack-year smoking history. He reports his clothes fit more loosely. On examination, he has purple striae on his abdomen and prominent fat on his posterior neck. CT scan confirms a 4-cm irregular mass without enlarged lymph nodes. Treatment is most likely to involve which of the following?",
      "options": [
        "A. Radiation therapy alone",
        "B. Combination chemotherapy and radiation",
        "C. Surgical resection",
        "D. Mediastinoscopy and if node negative, then surgical resection",
        "E. Surgical resection followed by radiation therapy"
      ],
      "answer": "B",
      "explanation": "*   Small cell carcinoma of the lung (SCLC) accounts for 20% of lung cancers; most patients are diagnosed at stage 2 with poor prognosis.\n*   Limited SCLC, locoregional disease, offers the only hope for cure.\n*   Treatment for limited SCLC is combination chemotherapy (cisplatin and etoposide) with concurrent radiation therapy, with a 25% 5-year survival rate.\n*   Surgery generally has no role, except for rare incidentally discovered small pulmonary nodules where diagnosis is not established preoperatively.\n*   This patient's SCLC is complicated by ectopic ACTH-secretion, causing Cushing syndrome (purple striae, buffalo hump).\n*   Lymph node sampling (biopsy, N-status) is done via bronchoscopy (for airway invasion), mediastinoscopy, and EBUS (for mediastinal nodes).\n*   Aortopulmonary nodes require anterior thoracotomy, parasternal mediastinotomy (Chamberlain procedure), or VATS.\n*   PET-CT is the best test for M-status (metastasis)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A rare but well-recognized complication of bronchial artery embolization performed for massive hemoptysis is:",
      "options": [
        "A. Esophageal necrosis",
        "B. Pulmonary infarction",
        "C. Paraparesis",
        "D. Vocal cord paralysis",
        "E. Tracheal necrosis"
      ],
      "answer": "C",
      "explanation": "*   Bronchial artery embolization is effective for hemoptysis, as most cases originate from bronchial circulation.\n*   Embolization effectively stops hemoptysis, but recurrence can occur in up to 50% of patients.\n*   The blood supply to the spine (anterior spinal artery) may share a common origin with or receive supply from bronchial arteries.\n*   Paraparesis is a rare but potentially devastating complication due to spinal cord ischemia.\n*   Clinically apparent necrosis or infarction of other structures (esophageal, pulmonary, tracheal) is not well recognized."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding aortic stenosis (AS)?",
      "options": [
        "A. In low-risk patients with severe symptomatic AS, transcatheter aortic valve replacement is preferred.",
        "B. The most common cause of AS is rheumatic fever.",
        "C. Symptoms generally develop when the valve area is less than 2 cm².",
        "D. Swollen legs and elevated brain natiuretic peptide portend a poor prognosis.",
        "E. Valve repair is preferred to valve replacement."
      ],
      "answer": "D",
      "explanation": "*   Aortic stenosis (AS) is most commonly caused by senile calcific aortic valve disease. Rheumatic fever is now uncommon.\n*   Classic signs are angina, syncope, and congestive heart failure (CHF), with CHF (swollen legs, elevated brain natriuretic peptide) portending the worst prognosis (median survival as low as 2 years).\n*   Symptoms develop when stenosis is severe (valve area < 1 cm² or mean gradient > 40 mm Hg).\n*   Symptomatic surgical candidates undergo aortic valve replacement.\n*   Transcatheter aortic valve replacement (TAVR) is preferred for high-risk (and some intermediate-risk) patients with severe symptomatic AS.\n*   Valve repair is preferred over replacement for mitral valve disease, not aortic."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding intra-aortic balloon pump (IABP)?",
      "options": [
        "A. It improves cardiac function in patients with cardiogenic shock due to aortic regurgitation.",
        "B. It is beneficial in patients with aortic dissection.",
        "C. It improves coronary blood flow during systole.",
        "D. It is only beneficial in patients that have exhausted coronary autoregulation.",
        "E. It is not indicated in acute myocardial infarction."
      ],
      "answer": "D",
      "explanation": "*   Intra-aortic balloon pump (IABP) is used for low cardiac output states, positioned in the descending thoracic aorta distal to the left subclavian artery.\n*   Its main purpose is to augment coronary blood flow and myocardial oxygen supply.\n*   It works by deflating during systole (reducing left ventricular afterload) and inflating during diastole (increasing diastolic aortic pressure and coronary perfusion).\n*   Coronary blood flow is improved during diastole.\n*   Key indications include high-risk percutaneous coronary intervention, acute myocardial infarction, and cardiogenic shock.\n*   IABP is only beneficial when coronary autoregulation is exhausted; otherwise, increased perfusion is counteracted by increased vascular resistance.\n*   Contraindications include aortic regurgitation (worsens regurgitation) and suspected aortic dissection (can extend into false lumen).\n*   Caution is advised in patients with abdominal aortic aneurysm due to rupture risk."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 68-year-old diabetic female undergoes coronary artery bypass grafting (CABG) for three-vessel disease. Ten days later, she returns to the ED with high fever and chest pain, and a crunching sound is heard over her chest on auscultation. Her sternum feels unstable and there is drainage from her sternal incision. Her WBC count is 18,000 cells/µL. Which of the following is true about this condition?",
      "options": [
        "A. It is usually due to multiple organisms.",
        "B. CT scan of the chest should be performed next.",
        "C. Avoidance of bilateral internal mammary bypasses reduces the risk.",
        "D. This has an excellent prognosis with timely intervention.",
        "E. Obesity is not a risk factor."
      ],
      "answer": "C",
      "explanation": "*   The patient has acute mediastinitis following CABG, a lethal thoracic infection with ~30% mortality.\n*   Source is likely sternal wound infection combined with sternal instability, allowing bacterial entry.\n*   Presents with chest pain, fever, leukocytosis, increased sternal drainage, and Hamman's sign.\n*   Usually caused by a single pathogen (Staphylococcus aureus/epidermidis).\n*   Obesity is a risk factor. Prognosis is not related to age, gender, or pathogen type.\n*   CT scan confirms diagnosis (sternal dehiscence, stranding, fluid/air pockets in anterior mediastinum), but clinical suspicion may warrant immediate intervention without delay for CT.\n*   Definitive management: surgical debridement, drainage, antibiotics, and sternal rewiring.\n*   Bilateral internal mammary artery graft increases mediastinitis risk, especially in diabetics, and as such should generally be avoided."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 45-year-old male with adenocarcinoma of the right lung presents to clinic to discuss surgical resection. Which of the following is the most important pulmonary function study to order for this patient?",
      "options": [
        "A. Arterial blood gas",
        "B. Forced expiratory volume 1 (FEV1)",
        "C. Total lung capacity",
        "D. Minute ventilation",
        "E. Diffusing capacity of the lung for carbon monoxide (DLCO)"
      ],
      "answer": "B",
      "explanation": "*   Pulmonary function studies are routine for resections larger than a wedge resection.\n*   FEV1 is the best predictor for lung resection complications.\n*   FEV1 > 2.0 L (or >80% expected) allows pneumonectomy; FEV1 > 1.5 L allows lobectomy.\n*   These guidelines don't account for age, body size, or predicted postsurgery FEV1.\n*   Pre-operative values predicting increased complications/mortality post-pneumonectomy: FEV1 < 2.0 L, MVV < 55% predicted, DLCO < 50% predicted, FEF25%-75% < 1.6 L/sec.\n*   Pre-operative values predicting increased complications/mortality post-lobectomy: FEV1 < 1.5 L, MVV < 40% predicted, FEF25%-75% < 0.6 L/sec, DLCO < 50% predicted.\n*   Arterial blood gas, total lung capacity, and resting minute ventilation are not included in these predictors."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "The patient in question 10 undergoes pulmonary function testing for a planned lobectomy of the right lung and his FEV₁ is 1.2 L. Which of the following is true?",
      "options": [
        "A. The patient is not a candidate for lobectomy.",
        "B. Surgery can proceed as the plan is for a lobectomy.",
        "C. Ventilation-perfusion (VQ) scan should be performed.",
        "D. He should undergo respiratory muscle training with incentive spirometer.",
        "E. Repeat testing should be performed following breathing treatment with albuterol."
      ],
      "answer": "C",
      "explanation": "*   If PFTs are normal, no further testing is needed, and surgery can proceed.\n*   If PFTs are below accepted limits, further testing like quantitative VQ scan or differential lung scan is recommended to calculate postoperative pulmonary reserve.\n*   Minimum acceptable predicted postoperative FEV1 is 800 mL.\n*   If the desired lobe contributes minimally to FEV1, resection may still be tolerated.\n*   If predicted FEV1 is < 800 mL, refer to oncology for nonsurgical management.\n*   Respiratory muscle training with incentive spirometer has not shown to improve PFTs.\n*   Breathing treatments may slightly improve PFTs but won't correct underlying disease."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "What happens to the partial pressure of arterial oxygen as blood flows from the pulmonary capillaries to the left atrium?",
      "options": [
        "A. Increase",
        "B. Decrease",
        "C. Stay the same",
        "D. Depends on cardiac output",
        "E. Depends on pulmonary vascular resistance"
      ],
      "answer": "B",
      "explanation": "*   Deoxygenated blood goes from the right ventricle via pulmonary arteries to the lungs for oxygenation.\n*   Oxygenated blood is carried by pulmonary veins to the left atrium.\n*   Bronchial veins, supplying lung parenchyma, also drain into pulmonary veins and then the left atrium.\n*   This mixing results in the partial pressure of arterial oxygen in the left ventricle being about 5 mm Hg lower than in the pulmonary capillary.\n*   Cardiac output and pulmonary vascular resistance do not alter the general blood flow."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following is true of thoracic anatomy?",
      "options": [
        "A. The left lung has three lobes.",
        "B. The azygous vein runs along the left side draining into the subclavian vein.",
        "C. The vagus nerve runs anterior to the lung hilum.",
        "D. The sternocleidomastoid muscle is considered an accessory muscle to breathing.",
        "E. The phrenic nerve runs superior to the lung hilum."
      ],
      "answer": "D",
      "explanation": "*   Right lung has three lobes (upper, middle, lower); left lung has two lobes (upper, lower) and a lingula (extension of upper lobe).\n*   The azygous vein runs along the right side and drains into the superior vena cava.\n*   Breathing primarily uses the diaphragm, but accessory muscles (sternocleidomastoid, intercostal, anterior scalene, oblique) contribute up to 20% of work.\n*   Phrenic nerve runs anterior to the lung hilum; vagus nerve runs posterior.\n*   Azygous vein is typically divided in infants during esophageal atresia repair."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 35-year-old male with diffuse axonal injury following a motorcycle collision is recovering in the surgical intensive care unit (ICU). He has been intubated for 3 weeks. This morning the patient developed an endotracheal air leak that persisted even with tube exchange and hyperinflation. His abdomen appears distended. Bronchoscopy is performed and demonstrates yellow-colored secretions in both main stem bronchi. Which of the following is true?",
      "options": [
        "A. The patient should be switched to low tidal volume ventilation.",
        "B. Early conversion to tracheostomy decreases the risk for this complication.",
        "C. Nasogastric tube increases the risk for this complication.",
        "D. Low intracuff pressure contributes to the development of this complication.",
        "E. CT scan of the abdomen should be performed."
      ],
      "answer": "C",
      "explanation": "*   The patient has a tracheoesophageal fistula (TEF) due to prolonged intubation, the most common cause of benign TEF (up to 3% incidence in ventilated patients).\n*   Risk factors: high cuff pressure (most important), high airway pressure, excessive tube motion, prolonged intubation, esophagitis, hypotension, steroids, advanced age.\n*   Endotracheal tube placed against a rigid nasogastric tube can cause ischemic necrosis and abnormal communication.\n*   TEF presents post-extubation with food expectoration, deglutition-induced cough, and bronchopulmonary suppuration.\n*   In ventilated patients, TEF is suggested by persistent air leaks (even with hyperinflated cuff), abdominal distention (air entering the stomach), and bronchial contamination (food/bile-colored secretions).\n*   Diagnosis by bronchoscopy, confirmed by esophagram (water-soluble contrast).\n*   Repair is done after ventilator weaning, involving tracheal resection with primary anastomosis and esophageal flap reconstruction.\n*   Early tracheostomy has not shown to prevent TEF.\n*   Low tidal volume ventilation is preferred for ARDS.\n*   CT scan of the abdomen is not required."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 65-year-old man presents with anorexia, nausea, lethargy, and hyponatremia. A chest radiograph reveals a large right upper lobe nodule. This most likely represents:",
      "options": [
        "A. Adenocarcinoma",
        "B. Small cell carcinoma",
        "C. Squamous cell carcinoma",
        "D. Carcinoid",
        "E. Bronchoalveolar carcinoma"
      ],
      "answer": "B",
      "explanation": "*   The patient likely has Small Cell Lung Carcinoma (SCLC) with Syndrome of Inappropriate Antidiuretic Hormone (SIADH).\n*   SIADH is a paraneoplastic syndrome occurring in up to 40% of SCLC patients.\n*   Diagnosis involves hyponatremia, low serum osmolality, and high urine sodium/osmolality.\n*   Treatment for mild cases: free water restriction. For severe cases: hypertonic saline with loop diuretics.\n*   SIADH is uncommon with other listed tumors.\n*   Hypercalcemia is associated with squamous cell carcinoma due to PTH-related protein production."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is true regarding Lambert-Eaton myasthenic syndrome?",
      "options": [
        "A. Less than 50% will have a small cell carcinoma of the lung.",
        "B. 3,4-Diaminopyridine is not effective in treating symptoms.",
        "C. Intravenous (IV) immunoglobulin is effective in treating symptoms.",
        "D. Thymectomy is effective in patients in whom medical management fails.",
        "E. Patients present with distal muscle weakness."
      ],
      "answer": "C",
      "explanation": "*   Lambert-Eaton myasthenic syndrome (LEMS) is a paraneoplastic syndrome, particularly associated with small cell carcinoma (SCLC).\n*   Over 50% of LEMS patients have or will develop SCLC.\n*   LEMS presents with proximal muscle weakness and can be confused with myasthenia gravis.\n*   It's caused by antibodies against presynaptic calcium channels, preventing acetylcholine release.\n*   Treatment targets the underlying malignancy.\n*   Symptom-improving medications include 3,4-diaminopyridine, IV immunoglobulin, and steroids.\n*   Unlike myasthenia gravis, neostigmine is not helpful, and thymectomy is not effective for LEMS."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "The most common mediastinal tumor in children is:",
      "options": [
        "A. Neurogenic",
        "B. Lymphoma",
        "C. Thymoma",
        "D. Germ cell tumor",
        "E. Cyst"
      ],
      "answer": "A",
      "explanation": "*   Neurogenic tumors are the most common mediastinal tumors in children.\n*   They are usually in the posterior mediastinum, arising from sympathetic ganglia, intercostal nerves, or paraganglia cells.\n*   Neurilemmoma (schwannoma) is the most common type; others include gangliomas, neuroblastomas, and neurofibromas. Most are benign.\n*   Thymomas are the most common mediastinal neoplasm in adults, associated with syndromes like myasthenia gravis, red cell aplasia, aplastic anemia, Cushing syndrome, and hypogammaglobulinemia."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding tracheal anatomy?",
      "options": [
        "A. The blood supply is predominantly from the superior thyroid arteries.",
        "B. The rich collateral blood supply allows circumferential mobilization.",
        "C. As much as 50% of the length of the trachea can be resected with a primary anastomosis following resection.",
        "D. A tracheostomy tube is ideally placed through the first tracheal ring.",
        "E. The first complete cartilaginous ring is the thyroid cartilage."
      ],
      "answer": "C",
      "explanation": "*   The cricoid cartilage is the first complete cartilaginous ring of the airway.\n*   Tracheal blood supply is segmental, from inferior thyroid and bronchial arteries; each branch supplies 1-2 cm of trachea.\n*   Circumferential mobilization disrupts blood supply.\n*   Trachea has 18-22 rings, 10-13 cm long; up to 6 cm can be resected with primary anastomosis using laryngeal release procedures.\n*   Tracheostomy is ideally placed between the 2nd and 3rd or 3rd and 4th tracheal rings; higher placement increases stenosis risk, lower increases tracheoinnominate fistula risk."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "A 24-year-old woman presents with recurrent episodes of right-sided pneumothorax requiring chest tube insertion. A diagnosis of a catamenial pneumothorax as the cause of recurrent pneumothorax in this patient would be supported by the finding of:",
      "options": [
        "A. Pneumocystis",
        "B. Endometriosis",
        "C. Cystic fibrosis",
        "D. Idiopathic pulmonary fibrosis",
        "E. Apical blebs"
      ],
      "answer": "B",
      "explanation": "*   Catamenial pneumothorax is a rare cause of pneumothorax in women, occurring around menstruation.\n*   Etiology is unclear, but often associated with endometriosis and endometrial deposits on the pleura, causing irritation.\n*   Hormonal therapy is effective for recurrent attacks.\n*   If no endometriosis is evident and hormonal therapy fails, air may enter pleural cavity via diaphragmatic fenestrations (from peritoneal cavity, via fallopian tubes, due to cervical mucous plug loss during menstruation).\n*   Apical blebs and other choices are possible for spontaneous pneumothorax but less likely for catamenial type."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "A 40-year-old female undergoes drainage of a left-sided pleural effusion. Analysis of the fluid reveals 85% lymphocytes. The patient is initially managed with a medium chain triglyceride diet, but this fails to resolve the effusion. Drainage is 1.1 L per day over 5 days. Which of the following is the recommended management?",
      "options": [
        "A. Octreotide",
        "B. NPO and parenteral nutrition",
        "C. Video-assisted thoracoscopic surgery (VATS) via the left chest",
        "D. VATS via the right chest",
        "E. Left thoracotomy with thoracic duct ligation"
      ],
      "answer": "D",
      "explanation": "*   Most chylothorax cases are managed conservatively with NPO, MCT diet, tube thoracostomy, and parenteral nutrition (88% success).\n*   Failure predictors for conservative therapy: daily chyle leak > 1 L/day for > 5 days, or > 1.5 L in any 1 day; these patients need surgical intervention.\n*   VATS is less invasive and better tolerated than open thoracostomy for thoracic duct ligation.\n*   Most surgeons prefer right-sided ligation regardless of injury site, as the thoracic duct is more robust near the cisterna chyli, making it easier to find and ligate, and it stops flow from accessory ducts.\n*   VATS ligation has ~95% success rate.\n*   Octreotide and percutaneous thoracic duct embolization are newer options but not yet standard of care."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "The most common cause of lung abscess is:",
      "options": [
        "A. Aspiration",
        "B. Bronchial obstruction by tumor",
        "C. Pneumococcal pneumonia",
        "D. Pneumocystis jiroveci pneumonia",
        "E. Mycobacterium tuberculosis pneumonia"
      ],
      "answer": "A",
      "explanation": "*   Lung abscess typically results from aspiration leading to suppurative bacterial infection and localized pulmonary necrosis.\n*   Primary lung abscess (simple, nonspecific, putrid) shares risk factors with aspiration pneumonia: alcohol abuse, poor dentition/gum disease, seizure disorder, altered consciousness.\n*   Less common causes include bronchial obstruction by tumor (leading to postobstructive pneumonia), septic pulmonary emboli (from infected catheters/prosthetic devices), and opportunistic infections (Nocardia, M. tuberculosis) in immunocompromised hosts."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "The most common primary chest wall malignancy is:",
      "options": [
        "A. Osteochondroma",
        "B. Chondrosarcoma",
        "C. Ewing sarcoma",
        "D. Plasmacytoma",
        "E. Primitive neuroectodermal tumors"
      ],
      "answer": "B",
      "explanation": "*   Chondrosarcomas are the most common primary malignancy of the chest wall.\n*   They typically arise anteriorly.\n*   They are low-grade, slow-growing malignancies.\n*   Treatment is wide excision.\n*   They are not sensitive to chemotherapy or radiation."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "Which of the following is considered a contraindication to surgical resection of a primary (non-small cell) carcinoma of the lung?",
      "options": [
        "A. Invasion of the chest wall",
        "B. A positive ipsilateral mediastinal lymph node",
        "C. A malignant pleural effusion",
        "D. Stage 3A disease",
        "E. Invasion of parietal pericardium"
      ],
      "answer": "C",
      "explanation": "*   Stage 4 non-small cell lung cancer (NSCLC) is primarily treated with chemotherapy and radiation.\n*   Surgery may be used for symptom palliation (e.g., thoracentesis, pleural window).\n*   Malignant pleural effusion (effusion with malignant cells, M1a disease) is a marker for stage 4 disease and a contraindication to surgical resection.\n*   Other stage 4 diagnostic findings include distant metastases, positive contralateral mediastinal lymph node, and bilateral endobronchial tumor.\n*   Surgical resection is generally reserved for stages 1-3A.\n*   Relative contraindications: recurrent laryngeal nerve involvement, Horner syndrome, pericardial involvement, SVC syndrome.\n*   Surgery may be indicated for selected stage 3A patients with neoadjuvant chemo/radiotherapy.\n*   Positive ipsilateral mediastinal lymph node (N2, stage 3A) is potentially resectable.\n*   Contralateral mediastinal lymph node (N3) is stage 3B.\n*   5-year survival rates: Stage 1 (50%), Stage 2 (30%), Stage 3A (17%), Stage 3B (5%), Stage 4 (approaches zero)."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "A 47-year-old woman presents to the ED with worsening fatigue and moderate dyspnea on exertion. She is a lifelong nonsmoker. A chest radiograph demonstrates a 3-cm nodule in the periphery of the left lung with a mild pleural effusion. She reports night sweats and a 20-pound weight loss in the past 3 months. Which of the following is the most likely diagnosis?",
      "options": [
        "A. Squamous cell carcinoma",
        "B. Adenocarcinoma",
        "C. Small cell carcinoma",
        "D. Bronchoalveolar",
        "E. Carcinoid"
      ],
      "answer": "B",
      "explanation": "*   Adenocarcinoma is the most common lung cancer overall and in nonsmokers, and more common in women.\n*   It typically presents as a peripheral lesion.\n*   Given the patient's age, lifelong nonsmoking status, and chest radiograph findings, adenocarcinoma is the most likely diagnosis.\n*   Pleural effusion is concerning for stage 4 disease."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "Rasmussen aneurysms form in association with:",
      "options": [
        "A. Aspergillosis",
        "B. Mucormycosis",
        "C. Cryptococcosis",
        "D. Tuberculosis",
        "E. Small cell lung cancer"
      ],
      "answer": "D",
      "explanation": "*   Active tuberculosis can cause massive hemoptysis.\n*   Most hemoptysis is due to bronchial artery bleeding, managed by bronchial artery embolization.\n*   Rasmussen aneurysm, a rare cause of hemoptysis, is a pulmonary artery aneurysm adjacent to a tuberculous cavity.\n*   Rasmussen aneurysm is managed by pulmonary arteriography and selective distal embolization.\n*   CT scanning helps localize the bleeding source and guide intervention."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "Which one of the following statements is true regarding thymoma?",
      "options": [
        "A. The primary treatment modality is chemotherapy.",
        "B. Malignancy is determined by mitotic activity.",
        "C. The majority of patients with myasthenia gravis have an associated thymoma.",
        "D. In patients with myasthenia gravis, thymectomy results are more favorable in those without a thymoma than those with one.",
        "E. It is not associated with SVC syndrome."
      ],
      "answer": "D",
      "explanation": "*   Thymoma is the most common anterior mediastinal neoplasm.\n*   Malignancy is determined by local invasion (adjacent structures or capsular), not by cellular/histologic characteristics.\n*   Treatment is surgical resection. Radiotherapy is an adjunct for locally advanced cases (thymomas are radiosensitive).\n*   Up to 50% of thymoma patients have myasthenia gravis (MG) symptoms; <10% of MG patients have a thymoma on imaging.\n*   Thymectomy improves MG symptoms in ~90% of patients without thymoma, compared to ~25% of patients with thymoma.\n*   Large thymomas can cause SVC syndrome due to location."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "A woman who had an osteogenic sarcoma of the femur removed 2 years earlier now presents with two small lesions in the right lung and one small lesion in the left lung. A metastatic workup reveals no other abnormalities. The treatment of choice is:",
      "options": [
        "A. Bilateral wedge resections",
        "B. Chemotherapy",
        "C. Radiation therapy",
        "D. Immunotherapy with (bacille Calmette-Guérin) vaccine",
        "E. Observation"
      ],
      "answer": "A",
      "explanation": "*   Surgical resection of isolated lung metastases improves overall survival, especially for osteogenic sarcoma, and other malignancies.\n*   Pre-metastasectomy conditions: lung metastases present metachronously, primary tumor controlled, lesion completely resectable, no diffuse carcinomatosis.\n*   Pulmonary metastasis occurs in 40-60% of primary limb sarcomas within 3 years; 30-50% 5-year survival with metastasectomy.\n*   Solitary metastases generally have better prognosis, but multiple osteogenic sarcoma metastases treated with metastasectomy show similar positive results.\n*   Survival factors: disease-free interval from primary tumor to metastasis, surgical resectability, tumor doubling time, number of metastases."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "A 50-year-old Central American man presents with a chronic cough and a draining sinus in his left chest wall. Examination of the drainage reveals sulfur granules. Which of the following is true regarding this condition?",
      "options": [
        "A. Surgical resection is indicated.",
        "B. The organism involved is likely Nocardia asteroides.",
        "C. The organism involved is an anaerobe.",
        "D. Optimal treatment consists of trimethoprim-sulfamethoxazole.",
        "E. Central nervous system involvement is common."
      ],
      "answer": "C",
      "explanation": "*   Patient likely has actinomycosis, a chronic disease usually caused by *Actinomyces israelii*.\n*   Diagnosis is often delayed due to rarity and chronicity.\n*   Key diagnostic finding: chronic sinuses with discharge of purulent, yellow-brown sulfur granules.\n*   Organisms enter lungs via oral cavity; often uncultured as they are anaerobes.\n*   Lung involvement can cause progressive pulmonary fibrosis.\n*   CNS involvement is not common.\n*   Treatment: prolonged, high-dose penicillin.\n*   Surgery is generally not indicated, but pulmonary actinomycosis can be confused with lung cancer, leading to surgical intervention.\n*   *Nocardia asteroides* is a gram-positive rod mimicking fungi, causing nocardiosis in immunocompromised patients, associated with pneumonia, endocarditis, CNS abscess; treated with trimethoprim-sulfamethoxazole."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "A 65-year-old woman presents with a chronic nonproductive cough of 2 months duration. A chest radiograph reveals a 2-cm mass in the right upper lobe. A CT scan of the chest confirms the presence of the 2-cm mass corresponding to that found on the chest radiograph, which appears to be malignant, along with 5-mm nodes in the mediastinum. The next step in the management would be:",
      "options": [
        "A. Positron emission tomography (PET) scan",
        "B. Abdominal CT",
        "C. Bone scan",
        "D. Mediastinoscopy",
        "E. Brain CT"
      ],
      "answer": "A",
      "explanation": "*   Sequential workup for resectable lung cancer: CT scan of chest, then PET scan.\n*   If mediastinal lymph nodes are < 1 cm on CT, positive nodes are unlikely (<10%) but should be confirmed with PET.\n*   If mediastinal lymph nodes are >1 cm on CT or light up on PET, mediastinoscopy is indicated.\n*   PET scanning has replaced multiorgan scanning for distant metastases (liver, adrenal glands, bones).\n*   If PET detects potential metastasis, tissue diagnosis is crucial before denying resection."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "Four months after prolonged intubation after a motor vehicle accident, a 40-year-old woman presents with stridor and dyspnea on exertion. Endoscopy reveals marked tracheal stenosis 4 cm in length. Management consists of:",
      "options": [
        "A. Laser ablation",
        "B. Bronchoscopic dilation",
        "C. Primary resection of all scarred segments with primary anastomosis",
        "D. Primary resection of all scarred segments, primary anastomosis, and temporary tracheostomy",
        "E. Metal stenting"
      ],
      "answer": "C",
      "explanation": "*   Tracheal stenosis is most commonly caused by trauma from prolonged endotracheal intubation or tracheostomy.\n*   Risk increases with high tracheostomy placement (through first tracheal ring) or cricothyroidotomies.\n*   Presents with stridor and dyspnea on exertion, often 2-12 weeks post-decannulation/extubation, can be confused with asthma.\n*   Treatment is resection and primary anastomosis.\n*   Up to 6 cm of trachea can be resected with laryngeal release.\n*   Most patients can be immediately extubated without tracheostomy.\n*   Laser ablation, dilation, and stenting are not definitive treatments and are not indicated for circumferential scar or stenotic segments >1 cm."
    }
  ]
}
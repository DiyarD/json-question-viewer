{
    "chapter_name": "APPLIED ANATOMY",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "You are assisting with a primary open right inguinal hernia repair in a 27-year-old male. During the operation, the lead surgeon asks you to define the boundaries of the inguinal canal. Which of the following does not form part of the boundaries of the inguinal canal?",
            "options": [
                "A. Transversalis fascia and the conjoint tendon",
                "B. Inguinal ligament",
                "C. Pectineal ligament",
                "D. Aponeuroses of the external and internal oblique fibres",
                "E. Arching fibres of the internal oblique and transversus abdominis muscles"
            ],
            "answer": "C",
            "explanation": "The boundaries of the inguinal canal are as follows:\nAnteriorly: The aponeuroses of the external and internal oblique\nPosteriorly: The transversalis fascia, and medially, the conjoint tendon that is made up of the merging pubic attachments of the internal oblique and transversus abdominis aponeurosis\nSuperiorly (the roof): Arching fibres of the internal oblique and trans- versus abdominis\nInferiorly (the floor): The inguinal ligament which is the folded lower margin of the aponeurosis of the external oblique muscle\nAnswer C is the correct option due to the fact that the pectineal ligament, also known as the ligament of Sir Astley Cooper, forms the inferior bor- der of the femoral canal. Please refer to Chapter 16 for more information regarding the boundaries of the femoral canal."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "During a repair of a primary inguinal hernia, you are asked to name the nerve that is located within the spermatic cord. Which of the following is the nerve that is found within the spermatic cord?",
            "options": [
                "A. Ilioinguinal nerve",
                "B. Genitofemoral nerve",
                "C. Genital branch of the genitofemoral nerve",
                "D. Iliohypogastric nerve",
                "E. Lateral femoral cutaneous nerve"
            ],
            "answer": "C",
            "explanation": "The genital branch of the genitofemoral nerve forms part of the struc- tures found within the spermatic cord and supplies the cremasteric muscle (motor) and anterior scrotal skin (sensory). Other structures include the vas deferens, the testicular artery, cremasteric and vas def- erens, the pampiniform plexus, sympathetic nerve fibres and lymphatic vessels. The ilioinguinal nerve, which supplies sensation to the scrotum and medial aspect of the thigh, runs anteriorly to the spermatic cord. The iliohypogastric nerve and lateral femoral cutaneous nerve are not found within the spermatic cord. In addition to the genitofemoral nerve, ilioinguinal nerve, femoral nerve and obturator nerve, these nerves originate from the lumbar plexus (L1-L3 ventral primary rami and the superior branch of spinal nerve L4)."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "You are asked to assist the lead surgeon with a midline laparotomy in theatre. The patient has small bowel obstruction confirmed by CT imaging. Before the start of the operation, you are asked what layers, from superficial to deep, would be cut through during a midline laparotomy incision. Which of the following is the most likely answer?",
            "options": [
                "A. Skin, subcutaneous fat, Scarpa's fascia, external oblique, internal oblique, transversalis fascia, extraperitoneal fat and peritoneum",
                "B. Scarpa's fascia, skin, linea alba, transversalis fascia, extraperito- neal fat, subcutaneous fat and peritoneum",
                "C. Skin, Scarpa's fascia, linea alba, transversalis fascia, extraperito- neal fat, subcutaneous fat and peritoneum",
                "D. Linea alba, Scarpa's fascia, skin, external oblique, internal oblique, transversalis fascia, extraperitoneal fat, subcutaneous fat and peritoneum",
                "E. Skin, subcutaneous fat, Scarpa's fascia, linea alba, transversalis fascia, extraperitoneal fat and peritoneum"
            ],
            "answer": "E",
            "explanation": "The layers encountered during a midline laparotomy are skin, subcu- taneous fat, Scarpa's fascia, linea alba, transversalis fascia, extraperi- toneal fat and peritoneum. In the midline, the external and internal oblique muscles are absent. The linea alba is a fibrous aponeurotic structure that runs from the xiphoid process to the pubic symphysis. It divides the right and left rectus abdominis muscles."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "During an open repair of an abdominal aortic aneurysm, the consultant asks you to discuss the openings in the diaphragm. You discuss the structures that pass through the three main openings as well as the several smaller ones. Which of the following structures does not pass through one of the three main diaphragmatic openings?",
            "options": [
                "A. Aorta",
                "B. Left gastric artery",
                "C. Left phrenic nerve",
                "D. Inferior vena cava",
                "E. Oesophagus"
            ],
            "answer": "C",
            "explanation": "The diaphragm has three main openings as well as several smaller openings that transmit many structures. All structures mentioned in Answers A, B, D and E pass through the main openings of the diaphragm.\nThe three main openings are the following:\n1 The vena caval opening (at the level of T8 vertebra), which trans- mits the inferior vena cava and the right phrenic nerve\n2 The oesophageal opening (at the level of T10 vertebra), which trans- mits the oesophagus, the left gastric artery and vein, and the vagus nerve\n3 The aortic opening (at the level of the T12 vertebra), which transmits the aorta, the azygous vein and the thoracic duct\nThe other smaller openings transmit the splanchnic nerves, sympa- thetic trunk, subcostal nerve and vessels, left phrenic nerve, superior epigastric vessels and extraperitoneal lymph vessels."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "You are assisting with a total thyroidectomy for a patient who has a goitre and is experiencing compressive symptoms. The Surgical Registrar asks you to name the artery supplying the thyroid gland, which originates from the external carotid artery. From the list below, choose the most likely answer.",
            "options": [
                "A. Inferior thyroid artery",
                "B. Thyroid ima artery",
                "C. Superior thyroid artery",
                "D. Ascending pharyngeal artery",
                "E. Lingual artery"
            ],
            "answer": "C",
            "explanation": "The superior thyroid artery is the first branch of the external carotid artery and enters the upper pole of each lateral lobe of the thy- roid gland. The main arterial supply of the lower pole of the thyroid gland is the inferior thyroid artery originating from the thyrocervi- cal trunk, which is a branch of the first part of the subclavian artery. The thyroid ima artery, which is not always present, originates from either the aortic arch or the brachiocephalic trunk and enters the lower aspect of the thyroid isthmus. The ascending pharyngeal and lingual artery are branches of the external carotid that do not supply the thyroid gland."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "During a total thyroidectomy, the lead surgeon tells you that he must first iden- tify and then preserve a nerve that is situated near the thyroid gland. He also tells you that this nerve is at risk of injury during thyroidectomy procedures. Which of the following nerves is he referring to?",
            "options": [
                "A. External laryngeal nerve",
                "B. Vagus nerve",
                "C. Phrenic nerve",
                "D. Recurrent laryngeal nerve",
                "E. None of the above"
            ],
            "answer": "D",
            "explanation": "The recurrent laryngeal nerve is most at risk of damage during thyroid operations. This nerve must be visualized and protected before the removal of thyroid gland. In the case of thyroid lobectomies, the ipsilateral recur- rent laryngeal nerve to the thyroid lobe being resected must be visualized and protected. Damage to this nerve will cause temporary or permanent hoarseness of voice, dependent on the extent of the nerve injury. The recurrent laryngeal nerve passes upwards in the trachea-oesoph- ageal groove to lie immediately behind the cricothyroid joint. The recurrent laryngeal nerve then enters the larynx deep to the inferior constrictor of the pharynx. The nerve tends to divide into two branches at the level of the thyroid isthmus. The recurrent laryngeal nerve is closely related to the inferior thyroid artery, but this may vary. On the left side, the nerve lies behind the inferior thyroid artery while on the right it can be situated behind or between the branches of the inferior thyroid artery. The external laryngeal nerve (Answer A) is situated posterior to the superior thyroid artery and is unlikely to be injured providing that the superior thyroid artery is ligated close to the upper pole. In addition, the phrenic and vagus nerves are also not usually at risk of injury during thyroid procedures."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "You are shadowing the Breast Surgery Consultant during a clinical consultation. He begins to explain that he has a patient who is due for a right-sided axillary lymph node clearance the following day. He tells you that he will perform a Level 3 axillary lymph node clearance. From the list below, please select the answer that best describes the location of Level 3 axillary lymph nodes.",
            "options": [
                "A. Lateral to pectoralis minor",
                "B. Posterior to pectoralis minor",
                "C. Posterior to pectoralis major",
                "D. Anterior to pectoralis major",
                "E. Superomedial to pectoralis minor"
            ],
            "answer": "E",
            "explanation": "Axillary lymph nodes can be described anatomically with regard to their positional relationship with the pectoralis minor muscle. Level 1 nodes are positioned below the inferior edge of the pectoralis minor muscle, Level 2 nodes are found behind the pectoralis minor and Level 3 nodes are superomedial to the pectoralis minor muscle. There are inter- pectoral nodes (Rotter's nodes) situated between the pectoralis major muscle and pectoralis minor muscle."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "You examine a 35-year-old female patient who presents with a right parotid swelling. Which of the following structures does not lie within the parotid gland?",
            "options": [
                "A. Mandibular nerve",
                "B. External carotid artery",
                "C. Facial nerve",
                "D. Marginal mandibular nerve",
                "E. Retromandibular vein"
            ],
            "answer": "A",
            "explanation": "From superficial to deep, the following structures all lie within the parotid gland:\n• Facial nerve\n• Retromandibular vein\n• External carotid artery\nThe marginal mandibular nerve is a branch of the facial nerve. The facial nerve enters the parotid gland as it emerges from the stylomas- toid foramen, giving rise to five branches (temporal branch, zygomatic branch, buccal branch, marginal mandibular nerve and cervical branch) within the parotid gland.\nAnswer A is correct as the mandibular nerve (V3) is the third main branch of the trigeminal nerve (cranial nerve 5) and does not lie within the parotid gland. The other two main branches of the trigeminal nerve are the ophthalmic (V₁) and the maxillary (V2) nerves."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "A patient is admitted following a road traffic accident. He has a suspected liver laceration and is taken to theatre for a laparotomy. The surgeon performing the procedure asks you to name the other intraperitoneal organs within the abdomen. Which of the following abdominal organs is not classified as intraperitoneal?",
            "options": [
                "A. Ureters",
                "B. Transverse colon",
                "C. Stomach",
                "D. Gallbladder",
                "E. Caecum"
            ],
            "answer": "A",
            "explanation": "Intraperitoneal organs are found between the parietal peritoneum and the abdominal wall and are suspended by mesentery. Retroperitoneal organs lie behind the peritoneum in the abdominal cavity.\nThe ureters are retroperitoneal structures along with the following:\n• Kidneys\n• Adrenal glands\n• Ascending and descending colon\n• Splenic and hepatic flexures\n• Most of the pancreas except the tail\n• Second to fourth parts of the duodenum\n• Inferior vena cava\n• Aorta (including surrounding lymph nodes)\n• Urinary bladder\n• Vagina\nIntraperitoneal organs include the following:\n• Stomach\n• First part of the duodenum\n• Jejunum\n• Ileum\n• Transverse colon\n• Tail of the pancreas\n• Appendix\n• Caecum\n• Gallbladder\n• Uterus\n• Ovaries"
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "You are assisting a bypass grafting procedure in theatre. Your senior colleague asks you to show him from where the common femoral artery arises. From the list below, choose the statement that best describes the anatomical landmark and course of the common femoral artery.",
            "options": [
                "A. As the external iliac artery passes over the inguinal ligament, it becomes the common femoral artery, and gives off the superficial femoral artery before continuing down to the thigh, medial to the femur, as the profunda femoris artery",
                "B. As the internal iliac artery passes under the inguinal ligament, it becomes the common femoral artery, and gives off the profunda femoris artery before continuing down to the thigh, medial to the femur, as the superficial femoral artery",
                "C. As the external iliac artery passes under the inguinal ligament, it becomes the common femoral artery, and gives off the profunda femoris artery before continuing down to the thigh, medial to the femur, as the superficial femoral artery",
                "D. As the internal iliac artery passes over the inguinal ligament, it becomes the common femoral artery and gives off the profunda",
                "E. femoris artery before continuing down to the thigh, medial to the femur, as the superficial femoral artery"
            ],
            "answer": "C",
            "explanation": "Bypass grafting is usually performed on patients with critical ischaemia and when percutaneous transluminal angioplasty (with or without stent- ing) has failed or is not suitable. The procedure involves diverting blood from the proximal artery, above the site of occlusion, distally. Reversed autologous vein (e.g. long saphenous vein) grafts or synthetic polytetra- fluoroethylene or Dacron grafts can be used. Vein grafts are more effective and remain patent longer compared with synthetic grafts. Vein grafts are indicated for occlusions below the inguinal ligament, whereas synthetic grafts are indicated for occlusions above the inguinal ligament. Bypass procedures can be classified as anatomical (e.g. femoropopliteal bypass) and extra-anatomical (e.g. axillofemoral or axillobifemoral bypass)."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "A 35-year-old female has suffered a road traffic accident while coming off her motorbike at 25 mph during a head-on collision with a car. On arrival to the emergency department, she is found to have a pneumothorax following review of her trauma series imaging. You assist the Surgical Registrar in siting a chest drain. Which of the following structures does not form part of the layers encoun- tered when inserting a chest drain?",
            "options": [
                "A. Serratus anterior",
                "B. External intercostal muscle",
                "C. Scarpa's fascia",
                "D. Innermost intercostal muscle",
                "E. Endothoracic fascia"
            ],
            "answer": "C",
            "explanation": "On insertion of the chest drain, the following structures are encoun- tered from superficial to deep:\n• Skin\n• Subcutaneous fat\n• Superficial fascia\n• Serratus anterior muscle\n• External intercostal muscle\n• Internal intercostal muscle\n• Innermost intercostal muscle\n• Endothoracic fascia\n• Parietal pleura\nScarpa's fascia is the deep layer of superficial fascia found in the lay- ers of the anterior abdominal wall. It is deep to Camper's fascia and lies superficial to the external oblique muscle. It the midline, it lies between the subcutaneous fat and the linea alba. As Scarpa's fascia is found in the abdominal wall, it does not form part of the layers encoun- tered during insertion of a chest drain."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "During a radiological meeting at your local hospital, the Consultant Radiologist is commenting on the intra-abdominal structures found at the level of the transpyloric plane of Addison on a CT scan. At what vertebral level does this plane pass through?",
            "options": [
                "A. At the level of the first lumbar vertebra (L1)",
                "B. At the level of the fourth lumbar vertebra (L4)",
                "C. At the level of the third lumbar vertebra (L3)",
                "D. At the level of the second lumbar vertebra (L2)",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "The transpyloric plane of Addison passes through the body of the first lumbar vertebra. This plane is a point midway between the suprasternal notch of the manubrium and the upper border of the symphysis pubis. This plane marks the level at which many important structures are seen, which include the hilum of the kidneys and their corresponding vascular supply, termination of the spinal cord, junction of the superior mesenteric and splenic vein to form the origin of the hepatic portal vein, pylorus, the first (see Question 17) part of the duodenum, hilum of the spleen, duodenojejunal junction, attachment of the transverse mesocolon, the origin of the superior mesenteric artery at the aorta, the neck of the pancreas and the fundus of the gallbladder."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "A patient undergoes a laparotomy for large-bowel obstruction secondary to an obstructing sigmoid colonic lesion confirmed on a CT scan. The Surgical Registrar asks you about the formation of the marginal artery of Drummond. Which two vessels from the list below anastomose to form the marginal artery of Drummond?",
            "options": [
                "A. Inferior mesenteric artery and the splenic artery",
                "B. Superior mesenteric artery and the splenic artery",
                "C. Inferior mesenteric artery and middle rectal artery",
                "D. Superior mesenteric artery and inferior mesenteric artery",
                "E. Inferior mesenteric artery with superior rectal artery"
            ],
            "answer": "D",
            "explanation": "The superior mesenteric artery and the inferior mesenteric artery form an important anastomosis that runs along the whole length of the large bowel forming a continuous vascular arcade. This is known as the marginal artery of Drummond. There is a watershed area, formed between these two vascular territories at the splenic flexure of colon."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 45-year-old man undergoes emergency laparotomy for suspected intra- abdominal trauma. A large liver laceration is detected during laparotomy and the bleeding is difficult to control. The Consultant locates the free edge of the lesser omentum and performs Pringle's manoeuvre to control the haemorrhage. From the list below, which structures are found within the free edge of the lesser omentum?",
            "options": [
                "A. Common hepatic artery, cystic duct and hepatic vein",
                "B. Hepatic artery and inferior vena cava",
                "C. Hepatic artery and common bile duct",
                "D. Hepatic portal vein, cystic duct and hepatic artery",
                "E. Hepatic portal vein, hepatic artery and common bile duct"
            ],
            "answer": "E",
            "explanation": "The free edge of the lesser omentum, which also forms the anterior bor- der of the foramen of Winslow, contains the portal triad of the hepatic portal vein (posteriorly), the common bile duct on the right and the hepatic artery on the left (anteriorly). Pringle's manoeuvre is performed by compressing the portal triad with the finger and thumb. This manoeuvre is performed to temporarily arrest the inflow of blood to the liver to control haemorrhage from the liver."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "During a ward round, you are asked to review a chest radiograph of a 45-year- old female who experienced difficulty breathing 1 day post laparoscopic cho- lecystectomy. You are quizzed about the contents of the mediastinum. From the list below, which structure does not form part of the contents of the mediastinum?",
            "options": [
                "A. Thymus",
                "B. Trachea",
                "C. Great vessels",
                "D. Thoracic duct",
                "E. None of the above"
            ],
            "answer": "E",
            "explanation": "The mediastinum is the central compartment of the thorax situated between the two pleural sacs. The mediastinum can be divided into two parts:\n1 The superior mediastinum that extends from the thoracic inlet to a plane at the level of the sternal angle and the T4/5 intervertebral disc\n2 The inferior mediastinum that extends from the sternal angle and T4/5 intervertebral disc to the diaphragm\nThe contents of the superior mediastinum include the superior vena cava, arch of the aorta, trachea, phrenic nerves, thoracic duct, oesopha- gus, vagus nerves, left recurrent laryngeal nerve and thymus gland.\nThe inferior mediastinum can be further divided into the following:\n1 Anterior (containing fat and remnants of the thymus gland)\n2 Middle (containing the heart, surrounding pericardium and the roots of the great vessels; ascending aorta, superior vena cava and pulmonary trunk)\n3 Posterior (containing the lower part of the oesophagus, descend- ing aorta, thoracic duct, tracheobronchial lymph nodes, azygous and hemiazygous veins, thoracic sympathetic trunks and thoracic splanchnic nerves)\nAnswer E is correct as Answers A-D are all found within the mediastinum."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "You are reviewing a contrast CT of the thoracic aorta of a 65-year-old patient who has suspected aortic dissection. The radiologist asks you to name the branches of the thoracic aorta. Which of the following is not a branch of the thoracic aorta?",
            "options": [
                "A. Subcostal artery",
                "B. Bronchial artery",
                "C. Coeliac trunk",
                "D. Oesophageal artery",
                "E. Pericardial artery"
            ],
            "answer": "C",
            "explanation": "The thoracic aorta commences at the lower border of T4 and ends at T12 where the aorta leaves the thorax, by passing through the diaphragm between the crura, and continues as the abdominal aorta. The branches of the thoracic aorta include nine pairs of posterior intercostal arteries, subcostal arteries, bronchial arteries, oesophageal arteries, pericardial arteries and a branch of the phrenic artery. The abdominal aorta continues as it leaves the thorax through the dia- phragm and ends at the level of L4 where it bifurcates into the common iliac arteries. The branches of the abdominal aorta include the infe- rior phrenic arteries, coeliac trunk, superior mesenteric artery, inferior mesenteric artery, suprarenal arteries, renal arteries, testicular/ovarian arteries and four pairs of lumbar branches."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "You are in the endoscopy unit observing an endoscopic retrograde cholangio pancreatogram for a patient with deranged liver function tests also presenting with jaundice. The Consultant explains to you that he must get to the part of the duodenum where the duodenal papilla is located. From the list of answers below, which part of the duodenum is the Consultant referring to?",
            "options": [
                "A. First part (D1)",
                "B. Second part (D2)",
                "C. Third party (D3)",
                "D. Fourth part (D4)",
                "E. Fifth part (D5)"
            ],
            "answer": "B",
            "explanation": "The duodenum is anatomically divided into four parts. The first part (D1) lies at the level of L1, the second part (D2) lies at the level of L2, the third part (D3) lies at the level of L3 and the fourth part (D4) at the level of L2. Within the second part (D2), the major duodenal papilla is situated where the ampulla of Vater, made up of the common bile duct and major pancreatic duct, opens into the duodenum."
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "You see a 60-year-old female presenting with haematemesis. An upper gastro- intestinal endoscopy reveals bleeding oesophageal varices. From the list below, select the answer that corresponds to the correct number of areas of portosys- temic anastomoses present in the abdomen.",
            "options": [
                "A. 1",
                "B. 2",
                "C. 3",
                "D. 4",
                "E. 5"
            ],
            "answer": "E",
            "explanation": "Portosystemic anastomoses do not become clinically significant until there is evidence of portal hypertension that prevents normal portal venous drainage. This results in the development of a collateral circula- tion leading to clinical conditions such as bleeding oesophageal varices. There are five areas of portosystemic anastomoses: (1) lower oesopha- gus, (2) rectal, (3) bare area of the liver, (4) peri-umbilical area and (5) retroperitoneum."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "A 16-year-old male suffers a head injury and subsequent loss of consciousness while playing rugby. The site of impact was the right temporoparietal region and a CT scan of the head reveals a right-sided extradural haematoma with minimal midline shift. The Radiologist suspects that a branch of the middle meningeal artery is the cause of the extradural haematoma. The patient is taken urgently to theatre to evacuate the haemorrhage. From the list below, select the skull foramina through which the middle meningeal artery passes.",
            "options": [
                "A. Foramen ovale",
                "B. Foramen spinosum",
                "C. Foramen lacerum",
                "D. Jugular foramen",
                "E. Carotid canal"
            ],
            "answer": "B",
            "explanation": "The middle meningeal vessels run through the foramen spinosum to supply the dura mater. The middle meningeal artery is the largest of the three arteries that supply the meninges. The other two arteries are the anterior and posterior meningeal arteries. The anterior branch of the middle meningeal artery courses underneath the pterion where it is at risk of injury. The mandibular division of the trigeminal nerve passes through the foramen ovale. The carotid canal transmits the internal carotid artery and sympathetic plexus. The jugular foramen transmits the inter- nal jugular vein, glossopharyngeal nerve, vagus and accessory nerve. The internal carotid artery passes into the foramen lacerum from the carotid canal."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "You are observing a tracheostomy being sited in theatre for a patient who has suffered extensive facial trauma. Which of the following structures is not encountered and traversed during insertion of a tracheostomy?",
            "options": [
                "A. Platysma muscle",
                "B. Thyroid isthmus",
                "C. Strap muscles",
                "D. Sternocleidomastoid muscle",
                "E. Investing layer of deep cervical fascia"
            ],
            "answer": "D",
            "explanation": "The following structures are encountered and divided to allow for pas- sage of the tracheostomy tube, from superficial to deep: skin, subcu- taneous fat, platysma muscle, investing layer of deep cervical fascia, strap muscles (sternohyoid and sternothyroid muscles that are retracted as opposed to being cut), pre-tracheal fascia, thyroid isthmus (which is ligated and divided) and the trachea."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "A 25-year-old male sustains a right tibia and fibula fracture. He is unable to dor- siflex his right foot and has lost sensation to the dorsum of his right foot. From the list below, select the nerve that is likely to have been damaged.",
            "options": [
                "A. Medial plantar nerve",
                "B. Lateral plantar nerve",
                "C. Sciatic nerve",
                "D. Tibial nerve",
                "E. None of the above"
            ],
            "answer": "E",
            "explanation": "This patient is suffering from a common peroneal (fibular) nerve injury. The sciatic nerve runs down to the posterior aspect of the mid-thigh in the region of the apex of the popliteal fossa where it divides into its terminal branches: the tibial nerve and the common peroneal nerve (or common fibular nerve). The tibial nerve innervates both superficial and deep muscles of the posterior compartment of the leg and provides sensory innervation to the posterior aspect of the leg and the sole of the foot. The tibial nerve terminates by bifurcating into the medial and lateral plantar nerves in the sole of the foot. The common peroneal nerve travels around the neck of the fibula in the superficial position where it is vulnerable to injury. Near the neck of the fibula, the common peroneal nerve divides into superficial (motor to the lateral compartment of the leg and sensory to the anterolateral aspect of the leg and the dorsum of the foot) and deep branches (motor to the anterior compartment of the leg, which involves muscles that dorsiflex the foot and extend the toes, and sensory to the webspace between the hallux and the second digit)."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "You are observing an open carpal tunnel decompression in theatre. Which of the following structures is not at risk during this procedure?",
            "options": [
                "A. Posterior interosseous nerve",
                "B. Palmar cutaneous branch of the median nerve",
                "C. Median nerve",
                "D. Superficial palmar arch",
                "E. Recurrent branch of the median nerve"
            ],
            "answer": "A",
            "explanation": "In an open carpal tunnel decompression, the structures that are at risk of damage are the flexor tendons passing through the carpal tunnel, the superficial palmar arch, the median nerve, the ulnar nerve as it passes through the flexor retinaculum, the recurrent branch of the median nerve that provides motor innervation to the thenar muscles and the palmar cutaneous branch of the median nerve. The posterior interosseous nerve is a continuation of the deep branch of the radial nerve. This nerve does not pass through the carpal tunnel but courses down the arm to the dorsal surface of the forearm supply- ing all the muscles on the radial side and dorsal surface of the forearm (excluding anconeus, brachioradialis and extensor carpi radialis longus that are supplied by the radial nerve)."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "A 49-year-old male is undergoing an elective low anterior resection for a rectal adenocarcinoma. Having studied the blood supply to the large bowel, you are asked about the arterial supply to the rectum. From the list below, choose the artery that contributes to the vascular supply to the rectum.",
            "options": [
                "A. Superior mesenteric artery",
                "B. Left gastric artery",
                "C. Gastroduodenal artery",
                "D. Splenic artery",
                "E. Internal pudendal artery"
            ],
            "answer": "E",
            "explanation": "The rectum is supplied by the superior, middle and inferior rectal arter- ies. The superior rectal artery is a continuation of the inferior mesen- teric artery. The middle rectal artery is a branch of the internal iliac artery and the inferior rectal artery is a branch of the internal pudendal artery. The superior mesenteric artery supplies the bowel (midgut) from the second part of the duodenum through two-thirds of the transverse colon. It also supplies the pancreas via the inferior pancreatoduodenal artery. The left gastric, splenic and gastroduodenal arteries are branches of the coeliac axis that supplies structures of the foregut (oesophagus, stom- ach, spleen, liver and superior parts of the duodenum and pancreas)."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "You are examining a patient and looking for the second intercostal place by fınd- ing the manubriosternal junction (also known as the ‘angle of Louis'). From the list below, choose the vertebral level that corresponds to the manubriosternal junction.",
            "options": [
                "A. T1",
                "B. T2",
                "C. T3",
                "D. T4",
                "E. T5"
            ],
            "answer": "D",
            "explanation": "The manubriosternal junction, also known as the sternal angle or 'angle of Louis', is at the level of the second costal cartilage towards the lower border of the T4 vertebra."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "A 12-year-old boy is suspected to have a right-sided testicular torsion and is taken urgently to theatre for a scrotal exploration. Which of the following struc- tures is not encountered during a scrotal exploration?",
            "options": [
                "A. Dartos muscle",
                "B. Tunica vaginalis",
                "C. External oblique muscle",
                "D. Cremaster fascia and muscle",
                "E. External spermatic fascia"
            ],
            "answer": "C",
            "explanation": "The external oblique muscle is not encountered during a scrotal exploration; however, the external spermatic fascia, derived from the aponeurosis of the external oblique muscle, covers the testis during embryological descent and is encountered during scrotal exploration. From superficial to deep, the structures that must be traversed are the skin, subcutaneous tissue containing the dartos fascia and mus- cle (which is a continuation of Camper's fascia) instead of fat, exter- nal spermatic fascia, cremaster muscle and fascia (derived from the internal oblique muscle), internal spermatic fascia (from the trans- versalis fascia) and the tunica vaginalis derived from the abdominal peritoneum."
        }
    ]
}
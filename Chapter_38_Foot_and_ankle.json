{
    "chapter_name": "Foot and ankle",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "Regarding foot and ankle anatomy, which of the following statements are true?",
            "options": [
                "A The subtalar joint is responsible for inversion and eversion of the hindfoot.",
                "B The third metatarsal head is recessed to act as a 'keystone' in the transverse arch.",
                "C The windlass test assesses the integrity of the flexor muscles in the sole of the foot.",
                "D The saphenous artery contributes to the blood supply of the foot.",
                "E The first dorsal web space of the foot is supplied by the superficial peroneal nerve."
            ],
            "answer": "A",
            "explanation": "Dorsiflexion and plantar flexion occur almost exclusively at the ankle (tibiotalar) joint, while inversion and eversion occur at the subtalar joint. The subtalar joint along with the talonavicular and calcanecuboid joints make up the triple-joint complex. The talus is narrower posteriorly, allowing increased rotatory mobility to the plantar flexed foot. In dorsiflexion, the talus jams tightly in the mortice, externally rotating the fibula and foot. The midfoot has a longitudinal and a transverse arch. The second (not the third) metatarsal head is recessed to act as a keystone to this transverse arch. When the second tarsometatarsal joint is injured (Lisfranc), there is subsequent dysfunction of the transverse arch producing and an acquired flat-foot appearance. The ‘windlass' test consists of asking the patient to stand on tiptoe. This tightens the plantar fascia (not the muscles), and if this and the arch of the foot are intact, the longitudinal arch becomes more pronounced. The blood supply to the foot is from the anterior and posterior tibial arteries and the peroneal artery. The skin on dorsum of the foot is supplied by the superficial peroneal nerve, but the first dorsal web space is supplied by the deep peroneal nerve (Figure 38.1)."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "Regarding compartments of the leg, which of the following structures are not found within the anterior compartment of the leg?",
            "options": [
                "A Deep peroneal nerve",
                "B Extensor hallucis longus",
                "C Peroneus tertius",
                "D Tibial nerve",
                "E Tibialis anterior"
            ],
            "answer": "D",
            "explanation": "The tibial nerve is found in the deep posterior compartment of the leg, with all the other structures located in the anterior compartment (Table 38.1). The lower leg contains four compartments contained within fascia and separated by interosseous membranes."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "Regarding hallux valgus, which of the following statements are false?",
            "options": [
                "A Deviation of the hallux is away from the midline.",
                "B It is more commonly seen in men.",
                "C There is a genetic component.",
                "D It can be associated with pain.",
                "E Hammering of the second toe can occur."
            ],
            "answer": "B",
            "explanation": "Hallux valgus is characterised by lateral deviation and rotation of the hallux away from the midline, with an associated medial deviation of the first metatarsal. Bilateral involvement is common and more frequently affects women. Risk factors include a genetic predisposition, pes planus, rheumatoid, cerebral palsy, ligamentous laxity and high-heeled or narrow shoes. Patients present with pain, swelling and deformity in the region of the first MTPJ. The hallux might overlap the second and third toes. The medial prominence (bunion) is irritated by footwear creating a red thickened area of skin, a bursa (hypertrophy) and an osteophyte over the underlying bone. Pain can radiate across the metatarsal heads (metatarsalgia) and associated deformities may be found, e.g., hammering of the second toe, callosity over second MTPJ. Radiographs of the feet will help to determine the severity of the deformity, with the common angles measured being the following: • Intermetatarsal angle (normal <9 degrees) • MTP angle (normal <15 degrees) Initially, management is with shoe modification (wide and comfortable shoes) and orthotic insoles when indicated. Surgery is indicated for ongoing symptoms despite conservative measures and is determined by the severity of the deformity. Procedures include first ray metatarsal osteotomy (e.g., Scarf), proximal phalanx osteotomy (e.g., Akin), soft-tissue releases and, in severe cases, joint arthrodesis. Complications include recurrence, AVN and (transfer) metatarsalgia."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "Regarding acquired pes planus, which of the following is not classically associated with the deformity?",
            "options": [
                "A Tibialis posterior tendon dysfunction",
                "B Tarsometatarsal osteoarthritis",
                "C Charcot-Marie Tooth",
                "D Hindfoot osteoarthritis",
                "E Tarsal coalition"
            ],
            "answer": "C",
            "explanation": "Charcot-Marie Tooth is classically associated with a pes cavus deformity of the foot. Pathological causes for acquired club foot include the following: • Tibialis posterior tendon dysfunction • Hindfoot and tarsometatarsal osteoarthritis Seronegative and inflammatory arthropathy • Charcot neuropathy • Tarsal coalition Post-traumatic, e.g., spring ligament rupture On clinical assessment patients have loss of the normal arch (pes planus), difficulty standing on tiptoes on the affected side, the hindfoot may not pull into varus, i.e., planovalgus deformity and there can be forefoot abduction (too many toes sign). Grading takes into account the degree of deformity and whether it is flexible."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "Regarding arthritis of the ankle (tibiotalar joint) and hindfoot, which of the following statements are false?",
            "options": [
                "A Ankle replacement is indicated in low-demand patients with mild to moderate deformity.",
                "B Arthrodesis is indicated in high-demand patients.",
                "C Osteophyte removal can be effective for impingement with no significant osteoarthritis.",
                "D For single joint hindfoot arthritis, triple fusion is still the treatment of choice.",
                "E Knee deformities should be assessed and treated prior to surgery for foot or ankle problems."
            ],
            "answer": "D",
            "explanation": "Ankle replacement (Figure 38.2) provides a good outcome in lower-demand patients in whom there is not a severe deformity. Arthrodesis remains the operation of choice for the patient with significant deformity or high-demand patients. In an ankle where a prominent osteophyte can be seen, which is impinging (local anaesthetic injection relieves the pain), osteophyte removal might produce a significant decrease in pain and range of movement. This does not routinely work if there is significant arthritis. It used to be thought that fusion of only one joint in the hindfoot merely produced a rapid deterioration in the other joints. This is now known not to be the case, so single fusion of affected joints is a viable option for a stiff and painful hindfoot. Deformities in the knee produce highly abnormal forces in the foot, which will compromise any attempts to correct any foot pathology. It is therefore generally important to manage problems in the knee before embarking on surgery in the foot."
        },
        {
            "id": 6,
            "question_type": "emq",
            "question": "A 14-year-old boy presents with pain in the foot. On examination, there is a flatfoot deformity that does not correct when he stands up on tiptoes.",
            "options": {
                "items": [
                    "A 14-year-old boy presents with pain in the foot. On examination, there is a flatfoot deformity that does not correct when he stands up on tiptoes.",
                    "B A 6-year-old child with cerebral palsy is toe-walking and is referred for assessment and management to aid her to walk on the soles of her feet (plantigrade).",
                    "C A 38-year-old runner complains of increasing pain in her right big toe that she fractured many years ago. The first metatarsophalangeal joint is red dorsally and has a very limited range of painful movement. The patient wants to be able to continue running.",
                    "D A 9-year-old boy with a family history of a progressive neurological disorder affecting the lower limbs presents with problems in his feet. The arches are very high and the toes bent up so that they rub on his shoes."
                ],
                "choices": [
                    "1 Charcot-Marie Tooth",
                    "2 Curly toes",
                    "3 Hallux rigidus",
                    "4 Hallux valgus",
                    "5 Hammer toes",
                    "6 Mallet toes",
                    "7 Physiological flatfoot",
                    "8 Tarsal coalition",
                    "9 Tight tendo Achilles"
                ]
            },
            "answer": {
                "A": "8"
            },
            "explanation": "A flat foot that does not form an arch when the patient stands on tiptoes (windlass test) indicates that there is a structural abnormality such as a tarsal coalition in the foot. The bones most frequently affected are calcaneonavicular and subtalar. Clinical assessment could reveal pes planus, hindfoot valgus, forefoot abduction and calf pain secondary to peroneal spasticity. In the first instance, treatment is nonoperative as the majority are found incidentally and asymptomatic. However, if this fails, resection of the coalition or even arthrodesis may be needed."
        },
        {
            "id": 7,
            "question_type": "emq",
            "question": "A 6-year-old child with cerebral palsy is toe-walking and is referred for assessment and management to aid her to walk on the soles of her feet (plantigrade).",
            "options": {
                "items": [
                    "A 14-year-old boy presents with pain in the foot. On examination, there is a flatfoot deformity that does not correct when he stands up on tiptoes.",
                    "B A 6-year-old child with cerebral palsy is toe-walking and is referred for assessment and management to aid her to walk on the soles of her feet (plantigrade).",
                    "C A 38-year-old runner complains of increasing pain in her right big toe that she fractured many years ago. The first metatarsophalangeal joint is red dorsally and has a very limited range of painful movement. The patient wants to be able to continue running.",
                    "D A 9-year-old boy with a family history of a progressive neurological disorder affecting the lower limbs presents with problems in his feet. The arches are very high and the toes bent up so that they rub on his shoes."
                ],
                "choices": [
                    "1 Charcot-Marie Tooth",
                    "2 Curly toes",
                    "3 Hallux rigidus",
                    "4 Hallux valgus",
                    "5 Hammer toes",
                    "6 Mallet toes",
                    "7 Physiological flatfoot",
                    "8 Tarsal coalition",
                    "9 Tight tendo Achilles"
                ]
            },
            "answer": {
                "B": "9"
            },
            "explanation": "Patients with cerebral palsy may toe-walk, partly because they often have a tight tendo Achilles, but also because the loads transmitted through to the tibia help them to stand and walk. Fixed-flexion deformities of both the hip and knee can occur. Problems might be compounded by weak or uncoordinated hip and knee extensors, so standing on tiptoes helps to prevent the knee from collapsing. If the tendo Achilles is lengthened without thinking about this, the child might be able to stand plantigrade but the knee will then collapse. It is therefore important that there is a thorough gait analysis before any surgery is undertaken."
        },
        {
            "id": 8,
            "question_type": "emq",
            "question": "A 38-year-old runner complains of increasing pain in her right big toe that she fractured many years ago. The first metatarsophalangeal joint is red dorsally and has a very limited range of painful movement. The patient wants to be able to continue running.",
            "options": {
                "items": [
                    "A 14-year-old boy presents with pain in the foot. On examination, there is a flatfoot deformity that does not correct when he stands up on tiptoes.",
                    "B A 6-year-old child with cerebral palsy is toe-walking and is referred for assessment and management to aid her to walk on the soles of her feet (plantigrade).",
                    "C A 38-year-old runner complains of increasing pain in her right big toe that she fractured many years ago. The first metatarsophalangeal joint is red dorsally and has a very limited range of painful movement. The patient wants to be able to continue running.",
                    "D A 9-year-old boy with a family history of a progressive neurological disorder affecting the lower limbs presents with problems in his feet. The arches are very high and the toes bent up so that they rub on his shoes."
                ],
                "choices": [
                    "1 Charcot-Marie Tooth",
                    "2 Curly toes",
                    "3 Hallux rigidus",
                    "4 Hallux valgus",
                    "5 Hammer toes",
                    "6 Mallet toes",
                    "7 Physiological flatfoot",
                    "8 Tarsal coalition",
                    "9 Tight tendo Achilles"
                ]
            },
            "answer": {
                "C": "3"
            },
            "explanation": "Hallux rigidus is arthritis of the first MTPJ. There is commonly a history of trauma or micro trauma. Other potential causes should be considered, e.g., gout, inflammatory arthopathies. Clinical presentation is with progressive pain, swelling and stiffness over the first MTPJ, especially at toe-off. There is a reduced range of movement, particularly in dorsiflexion because of dorsal osteophyte formation. Radiographs confirm the diagnosis. Management can be with modified footwear (stiff-soled, deep toe box), but in a patient with high demands, a MTPJ fusion can be considered. When there are dorsal osteophytes but minimal evidence of arthritis, a dorsal cheilectomy may be beneficial."
        },
        {
            "id": 9,
            "question_type": "emq",
            "question": "A 9-year-old boy with a family history of a progressive neurological disorder affecting the lower limbs presents with problems in his feet. The arches are very high and the toes bent up so that they rub on his shoes.",
            "options": {
                "items": [
                    "A 14-year-old boy presents with pain in the foot. On examination, there is a flatfoot deformity that does not correct when he stands up on tiptoes.",
                    "B A 6-year-old child with cerebral palsy is toe-walking and is referred for assessment and management to aid her to walk on the soles of her feet (plantigrade).",
                    "C A 38-year-old runner complains of increasing pain in her right big toe that she fractured many years ago. The first metatarsophalangeal joint is red dorsally and has a very limited range of painful movement. The patient wants to be able to continue running.",
                    "D A 9-year-old boy with a family history of a progressive neurological disorder affecting the lower limbs presents with problems in his feet. The arches are very high and the toes bent up so that they rub on his shoes."
                ],
                "choices": [
                    "1 Charcot-Marie Tooth",
                    "2 Curly toes",
                    "3 Hallux rigidus",
                    "4 Hallux valgus",
                    "5 Hammer toes",
                    "6 Mallet toes",
                    "7 Physiological flatfoot",
                    "8 Tarsal coalition",
                    "9 Tight tendo Achilles"
                ]
            },
            "answer": {
                "D": "1"
            },
            "explanation": "Patients with evidence of pes cavus require a full neurological assessment, with more than 80% of cases associated with a neurological disease. One of the most common causes is Charcot-Marie-Tooth disease (HMSN – hereditary motor sensory neuropathy), which is characterised by progressive small muscle wasting of the hands and feet, calf atrophy and classical cavovarus feet. The Coleman block test can be used to determine if the hindfoot deformity is flexible or rigid. Loss of vibration sense and lower limb areflexia might be seen. Other orthopaedic manifestations include developmental dysplasia of hip (DDH) and scoliosis. Diagnosis is with nerve-conduction studies and genetic analysis. Initial treatment is with stretching exercises and orthotics. If the deformity is flexible, soft-tissue releases might correct or slow the progression of the deformity. However, if the deformity is fixed, an osseous correction, e.g., calcaneal osteotomy, or triple arthrodesis can be required. Another cause of pes cavus deformity can be spina bifida occulta. This can leave a bar of bone or scar tissue across the spinal canal that traps the cauda equina as the teenager grows and is called a diastomatomyelia. Release of the bar does not always lead to full recovery."
        },
        {
            "id": 10,
            "question_type": "emq",
            "question": "A 15-year-old girl presents with pain at the base of the second toe. Radiographs demonstrate an abnormal second metatarsal head with flattening.",
            "options": {
                "items": [
                    "A 15-year-old girl presents with pain at the base of the second toe. Radiographs demonstrate an abnormal second metatarsal head with flattening.",
                    "B A 21-year-old woman complains of increasing pain and numbness in her foot localised around the base of the second, third and fourth toes.",
                    "C An 18-year-old cricketer develops pain and swelling around the MTPJ of his big toe after a long period of fast bowling. He now has difficulty pushing off on that foot.",
                    "D A 23-year-old long-distance runner spontaneously develops a pain over the head of her second metatarsal. Radiographs reveal an undisplaced fracture across the neck of the second metatarsal.",
                    "E A 58-year-old man with insulin dependent diabetes presents with chronic erythema and discharge over an ulcerated area located over the first MTPJ of his left foot. CRP is 60 and ESR is 75. Radiographs reveal a destruction of the head of the first metatarsal."
                ],
                "choices": [
                    "1 Fracture of the second metatarsal",
                    "2 Freiberg's disease",
                    "3 Hallux rigidus",
                    "4 Heel bumps",
                    "5 Metatarsalgia",
                    "6 Morton's neuroma",
                    "7 Osteomyelitis",
                    "8 Stress fracture",
                    "9 Turf toe",
                    "10 Ulcer"
                ]
            },
            "answer": {
                "A": "2"
            },
            "explanation": "Freiberg's disease is a spontaneous osteonecrosis of the second metatarsal head, which develops in teenagers, particularly female athletes. Risk factors include a long second metatarsal. Patients present with pain, swelling and reduced movement at the second MTPJ, with symptoms worse on weight bearing. Radiographs +/– MRI are diagnostic, with the Smillie classification used. Conservative measures are often successful and involve activity and shoe modification, NSAIDs and rest. Surgery (e.g., arthrotomy and debridement) is rarely indicated."
        },
        {
            "id": 11,
            "question_type": "emq",
            "question": "A 21-year-old woman complains of increasing pain and numbness in her foot localised around the base of the second, third and fourth toes.",
            "options": {
                "items": [
                    "A 15-year-old girl presents with pain at the base of the second toe. Radiographs demonstrate an abnormal second metatarsal head with flattening.",
                    "B A 21-year-old woman complains of increasing pain and numbness in her foot localised around the base of the second, third and fourth toes.",
                    "C An 18-year-old cricketer develops pain and swelling around the MTPJ of his big toe after a long period of fast bowling. He now has difficulty pushing off on that foot.",
                    "D A 23-year-old long-distance runner spontaneously develops a pain over the head of her second metatarsal. Radiographs reveal an undisplaced fracture across the neck of the second metatarsal.",
                    "E A 58-year-old man with insulin dependent diabetes presents with chronic erythema and discharge over an ulcerated area located over the first MTPJ of his left foot. CRP is 60 and ESR is 75. Radiographs reveal a destruction of the head of the first metatarsal."
                ],
                "choices": [
                    "1 Fracture of the second metatarsal",
                    "2 Freiberg's disease",
                    "3 Hallux rigidus",
                    "4 Heel bumps",
                    "5 Metatarsalgia",
                    "6 Morton's neuroma",
                    "7 Osteomyelitis",
                    "8 Stress fracture",
                    "9 Turf toe",
                    "10 Ulcer"
                ]
            },
            "answer": {
                "B": "6"
            },
            "explanation": "This is a compressive neuropathy of the interdigital nerves, which are trapped between the metatarsal heads. It is known as Morton's neuroma and commonly affects females with some suggesting the transverse pressure (repeated micro trauma) from tight shoes to be a predisposing factor. The third and fourth space is most commonly affected, followed by the second or third. Patients complain of pain and paraesthesia in the affected web spaces. On squeezing the metatarsal heads together, pain may be elicited consistent with metatarsalgia, but a click (Mulder's click) might be provoked when it is consistent with a neuroma. Diagnosis is confirmed with ultrasound. Conservative measures are the mainstay of treatment and include modified footwear, orthotics and steroid injections. Surgical excision of the neuroma can be performed, often successfully, if nonoperative measures prove unsuccessful. The symptoms should improve, but the patient will be left with a numb interdigital cleft."
        },
        {
            "id": 12,
            "question_type": "emq",
            "question": "An 18-year-old cricketer develops pain and swelling around the MTPJ of his big toe after a long period of fast bowling. He now has difficulty pushing off on that foot.",
            "options": {
                "items": [
                    "A 15-year-old girl presents with pain at the base of the second toe. Radiographs demonstrate an abnormal second metatarsal head with flattening.",
                    "B A 21-year-old woman complains of increasing pain and numbness in her foot localised around the base of the second, third and fourth toes.",
                    "C An 18-year-old cricketer develops pain and swelling around the MTPJ of his big toe after a long period of fast bowling. He now has difficulty pushing off on that foot.",
                    "D A 23-year-old long-distance runner spontaneously develops a pain over the head of her second metatarsal. Radiographs reveal an undisplaced fracture across the neck of the second metatarsal.",
                    "E A 58-year-old man with insulin dependent diabetes presents with chronic erythema and discharge over an ulcerated area located over the first MTPJ of his left foot. CRP is 60 and ESR is 75. Radiographs reveal a destruction of the head of the first metatarsal."
                ],
                "choices": [
                    "1 Fracture of the second metatarsal",
                    "2 Freiberg's disease",
                    "3 Hallux rigidus",
                    "4 Heel bumps",
                    "5 Metatarsalgia",
                    "6 Morton's neuroma",
                    "7 Osteomyelitis",
                    "8 Stress fracture",
                    "9 Turf toe",
                    "10 Ulcer"
                ]
            },
            "answer": {
                "C": "9"
            },
            "explanation": "This is a tear of the proximal phalanx capsule due to forcible hyperextension of the big toe. It is known as turf toe. Stress and sesamoid fractures can occur concomitantly. Treatment is with rest, analgesia and modified footwear. Surgery is rarely indicated. Hallux rigidus can be a late complication."
        },
        {
            "id": 13,
            "question_type": "emq",
            "question": "A 23-year-old long-distance runner spontaneously develops a pain over the head of her second metatarsal. Radiographs reveal an undisplaced fracture across the neck of the second metatarsal.",
            "options": {
                "items": [
                    "A 15-year-old girl presents with pain at the base of the second toe. Radiographs demonstrate an abnormal second metatarsal head with flattening.",
                    "B A 21-year-old woman complains of increasing pain and numbness in her foot localised around the base of the second, third and fourth toes.",
                    "C An 18-year-old cricketer develops pain and swelling around the MTPJ of his big toe after a long period of fast bowling. He now has difficulty pushing off on that foot.",
                    "D A 23-year-old long-distance runner spontaneously develops a pain over the head of her second metatarsal. Radiographs reveal an undisplaced fracture across the neck of the second metatarsal.",
                    "E A 58-year-old man with insulin dependent diabetes presents with chronic erythema and discharge over an ulcerated area located over the first MTPJ of his left foot. CRP is 60 and ESR is 75. Radiographs reveal a destruction of the head of the first metatarsal."
                ],
                "choices": [
                    "1 Fracture of the second metatarsal",
                    "2 Freiberg's disease",
                    "3 Hallux rigidus",
                    "4 Heel bumps",
                    "5 Metatarsalgia",
                    "6 Morton's neuroma",
                    "7 Osteomyelitis",
                    "8 Stress fracture",
                    "9 Turf toe",
                    "10 Ulcer"
                ]
            },
            "answer": {
                "D": "8"
            },
            "explanation": "The presentation is classical of a stress or ‘march' fracture and is best managed with rest from the predisposing cause."
        },
        {
            "id": 14,
            "question_type": "emq",
            "question": "A 58-year-old man with insulin dependent diabetes presents with chronic erythema and discharge over an ulcerated area located over the first MTPJ of his left foot. CRP is 60 and ESR is 75. Radiographs reveal a destruction of the head of the first metatarsal.",
            "options": {
                "items": [
                    "A 15-year-old girl presents with pain at the base of the second toe. Radiographs demonstrate an abnormal second metatarsal head with flattening.",
                    "B A 21-year-old woman complains of increasing pain and numbness in her foot localised around the base of the second, third and fourth toes.",
                    "C An 18-year-old cricketer develops pain and swelling around the MTPJ of his big toe after a long period of fast bowling. He now has difficulty pushing off on that foot.",
                    "D A 23-year-old long-distance runner spontaneously develops a pain over the head of her second metatarsal. Radiographs reveal an undisplaced fracture across the neck of the second metatarsal.",
                    "E A 58-year-old man with insulin dependent diabetes presents with chronic erythema and discharge over an ulcerated area located over the first MTPJ of his left foot. CRP is 60 and ESR is 75. Radiographs reveal a destruction of the head of the first metatarsal."
                ],
                "choices": [
                    "1 Fracture of the second metatarsal",
                    "2 Freiberg's disease",
                    "3 Hallux rigidus",
                    "4 Heel bumps",
                    "5 Metatarsalgia",
                    "6 Morton's neuroma",
                    "7 Osteomyelitis",
                    "8 Stress fracture",
                    "9 Turf toe",
                    "10 Ulcer"
                ]
            },
            "answer": {
                "E": "7"
            },
            "explanation": "Diabetic patients are prone to infection due to peripheral vascular disease (poor blood supply and nutrition of tissues), peripheral neuropathy and general immunosuppression. Diabetic ulcers require prompt treatment, as infection can spread to bone. This patient has raised inflammatory markers and radiographic changes consistent with osteomyelitis. Debridement and microbiology-targeted high-dose intravenous antibiotics are required. Gram-positive cocci, e.g., Staphylococcus aureus, are the common causative organisms, although gram-negative organisms and anaerobes are seen with chronic infections. The Charcot joint (neuropathic joint destruction due loss of protective sensation) is seen in diabetic patients. The foot and ankle are commonly affected. The pain is minimal, but the foot or ankle is swollen and radiographs reveal joint destruction out of all proportion to what the minimal pain would suggest. Biopsy and MRI can differentiate a Charcot joint from infection. The three stages are the following: 1 Fragmentation 2 Coalescence 3 Bone consolidation The Charcot foot needs supportive treatment, aiming to prevent deformity and ulceration, e.g., with total contact casting. Arthrodesis provides stability but is not without complication. Amputation can be needed."
        }
    ]
}
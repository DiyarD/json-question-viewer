{
    "chapter_name": "ENDOCRINE PROBLEMS AND BREAST",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "Which of the following statements regarding adrenal cortical insufficiency is true?",
            "options": [
                "a. Treatment with exogenous steroids is usually ineffective",
                "b. It is commonly seen as a consequence of metastasis of distant cancers, such as lung or breast, to the adrenal glands",
                "c. Chronic adrenal insufficiency (Addison's disease) in the preoperative patient should be recognizable by a constellation of findings, including hyperglycemia, hypernatremia, and hypokalemia",
                "d. Death from untreated chronic adrenal insufficiency may occur within hours of surgery",
                "e. The most common underlying cause today is infection with resistant tuberculosis"
            ],
            "answer": "D",
            "explanation": "*   Failure to recognize adrenal cortical insufficiency, particularly in the postoperative patient, may be a fatal error.\n*   This error is especially regrettable because therapy (exogenous steroids) is effective and easy to administer.\n*   Adrenal insufficiency may occur in a host of settings including tuberculosis (formerly the most common cause), autoimmune states, severe infections (classically, meningococcal septicemia), pituitary insufficiency, after burns, during anticoagulant therapy, and most commonly today after interruption of chronically administered exogenous steroids.\n*   Although the adrenal gland is an occasional site for distant metastases, such as from lung or breast, it is rare for there to be enough destruction of the glands to produce clinical adrenal insufficiency.\n*   Chronic adrenal insufficiency (classic Addison's disease) should be recognizable preoperatively by the constellation of skin pigmentation, weakness, weight loss, hypotension, nausea, vomiting, abdominal pain, hypoglycemia, hyponatremia, and hyperkalemia.\n*   Death may occur within hours of surgery if a patient with Addison's disease is operated on without cognizance of adrenal insufficiency and pretreatment with exogenous steroids.\n*   Patients who have adrenal insufficiency as a result of interruption of chronically administered exogenous steroids may not develop the classic electrolyte abnormalities until the preterminal period.\n*   Adrenal insufficiency may also develop insidiously in the postoperative period, progressing over a course of several days.\n*   This insidious course is seen when adrenal injury occurs in the perioperative period, as would be the case with adrenal damage from hemorrhage into the gland in a patient receiving postoperative anticoagulant therapy.\n*   Measurement of blood corticosteroid levels, urinary corticosteroid secretion, urinary sodium levels, and the response to exogenous steroids is helpful in establishing the diagnosis of adrenal insufficiency."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "The thyroid scan shown below exhibits a pattern that is most consistent with which of the following disorders?\n\n[Image: Thyroid scan showing a single focus of increased isotope uptake in the right lobe, with the remainder of the thyroid gland not taking up radioactive iodine.]",
            "options": [
                "a. Hypersecreting adenoma",
                "b. Graves' disease",
                "c. Lateral aberrant thyroid",
                "d. Papillary carcinoma of thyroid",
                "e. Medullary carcinoma of thyroid"
            ],
            "answer": "A",
            "explanation": "*   The thyroid scan illustrated in the question shows a single focus of increased isotope uptake, often referred to as a “hot” nodule; the remainder of the thyroid gland has not taken up radioactive iodine.\n*   Hyperfunctioning adenomas become independent of thyroid stimulating hormone (TSH) control and secrete thyroid hormone autonomously, which results in clinical hyperthyroidism.\n*   The elevated thyroid hormone levels ultimately diminish TSH levels severely and thus depress function of the remaining normal thyroid gland.\n*   An isolated focus of increased uptake on a thyroid scan is virtually diagnostic of a hyperfunctioning adenoma.\n*   Carcinomas usually display diminished uptake and are called “cold” nodules.\n*   Graves' disease would probably manifest as a diffusely hyperactive gland without nodularity.\n*   Multinodular goiter would display many nodules with varying activity."
        },
        {
            "id": "3",
            "question_type": "mcq",
            "question": "A 17-year-old girl presents with an anterior neck mass. Her thyroid scan, shown below, is most consistent with which of the following disorders?\n\n[Image: Thyroid scan showing a central nodule, separate from the main thyroid gland.]",
            "options": [
                "a. Hypersecreting adenoma",
                "b. Parathyroid adenoma",
                "c. Thyroglossal duct cyst",
                "d. Graves' disease",
                "e. Carcinoma"
            ],
            "answer": "C",
            "explanation": "*   The thyroid gland originates embryologically from the foramen cecum at the base of the tongue.\n*   Normally, the thyroglossal duct becomes obliterated and resorbed, but portions may remain patent and become filled with serous fluid, which produces a midline cervical mass.\n*   Observe that in the scan of the patient described in the question, the mass is central and appears not to be part of the gland itself."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "A 35-year-old woman undergoes her first screening mammogram. Which of the following mammographic findings would require a breast biopsy?",
            "options": [
                "a. Breast calcifications larger than 2 mm in diameter",
                "b. Five or more clustered breast microcalcifications per square centimeter",
                "c. A density that effaces with compression",
                "d. Saucer-shaped microcalcifications",
                "e. Multiple round well-circumscribed breast densities"
            ],
            "answer": "B",
            "explanation": "*   Breast biopsies have traditionally been performed to obtain histology for clinically suspicious palpable masses.\n*   In more recent years the advent of screening mammography has led to the discovery of nonpalpable but radiographically suspicious breast lesions that have a strong correlation with breast cancer.\n*   These nonpalpable, mammographically detected lesions are:\n    *   (1) breast calcifications that are (a) smaller than 2 mm, (b) punctate, microlinear, or branching, and (c) clustered along ducts or concentrated in clusters greater than five calcifications per square centimeter;\n    *   (2) stellate-shaped lesions;\n    *   (3) masses with ill-defined borders or nodular contours;\n    *   (4) solitary dominant masses that are significantly larger than any other mass in either breast; and\n    *   (5) areas of increased noneffacing tissue density or distorted breast architecture.\n*   A parenchymal density that effaces with compression represents normal glandular tissue.\n*   Saucer-shaped microcalcifications are seen in patients with microscopic cystic disease, a benign condition.\n*   Multiple round well-circumscribed densities are usually cysts, whose nature may be confirmed with breast sonography."
        },
        {
            "id": "5",
            "question_type": "mcq",
            "question": "Estrogen receptor activity is clinically useful in predicting",
            "options": [
                "a. The presence of ovarian cancer",
                "b. The presence of metastatic disease",
                "c. Response to chemotherapy",
                "d. Response to hormonal manipulation",
                "e. The likelihood of development of osteoporosis"
            ],
            "answer": "D",
            "explanation": "*   The likelihood of response of a breast cancer to hormonal therapy is dependent on the presence of hormone receptors in the cytoplasm of the breast cancer cells.\n*   Receptors for corticosteroids, progesterone, prolactin, and estrogen have been identified.\n*   Eighty percent of patients with tumors that exhibit receptors to both estrogen and progesterone respond favorably to hormonal manipulation.\n*   Estrogen receptor activity has no predictive value in diagnosing ovarian cancer or metastatic disease, forecasting the development of osteoporosis, or determining the likelihood of a beneficial response to chemotherapy."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "When galactorrhea occurs in a high school student, a diagnostic associated finding would be",
            "options": [
                "a. Gonadal atrophy",
                "b. Bitemporal hemianopia",
                "c. Exophthalmos and lid lag",
                "d. Episodic hypertension",
                "e. \"Buffalo hump”"
            ],
            "answer": "B",
            "explanation": "*   Prolactin-secreting tumors in the pituitary gland (previously called chromophobe adenomas) may grow to large size and cause bitemporal hemianopia because of proximity to the optic chiasm.\n*   They are typically associated with amenorrhea and galactorrhea (the “A/G syndrome\") in women.\n*   In both sexes lack of libido and impotence or infertility may be noted.\n*   Sexual vigor is usually restored after removal of the adenomas.\n*   These tumors are not life threatening; if their physical size is not an issue or the relative sexual dysfunction is not a problem, benign neglect is sometimes recommended."
        },
        {
            "id": "7",
            "question_type": "mcq",
            "question": "The diagnosis of primary hyperparathyroidism is most strongly suggested by",
            "options": [
                "a. Serum acid phosphatase above 120 IU/L",
                "b. Serum alkaline phosphatase above 120 IU/L",
                "c. Serum calcium above 11 mg/dL",
                "d. Urinary calcium below 100 mg/day",
                "e. Parathyroid hormone levels below 5 pmol/L"
            ],
            "answer": "C",
            "explanation": "*   Primary hyperparathyroidism is a common disease, with over 100,000 new cases diagnosed each year in the United States, usually in women.\n*   Essential to the diagnosis of hyperparathyroidism is the finding of hypercalcemia.\n*   Though there are many causes of hypercalcemia, hyperparathyroidism is by far the most prevalent.\n*   With rare exceptions, operations for primary hyperparathyroidism should not be performed unless the patient is hypercalcemic.\n*   Parathyroid hormone (PTH) is not invariably elevated, but it should be elevated relative to the serum calcium level.\n*   Ordinarily, high serum calcium levels suppress parathyroid secretion.\n*   Therefore, in the presence of hypercalcemia, normal levels of PTH are “abnormal.”\n*   Patients with primary hyperparathyroidism have either normal or elevated urinary calcium.\n*   As the name suggests, patients with familial hypocalciuric hypercalcemia (FHH) have hypercalcemia.\n*   They also usually have elevated PTH, but surgery is not indicated in this relatively rare setting of hypercalcemia."
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "Somatostatin contributes to which of the following processes?",
            "options": [
                "a. Inhibition of adrenocortical cells",
                "b. Inhibition of pancreatic α cells",
                "c. Stimulation of antral gastrin cells",
                "d. Stimulation of secretin-producing cells in the duodenum",
                "e. Stimulation of GI motility"
            ],
            "answer": "B",
            "explanation": "*   Somatostatin is produced by D cells in the pancreatic islets and in a variety of other tissue sites in the central nervous system, gut, and elsewhere.\n*   It is a potent inhibitory regulator of intestinal hormones and motility.\n*   Because it was originally found in the hypothalamus, somatostatin earned its name because it was believed to be a major inhibitor of secretion of growth hormone.\n*   It has now been shown to inhibit the secretion of most GI hormones, particularly insulin and glucagon, as well as gastrin, secretin, VIP, PP, gastric acid, pepsin, pancreatic enzymes, thyroid-stimulating hormone, renin, and calcitonin.\n*   It also inhibits intestinal, biliary, and gastric motility, and is occasionally of value in controlling bowel fistulas by sharply reducing the amount of drainage.\n*   It has no known effect on adrenocortical cells."
        },
        {
            "id": "9",
            "question_type": "mcq",
            "question": "Which of the following statements concerning Cushing syndrome secondary to adrenal adenoma is true?",
            "options": [
                "a. Adrenal adenomas cause 40-60% of all cases of Cushing syndrome",
                "b. Biochemical and x-ray procedures are generally unsuccessful in lateralizing the tumors preoperatively",
                "c. Exploration of both adrenal glands is indicated",
                "d. For uncomplicated tumors, an open transperitoneal surgical approach is usually employed",
                "e. Postoperative corticoid therapy is required to prevent hypoadrenalism"
            ],
            "answer": "E",
            "explanation": "*   Primary adrenal pathology causes 10–20% of all cases of Cushing syndrome.\n*   A hyperfunctioning adrenal adenoma can usually be lateralized by preoperative radiologic studies, eliminating the need to explore both adrenal glands.\n*   In 10-15% of cases, adenomas are bilateral.\n*   The favored surgical approach today is via transabdominal laparoscopy or by a posterior unilateral flank route.\n*   The anterior transperitoneal approach should be reserved for complicated cases such as large or obviously malignant lesions.\n*   After tumor excision, corticosteroid therapy to correct postoperative hypoadrenalism is necessary."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "A 40-year-old woman is found to have a 1- to 2-cm, slightly tender cystic mass in her breast; she has no perceptible axillary adenopathy. What course would you follow?",
            "options": [
                "a. Reassurance and reexamination in the immediate postmenstrual period",
                "b. Immediate excisional biopsy",
                "c. Aspiration of the mass with cytologic analysis",
                "d. Fluoroscopically guided needle localization biopsy",
                "e. Mammography and reevaluation of options with new information"
            ],
            "answer": "C",
            "explanation": "*   Most clinicians would recommend aspiration and cytologic examination of the cyst fluid in this situation.\n*   Cysts are common lesions in the breasts of women in their thirties and forties; malignancies are relatively rare.\n*   All such lesions justify attention, however, and physicians must not underestimate the fear associated with the discovery of a mass in the breast, even in low-risk situations.\n*   If the lesion does not completely disappear after aspiration, excision is advised.\n*   In young women the breast parenchyma is dense, which limits the diagnostic value of mammography.\n*   The American Cancer Society (ACS) does not suggest a baseline mammographic examination until age 35 unless a suspicious lesion exists."
        },
        {
            "id": "11",
            "question_type": "mcq",
            "question": "Which statement concerning radiation-induced thyroid cancer is true?",
            "options": [
                "a. It usually follows high-dose radiation to the head and neck",
                "b. A patient with a history of radiation is safe if no cancer has been found 20 years after exposure",
                "c. Approximately 25% of patients with a history of head and neck irradiation develop thyroid cancer",
                "d. Most radiation-induced thyroid cancers are follicular",
                "e. The treatment of choice is a near-total (or total) thyroidectomy"
            ],
            "answer": "E",
            "explanation": "*   Radiation-induced thyroid cancer was first recognized in 1950 by Duffy and Fitzgerald.\n*   It usually follows low-dose external radiation.\n*   Most cancers occur after exposure to 1500 rads or less to the neck, but an increase in thyroid cancer has been noted after as little as 6 rads.\n*   Salivary gland tumors and possibly parathyroid adenomas are also associated with radiation.\n*   The latent period for these tumors is 30 years or longer.\n*   Of all patients who have low-dose radiation, about 9% have been found to have thyroid cancer, usually of the papillary type.\n*   Treatment consists of a near-total thyroidectomy because there is a high incidence of bilaterality and because there is a greater incidence of complications if a second operation is necessary."
        },
        {
            "id": "12",
            "question_type": "mcq",
            "question": "The course of papillary carcinoma of the thyroid is best described by which of the following statements?",
            "options": [
                "a. Metastases are rare; local growth is rapid; erosion into the trachea and large blood vessels is frequent",
                "b. Local invasion and metastases almost never occur, which makes the term carcinoma misleading",
                "c. Bony metastases are frequent and produce an osteolytic pattern particularly in vertebrae",
                "d. Metastases frequently occur to cervical lymph nodes; distant metastases and local invasion are rare",
                "e. Rapid, widespread metastatic involvement of the liver, lungs, and bone marrow results in a 5-year survival rate of approximately 10%"
            ],
            "answer": "D",
            "explanation": "*   Papillary carcinoma of the thyroid frequently metastasizes to cervical lymph nodes, but distant metastasis is uncommon.\n*   The nonaggressive nature of this tumor locally and the infrequency of distant metastases combine to produce an 80–95% 5-year survival rate.\n*   A contributing factor to the success of thyroid surgery for papillary carcinoma is the easy accessibility of cervical nodes for examination and dissection.\n*   Slow growth and a predilection for local extension are characteristics of this tumor that contribute to a high survival rate in affected persons.\n*   This is true even of patients who have limited surgery, which has led to considerable controversy regarding the extent of the indicated surgical procedure."
        },
        {
            "id": "13",
            "question_type": "mcq",
            "question": "Fibrocystic disease of the breast has been associated with elevated blood levels of",
            "options": [
                "a. Testosterone",
                "b. Progesterone",
                "c. Estrogen",
                "d. Luteinizing hormone",
                "e. Aldosterone"
            ],
            "answer": "C",
            "explanation": "*   Fibrocystic disease (chronic cystic mastitis) is a common disorder of the adult female breast.\n*   It is rare after cessation of ovarian function, either natural or induced.\n*   Its association with estrogens is inferential.\n*   In postmenopausal women it only occurs when replacement estrogen therapy is in use.\n*   Its main clinical significance relates to the need to differentiate irregular breast tissue from cancer.\n*   Patients afflicted with this disorder are often frustrated by the repeated biopsies that may be recommended."
        },
        {
            "id": "14",
            "question_type": "mcq",
            "question": "A 14-year-old black girl had her right breast removed because of a large mass. The tumor weighed 1400 g and was found to have a bulging, very firm, lobulated surface with a whorl-like pattern, as illustrated below. This neoplasm is most likely\n\n[Image: A large, firm, lobulated mass with a whorl-like pattern.]",
            "options": [
                "a. Cystosarcoma phylloides",
                "b. Intraductal carcinoma",
                "c. Malignant lymphoma",
                "d. Fibroadenoma",
                "e. Juvenile hypertrophy"
            ],
            "answer": "D",
            "explanation": "*   Fibroadenomas occur infrequently before puberty but are the most common breast tumors between puberty and the early thirties.\n*   They usually are well demarcated and firm.\n*   Although most fibroadenomas are no larger than 3 cm in diameter, giant or juvenile fibroadenomas frequently are very large.\n*   The bigger fibroadenomas (greater than 5 cm) occur predominantly in adolescent black girls.\n*   The average age at onset of juvenile mammary hypertrophy is 16 years.\n*   This disorder involves a diffuse change in the entire breast and does not usually manifest clinically as a discrete mass; it may be unilateral or bilateral and can cause an enormous and incapacitating increase in breast size.\n*   Regression may be spontaneous and sometimes coincides with puberty or pregnancy.\n*   Cystosarcoma phylloides may also cause a large lesion.\n*   Together with intraductal carcinoma, it characteristically occurs in older women.\n*   Lymphomas are less firm than fibroadenomas and do not have a whorl-like pattern.\n*   They display a characteristic fish-flesh texture."
        },
        {
            "id": "15",
            "question_type": "mcq",
            "question": "As an incidental finding during an upper abdominal CT scan, a 3-cm mass in the adrenal gland is noted. The appropriate next step in analysis and management of this finding would be",
            "options": [
                "a. Observation",
                "b. CT-guided needle biopsy",
                "c. Excision of the mass",
                "d. Measurement of urine catecholamine excretion",
                "e. Cortisol provocation test"
            ],
            "answer": "A",
            "explanation": "*   With the increasing use of CT and MRI scans for other purposes, small “incidentalomas\" of the adrenal gland are becoming a frequent finding.\n*   In the absence of any clinical signs or symptoms of endocrine dysfunction, most experts now recommend observation and a search for evidence of endocrine dysfunction for lesions less than 5 cm in diameter.\n*   Lesions below that size are common and are usually asymptomatic, nonfunctional adenomas or adrenal cysts.\n*   Functional neoplasms secrete an excess of hormones, which produces clinical signs and symptoms.\n*   All functional tumors and solid tumors greater than 5.0 cm in diameter should be removed.\n*   Cystic masses greater than 5 cm may be aspirated with a fine needle.\n*   Clear fluid suggests a benign lesion; if the fluid is bloody or aspiration produces solid tissue, then the lesion should be resected.\n*   Cystic tumors ranging from 3.5 to 5.0 cm may also be aspirated.\n*   If bloody fluid is obtained or if the lesion is solid, then resection should be considered in a patient who is otherwise a healthy surgical candidate.\n*   Both solid and cystic masses less than 3.5 cm may be followed and can be considered benign if they do not increase in size or become functional."
        },
        {
            "id": "16",
            "question_type": "clinical_scenario",
            "question": "A 53-year-old woman presents with complaints of weakness, anorexia, malaise, constipation, and back pain. While being evaluated, she becomes somewhat lethargic. Laboratory studies include a normal chest x-ray; serum albumin 3.2 mg/dL; serum calcium 14 mg/dL; serum phosphorus 2.6 mg/dL; serum chloride 108 mg/dL; BUN 32 mg/dL; and creatinine 2.0 mg/dL.\n\nAppropriate initial management would include",
            "options": [
                "a. Intravenous normal saline infusion",
                "b. Administration of thiazide diuretics",
                "c. Administration of intravenous phosphorus",
                "d. Use of mithramycin",
                "e. Neck exploration and parathyroidectomy"
            ],
            "answer": "A",
            "explanation": "*   The patient described is exhibiting classic signs and symptoms of hyperparathyroidism.\n*   In addition, if a history is obtainable, frequently the patient will relate a history of renal calculi and bone pain—the syndrome characterized as \"groans, stones, and bones.”\n*   The acute management of the hypercalcemic state includes vigorous hydration to restore intravascular volume, which is invariably diminished.\n*   This will establish renal perfusion and thus promote urinary calcium excretion.\n*   Thiazide diuretics are contraindicated because they frequently cause patients to become hypercalcemic.\n*   Instead, diuresis should be promoted with the use of \"loop\" diuretics such as furosemide (Lasix).\n*   The use of intravenous phosphorus infusion is no longer recommended because precipitation in the lungs, heart, or kidney can lead to serious morbidity.\n*   Mithramycin is an antineoplastic agent that in low doses inhibits bone resorption and thus diminishes serum calcium levels; it is used only when other maneuvers fail to decrease the calcium level.\n*   Calcitonin is useful at times.\n*   Bisphosphonates are newer agents particularly useful for lowering calcium levels in resistant cases, such as those associated with humoral malignancy.\n*   Finally, \"emergency” neck exploration is seldom warranted.\n*   In unprepared patients, the morbidity is unacceptably high."
        },
        {
            "id": "17",
            "question_type": "mcq",
            "question": "After appropriate immediate management, the patient's symptoms resolve. Diagnostic tests to perform at this point would include which of the following?",
            "options": [
                "a. Abdominal angiogram",
                "b. Measurement of serum gastrin hormone levels",
                "c. Kveim test",
                "d. Serum and urine protein electrophoresis",
                "e. Neck exploration"
            ],
            "answer": "D",
            "explanation": "*   The mechanism of hypercalcemia of malignancy is thought to be due to either elaboration of a \"PTH-like” humoral factor or, many times, direct bone destruction by metastatic disease.\n*   Breast, prostatic, pulmonary, and hematologic malignancy all may give rise to hypercalcemia.\n*   Serum and urine electrophoresis may identify a malignancy that causes bone destruction, such as multiple myeloma.\n*   Sarcoidosis may produce hypercalcemia, but the presence of the normal chest x-ray essentially rules out this possibility.\n*   Thus, a Kveim test is not indicated.\n*   An abdominal angiogram would not be expected to identify a likely cause of hypercalcemia.\n*   Serum gastrin is not implicated in the differential diagnosis of hypercalcemia.\n*   A neck exploration would not be indicated unless a parathyroid adenoma or carcinoma was suspected."
        },
        {
            "id": "18",
            "question_type": "mcq",
            "question": "A woman sustains an injury to her chest after striking the steering wheel of her automobile during a collision. Which of the following statements concerning fat necrosis of the breast is true?",
            "options": [
                "a. Most patients report a history of trauma",
                "b. The lesion is usually nontender and diffuse",
                "c. It predisposes patients to the development of breast cancer",
                "d. It is difficult to distinguish from breast cancer",
                "e. Excision exacerbates the process"
            ],
            "answer": "D",
            "explanation": "*   Injury to breast tissue may cause necrosis of mammary adipose tissue and lead to the formation of a tender, localized, firm mass.\n*   A history of trauma is often elicited from affected patients, but less apparent factors, such as prolonged pressure, may also produce fat necrosis.\n*   Half the patients in whom the diagnosis is made do not recall a history of trauma.\n*   The pathophysiology of this lesion seems to involve early development of liquefaction of mammary fat with the formation of a cystic mass.\n*   Through a process of fibrosis, this lesion evolves into a firm, sometimes calcified lump that may be difficult to distinguish from carcinoma.\n*   There is, however, no relation between fat necrosis and the subsequent development of breast cancer.\n*   Excisional biopsy is usually required for definitive diagnosis; if the diagnosis of fat necrosis is confirmed, simple excision removes and terminates the process."
        },
        {
            "id": "19",
            "question_type": "mcq",
            "question": "The most likely diagnosis in a patient with hypertension, hypokalemia, and a 7-cm suprarenal mass is",
            "options": [
                "a. Hypernephroma",
                "b. Cushing's disease",
                "c. Adrenocortical carcinoma",
                "d. Pheochromocytoma",
                "e. Carcinoid"
            ],
            "answer": "C",
            "explanation": "*   The constellation of symptoms in this patient is typical of a functional adrenocortical tumor.\n*   Masculinization in females is also a common finding.\n*   Elevated urine 17-ketosteroids will be found in this patient.\n*   Any adrenocortical tumor larger than 6 cm should be considered a carcinoma rather than an adenoma.\n*   Treatment should include resection, not embolization, of as much tumor as possible.\n*   This would include invaded adjacent organs such as the kidney or the tail of the pancreas.\n*   Symptoms related to hormone production can be minimized by complete resection despite the inability to cure advanced disease.\n*   The most effective adjuvant therapy is mitotane, which is toxic for functional adrenocortical cells.\n*   When mitotane is used, therefore, glucocorticoids must be administered.\n*   Ketoconazole (not metronidazole) has been found to inhibit the production of various steroid hormones and may be useful in the treatment of hormone-related symptoms.\n*   The overall 5-year survival of patients with adrenocortical carcinoma treated with resection and mitotane is 20%.\n*   Phentolamine and phenoxybenzamine are α-adrenergic blockers that are sometimes useful in the preoperative management of pheochromocytomas."
        },
        {
            "id": "20",
            "question_type": "mcq",
            "question": "Appropriate treatment of this condition would include which of the following?",
            "options": [
                "a. Embolization of the arterial blood supply, including the suprarenal artery",
                "b. Metronidazole",
                "c. Mitotane",
                "d. Phentolamine",
                "e. Phenoxybenzamine"
            ],
            "answer": "C",
            "explanation": "*   The constellation of symptoms in this patient is typical of a functional adrenocortical tumor.\n*   Masculinization in females is also a common finding.\n*   Elevated urine 17-ketosteroids will be found in this patient.\n*   Any adrenocortical tumor larger than 6 cm should be considered a carcinoma rather than an adenoma.\n*   Treatment should include resection, not embolization, of as much tumor as possible.\n*   This would include invaded adjacent organs such as the kidney or the tail of the pancreas.\n*   Symptoms related to hormone production can be minimized by complete resection despite the inability to cure advanced disease.\n*   The most effective adjuvant therapy is mitotane, which is toxic for functional adrenocortical cells.\n*   When mitotane is used, therefore, glucocorticoids must be administered.\n*   Ketoconazole (not metronidazole) has been found to inhibit the production of various steroid hormones and may be useful in the treatment of hormone-related symptoms.\n*   The overall 5-year survival of patients with adrenocortical carcinoma treated with resection and mitotane is 20%.\n*   Phentolamine and phenoxybenzamine are α-adrenergic blockers that are sometimes useful in the preoperative management of pheochromocytomas."
        },
        {
            "id": "21",
            "question_type": "mcq",
            "question": "For pregnant women who are found to have breast cancer",
            "options": [
                "a. Termination of a first-trimester pregnancy is mandatory",
                "b. Carcinoma of the breast behaves more aggressively in pregnant women owing to hormonal stimulation",
                "c. Breast conservation is inappropriate for third-trimester pregnancies",
                "d. Most have hormonally sensitive tumors",
                "e. Administration of adjuvant chemotherapy is safe for the fetus during the second and third trimesters"
            ],
            "answer": "E",
            "explanation": "*   Approximately 2% of American women who develop carcinoma of the breast are pregnant at the time of diagnosis.\n*   The therapeutic approach to these patients has changed considerably in recent years.\n*   Though changes in the breast that occur during pregnancy often lead to a delay in diagnosis of breast carcinoma, there is no convincing evidence that breast carcinoma in pregnant women behaves differently or is histologically different from that in nonpregnant women.\n*   Furthermore, when patients are matched for age and stage of disease, no significant differences in survival rates are found.\n*   The majority of breast cancers in these patients, as with most premenopausal patients, are estrogen-receptor negative and not hormonally sensitive.\n*   Therefore, elective termination of pregnancy is generally no longer indicated to decrease estrogen stimulation of the tumor.\n*   Since radiation exposure endangers the fetus and there is no evidence that general anesthesia and nonabdominal surgery increase premature labor, modified radical mastectomy is recommended for stage I or II carcinoma (tumor less than 4 cm in diameter).\n*   Patients in later stages of pregnancy, however, can start radiation therapy shortly after delivery, and some may be candidates for breast-conserving surgery and adjuvant radiotherapy.\n*   Chemotherapy does not appear to increase the risk of congenital malformation when given in the second or third trimester of pregnancy.\n*   Patients who require adjuvant chemotherapy during the first trimester may opt for a therapeutic abortion, however, since there is a slightly increased risk of fetal malformation in that circumstance."
        },
        {
            "id": "22",
            "question_type": "mcq",
            "question": "True statements regarding Paget's disease of the breast include that it",
            "options": [
                "a. Usually precedes development of Paget's disease of bone",
                "b. Presents with nipple-areolar eczematous changes",
                "c. Does not involve axillary lymph nodes because it is a manifestation of intraductal carcinoma only",
                "d. Accounts for 10–15% of all newly diagnosed breast cancers",
                "e. Is adequately treated with wide excision when it presents as a mass"
            ],
            "answer": "B",
            "explanation": "*   Paget's disease of the breast is unrelated to Paget's bone disease.\n*   It represents a small percentage (1-3%) of all breast cancers and is thought to originate in the retroareolar lactiferous ducts.\n*   It progresses toward the nipple-areola complex in most patients, where it causes the typical clinical finding of nipple eczema and erosion.\n*   Up to 20% of patients with Paget's disease have an associated breast mass, and these patients are more likely to have involvement of axillary nodes.\n*   Nipple-areolar disease alone usually represents in situ cancer; these patients have a 10-year survival rate of over 80%.\n*   In contrast, if Paget's disease presents with a mass, the mass is likely to be an infiltrating ductal carcinoma.\n*   The generally recommended surgical procedure for Paget's disease is currently a modified radical mastectomy.\n*   The validity of breast-saving surgery and adjuvant radiation therapy for patients without an associated mass is under investigation."
        },
        {
            "id": "23",
            "question_type": "mcq",
            "question": "A 40-year-old man who has a long history of peptic ulcer disease that has not responded to medical therapy is admitted to the hospital. His serum gastrin levels are markedly elevated; at celiotomy, a small, firm mass is palpated in the tail of the pancreas. Correct statements concerning this patient's condition include which of the following?",
            "options": [
                "a. Histamine or a protein meal will markedly increase basal acid secretion",
                "b. Secretin administration will suppress acid secretion",
                "c. The pancreatic mass will probably be benign",
                "d. Distal pancreatectomy is the treatment of choice",
                "e. H₂ receptor antagonists have not been beneficial in the treatment of this condition"
            ],
            "answer": "D",
            "explanation": "*   The syndrome of a gastrin-secreting non-β-cell pancreatic tumor is a rare entity first described by Zollinger and Ellison.\n*   They originally described a triad of (1) fulminant, complicated peptic ulceration; (2) extreme gastric hypersecretion; and (3) a non-β-cell tumor of pancreatic islets.\n*   Over 50% of the tumors are malignant, and 40% have metastases at the time of surgery.\n*   Until recently, total gastrectomy was the primary operation for this tumor; however, it is now believed that operative exploration of the patient with resection of the tumor should be done if possible.\n*   H₂ receptor antagonists have also proved very promising in the management of these patients.\n*   Patients with Zollinger-Ellison tumors have very high basal gastric acid (greater than 35 meq/h) and serum gastrin levels (usually greater than 200 pg/mL).\n*   A protein meal or histamine usually does not increase acid and gastrin levels as it would in conventional duodenal ulcer patients.\n*   A paradoxical rise in serum gastrin after intravenous secretin is diagnostic of Zollinger-Ellison syndrome."
        },
        {
            "id": "24",
            "question_type": "mcq",
            "question": "Of the common complications of thyroidectomy, the one that may be avoided through prophylaxis is",
            "options": [
                "a. Injury to the recurrent laryngeal nerve",
                "b. Injury to the superior laryngeal nerve",
                "c. Symptomatic hypocalcemia",
                "d. Thyroid storm",
                "e. Postoperative hemorrhage and wound hematoma"
            ],
            "answer": "D",
            "explanation": "*   The incidence of complications with thyroidectomy or parathyroidectomy is relatively low in most series.\n*   Thyroid storm, a manifestation of severe thyrotoxicosis, is avoided by prophylactic treatment with propylthiouracil or methimazole prior to surgery.\n*   The remaining complications listed are complications of technique.\n*   The likelihood of serious complications increases with the extent of resection (\"total thyroidectomy” versus “subtotal thyroidectomy\") and with the number of neck explorations (initial exploration versus reexploration).\n*   Injury to the recurrent laryngeal nerve can compromise the airway, as can hemorrhage into the wound.\n*   Superior laryngeal nerve injury causes annoying voice “fatigue,” but is rarely of significant consequence.\n*   Hypocalcemia is usually transient, but can at times necessitate permanent calcium supplementation.\n*   Perforation of hollow neck structures very seldom occurs, and, unless it is massive or not appreciated, usually causes no morbidity."
        },
        {
            "id": "25",
            "question_type": "clinical_scenario",
            "question": "This 30-year-old woman presented with weakness, bone pain, an elevated parathormone level, and a serum calcium level of 15.2 mg/dL. Skeletal survey films were taken, including the hand films and chest x-ray shown.\n\nFollowing correction of the patient's hypercalcemia with hydration and gentle diuresis with furosemide, the most likely therapeutic approach would be",
            "options": [
                "a. Administration of maintenance doses of steroids",
                "b. Radiation treatment for bony metastases",
                "c. Neck exploration and resection of three out of four parathyroid glands",
                "d. Neck exploration and resection of a parathyroid adenoma",
                "e. Avoidance of sunlight, vitamin D, and calcium-containing dairy products"
            ],
            "answer": "D",
            "explanation": "*   This patient's presentation and films are consistent with primary hyperparathyroidism.\n*   The elevated parathormone level (PTH) confirms the diagnosis.\n*   Her chest film demonstrates marked osteopenia and the hand films are classic for this disease with severe demineralization and periosteal bone resorption most prominent in the middle phalanges.\n*   The films show no evidence of malignant lesions or mediastinal adenopathy consistent with sarcoidosis, and an elevated PTH level is not found in Paget's disease or vitamin D intoxication.\n*   Treatment for primary hyperparathyroidism in this setting is resection of the diseased parathyroid glands after initial correction of the severe hypercalcemia.\n*   A neck exploration would yield a single parathyroid adenoma in about 85% of cases.\n*   Two adenomata are found less often (approximately 5%) and hyperplasia of all four glands occurs in about 10-15% of patients.\n*   If hyperplasia is found, treatment includes resection of three and one-half glands.\n*   The remnant of the fourth gland can be identified with a metal clip in case reexploration becomes necessary.\n*   Alternatively, all four glands can be removed with autotransplantation of a small piece of parathyroid tissue into the forearm or sternocleidomastoid muscle.\n*   Subsequent hyperfunction, should it develop, can then be treated by removal of this tissue.\n*   A patient with osteopenia this severe will need calcium supplementation postoperatively.\n*   Vitamin D supplementation may also be necessary if hypocalcemia develops and persists despite treatment with oral calcium."
        },
        {
            "id": "26",
            "question_type": "clinical_scenario",
            "question": "This 30-year-old woman presented with weakness, bone pain, an elevated parathormone level, and a serum calcium level of 15.2 mg/dL. Skeletal survey films were taken, including the hand films and chest x-ray shown. The most likely cause of these findings is\n\n[Image: X-ray images of hands showing demineralization and periosteal bone resorption, and a chest x-ray showing osteopenia.]",
            "options": [
                "a. Sarcoidosis",
                "b. Vitamin D intoxication",
                "c. Paget's disease",
                "d. Metastatic carcinoma",
                "e. Primary hyperparathyroidism"
            ],
            "answer": "E",
            "explanation": "*   This patient's presentation and films are consistent with primary hyperparathyroidism.\n*   The elevated parathormone level (PTH) confirms the diagnosis.\n*   Her chest film demonstrates marked osteopenia and the hand films are classic for this disease with severe demineralization and periosteal bone resorption most prominent in the middle phalanges.\n*   The films show no evidence of malignant lesions or mediastinal adenopathy consistent with sarcoidosis, and an elevated PTH level is not found in Paget's disease or vitamin D intoxication.\n*   Treatment for primary hyperparathyroidism in this setting is resection of the diseased parathyroid glands after initial correction of the severe hypercalcemia.\n*   A neck exploration would yield a single parathyroid adenoma in about 85% of cases.\n*   Two adenomata are found less often (approximately 5%) and hyperplasia of all four glands occurs in about 10-15% of patients.\n*   If hyperplasia is found, treatment includes resection of three and one-half glands.\n*   The remnant of the fourth gland can be identified with a metal clip in case reexploration becomes necessary.\n*   Alternatively, all four glands can be removed with autotransplantation of a small piece of parathyroid tissue into the forearm or sternocleidomastoid muscle.\n*   Subsequent hyperfunction, should it develop, can then be treated by removal of this tissue.\n*   A patient with osteopenia this severe will need calcium supplementation postoperatively.\n*   Vitamin D supplementation may also be necessary if hypocalcemia develops and persists despite treatment with oral calcium."
        },
        {
            "id": "27",
            "question_type": "mcq",
            "question": "A 25-year-old woman is found to have an anterior neck mass. Her thyroid scan, shown below, exhibits findings that are consistent with which of the following disorders?\n\n[Image: Thyroid scan showing a discrete area of decreased radioactive iodine uptake with the remainder of the gland accepting iodine normally.]",
            "options": [
                "a. Carcinoma",
                "b. Toxic adenoma",
                "c. Toxic multinodular goiter",
                "d. Graves' disease",
                "e. de Quervain's (subacute) thyroiditis"
            ],
            "answer": "A",
            "explanation": "*   The thyroid scan of the patient discussed in the question shows a discrete area of decreased radioactive iodine uptake with the remainder of the gland accepting iodine normally.\n*   This means the tissue that composes the nodule is not endocrinologically active for thyroid hormone.\n*   The two major mass lesions of the thyroid that can produce this pattern are a nonfunctioning follicular adenoma and a carcinoma.\n*   Carcinomas seldom produce thyroid hormone.\n*   Adenomas may be very active (toxic) and suppress the remaining gland.\n*   Most thyroid adenomas, however, are not hormone producing and appear as \"cold\" nodules on a thyroid scan.\n*   Graves' disease produces a diffusely hyperactive gland without nodularity.\n*   de Quervain's thyroiditis presents as a painful, swollen thyroid gland rather than as a discrete nodule.\n*   A large parathyroid adenoma could conceivably displace the thyroid gland and produce a pattern similar to the one shown, but it would be unusual.\n*   A localized infectious process also could produce such a pattern.\n*   The essential point is that a “cold” thyroid nodule may represent a carcinoma, and needle biopsy or surgical excision is indicated to rule out this possibility."
        },
        {
            "id": "28",
            "question_type": "mcq",
            "question": "Incisional biopsy of a breast mass in a 35-year-old woman demonstrates a hypercellular fibroadenoma (cystosarcoma phylloides) at the time of frozen section. Appropriate management of this lesion could include",
            "options": [
                "a. Wide local excision with a rim of normal tissue",
                "b. Lumpectomy and axillary lymphadenectomy",
                "c. Modified radical mastectomy",
                "d. Excision and postoperative radiotherapy",
                "e. Excision, postoperative radiotherapy, and systemic chemotherapy"
            ],
            "answer": "A",
            "explanation": "*   Cystosarcoma phylloides is a tumor most often seen in younger women.\n*   It can grow to enormous size and at times ulcerate through the skin.\n*   Still, it is a lesion with low propensity toward metastasis.\n*   Local recurrence is common, especially if the initial resection was inadequate.\n*   Simple reexcision with adequate margins is curative.\n*   Very large lesions may necessitate simple mastectomy to achieve clear margins.\n*   Axillary lymphadenectomy, however, is seldom indicated without biopsy-positive demonstration of tumor in the nodes.\n*   The low incidence of metastatic disease suggests that adjunctive therapy is indicated only for known metastatic disease, even when the tumors are quite large and ulcerated."
        },
        {
            "id": "29",
            "question_type": "mcq",
            "question": "A 36-year-old woman, 20 wk pregnant, presents with a 1.5-cm right thyroid mass. Fine-needle aspiration is consistent with a papillary neoplasm. The mass is “cold” by scan and solid by ultrasound. Which method of treatment would be contraindicated?",
            "options": [
                "a. Right thyroid lobectomy",
                "b. Subtotal thyroidectomy",
                "c. Total thyroidectomy",
                "d. Total thyroidectomy with lymph node dissection",
                "e. ¹³¹I radioactive ablation of the thyroid gland"
            ],
            "answer": "E",
            "explanation": "*   This patient has cytologic evidence of a papillary lesion, possibly papillary carcinoma.\n*   Papillary carcinoma is a relatively nonaggressive lesion with long-term survival (>20 years) of more than 90%.\n*   The lesion is frequently multicentric, which argues for more complete resection.\n*   Metastases, when they occur, are usually responsive to surgical resection or radioablation therapy.\n*   Removal of the involved lobe, and possibly the entire thyroid gland, is appropriate.\n*   Central and lateral lymph node dissection is performed for clinically suspect lymph nodes.\n*   Papillary carcinoma is frequently multifocal.\n*   Bilateral disease mandates total thyroidectomy.\n*   The use of radioactive ¹³¹I, however, is contraindicated in pregnancy and should be used with caution in women of childbearing age."
        },
        {
            "id": "30",
            "question_type": "mcq",
            "question": "Correct statements concerning Hürthle-cell carcinoma of the thyroid include which of the following?",
            "options": [
                "a. It is a form of anaplastic thyroid cancer",
                "b. It metastasizes via the lymphatics to regional lymph node basins",
                "c. Treatment consists of a near-total (or total) thyroidectomy",
                "d. Microscopically, it consists of clusters of cells separated by areas of collagen and amyloid",
                "e. Once treated appropriately, it has a low rate of recurrence"
            ],
            "answer": "C",
            "explanation": "*   Hürthle-cell cancer is a type of follicular cancer, but it tends to recur more often than other types.\n*   Follicular cancer spreads hematogenously to distant sites.\n*   This is unlike papillary cancer, which metastasizes via the lymphatics.\n*   Amyloid deposits in the stroma of a thyroid tumor are diagnostic of medullary carcinoma.\n*   The treatment of choice is a near-total thyroidectomy to facilitate later body scanning for metastases and treatment with ¹³¹I."
        },
        {
            "id": "31",
            "question_type": "mcq",
            "question": "A 28-year-old man presents with a 2.5-cm mass in the anterior triangle of the left neck. The mass moves with swallowing and has slowly enlarged over the past 1–2 years. The patient's past medical history is notable for high-dose irradiation to the chest and abdomen for Hodgkin's lymphoma 8 years prior to presentation. Thyroid scan shows a “cold” lesion. Fine-needle aspiration cytology is “suspicious.” Core-needle biopsy shows features suggestive of a follicular neoplasm. True statements regarding this patient's condition include",
            "options": [
                "a. Thyroid nodules in men are rarely malignant",
                "b. Prior radiation to the chest, if any-thing, would diminish the risk of subsequent thyroid cancer",
                "c. In the setting of abnormal cytology, an initial course of TSH suppression by thyroid hormone is recommended",
                "d. In the setting of a possible follicular neoplasm, radioactive iodine (¹³¹I) ablation is recommended",
                "e. Total thyroidectomy is an acceptable treatment for this patient"
            ],
            "answer": "E",
            "explanation": "*   Thyroid nodules are somewhat less common in men and should always suggest malignancy.\n*   The history of irradiation to the chest and the findings on biopsy mandate resection of the lesion in this patient, since prior exposure to radiation, even at low dosage, is a strong risk factor for the subsequent development of thyroid cancer.\n*   The optimum management of thyroid carcinoma remains controversial.\n*   Thyroid lobectomy, subtotal thyroidectomy, and total thyroidectomy are all acceptable techniques for treatment.\n*   Removal of the gland permits more accurate histologic diagnosis, particularly with regard to the relatively radioresistant Hürthle-cell follicular variant.\n*   Removal of the gland also makes subsequent treatment of metastases with radioactive iodine more effective.\n*   Suppression with thyroid hormone (Synthroid) in the setting of abnormal cytology is not recommended."
        },
        {
            "id": "32",
            "question_type": "mcq",
            "question": "True statements about discharge from the nipple include",
            "options": [
                "a. Intermittent thin or milky discharge can be physiologic",
                "b. Expressible nipple discharge is an indication for open biopsy",
                "c. Bloody discharge is indicative of an underlying malignancy",
                "d. Galactorrhea is indicative of an underlying malignancy",
                "e. Pathologic discharge is usually bilateral"
            ],
            "answer": "A",
            "explanation": "*   Nipple discharge from the breast may be classified as pathologic, physiologic, or galactorrhea.\n*   Galactorrhea may be due to hormonal imbalance (hyperprolactinemia, hypothyroidism), drugs (oral contraceptives, phenothiazines, antihypertensives, tranquilizers), or trauma to the chest.\n*   Physiologic nipple discharge is intermittent, nonlactational (usually serous), and due to stimulation of the nipple or to drugs (estrogens, tranquilizers).\n*   Both galactorrhea and physiologic discharge are frequently bilateral and arise from multiple ducts.\n*   Pathologic nipple discharge may be caused by benign lesions of the breast (duct ectasia, papilloma, fibrocystic disease) or by cancer.\n*   It may be bloody, serous, or gray-green.\n*   It is spontaneous and unilateral and can often be localized to a single nipple duct.\n*   When pathologic discharge is diagnosed, an effort should be made to identify the source.\n*   If an associated mass is present, it should be biopsied.\n*   If no mass is found, a terminal duct excision of the involved duct(s) should be performed.\n*   Only 10 percent of patients with pathologic nipple discharge are found to have breast cancer."
        },
        {
            "id": "33",
            "question_type": "mcq",
            "question": "True statements regarding Cushing's disease and Cushing syndrome include which of the following?",
            "options": [
                "a. Adrenocortical hyperplasia is the most common cause of Cushing's disease",
                "b. Overproduction of ACTH is pathognomonic of Cushing syndrome",
                "c. Clinical manifestations of Cushing's disease and Cushing syndrome are identical",
                "d. Cushing syndrome is caused only by neoplasms of either the pituitary or adrenal glands",
                "e. Cushing's disease is incurable"
            ],
            "answer": "C",
            "explanation": "*   Cushing's disease is caused by hypersecretion of ACTH by the pituitary gland.\n*   This hypersecretion, in turn, is caused by either a pituitary adenoma (90% of cases) or diffuse pituitary corticotrope hyperplasia (10% of cases) due to hypersecretion of CRH (corticotropin-releasing hormone) by the hypothalamus.\n*   A high cure rate is achieved with surgery, occasionally followed by adjuvant radiotherapy for large pituitary adenomas.\n*   Cushing syndrome refers to the clinical manifestations of glucocorticoid excess due to any cause (Cushing's disease, administration of exogenous glucocorticoids, adrenocortical hyperplasia, adrenal adenoma, adrenal carcinoma, ectopic ACTH-secreting tumors) and includes truncal obesity, hypertension, hirsutism, moon facies, proximal muscle wasting, ecchymoses, skin striae, osteoporosis, diabetes mellitus, amenorrhea, growth retardation, and immunosuppression.\n*   The most common cause of Cushing syndrome is iatrogenic, via administration of synthetic corticosteroids."
        },
        {
            "id": "34",
            "question_type": "mcq",
            "question": "A 34-year-old woman has recurrent fainting spells induced by fasting. Her serum insulin levels during these episodes are markedly elevated. Correct statements regarding this patient's condition include which of the following?",
            "options": [
                "a. The underlying lesion is probably an α-cell tumor of the pancreas",
                "b. The underlying lesion is usually multifocal",
                "c. These lesions are usually malignant",
                "d. Serum calcium levels may be elevated",
                "e. She should be screened for a co-existent pheochromocytoma"
            ],
            "answer": "D",
            "explanation": "*   Insulin-secreting β-cell tumors of the pancreas produce paroxysmal nervous system manifestations that may be a consequence of hypoglycemia, although the blood glucose level may bear little relation to the severity of the symptoms, even in the same patient from episode to episode.\n*   Most insulinomas are single discrete tumors.\n*   Patients with insulinoma in the setting of the MEN 1 syndrome (synchronous islet cell tumors of the pancreas, pituitary hyperplasia or adenomas, and parathyroid chief cell hyperplasia), however, are more likely to have multiple tumors throughout the pancreas.\n*   If a careful examination of the pancreas reveals one or more specific adenomas, these can be locally excised.\n*   Excision of these tumors may be difficult in MEN 1, when the tumors are small and multiple (10–15% of cases).\n*   The finding of an elevated serum calcium level would raise the suspicion of MEN 1 and parathyroid hyperplasia.\n*   Insulinomas are not associated with MEN 2, which comprises coexistent medullary thyroid cancer, parathyroid hyperplasia, and pheochromocytoma.\n*   About one in seven of these tumors is malignant.\n*   Streptozotocin, a potent antibiotic that selectively destroys islet cells, can be useful in controlling symptoms from unresectable malignant tumors of the islet cells but probably has little to offer in the definitive management of the typical benign islet cell insulinoma."
        },
        {
            "id": "35",
            "question_type": "mcq",
            "question": "The incidence of breast cancer",
            "options": [
                "a. Increases with increasing age",
                "b. Has declined since the 1940s",
                "c. Is related to dietary fat intake",
                "d. Is related to coffee intake",
                "e. Is related to vitamin C intake"
            ],
            "answer": "A",
            "explanation": "*   Breast cancer is rarely seen before the age of 20, but thereafter its incidence increases inexorably.\n*   While the prevalence of breast cancer (the raw number of patients alive with disease) is greatest among perimenopausal women, the incidence of breast cancer (the number of new cases per 100,000 population) rises so sharply that it is twice as common among women between 80 and 85 years of age as among those 60 to 65.\n*   In addition, the age-adjusted incidence has increased steadily since the mid-1940s.\n*   No data is presently available consistently linking the incidence of breast cancer to dietary factors.\n*   A possible linkage between breast cancer and alcohol consumption at an early age is being studied."
        },
        {
            "id": "36",
            "question_type": "mcq",
            "question": "Tumor not palpable, clinically positive lymph nodes fixed to one another, no evidence of metastases (SELECT 1 STAGE)",
            "options": [
                "a. Stage I",
                "b. Stage II",
                "c. Stage III",
                "d. Stage IV",
                "e. Inflammatory carcinoma"
            ],
            "answer": "C",
            "explanation": "*   The American Joint Committee on Cancer has defined a four-tiered staging system for breast cancer based on the clinical criteria of tumor size, involvement of lymph nodes, and metastatic disease.\n*   In one version of this system, a separate category is reserved for inflammatory breast cancer.\n*   While the grouping of breast cancers into stages provides a useful shorthand for expressing a patient's survival probability, it is noteworthy that considerable heterogeneity exists both with respect to tumor size and nodal characteristics among tumors that are classified within a given stage.\n*   The TNM stage of breast cancer is assigned by measuring the greatest diameter of the tumor (\"T\"), assessing the axillary and clavicular lymph nodes for enlargement and fixation (“N”), and judging whether metastatic disease is present (“M”).\n*   In general, the worst of the three TNM parameters will determine the stage assignment.\n*   Tumors that are not palpable are classified T0; tumors 2 cm or less, T1; tumors greater than 2 but not more than 5 cm, T2; tumors greater than 5 cm, T3; and tumors with extension into the chest wall or skin, T4.\n*   Clinically negative lymph nodes are classified N0; positive, movable ipsilateral axillary nodes, N1; fixed ipsilateral axillary nodes, N2; and clavicular nodes, N3.\n*   Absence of evidence of metastatic disease is classified M0; distant metastatic disease, M1.\n*   The patient in question 276 has a T0, N2, M0 lesion. This is stage III (fixed or matted nodes are a poor prognostic sign)."
        },
        {
            "id": "37",
            "question_type": "mcq",
            "question": "Tumor 5.0 cm; clinically positive, movable ipsilateral lymph nodes; no evidence of metastases (SELECT 1 STAGE)",
            "options": [
                "a. Stage I",
                "b. Stage II",
                "c. Stage III",
                "d. Stage IV",
                "e. Inflammatory carcinoma"
            ],
            "answer": "B",
            "explanation": "*   The American Joint Committee on Cancer has defined a four-tiered staging system for breast cancer based on the clinical criteria of tumor size, involvement of lymph nodes, and metastatic disease.\n*   In one version of this system, a separate category is reserved for inflammatory breast cancer.\n*   While the grouping of breast cancers into stages provides a useful shorthand for expressing a patient's survival probability, it is noteworthy that considerable heterogeneity exists both with respect to tumor size and nodal characteristics among tumors that are classified within a given stage.\n*   The TNM stage of breast cancer is assigned by measuring the greatest diameter of the tumor (\"T\"), assessing the axillary and clavicular lymph nodes for enlargement and fixation (“N”), and judging whether metastatic disease is present (“M”).\n*   In general, the worst of the three TNM parameters will determine the stage assignment.\n*   Tumors that are not palpable are classified T0; tumors 2 cm or less, T1; tumors greater than 2 but not more than 5 cm, T2; tumors greater than 5 cm, T3; and tumors with extension into the chest wall or skin, T4.\n*   Clinically negative lymph nodes are classified N0; positive, movable ipsilateral axillary nodes, N1; fixed ipsilateral axillary nodes, N2; and clavicular nodes, N3.\n*   Absence of evidence of metastatic disease is classified M0; distant metastatic disease, M1.\n*   The patient in question 277 has a T2, N1, M0 lesion. This is stage II."
        },
        {
            "id": "38",
            "question_type": "mcq",
            "question": "Tumor 2.1 cm, clinically negative lymph nodes, no evidence of metastases (SELECT 1 STAGE)",
            "options": [
                "a. Stage I",
                "b. Stage II",
                "c. Stage III",
                "d. Stage IV",
                "e. Inflammatory carcinoma"
            ],
            "answer": "B",
            "explanation": "*   The American Joint Committee on Cancer has defined a four-tiered staging system for breast cancer based on the clinical criteria of tumor size, involvement of lymph nodes, and metastatic disease.\n*   In one version of this system, a separate category is reserved for inflammatory breast cancer.\n*   While the grouping of breast cancers into stages provides a useful shorthand for expressing a patient's survival probability, it is noteworthy that considerable heterogeneity exists both with respect to tumor size and nodal characteristics among tumors that are classified within a given stage.\n*   The TNM stage of breast cancer is assigned by measuring the greatest diameter of the tumor (\"T\"), assessing the axillary and clavicular lymph nodes for enlargement and fixation (“N”), and judging whether metastatic disease is present (“M”).\n*   In general, the worst of the three TNM parameters will determine the stage assignment.\n*   Tumors that are not palpable are classified T0; tumors 2 cm or less, T1; tumors greater than 2 but not more than 5 cm, T2; tumors greater than 5 cm, T3; and tumors with extension into the chest wall or skin, T4.\n*   Clinically negative lymph nodes are classified N0; positive, movable ipsilateral axillary nodes, N1; fixed ipsilateral axillary nodes, N2; and clavicular nodes, N3.\n*   Absence of evidence of metastatic disease is classified M0; distant metastatic disease, M1.\n*   The patient in question 278 has a T2, N0, M0 lesion. Though smaller than the tumor in question 277 and without clinically involved nodes, this tumor is also stage II."
        },
        {
            "id": "39",
            "question_type": "mcq",
            "question": "Tumor not palpable but breast diffusely enlarged and erythematous, clinically positive supraclavicular nodes, and evidence of metastases (SELECT 1 STAGE)",
            "options": [
                "a. Stage I",
                "b. Stage II",
                "c. Stage III",
                "d. Stage IV",
                "e. Inflammatory carcinoma"
            ],
            "answer": "E",
            "explanation": "*   The American Joint Committee on Cancer has defined a four-tiered staging system for breast cancer based on the clinical criteria of tumor size, involvement of lymph nodes, and metastatic disease.\n*   In one version of this system, a separate category is reserved for inflammatory breast cancer.\n*   While the grouping of breast cancers into stages provides a useful shorthand for expressing a patient's survival probability, it is noteworthy that considerable heterogeneity exists both with respect to tumor size and nodal characteristics among tumors that are classified within a given stage.\n*   The TNM stage of breast cancer is assigned by measuring the greatest diameter of the tumor (\"T\"), assessing the axillary and clavicular lymph nodes for enlargement and fixation (“N”), and judging whether metastatic disease is present (“M”).\n*   In general, the worst of the three TNM parameters will determine the stage assignment.\n*   Tumors that are not palpable are classified T0; tumors 2 cm or less, T1; tumors greater than 2 but not more than 5 cm, T2; tumors greater than 5 cm, T3; and tumors with extension into the chest wall or skin, T4.\n*   Clinically negative lymph nodes are classified N0; positive, movable ipsilateral axillary nodes, N1; fixed ipsilateral axillary nodes, N2; and clavicular nodes, N3.\n*   Absence of evidence of metastatic disease is classified M0; distant metastatic disease, M1.\n*   The patient in question 279 has findings compatible with inflammatory breast cancer.\n*   A biopsy of the involved skin and a mammogram would confirm the diagnosis."
        },
        {
            "id": "40",
            "question_type": "mcq",
            "question": "Tumor 0.5 cm, clinically negative lymph nodes, pathological rib fracture (SELECT 1 STAGE)",
            "options": [
                "a. Stage I",
                "b. Stage II",
                "c. Stage III",
                "d. Stage IV",
                "e. Inflammatory carcinoma"
            ],
            "answer": "D",
            "explanation": "*   The American Joint Committee on Cancer has defined a four-tiered staging system for breast cancer based on the clinical criteria of tumor size, involvement of lymph nodes, and metastatic disease.\n*   In one version of this system, a separate category is reserved for inflammatory breast cancer.\n*   While the grouping of breast cancers into stages provides a useful shorthand for expressing a patient's survival probability, it is noteworthy that considerable heterogeneity exists both with respect to tumor size and nodal characteristics among tumors that are classified within a given stage.\n*   The TNM stage of breast cancer is assigned by measuring the greatest diameter of the tumor (\"T\"), assessing the axillary and clavicular lymph nodes for enlargement and fixation (“N”), and judging whether metastatic disease is present (“M”).\n*   In general, the worst of the three TNM parameters will determine the stage assignment.\n*   Tumors that are not palpable are classified T0; tumors 2 cm or less, T1; tumors greater than 2 but not more than 5 cm, T2; tumors greater than 5 cm, T3; and tumors with extension into the chest wall or skin, T4.\n*   Clinically negative lymph nodes are classified N0; positive, movable ipsilateral axillary nodes, N1; fixed ipsilateral axillary nodes, N2; and clavicular nodes, N3.\n*   Absence of evidence of metastatic disease is classified M0; distant metastatic disease, M1.\n*   The patient in question 280 has a T1, N0, M1 lesion. This is stage IV (stage IV is any T, any N, M1)."
        },
        {
            "id": "41",
            "question_type": "mcq",
            "question": "A 2.5-cm tumor at the base of the appendix (SELECT 1 PROCEDURE)",
            "options": [
                "a. Appendectomy",
                "b. Segmental ileal resection",
                "c. Cecectomy",
                "d. Right hemicolectomy",
                "e. Hepatic wedge resection and appropriate bowel resection"
            ],
            "answer": "D",
            "explanation": "*   Carcinoid tumors are most commonly found in the appendix and small bowel, where they may be multiple.\n*   They have a tendency to metastasize, which varies with the size of the tumor.\n*   Tumors < 1 cm uncommonly metastasize.\n*   Tumors > 2.0 cm are more often found to be metastatic.\n*   Metastasis to the liver and beyond may give rise to the carcinoid syndrome.\n*   The tumors cause an intense desmoplastic reaction.\n*   Spread into the serosal lymphatics does not imply metastatic disease; local resection is potentially curative.\n*   When metastatic lesions are found in the liver, they should be resected when technically feasible to limit the symptoms of the carcinoid syndrome.\n*   When extensive hepatic metastases are found, the disease is not curable.\n*   Resection of the appendix and cecum may be performed to prevent an early intestinal obstruction by locally encroaching tumor."
        },
        {
            "id": "42",
            "question_type": "mcq",
            "question": "A 1.0-cm tumor at the tip of the appendix (SELECT 1 PROCEDURE)",
            "options": [
                "a. Appendectomy",
                "b. Segmental ileal resection",
                "c. Cecectomy",
                "d. Right hemicolectomy",
                "e. Hepatic wedge resection and appropriate bowel resection"
            ],
            "answer": "A",
            "explanation": "*   Carcinoid tumors are most commonly found in the appendix and small bowel, where they may be multiple.\n*   They have a tendency to metastasize, which varies with the size of the tumor.\n*   Tumors < 1 cm uncommonly metastasize.\n*   Tumors > 2.0 cm are more often found to be metastatic.\n*   Metastasis to the liver and beyond may give rise to the carcinoid syndrome.\n*   The tumors cause an intense desmoplastic reaction.\n*   Spread into the serosal lymphatics does not imply metastatic disease; local resection is potentially curative.\n*   When metastatic lesions are found in the liver, they should be resected when technically feasible to limit the symptoms of the carcinoid syndrome.\n*   When extensive hepatic metastases are found, the disease is not curable.\n*   Resection of the appendix and cecum may be performed to prevent an early intestinal obstruction by locally encroaching tumor."
        },
        {
            "id": "43",
            "question_type": "mcq",
            "question": "A 0.5-cm tumor with serosal umbilication in the ileum (SELECT 1 PROCEDURE)",
            "options": [
                "a. Appendectomy",
                "b. Segmental ileal resection",
                "c. Cecectomy",
                "d. Right hemicolectomy",
                "e. Hepatic wedge resection and appropriate bowel resection"
            ],
            "answer": "B",
            "explanation": "*   Carcinoid tumors are most commonly found in the appendix and small bowel, where they may be multiple.\n*   They have a tendency to metastasize, which varies with the size of the tumor.\n*   Tumors < 1 cm uncommonly metastasize.\n*   Tumors > 2.0 cm are more often found to be metastatic.\n*   Metastasis to the liver and beyond may give rise to the carcinoid syndrome.\n*   The tumors cause an intense desmoplastic reaction.\n*   Spread into the serosal lymphatics does not imply metastatic disease; local resection is potentially curative.\n*   When metastatic lesions are found in the liver, they should be resected when technically feasible to limit the symptoms of the carcinoid syndrome.\n*   When extensive hepatic metastases are found, the disease is not curable.\n*   Resection of the appendix and cecum may be performed to prevent an early intestinal obstruction by locally encroaching tumor."
        },
        {
            "id": "44",
            "question_type": "mcq",
            "question": "A 1.0-cm tumor of the midappendix; 1-cm firm, pale lesion at the periphery of the right lobe of the liver (SELECT 1 PROCEDURE)",
            "options": [
                "a. Appendectomy",
                "b. Segmental ileal resection",
                "c. Cecectomy",
                "d. Right hemicolectomy",
                "e. Hepatic wedge resection and appropriate bowel resection"
            ],
            "answer": "E",
            "explanation": "*   Carcinoid tumors are most commonly found in the appendix and small bowel, where they may be multiple.\n*   They have a tendency to metastasize, which varies with the size of the tumor.\n*   Tumors < 1 cm uncommonly metastasize.\n*   Tumors > 2.0 cm are more often found to be metastatic.\n*   Metastasis to the liver and beyond may give rise to the carcinoid syndrome.\n*   The tumors cause an intense desmoplastic reaction.\n*   Spread into the serosal lymphatics does not imply metastatic disease; local resection is potentially curative.\n*   When metastatic lesions are found in the liver, they should be resected when technically feasible to limit the symptoms of the carcinoid syndrome.\n*   When extensive hepatic metastases are found, the disease is not curable.\n*   Resection of the appendix and cecum may be performed to prevent an early intestinal obstruction by locally encroaching tumor."
        },
        {
            "id": "45",
            "question_type": "mcq",
            "question": "A 3.5-cm tumor encroaching onto the cecum and extensive liver metastases (SELECT 1 PROCEDURE)",
            "options": [
                "a. Appendectomy",
                "b. Segmental ileal resection",
                "c. Cecectomy",
                "d. Right hemicolectomy",
                "e. Hepatic wedge resection and appropriate bowel resection"
            ],
            "answer": "C",
            "explanation": "*   Carcinoid tumors are most commonly found in the appendix and small bowel, where they may be multiple.\n*   They have a tendency to metastasize, which varies with the size of the tumor.\n*   Tumors < 1 cm uncommonly metastasize.\n*   Tumors > 2.0 cm are more often found to be metastatic.\n*   Metastasis to the liver and beyond may give rise to the carcinoid syndrome.\n*   The tumors cause an intense desmoplastic reaction.\n*   Spread into the serosal lymphatics does not imply metastatic disease; local resection is potentially curative.\n*   When metastatic lesions are found in the liver, they should be resected when technically feasible to limit the symptoms of the carcinoid syndrome.\n*   When extensive hepatic metastases are found, the disease is not curable.\n*   Resection of the appendix and cecum may be performed to prevent an early intestinal obstruction by locally encroaching tumor."
        },
        {
            "id": "46",
            "question_type": "msq",
            "question": "A 49-year-old woman undergoes biopsy of a 1.0-cm breast mass. Pathology shows extensive comedo ductal carcinoma in situ. (SELECT 2 CHOICES)",
            "options": [
                "a. No further surgical intervention",
                "b. Wide local excision",
                "c. Wide local excision with adjuvant radiation therapy",
                "d. Wide local excision with axillary lymph node dissection and radiation therapy",
                "e. Simple mastectomy (without axillary lymph node dissection)",
                "f. Modified radical mastectomy (simple mastectomy with in-continuity axillary lymph node dissection)",
                "g. Radical mastectomy",
                "h. Bilateral prophylactic simple mastectomies"
            ],
            "answer": [
                "C",
                "F"
            ],
            "explanation": "*   Generally accepted treatment for stage I breast cancer in premenopausal women includes lumpectomy (wide excision, partial mastectomy, quadrantectomy) combined with axillary lymph node dissection and adjuvant radiation therapy, and modified radical mastectomy.\n*   Both approaches offer equivalent chances of cure; there is a higher incidence of local recurrence with lumpectomy, axillary dissection, and radiation, but this observation has not been found to affect the overall cure rate in comparison with mastectomy.\n*   Ductal carcinoma in situ is the precursor of invasive ductal carcinoma.\n*   It is described in four histologic variants (papillary, cribriform, solid, and comedo type), of which the comedo subtype shows the greatest tendency to recur after wide excision alone.\n*   For years, ductal carcinoma in situ was treated by simple mastectomy.\n*   In recent years, studies have shown equally good results with wide excision alone (for small noncomedo lesions) or wide excision plus radiation therapy.\n*   For a 1.0-cm comedocarcinoma (which may extend microscopically wider still), most experts would favor simple mastectomy or wide excision with radiation therapy."
        },
        {
            "id": "47",
            "question_type": "msq",
            "question": "A 42-year-old woman with a familial breast cancer (mother, four sisters, and additional relatives) undergoes her fifth breast biopsy for a palpable mass. Pathology shows ductal hyperplasia with severe atypia. (SELECT 2 CHOICES)",
            "options": [
                "a. No further surgical intervention",
                "b. Wide local excision",
                "c. Wide local excision with adjuvant radiation therapy",
                "d. Wide local excision with axillary lymph node dissection and radiation therapy",
                "e. Simple mastectomy (without axillary lymph node dissection)",
                "f. Modified radical mastectomy (simple mastectomy with in-continuity axillary lymph node dissection)",
                "g. Radical mastectomy",
                "h. Bilateral prophylactic simple mastectomies"
            ],
            "answer": [
                "A",
                "H"
            ],
            "explanation": "*   Patients with familial breast cancer (multiple first-degree relatives and penetrance of breast cancer through several familial generations) have extremely high risks of developing breast cancer in the course of their lifetimes.\n*   A subset of patients with familial breast cancer has been identified by a specific gene mutation (BRCA1); however, the genetic basis of most cases of familial breast cancer has yet to be elucidated.\n*   A patient with a history of familial breast cancer and multiple biopsies showing atypia may reasonably request bilateral prophylactic simple mastectomies.\n*   Alternatively, she may continue with routine surveillance."
        },
        {
            "id": "48",
            "question_type": "msq",
            "question": "A 51-year-old (premenopausal) woman undergoes needle localization biopsy for microcalcifications. Pathology reveals sclerosing adenosis with microcalcifications and extensive lobular carcinoma in situ. (SELECT 1 CHOICE)",
            "options": [
                "a. No further surgical intervention",
                "b. Wide local excision",
                "c. Wide local excision with adjuvant radiation therapy",
                "d. Wide local excision with axillary lymph node dissection and radiation therapy",
                "e. Simple mastectomy (without axillary lymph node dissection)",
                "f. Modified radical mastectomy (simple mastectomy with in-continuity axillary lymph node dissection)",
                "g. Radical mastectomy",
                "h. Bilateral prophylactic simple mastectomies"
            ],
            "answer": "A",
            "explanation": "*   Lobular carcinoma in situ is a histologic marker that identifies patients who are at increased risk for the development of breast cancer.\n*   It is not a precancerous lesion in itself, and there is no benefit to widely excising it because the risk of subsequent cancer is equal for both breasts.\n*   As the risk for the future development of breast cancer is now estimated to be approximately 1% per year, prophylactic mastectomy is no longer recommended.\n*   Proper management would consist of close surveillance for cancer by twice yearly examinations and yearly mammography.\n*   Sclerosing adenosis is a benign lesion."
        },
        {
            "id": "49",
            "question_type": "msq",
            "question": "A 35-year-old woman presents with a palpable 1.5-cm tumor in the upper outer quadrant of her left breast. Biopsy reveals invasive ductal carcinoma with 10% intraductal carcinoma. (SELECT 2 CHOICES)",
            "options": [
                "a. No further surgical intervention",
                "b. Wide local excision",
                "c. Wide local excision with adjuvant radiation therapy",
                "d. Wide local excision with axillary lymph node dissection and radiation therapy",
                "e. Simple mastectomy (without axillary lymph node dissection)",
                "f. Modified radical mastectomy (simple mastectomy with in-continuity axillary lymph node dissection)",
                "g. Radical mastectomy",
                "h. Bilateral prophylactic simple mastectomies"
            ],
            "answer": [
                "D",
                "E"
            ],
            "explanation": "*   Generally accepted treatment for stage I breast cancer in premenopausal women includes lumpectomy (wide excision, partial mastectomy, quadrantectomy) combined with axillary lymph node dissection and adjuvant radiation therapy, and modified radical mastectomy.\n*   Both approaches offer equivalent chances of cure; there is a higher incidence of local recurrence with lumpectomy, axillary dissection, and radiation, but this observation has not been found to affect the overall cure rate in comparison with mastectomy."
        },
        {
            "id": "50",
            "question_type": "msq",
            "question": "A neglected 82-year-old woman presents with a locally advanced breast cancer that is invading the pectoralis major muscle over a broad base. She is otherwise in good health. (SELECT 1 CHOICE)",
            "options": [
                "a. No further surgical intervention",
                "b. Wide local excision",
                "c. Wide local excision with adjuvant radiation therapy",
                "d. Wide local excision with axillary lymph node dissection and radiation therapy",
                "e. Simple mastectomy (without axillary lymph node dissection)",
                "f. Modified radical mastectomy (simple mastectomy with in-continuity axillary lymph node dissection)",
                "g. Radical mastectomy",
                "h. Bilateral prophylactic simple mastectomies"
            ],
            "answer": "G",
            "explanation": "*   There are few indications for radical mastectomy as it is both more traumatic and disfiguring than any other method of local control of breast cancer and offers no greater survival benefit.\n*   One indication for radical mastectomy, however, is locally advanced breast cancer with wide invasion of the pectoralis major in a patient who is physiologically able to tolerate general anesthesia."
        }
    ]
}
{
    "chapter_name": "Abdomin Part III",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "A 65-year-old man with painless jaundice undergoes a triple-phase pancreas protocol CT scan. An ill-defined hypodense mass is seen in the pancreas phase in the pancreatic head. The mass extends to the superior mesenteric artery with less than 180° abutment and has contact along the superior mesenteric vein confluence with an irregularity of the vein. He is otherwise healthy. What is the next step in his management?",
            "options": [
                "Neoadjuvant chemoradiation therapy and restaging CT scan",
                "Pancreaticoduodenectomy",
                "Palliative biliary and enteric bypass",
                "Percutaneous transhepatic biliary drainage",
                "Pancreaticoduodenectomy with en bloc resection of superior mesenteric artery and superior mesenteric vein with reconstruction"
            ],
            "answer": "A",
            "explanation": "- Surgical resection of pancreatic ductal adenocarcinoma offers the only chance of a curative outcome, but only 10% to 20% of patients present with a surgically resectable mass.\n- Locally advanced tumors are defined by encasement (>180° contact) of celiac axis, common hepatic artery, or superior mesenteric artery (SMA), or occlusion of SMV and PV confluence.\n- With vascular reconstruction, some unresectable tumors are now called borderline resectable.\n- Borderline resectable tumors have no celiac axis or hepatic artery bifurcation involvement but contact: (1) common hepatic artery, (2) less than 180° of SMA, (3) greater than 180° of SMV or PV, or (4) less than 180° of SMV/PV confluence with vein irregularity or thrombosis with potential for venous reconstruction.\n- Patients with borderline resectable disease have a higher risk of positive surgical margin if they undergo initial resection.\n- Neoadjuvant chemotherapy regimens offer advantages over standard adjuvant chemotherapy by ensuring a high proportion of patients receive chemoradiation therapy and identifying patients with aggressive tumor biology who will progress to metastatic disease.\n- This patient, with borderline resectable disease, should undergo neoadjuvant chemoradiation therapy followed by restaging CT scan and CA19-9 levels.\n- If no disease progression, pancreaticoduodenectomy with venous reconstruction is an option if SMV/PV confluence is occluded.\n- Standard pancreaticoduodenectomy or pancreaticoduodenectomy with vascular reconstruction as the first step is not appropriate for borderline resectable tumors.\n- Biliary drainage or palliative bypass is not indicated as there is no evidence of biliary or duodenal obstruction."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "The risk of overwhelming postsplenectomy sepsis after splenectomy in childhood is highest when the spleen is removed for",
            "options": [
                "trauma.",
                "benign hematologic disorder.",
                "abscess.",
                "malignancy.",
                "iatrogenic injury."
            ],
            "answer": "D",
            "explanation": "- The primary risk of splenectomy is overwhelming postsplenectomy sepsis (OPSI), which is lifelong and greater due to encapsulated organisms.\n- The risk of infection is increased in immunosuppressed or immunocompromised individuals or those not properly immunized.\n- A comprehensive review of splenectomy indications includes trauma, benign hematologic conditions (e.g., red cell disorders, thalassemia syndromes, homozygous sickle cell disease, platelet disorders), lymphoproliferative disease, myelofibrosis, rupture due to infections, and others.\n- Regardless of indication, adjusted short- and long-term risk of death after splenectomy is higher than in the general population.\n- The best prognosis is associated with removal after trauma.\n- The underlying condition and age at removal may influence the risk of OPSI.\n- Prophylactic measures have improved, but other complications of asplenia, like hypercoagulable state with venous thrombosis and pulmonary hypertension, are surfacing.\n- A population-based study at Mayo Clinic (Rochester Epidemiology Project) found that among 96 children who underwent splenectomy from 1966 to 2011 (mean age = 12 years) for various indications (trauma predominating, but also benign hematologic diseases, malignancy, infarction, abscess, before kidney transplant, and iatrogenic injury), 22 patients developed 62 postsplenectomy sepsis events over a 14-year follow-up.\n- Patients with underlying malignancy had a more than a 4-fold increased risk of postsplenectomy sepsis compared with trauma patients."
        },
        {
            "id": "3",
            "question_type": "mcq",
            "question": "During the initial open repair of an 8-cm ventral hernia, the lowest risk of recurrence is with",
            "options": [
                "primary repair with nonabsorbable suture.",
                "sublay mesh repair with synthetic mesh.",
                "sublay mesh repair with biologic mesh.",
                "underlay mesh repair with synthetic mesh.",
                "onlay mesh repair with synthetic mesh."
            ],
            "answer": "B",
            "explanation": "- Ventral hernias are a common problem for general surgeons, with recurrence rates escalating with re-repair attempts.\n- For hernias larger than 4 cm, mesh significantly reduces recurrence risk; thus, primary repair alone for an 8-cm hernia is not indicated.\n- Once mesh use is decided, the remaining questions are mesh type (synthetic or biologic) and mesh location (onlay, inlay, sublay, underlay).\n- Two recent meta-analyses found sublay mesh placement to have the highest probability of preventing recurrence.\n- Sublay mesh also has a lower complication rate compared with other techniques.\n- Biologic mesh is associated with a higher recurrence rate and should only be used if synthetic mesh is contraindicated (e.g., contaminated wound)."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "A 43-year-old woman has 3 episodes of crampy right upper quadrant abdominal pain. An ultrasound reveals a pedunculated 7-mm polyp in the gallbladder neck and no other abnormalities. Her labs are normal. The next step in management is",
            "options": [
                "cholestyramine.",
                "triphasic CT scan of the liver.",
                "serial ultrasound every 6 months.",
                "laparoscopic cholecystectomy.",
                "cholecystectomy with en bloc resection of adjacent liver."
            ],
            "answer": "D",
            "explanation": "- Gallbladder polyps are found in approximately 5% of ultrasound examinations, with malignancy risk ranging from 0% to 27%.\n- Polyp size is an important risk factor for malignancy; cholecystectomy is generally recommended for polyps larger than 10 mm due to increased malignancy risk.\n- Other risk factors for malignant polyps include age older than 50, sessile morphology, and single polyp.\n- Laparoscopic cholecystectomy is recommended for any polyp larger than 10 mm and smaller polyps with risk factors (e.g., increase in size on serial ultrasound, sessile morphology, or symptoms).\n- Laparoscopic cholecystectomy is recommended for this patient despite the polyp being smaller than 10 mm, because she has symptoms possibly related to the polyp (biliary colic).\n- Given her age, polyp size, and pedunculated characteristic, her malignancy risk is very low.\n- She does not require a triphasic CT scan or en bloc liver resection.\n- Delaying operation for serial ultrasound would be reasonable if she were asymptomatic.\n- Cholestyramine is a bile acid sequestrant and would not treat biliary colic symptoms."
        },
        {
            "id": "5",
            "question_type": "mcq",
            "question": "A 64-year-old woman with chronic kidney disease had surveillance chest CT scan to follow a stable 1-cm pulmonary nodule. Lower cuts demonstrated a 3-cm right adrenal mass with nonenhanced attenuation of more than 10 Hounsfield units and washout of less than 60%. Further biochemical workup is consistent with the nodule being nonfunctional. With these findings, you should recommend",
            "options": [
                "repeat CT scan in 3 months.",
                "right adrenalectomy.",
                "percutaneous biopsy.",
                "no further management",
                "MRI."
            ],
            "answer": "B",
            "explanation": "- Adrenal incidentalomas are adrenal masses identified incidentally in individuals without clinical symptoms of adrenal disease.\n- Prevalence has increased due to increased abdominal imaging and higher resolution CT scanning.\n- Prevalence is approximately 6% of the general population and tends to be higher in older populations (10-15% bilateral).\n- Adrenal incidentalomas offer an opportunity for early detection of functional adrenal tumors or malignancy.\n- Biochemical workup should exclude excessive secretion of cortisol, aldosterone, catecholamines, or androgens.\n- The main concern for nonsecreting adrenal tumors is potential for malignancy (primary or metastatic).\n- Risk for adrenal cortical carcinoma relates to tumor size, increasing significantly for tumors larger than 6 cm.\n- No tumor size excludes malignancy, but risk for adrenal cortical carcinoma is exceedingly small for tumors smaller than 4 cm with favorable CT imaging characteristics.\n- A 4 cm threshold effectively identifies malignant tumors and reduces unnecessary resections of benign, nonfunctional adrenal disease.\n- Metastatic lesions to adrenal gland can be any size, often smaller than primary adrenal cortical carcinoma, but usually with a prior history of malignancy.\n- Benign adenomatous features are associated with tumors with higher intracellular lipid content, resulting in lower attenuation on nonenhanced CT scans.\n- A threshold of 10 Hounsfield units (HU) distinguishes adrenal adenomas from nonadenomatous lesions with high sensitivity and specificity.\n- If attenuation is greater than 10 HU on nonenhanced CT, further investigation is needed.\n- Contrast washout should be calculated from postcontrast images; washout greater than 60% favors adenoma.\n- In this patient, nonenhanced CT with attenuation >10 HU and contrast washout <60% are concerning for potential malignancy, despite tumor size <4 cm.\n- Adrenalectomy is recommended.\n- Adrenal biopsy may differentiate benign from malignant masses in equivocal cases but is not indicated for masses with suspicious features, as resection would be appropriate regardless of biopsy results.\n- Repeat imaging may be undertaken to assess for interval growth in benign cases, but for concerning imaging characteristics, it may delay resection."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "A 33-year-old woman using oral contraceptives complains of right upper quadrant pain and is found to have a 4-cm hepatocellular adenoma. She is concerned because her uncle died of liver cancer. Your recommendation at this time is",
            "options": [
                "liver resection.",
                "percutaneous biopsy.",
                "discontinue oral contraceptives.",
                "radiofrequency ablation",
                "angioembolization"
            ],
            "answer": "C",
            "explanation": "- Hepatocellular adenoma (HCA) is an uncommon benign liver tumor, more common in women.\n- Hormonal role (oral contraceptives, pregnancy) is implicated in HCA growth and possible regression.\n- HCA carries a risk of rupture and life-threatening hemorrhage, being the second most common cause of spontaneous liver bleed.\n- Risk of rupture is related to tumor size; bleeding risk increases for tumors larger than 5 cm, though smaller tumors can also bleed.\n- Malignant transformation is rare but more common in larger tumors (>5 cm).\n- Hemorrhage can often be treated with angioembolization.\n- Diagnosis of HCA is usually made with MRI with gadolinium contrast or contrast-enhanced multiphase CT scan; percutaneous biopsy is often discouraged due to bleeding risk.\n- Patients with HCA taking oral contraceptives should discontinue them as the first line of treatment.\n- Most patients will experience HCA regression after discontinuing oral contraceptives, and no further intervention is necessary if the HCA is smaller than 5 cm or regresses to that size.\n- Liver resection is reserved for large tumors remaining >5 cm despite other treatment or with features suspicious for hepatocellular carcinoma.\n- Resection is also considered in male patients with HCA of any size due to higher malignancy risk.\n- Urgent surgery or angioembolization may be needed for bleeding HCA."
        },
        {
            "id": "7",
            "question_type": "mcq",
            "question": "A 70-year-old obese man is in the intensive care unit recovering from a myocardial infarction 10 days ago. He complains of new severe right upper quadrant pain associated with nausea. He is afebrile, his heart rate is 100 beats per minute, and his systolic blood pressure is 90 mm Hg. The exam is remarkable for right upper quadrant tenderness. His white blood cell count is 14,000/mm3 (3600-11,200/mm3). Liver function tests, including bilirubin, are normal. Right upper quadrant ultrasound demonstrates a distended gallbladder with a wall thickness of 8 mm, pericholecystic fluid, but no gallstones. Next treatment should include",
            "options": [
                "laparoscopic cholecystectomy.",
                "open cholecystectomy.",
                "percutaneous cholecystostomy.",
                "magnetic resonance cholangiopancreatography.",
                "endoscopic retrograde cholangiopancreatography with sphincterotomy."
            ],
            "answer": "C",
            "explanation": "- Acute acalculous cholecystitis (AAC) is severe gallbladder inflammation without obstructing gallstones, common in critically ill patients.\n- AAC carries a high risk of morbidity and mortality; diagnosis is often delayed due to focus on the patient's critical condition.\n- Patients typically present with right upper quadrant pain and tenderness; diagnosis is suggested by ultrasonographic findings like a distended gallbladder with thickened wall and pericholecystic fluid.\n- Acute intervention (gallbladder removal or drainage) is indicated.\n- AAC often develops with other organ system derangements, making percutaneous cholecystostomy an attractive treatment over cholecystectomy.\n- Open cholecystectomy in critically ill AAC patients is associated with high morbidity and mortality.\n- Laparoscopic cholecystectomy, though less invasive, requires general anesthesia, carries surgical risks after a recent myocardial infarction (as in this patient), and has high conversion rates to open surgery in AAC patients.\n- Percutaneous cholecystostomy is the best treatment option, providing immediate treatment under local anesthesia with ultrasound or fluoroscopic guidance.\n- AAC is not an obstructive biliary tree disease, so ERCP with sphincterotomy is not needed for diagnosis or treatment.\n- MRCP can suggest diagnosis and confirm absence of gallstones but does not provide appropriate treatment."
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "A 70-year-old woman had a percutaneous endoscopic gastrostomy (PEG) placed 3 days ago at another hospital. CT imaging shows that the PEG transverses the transverse colon. She requires a PEG for enteral nutrition support, as she is unable to swallow. Optimal treatment for this complication is",
            "options": [
                "colonoscopy with PEG removal.",
                "removal of PEG by cutdown through the anterior abdominal wall.",
                "repeat upper endoscopy with PEG placement.",
                "jejunostomy placement.",
                "removal of PEG with colon repair and placement of a new gastrostomy."
            ],
            "answer": "E",
            "explanation": "- Inadvertent PEG placement into the colon occurs when the colon overlies the anterior gastric wall.\n- If detected early, the malpositioned PEG should be removed, the colonic injury repaired, and a new gastrostomy placed.\n- This procedure allows both repair of the colonic perforation and accurate placement of a new gastrostomy for nutritional support.\n- PEG removal via colonoscopy is not optimal in this case because the PEG was placed only 3 days ago, and there is no chronic tract to the skin with colocutaneous fistula; colonic perforation repair is required.\n- Attempts to remove PEG by cutdown through the anterior abdominal wall will result in a larger colonic perforation because the PEG has a larger internal bumper than the colonic lumen.\n- Repeat upper endoscopy with PEG placement is inappropriate due to prior complication and need for visualization for gastrostomy placement.\n- Jejunostomy is not indicated as there is no contraindication to gastrostomy and gastric feeding.\n- Methods to avoid PEG misplacement include reverse Trendelenburg position, adequate stomach insufflation, digital reflex confirmation, and light reflex with transillumination."
        },
        {
            "id": "9",
            "question_type": "mcq",
            "question": "A 48-year-old man was evaluated in clinic for recurrent large incisional hernia after ileostomy closure and primary incisional hernia repair 3 months ago. J He underwent initial laparotomy for perforated cecal diverticulitis with cecal resection, ileostomy, and mucous fistula 9 months ago. Physical exam findings and CT scan of the abdomen are shown (figures 9.1 and 9.2). You plan posterior; component separation with bilateral transversus abdominis release (TAR) for I hernia repair. What is the location for mesh implantation in TAR (posterior fl component separation)?",
            "options": [
                "Onlay over midline fascia and anterior rectus sheaths",
                "Onlay over midline fascia",
                "Sublay in retromuscular position",
                "Underlay extraperitoneal posterior to the posterior rectus sheath",
                "Intraperitoneal onlay mesh"
            ],
            "answer": "C",
            "explanation": "- Posterior component separation with transversus abdominis release (TAR) is a versatile, effective technique for ventral hernia repair.\n- TAR avoids large skin flaps and starts by entering the posterior rectus sheath to develop a retrorectus plane.\n- This plane can be dissected superiorly to the diaphragm's central tendon and inferiorly to the space of Retzius.\n- Lateral dissection extends to 1 cm medial to the linea semilunaris, preserving neurovascular bundles.\n- After identifying and dividing transversus abdominis muscle fibers, the dissection continues laterally to the psoas muscle.\n- After bilateral TAR, the posterior rectus sheath is closed in the midline to isolate visceral contents from prosthetic mesh placement.\n- Closure of the posterior rectus sheath creates space for a large piece of mesh in a sublay retromuscular position.\n- After mesh implantation, the rectus muscle and anterior rectus sheath are closed above the mesh to restore the midline abdominal wall.\n- Risk for mesh infection may be reduced with TAR due to native tissue presence on both sides of the prosthetic mesh.\n- Intraperitoneal onlay mesh exposes the mesh to visceral contents.\n- In anterior component separation, mesh is placed either as an onlay over midline fascia closure or as an underlay in a retrorectus position, which carries potential risk of bowel herniation around mesh edges."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "For which of the following surgical procedures does acellular dermal matrix mesh demonstrate lower recurrence rates and fewer infectious complications than artificial mesh?",
            "options": [
                "Reinforcement of primary closure in ventral hernia repair",
                "\"Bridged repair\" in ventral hernia defects greater than 15 cm",
                "Reinforcement of crural closure during paraesophageal hernia repair",
                "Parastomal hernia repair",
                "Ventral hernia repair with concomitant enterocutaneous fistula repair"
            ],
            "answer": "E",
            "explanation": "- Common postoperative complications after herniorrhaphy are surgical site infections (SSIs) and hernia recurrence, which increase with wound contamination.\n- Historically, acellular dermal matrix (ADM) was hypothesized to reduce infected mesh instances in contaminated wounds.\n- Due to ADM's higher cost, some surgeons choose synthetic mesh even with wound contamination.\n- Financial considerations have led to selective ADM use, limited to herniorrhaphies most likely to benefit from biologic mesh.\n- A study with 359 patients showed ADM use resulted in lower SSI rates for abdominal wall repair in heavy contamination, such as with enterocutaneous fistula (ECF) repair.\n- In these cases, ADM showed lower infection rates, less hernia recurrence, and fewer complications compared to synthetic mesh.\n- These data support ADM use over synthetic mesh for complex abdominal wall repair in heavy wound contamination or with concomitant ECF repair.\n- A separate study showed it was safe to repair both abdominal wall hernia and ECF in a single operation, and biologic mesh offered lower rates of fistula recurrence compared with synthetic mesh.\n- Abdominal wall repair generally has lower recurrence and SSI rates when primary fascial closure is reinforced with mesh, rather than bridged mesh repair.\n- Even with ADM, SSI and recurrence are high for bridged repairs.\n- Synthetic mesh has high success rates for augmenting crural closure, repairing parastomal hernias, and reinforcing primary closure in abdominal wall repair.\n- Thus, there appears to be no advantage in using more expensive ADM in these settings, except for cases with heavy contamination or ECF."
        },
        {
            "id": "11",
            "question_type": "mcq",
            "question": "A 56-year-old man undergoes open low anterior resection. The lowest risk for abdominal wall hernia will occur by closing his midline laparotomy with which of the following strategies for a running closure?",
            "options": [
                "A. Polvglactin 0 1 1",
                "B. Polvglactin 1 1 0.5",
                "C. Polydioxanone 2-0 0.5 0.5",
                "D. Polydioxanone 0 1 1",
                "E. Polvglactin 0 1 0.5"
            ],
            "answer": "C",
            "explanation": "- Incisional hernia is a significant issue after laparotomy, with multifactorial etiology.\n- Suture technique and material choice influence incisional hernia rate.\n- Slowly (6-9 months) absorbable suture (polydioxanone) is preferred over rapidly (2-3 months) absorbable suture (polyglactin).\n- Incisional hernia rate is lowest with small, closely spaced fascial bites.\n- Studies documented no increase in fascial dehiscence rates with this technique.\n- Two randomized trials found 2-0 polydioxanone with small, closely spaced fascial bites (5 mm deep and 5 mm apart) resulted in incisional hernia rates of 4.7% to 13%, compared to 17.2% to 21% with usual large-bite technique.\n- Based on these findings, polyglactin should be avoided as it is rapidly absorbable.\n- Small bites reduce incisional hernia risk, making 0.5 cm depth and width most appropriate."
        },
        {
            "id": "12",
            "question_type": "mcq",
            "question": "A 67-year-old man is recovering from pancreaticoduodenectomy for stage lb pancreatic adenocarcinoma (T2N0M0). The next step in his treatment should be",
            "options": [
                "chemoradiation.",
                "radiation.",
                "chemotherapy.",
                "routine surveillance follow-up.",
                "immunotherapy."
            ],
            "answer": "C",
            "explanation": "- Pancreatic adenocarcinoma has a poor prognosis; complete resection offers the best chance for long-term survival.\n- Clinical trials have sought to improve outcomes with neoadjuvant chemotherapy, radiotherapy, or a combination.\n- Similar trials investigated these techniques in the adjuvant setting.\n- Adjuvant chemoradiation is associated with higher toxicity but no survival improvement, and is not recommended in node-negative patients, except for residual microscopic disease or node-positive disease.\n- Radiation therapy alone offers no survival benefit in either neoadjuvant or adjuvant roles.\n- Adjuvant chemotherapy is associated with survival benefit and acceptable toxicity.\n- Recommended agents are gemcitabine or fluorouracil plus folinic acid; gemcitabine is favored due to lower toxicity.\n- Routine surveillance without adjuvant chemotherapy is not recommended.\n- Immunotherapy is promising but remains under clinical investigation and is not recommended for routine use after resection outside of a clinical trial."
        },
        {
            "id": "13",
            "question_type": "mcq",
            "question": "A 55-year-old healthy man presents with jaundice (bilirubin =12 mg/dL; 0.2-1.9 mg/dL). His cancer antigen 19-9 level is 77 U/mL (0-37 U/mL). CT imaging reveals a 1.5-cm pancreatic head mass, 1-cm dilated common bile duct, and a 0.9-cm pancreatic duct Fine needle aspiration of the mass produces cells suspicious for malignancy. The superior mesenteric artery appears to be uninvolved. The superior mesenteric vein-portal vein has regular contour and appears to be patent. The most appropriate next step in this patient's management should be",
            "options": [
                "neoadjuvant FOLFIRINOX.",
                "neoadjuvant gemcitabine.",
                "neoadjuvant external beam radiation therapy.",
                "Whipple procedure.",
                "biliary decompression and neoadjuvant gemcitabine."
            ],
            "answer": "D",
            "explanation": "- This patient has pancreatic adenocarcinoma, which has a poor prognosis (5-year overall survival of 5% to 7%).\n- 80% of patients present with incurable locally advanced or metastatic disease.\n- Resectable or borderline resectable disease has a 5-year overall survival of only 25%.\n- Primary treatment for resectable disease is surgery to resect the primary tumor and regional nodes.\n- Surgical resection should be followed by adjuvant chemotherapy (gemcitabine or fluorouracil) to decrease recurrence and increase survival.\n- No definitive data support adjuvant radiation therapy after pancreaticoduodenectomy (Whipple procedure).\n- There is no role for neoadjuvant radiation therapy.\n- Patients with pancreatic adenocarcinoma in the head of the pancreas should undergo a Whipple procedure followed by chemotherapy.\n- Patients with borderline resectable disease should be treated with neoadjuvant chemotherapy and biliary decompression if needed.\n- Published guidelines define borderline resectable pancreatic adenocarcinoma.\n- The patient in this scenario has preoperatively resectable disease and should undergo resection with curative intent as initial treatment.\n- Inspection of the bowel and liver should be done at the time of surgery before proceeding with resection."
        },
        {
            "id": "14",
            "question_type": "mcq",
            "question": "A 67-year-old healthy man undergoes a CT scan of the abdomen after being involved in a motor vehicle collision. The scan is remarkable only for an incidentally noted 11-mm polyp in the fundus of the gallbladder. A right upper quadrant ultrasound confirms the CT findings with no evidence of cholecystitis. The lesion is homogeneous and isoechoic compared with the liver. The patient is hemodynamically normal, with no significant injuries related to the accident. The most appropriate next step in his management is",
            "options": [
                "follow-up ultrasound at 6 months.",
                "magnetic resonance cholangiopancreatography.",
                "laparoscopic cholecystectomy.",
                "open extended cholecystectomy.",
                "open extended cholecystectomy, regional lymphadenectomy."
            ],
            "answer": "C",
            "explanation": "- This patient has an incidental 11-mm gallbladder polyp.\n- Most gallbladder polyps are benign and require no additional workup or treatment.\n- A minority of gallbladder polyps are adenomas with potential for malignant transformation to adenocarcinoma.\n- Gallbladder cancer has a dismal prognosis unless detected early, making early diagnosis and treatment essential.\n- Risk factors for gallbladder malignancy include age >50, primary sclerosing cholangitis, Indian ethnicity, and sessile polyp.\n- Single-institution studies show very low malignancy risk for incidental gallbladder polyps, especially when <10 mm, patient has no risk factors, and is asymptomatic.\n- Published guidelines recommend cholecystectomy if follow-up ultrasound shows polyp increased by at least 2 mm or reached 10 mm.\n- If the polyp disappears, additional ultrasounds can be cancelled.\n- Without invasive adenocarcinoma diagnosis, no data support extended cholecystectomy or regional lymphadenectomy because the polyp is confined within the gallbladder wall.\n- For an asymptomatic patient with an ultrasound consistent with a gallbladder polyp, there is no indication for magnetic resonance cholangiopancreatography.\n- Table 14.1 (not included in output, but referenced in explanation) outlines recommendations based on polyp size, symptoms, and risk factors."
        },
        {
            "id": "15",
            "question_type": "mcq",
            "question": "A 60-year-old woman presents with lower abdominal pain, nausea, and vomiting 2 years after a total cystectomy for bladder cancer. She is afebrile with normal vital signs. A CT scan was obtained (figures 15.1,15.2, and 15.3). What is the most appropriate next step in management?",
            "options": [
                "Re-siting of the ostomy",
                "Primary repair of the hernia",
                "Observation",
                "Herniorrhaphy with mesh",
                "Laparoscopic reduction with truss application"
            ],
            "answer": "D",
            "explanation": "- Parastomal hernias are common complications of ostomies.\n- Repair at the original site with mesh reinforcement consistently yields the lowest failure rate.\n- The keyhole mesh technique and the mesh flap (Sugarbaker) technique are commonly performed.\n- In the keyhole technique, mesh is placed with a cutout for ostomy egress, providing wide coverage of the abdominal wall defect.\n- The mesh flap or Sugarbaker technique uses intra-abdominal mesh placement over the hernia with a flap valve created at the mesh edge.\n- Both techniques can be performed laparoscopically; the flap valve technique has somewhat lower recurrence rates.\n- Parastomal hernias can be observed if asymptomatic.\n- However, since this patient demonstrated intestinal obstruction, operative intervention is warranted.\n- Moving the ostomy site is generally not recommended due to increased complexity and risk of a second hernia site.\n- Primary repair of parastomal hernias consistently has the highest recurrence rate.\n- Laparoscopic reduction with truss application does not provide hernia repair and is not definitive treatment."
        },
        {
            "id": "16",
            "question_type": "mcq",
            "question": "Which of the following is the most appropriate indication for hyperthermic intraperitoneal chemotherapy in patients with metastatic gastrointestinal adenocarcinoma?",
            "options": [
                "Intrahepatic metastasis",
                "Biliary obstruction",
                "Retroperitoneal lymphadenopathy",
                "A fixed tumor shelf on the pelvis",
                "Diffuse peritoneal tumor seeding"
            ],
            "answer": "E",
            "explanation": "- Peritoneal surface malignancies can be primary (e.g., peritoneal mesothelioma) or secondary (e.g., metastases from GI tract, ovary, breast).\n- Reducing overall tumor burden with surgery (cytoreductive phase) combined with direct chemotherapy (HIPEC) has shown success in selected patients with diffuse peritoneal nodules.\n- Identifying patients who benefit is ongoing research.\n- Best outcomes are in healthy patients with low-grade appendiceal tumors where peritoneal tumor burden can be maximally resected.\n- Peritoneal carcinomatosis index is an intraoperative estimate of tumor burden and correlates with outcome.\n- Contraindications to HIPEC include tumors that are not surface nodules on the peritoneum and thus would not be exposed to intraperitoneal chemotherapy.\n- Intrahepatic metastasis or pancreatic/bile duct tumors causing obstruction would not benefit.\n- Primary or metastatic disease in the retroperitoneum (e.g., fixed tumor shelf) or in lymph nodes would not be exposed to intraperitoneal chemotherapy and would not benefit from HIPEC."
        },
        {
            "id": "17",
            "question_type": "mcq",
            "question": "A 23-year-old woman presents with vague left upper quadrant abdominal pain. CT scan shows a 10-cm cyst in the spleen. She has no history of trauma. After ruling out parasitic infection and evaluating for malignancy, how do you determine whether the cyst is the etiology of her pain?",
            "options": [
                "Open splenectomy",
                "Open partial splenectomy",
                "Percutaneous aspiration",
                "Cyst sclerosis",
                "Percutaneous drain placement"
            ],
            "answer": "C",
            "explanation": "- Approximately 80% to 90% of nonparasitic splenic cystic masses are primary cysts, sometimes called false cysts, caused by trauma, infarct, or nonspecific bacterial infections, resulting in fluid-filled cavities without cellular lining.\n- The remaining 10% of nonparasitic splenic cysts are congenital (lined by epithelial-derived cells) or neoplastic (most commonly hemangiomas or lymphangiomas).\n- The majority (70%) of patients are symptomatic, with pain thought to be due to splenic capsule stretch from mass effect.\n- Other symptoms include early satiety, nausea, vomiting, and weight loss; physical signs may include splenomegaly.\n- After ruling out parasitic infection and malignancy, percutaneous aspiration can reduce mass effect and alleviate pain.\n- Although recurrence is common, pain relief after aspiration confirms the cyst as the cause.\n- Return of pain suggests recurrence, at which point surgical treatment (open or laparoscopic partial or complete splenectomy) may be considered.\n- Some surgeons suggest open splenectomy for parasitic lesions to avoid intraperitoneal seeding.\n- Percutaneous sclerosis is an alternative to surgery to eliminate the risk of spreading daughter cysts."
        },
        {
            "id": "18",
            "question_type": "mcq",
            "question": "A 35-year-old man is seen after 12 hours of right lower quadrant discomfort, nausea, and vomiting. A CT scan is shown (figures 18.1 and 18.2). Biopsy of the lesion shown in the CT scan shows spindle cells. Which of the following statements regarding this patient is true?",
            "options": [
                "Immunohistochemistry of the biopsy predicts prognosis.",
                "Nodal metastasis is more important to staging thanhistologic grade.",
                "Neoadjuvant chemoradiation is recommended.",
                "Local recurrence occurs in up to 60% of patients within 10 years.",
                "Frozen sections at operation determine margins."
            ],
            "answer": "D",
            "explanation": "- This patient has a sarcoma.\n- Soft tissue tumors arise from mesenchymal tissues (fat, muscle, fibrous tissue, blood vessels); approximately 15% arise from the retroperitoneum.\n- Preoperative percutaneous biopsy of a retroperitoneal tumor is discouraged to preserve the tumor capsule intact; core biopsy is often insufficient.\n- Malignancy or aggressive nature depends on pathologic characteristics: size, histologic subtype (requiring immunohistochemical markers), grade (differentiation, mitotic figures, necrosis), margin status, and invasion of adjacent structures.\n- The 8th American Joint Committee on Cancer staging for sarcomas now includes tailoring size criteria to the primary tumor site.\n- Lymph node involvement is uncommon and contributes little to sarcoma staging.\n- Efficacy of neoadjuvant chemotherapy for high-risk sarcoma is debated; recent trials show promise for trunk and extremity tumors.\n- Other neoadjuvant chemotherapy regimens followed by resection (with or without radiation) may improve response rate for younger patients with high-grade, borderline resectable lesions to preserve function.\n- Evidence for concomitant chemoradiation in retroperitoneal sarcoma management is lacking.\n- The predominant failure pattern for sarcomas is local recurrence, occurring in 25% to 30% of patients at 5 years and 35% to 60% at 10 years."
        },
        {
            "id": "19",
            "question_type": "mcq",
            "question": "A 40-year-old woman presents with fever and minimal right upper quadrant pain. Her medical history is notable only for diabetes mellitus. Laboratory findings include a white blood count of 11,000/mm3 (3600-11,200/mm3), direct bilirubin of 1.4 mg/dL (0-0.3 mg/dL), and total bilirubin of 2.4 mg/dL (0.2-1.9 mg/dL). Abdominal ultrasound is unremarkable, but axial imaging notes air in the wall of the gallbladder. She undergoes a laparoscopic cholecystectomy the next morning and is noted to have gangrenous cholecystitis. What factor correlates with gangrenous cholecystitis?",
            "options": [
                "Female sex",
                "White blood count less than 15,000/mm3",
                "Total bilirubin greater than 2.0 mg/dL",
                "History of diabetes mellitus",
                "Age less them 45 years old"
            ],
            "answer": "D",
            "explanation": "- Gangrenous cholecystitis affects approximately 1 in 5 patients with acute cholecystitis.\n- It is an unlikely progression of acute cholecystitis and is more common in elderly male patients with comorbid conditions like diabetes mellitus.\n- Full-thickness ischemic necrosis of the gallbladder is typically encountered.\n- Laparoscopic attempts at removal are associated with a higher open conversion rate.\n- These patients often have worse outcomes, including increased hospital and ICU length of stay and mortality.\n- Treatment options are generally the same as for acute cholecystitis (cholecystectomy), but early recognition is important to avoid complications from delays.\n- Risk stratification strategies for gangrenous cholecystitis include: age older than 45, gallbladder thickness greater than 4.5 mm, WBC count greater than 15,000/mm3, history of diabetes mellitus, and male sex.\n- Up to half of patients with gangrenous cholecystitis may have a normal ultrasound.\n- CT imaging is increasingly used for diagnosis; several series report nearly 90% accuracy for gangrenous cholecystitis.\n- CT signs concerning for diagnosis include intraluminal or intramural gas, irregular gallbladder wall, gallbladder abscess, and absence of part or entire gallbladder wall."
        },
        {
            "id": "20",
            "question_type": "mcq",
            "question": "A 54-year-old with a history of alcoholic cirrhosis and ascites presents with a reducible but painful umbilical hernia. He has no overlying skin changes and denies history of ascites leaking from the site. Which of the following statements is true regarding surgical repair of umbilical hernia in cirrhotic patients?",
            "options": [
                "Surgical repair should not be performed unless complications are present",
                "The recanalized umbilical vein should be ligated.",
                "The use of mesh is contraindicated.",
                "Placing a peritoneovenous shunt reduces wound complications.",
                "Surgical repair is done electively after a period of medical optimization."
            ],
            "answer": "E",
            "explanation": "- Portal hypertension can have severe physiologic effects, including esophageal/gastric varices, hemorrhoid disease, and umbilical vein recanalization.\n- Increased intraabdominal pressure from ascites can lead to enlarging umbilical and inguinal hernias.\n- Approximately 1 in 5 cirrhotic patients will develop an umbilical hernia, which if untreated, can result in significant morbidity (bowel strangulation, skin breakdown, ascitic fluid leakage).\n- Patients are often hypoalbuminemic and coagulopathic, making them poor surgical candidates.\n- Historically, umbilical hernias were only repaired for complications, which was highly morbid.\n- Advances in anesthetic techniques have reduced operative risks, leading to current recommendations for elective repair due to complication rates <10%.\n- Patients should be medically optimized before elective surgical repair, including free water restriction, diuretics, and large volume paracentesis (with albumin infusion).\n- Some series report good results with perioperative temporary peritoneal dialysis catheter or transjugular intrahepatic portosystemic shunt.\n- Peritoneovenous shunt placement is not indicated due to associated risks and availability of other techniques.\n- Technically, synthetic mesh use is not contraindicated; excellent results are documented with onlay and retrorectus sublay repairs.\n- Recurrence rates drop from ~15% with primary repairs to <3% with mesh.\n- A patent umbilical vein should not be ligated as it diverts substantial splanchnic flow, and ligation can cause decompensation."
        },
        {
            "id": "21",
            "question_type": "mcq",
            "question": "An 18-year-old man is taken urgently for splenectomy and hepatorrhaphy after a motorcycle crash. Due to coagulopathy and hemodynamic abnormalities, his abdomen is left open, and a temporary abdominal vacuum closure device is applied. He is taken to the intensive care unit and resuscitated. He is started on enteral nutrition on postoperative day 1. Enteral nutrition",
            "options": [
                "will increase bowel distension.",
                "increases the risk for bowel ischemia.",
                "increases the odds of primary fascial closure.",
                "increases the risk of enteroatmospheric fistula.",
                "should be given as an elemental formula."
            ],
            "answer": "C",
            "explanation": "- Damage control surgery (DCS) improves mortality in certain trauma and emergency surgical cases.\n- DCS involves rapid hemostasis and contamination control, deferring definitive completion until physiologic derangements are reversed (often within 24-48 hours).\n- Definitive fascial closure may require several trips to the operating room.\n- DCS carries unique risks, including enterocutaneous fistula and large ventral hernias; risks of staged abdominal closure must be weighed against prolonged index operation.\n- Early (within 72 hours) enteral nutrition (EN) in open abdomen is associated with increased primary fascial closure rates, decreased overall complications, and decreased mortality.\n- These benefits primarily apply to patients without bowel injury.\n- Average time to primary fascial closure appears longer in patients receiving EN.\n- For patients with bowel injury, early EN does not show the same benefits, but no adverse effects are reported.\n- Risks of enteroatmospheric fistula in open abdomen relate to anastomosis presence (especially large bowel), infection, or total fluid intake at 48 hours, not initiation of early EN.\n- No reports of EN causing bowel ischemia in appropriately resuscitated patients.\n- No reported benefits of elemental or trophic feeds over full or standard feeds in open abdomen settings."
        },
        {
            "id": "22",
            "question_type": "mcq",
            "question": "A 24-year-old woman is determined by a neurosurgeon to require a ventriculoperitoneal shunt for hydrocephalus. Which of the following statements is true regarding the placement of the peritoneal portion (distal portion) of the shunt?",
            "options": [
                "Laparoscopic placement is beneficial only in morbidly obese patients.",
                "Superficial surgical site infections are higher with open placement.",
                "Distal shunt failure rates are lower with laparoscopic placement",
                "Operative time is increased with laparoscopic placement.",
                "Open placement is preferred in patients who have received multiple shunts in the past."
            ],
            "answer": "C",
            "explanation": "- Ventriculoperitoneal (VP) shunt placement is the first-line neurosurgical treatment for long-term hydrocephalus decompression and drainage.\n- Shunt revision likelihood is high and can involve ventricular (proximal) or peritoneal (distal) portions.\n- Historically, the peritoneal portion was placed via small laparotomy in the right or left upper quadrant, with fascia secured to prevent leakage.\n- Increasingly, general surgeons assist in neurosurgery, gaining laparoscopic access to the peritoneum for direct shunt placement via a smaller incision/puncture.\n- Theoretical benefits of laparoscopic placement include lower likelihood of shunt damage at insertion site, direct placement into pelvis or suprahepatic space, avoidance of subcutaneous space over fascial insertion site, and direct visualization of CSF flow after placement.\n- Laparoscopic-assisted VP shunt placement is associated with shorter operative time and lower distal shunt failure rates.\n- Overall shunt failure rate is the same between the two techniques.\n- Benefits are independent of patient BMI.\n- No benefit to traditional open shunt placement in setting of multiple prior shunts.\n- Laparoscopic access to peritoneum offers a more comprehensive view for optimal shunt location.\n- Surgical site infection rate is the same between open and laparoscopic shunt placements in several studies."
        },
        {
            "id": "23",
            "question_type": "mcq",
            "question": "Which of the following statements regarding percutaneous cholecystostomy used for acute cholecystitis is true?",
            "options": [
                "The rate of readmission compared with laparoscopic cholecystectomy is lower.",
                "The rate of recurrent acute cholecystitis is less than 10%.",
                "Thirty-day mortality is higher than for laparoscopic cholecystectomy.",
                "Long-term survival is better than for laparoscopic cholecystectomy.",
                "Hospital stay is shorter than for laparoscopic cholecystectomy."
            ],
            "answer": "C",
            "explanation": "- For most patients with acute cholecystitis, cholecystectomy is the preferred treatment.\n- Tokyo guidelines (2007, revised later) characterize and manage acute cholecystitis severity.\n- Grade I cholecystitis involves inflammatory changes without organ dysfunction.\n- Grade II cholecystitis includes leukocytosis, palpable tender mass, marked local inflammation on imaging, but no organ dysfunction.\n- Grade III includes Grade I and II findings, plus organ dysfunction (hypotension, mental changes, respiratory failure, oliguria, coagulopathy).\n- Tokyo guidelines recommend urgent cholecystostomy tube placement followed by antibiotics and eventual cholecystectomy for Grade III cholecystitis.\n- This management strategy is not widely followed in the United States.\n- A retrospective Medicare study compared cholecystostomy management to no cholecystostomy for acute cholecystitis with organ failure (Grade III).\n- In-hospital mortality was similar, but 30- and 90-day mortality odds were significantly higher for patients who underwent cholecystostomy.\n- Tokyo guidelines evaluate only the organ to be removed, not the patient, which may explain US experience inconsistency.\n- If cholecystectomy is not performed, acute cholecystitis will recur.\n- Readmission rates associated with cholecystostomy tube placement are much greater than for cholecystectomy (readmission rate >20% for gallstone-related complications).\n- Recurrence of cholecystitis was up to 41% with tube placement, with readmission rates of 23% to 41% compared to 9% without cholecystostomy tube.\n- Length of stay is significantly longer if cholecystostomy tube is placed compared to no tube and laparoscopic cholecystectomy."
        },
        {
            "id": "24",
            "question_type": "mcq",
            "question": "Which of the following fascial closure techniques minimizes the incidence of incisional hernia after an elective midline laparotomy?",
            "options": [
                "Onlay polypropylene mesh reinforcement",
                "Sublay polypropylene mesh reinforcement",
                "Primary surgical closure with continuous running suture",
                "Primary surgical closure with interrupted running suture",
                "Incisional negative pressure device"
            ],
            "answer": "A",
            "explanation": "- Incisional hernia is a common long-term complication after abdominal surgery, with reports ranging from 5% to 20% in the general population and up to 30% in high-risk patients (e.g., BMI >30, abdominal aortic aneurysms).\n- Prophylactic mesh reinforcement for elective midline laparotomy may reduce incisional hernias.\n- A systematic review of 12 randomized controlled trials reported that prophylactic mesh during midline laparotomy reduced incisional hernia incidence but increased seroma and surgical site infection rates.\n- The PRIMA randomized controlled trial found that onlay mesh reinforcement prevented incisional hernia better than sublay mesh reinforcement or primarily sutured incisions.\n- Despite a higher incidence of seromas in the onlay group, there was no associated increased rate of surgical site infections, mesh infections, reoperations, or readmissions.\n- Given that onlay mesh placement is technically easier than sublay mesh reinforcement, laparotomy closure with onlay mesh reinforcement could become the standard treatment for high-risk groups.\n- Negative pressure devices are a safe and easy tool that preserves fascial integrity and elasticity and increases the likelihood of eventual primary fascial closure in critically ill patients requiring temporary abdominal closure."
        },
        {
            "id": "25",
            "question_type": "mcq",
            "question": "A 55-year-old healthy woman presents to the emergency department with lower abdominal pain. A CT scan of the abdomen/pelvis shows a 2.5-cm mass in the pancreatic tail. Ultrasound-guided biopsy of the pancreatic mass shows a low-grade neuroendocrine tumor. What is the recommended treatment?",
            "options": [
                "Enucleation of the mass",
                "Total pancreatectomy",
                "Observation with repeat imaging in 6 months",
                "Distal pancreatectomy with splenectomy",
                "Octreotide"
            ],
            "answer": "D",
            "explanation": "- Most neuroendocrine tumors of the pancreas (PNETs) are incidentally found and nonfunctional.\n- Surgical resection is the primary treatment for localized PNETs.\n- For nonfunctioning tumors ≤2 cm and insulinomas, enucleation is reasonable.\n- Depending on location, distal pancreatectomy (with possible splenic preservation) or pancreaticoduodenectomy may be necessary even for small tumors.\n- Management of lymph nodes is controversial for nonfunctional PNETs between 1 and 2 cm (reported nodal metastases risk 7-26%); lymph node resection should be considered.\n- Formal pancreatic resection, including regional lymph nodes, is recommended for tumors >2 cm, functional PNETs (somatostatinoma, VIPoma, glucagonoma), or with involved lymph nodes.\n- Total pancreatectomy is rarely necessary.\n- Observation is proposed as a reasonable option for small (<2 cm), nonfunctional, incidentally found tumors, but not recommended for this 2.5-cm tumor.\n- Octreotide is a synthetic analog of somatostatin; most PNETs express somatostatin receptors.\n- Octreotide is used for locoregional unresectable NETs and patients with distant metastatic disease.\n- This patient has resectable disease."
        }
    ]
}
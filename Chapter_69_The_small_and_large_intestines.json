{
    "chapter_name": "69 The small and large intestines",
    "questions": [
        {
            "id": 1,
            "question_type": "msq",
            "question": "1. Which of the following statements are true?",
            "options": [
                "A The proximal 40% is the jejunum.",
                "B The arterial supply in the form of arcades distinguishes jejunum from ileum.",
                "C The fat in the ileal mesentery is thicker.",
                "D The small bowel has autonomic innervation from the splanchnic nerves.",
                "E The jejunum has rich lymphoid aggregates in the form of Peyer's patches."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "The jejunum is regarded as constituting two-fifths (40%) of the small bowel length. It is the distribution of the arterial supply that distinguishes the jejunum from the ileum. The jejunal arterial branches join each other in a series of anastomosing loops to form arterial arcades, which are single in the upper jejunum and double in the lower jejunum. From these arcades long straight arteries pass into the mesenteric border of the jejunum, producing narrow windows between the branches.\nIn the ileum the arcades are more numerous (three to five) and lie nearer to the ileal wall so that the straight arteries from the arcades are much shorter before they enter the mesenteric border of the ileum. Therefore, the windows between the arteries are broader. Another distinguishing feature is that the ileal mesentery contains much more fat. Autonomic nerves from the splanchnic nerves accompany the blood vessels. The parasympathetic augments peristaltic activity and secretion while the sympathetic inhibits and is vasoconstrictor.\nPeyer's patches are aggregated lymphoid follicles concentrated in the ileum. These are sometimes visible through the muscle wall of the ileum as whitish plaques in the mucus membrane. When enlarged they form the lead point in childhood ileocaecal intussusception."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "2. The following statements are true except:\nA The taenia coli are responsible for the colonic haustrations.\nB The colon on both sides are closely related to the ureters.\nC The sigmoid colon has no mesentery at the back.\nD The marginal artery of Drummond is the anastomosis between the superior and inferior mesenteric arteries.\nE The superior mesenteric artery supplies the large bowel until the proximal two-thirds of the transverse colon.",
            "options": [
                "A The taenia coli are responsible for the colonic haustrations.",
                "B The colon on both sides are closely related to the ureters.",
                "C The sigmoid colon has no mesentery at the back.",
                "D The marginal artery of Drummond is the anastomosis between the superior and inferior mesenteric arteries.",
                "E The superior mesenteric artery supplies the large bowel until the proximal two-thirds of the transverse colon."
            ],
            "answer": "C",
            "explanation": "The sigmoid colon is completely invested in peritoneum and hangs free on a mesentery called the sigmoid mesocolon. Within the layers of this mesocolon travel the blood vessels and accompanying lymphatics. In resection of the sigmoid colon, the mesocolon has to be dissected with meticulous care to excise all the lymph nodes in cancer surgery.\nThe taenia coli, three in number, are flat bands of longitudinal muscle that extend from the base of the appendix to the rectosigmoid junction. They pull the colon to cause the haustrations. On both sides, the ascending colon on the right and descending colon on the left are very closely related to the ureters. This fact is of the utmost importance during colonic resections to identify the ureters and prevent iatrogenic damage.\nThe superior mesenteric artery, the artery of the midgut, supplies the large bowel until the junction of the right two-thirds and left one-third of the transverse colon. At this site is the anastomosis between the branches of the superior mesenteric and inferior mesenteric arteries (artery of the hindgut) so that there is a complete arterial supply of the entire colon along its margin referred to as 'the marginal artery of Drummond'."
        },
        {
            "id": 3,
            "question_type": "msq",
            "question": "3. Which of the following statements are true?\nA The principal function of small intestine is the digestion of food and absorption of fluid and nutrients.\nB Absorption of bile salts and vitamin B12 occur in the jejunum.\nC. The main function of colon is to absorb water.\nD 1 litre of ileal contents enter the large bowel every 24 hours.\nE Faecal residue reaches the caecum 24 hours after a meal.",
            "options": [
                "A The principal function of small intestine is the digestion of food and absorption of fluid and nutrients.",
                "B Absorption of bile salts and vitamin B12 occur in the jejunum.",
                "C. The main function of colon is to absorb water.",
                "D 1 litre of ileal contents enter the large bowel every 24 hours.",
                "E Faecal residue reaches the caecum 24 hours after a meal."
            ],
            "answer": [
                "A",
                "C",
                "D"
            ],
            "explanation": "The main function of the small intestine is the digestion of food and absorption of nutrients and fluid. Carbohydrates and proteins are broken down by pancreatic enzymes and absorbed through the brush border by movements of the villi (by the ‘villus pump') aided by smooth muscle contraction. Movements of the villi are regulated by Meissner's plexus of nerves stimulated by the intestinal hormones. The jejunum is the main site for absorption of water, amino acids, sugars, short chain fatty acids, vitamins, minerals and glycerol. The terminal ileum is the principal site of absorption bile salts and vitamin B12, the site being referred to as the entero-hepatic circulation.\nShould a part of the jejunum be removed, the ileum will take on its function, but resection of the terminal ileum as in a right hemicolectomy or disease as in regional ileitis, will result in disturbance of the entero-hepatic circulation causing reduced bile acid pool with a greater chance of developing gallstones and deficiency of B12, and vitamins A, D and K. The small intestine is the site of synthesis of plasma lipoproteins.\nMovements of the muscular coats of the small bowel is controlled by Auerbach's plexus of nerves. These two plexuses of nerves are referred to as the enteric nervous system, which controls the various intestinal hormones, abnormal secretions of which result in neuro-endocrine tumours.\nThe principal colonic function is to absorb water; 1 litre of ileal contents enter the caecum every 24 hours to be converted into 150 to 250 mL of faeces. The normal colonic microflora (e.g., bacteroides) cause fermentation of dietary fibre leading to the formation of short-chain fatty acids, an important metabolic fuel for the colonic mucosa. Normally faecal residue reaches the caecum 4 hours, and the rectum 24 hours, after a meal."
        },
        {
            "id": 4,
            "question_type": "msq",
            "question": "4. Which of the following statements are true in ulcerative colitis (UC)?\nA In 95% of cases, the disease starts in the rectum and spreads proximally.\nB Patients might present as an emergency with fulminating disease in 5% to 10%.\nC It is a diffuse disease affecting all the layers of the large bowel.\nD Granulomas are a typical microscopic feature.\nE The transverse colon is affected in toxic megacolon.",
            "options": [
                "A In 95% of cases, the disease starts in the rectum and spreads proximally.",
                "B Patients might present as an emergency with fulminating disease in 5% to 10%.",
                "C It is a diffuse disease affecting all the layers of the large bowel.",
                "D Granulomas are a typical microscopic feature.",
                "E The transverse colon is affected in toxic megacolon."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "In 95% of cases the disease starts in the rectum and spreads proximally as a continuous process. If the disease does not conform to this pattern, the diagnosis of UC should be in doubt. While most patients present electively, 5% to 10% present as an emergency with acute fulminating disease. The inflammation is diffuse and continuous, being confined to the mucosa and superficial submucosa. One of the complications is toxic megacolon, which typically affects the transverse colon. If on a plain x-ray the diameter is >6 cm toxic colon should be diagnosed.\nThe disease does not affect all the layers of the bowel. If it does so, the diagnosis is not UC. Microscopically granulomas are not a feature. They occur in Crohn's disease and tuberculosis, in the latter they are caseating. Crypt abscesses are seen on histology, the walls of the crypts of Lieberkuhn being infiltrated by inflammatory cells which re also seen in the lamina propria."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "5. Which of the following is not a complication of UC?\nA Carcinoma.\nB Primary sclerosing cholangitis.\nC Internal fistulae.\nD Ankylosing spondylitis.\nE Perforation.",
            "options": [
                "A Carcinoma.",
                "B Primary sclerosing cholangitis.",
                "C Internal fistulae.",
                "D Ankylosing spondylitis.",
                "E Perforation."
            ],
            "answer": "C",
            "explanation": "Internal fistulae is not a complication of UC. This is because the disease process is confined to the mucosa and submucosa. Fistula tend to occur when the pathology is a transmural inflammation as in Crohn's disease. The complications in UC are carcinoma when the disease is present for longer than 10 years; primary sclerosing cholangitis is an extraintestinal manifestation that might lead to cirrhosis and liver failure while cholangiocarcinoma might rarely occur. Ankylosing spondylitis is 20 times more common in UC than in the general population. Large-bowel perforation is a very serious complication with a mortality of 40%. The complications of ulcerative colitis are enumerated in Tables 69.1 and 69.2."
        },
        {
            "id": 6,
            "question_type": "msq",
            "question": "6. Which of the following are barium enema findings in UC?\nA Loss of haustrations.\nB Narrow contracted colon.\nC Increase in the presacral space.\nD Cobblestone appearance.\nE Backwash ileitis.",
            "options": [
                "A Loss of haustrations.",
                "B Narrow contracted colon.",
                "C Increase in the presacral space.",
                "D Cobblestone appearance.",
                "E Backwash ileitis."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "E"
            ],
            "explanation": "In UC the barium enema findings are lack of haustrations and a narrow contracted colon, which are the result of fibrosis (Figure 69.1a). For the same reason, in long-standing disease, the rectosigmoid is pulled forward away from the sacrum thus creating an increase in the presacral or retro-rectal space (Figure 69.1b). Backwash ileitis is another prominent radiological feature that can be confirmed on colonoscopy. Cobblestone appearance is not a feature seen in UC."
        },
        {
            "id": 7,
            "question_type": "msq",
            "question": "7. What is colonoscopy routinely used for in UC?\nA To assess the extent of the disease.\nB To distinguish it from Crohn's disease.\nC To monitor the response to treatment.\nD To carry out surveillance for the development of cancer.\nE To assess severity in acute cases.",
            "options": [
                "A To assess the extent of the disease.",
                "B To distinguish it from Crohn's disease.",
                "C To monitor the response to treatment.",
                "D To carry out surveillance for the development of cancer.",
                "E To assess severity in acute cases."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "Colonoscopy has a vital role in the management of UC. Once suspected, colonoscopy is carried out to see the extent of the disease and confirm the diagnosis by taking biopsies at various levels. Macroscopically the presence of continuous disease and absence of 'skip lesions' (normal bowel between diseased bowel) will set it apart from Crohn's colitis. The procedure is also useful as a follow up to monitor response to medical treatment. Patients who have had the disease for >10 years have an increased chance of developing cancer. So such patients should undergo annual colonoscopic surveillance and biopsies to exclude dysplasia or cancer. It should not be done in the acute stage for fear of causing a perforation."
        },
        {
            "id": 8,
            "question_type": "msq",
            "question": "8. Which of the following criteria indicate severe disease in UC?\nA More than six motions per day.\nB Pyrexia of more than 37.5°C.\nC Tachycardia >90/minute.\nD Tachypnoea >20/minute.\nE Hypoalbuminaemia < 30 g/L.",
            "options": [
                "A More than six motions per day.",
                "B Pyrexia of more than 37.5°C.",
                "C Tachycardia >90/minute.",
                "D Tachypnoea >20/minute.",
                "E Hypoalbuminaemia < 30 g/L."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "E"
            ],
            "explanation": "It is important to recognise severe disease in UC because treatment should be aggressive, otherwise the patient might go into fulminant disease or perforation. Severe UC should be diagnosed if the patient has more than six bloody stools a day, pyrexia of >37.5°C, tachycardia of >90/minute and an albumin of <30g/L. Tachypnoea, although important, is not one of the criteria. Inflammatory markers such as ESR (>30 mm hour) and CRP are elevated. Plain abdominal x-rays are done to look for toxic megacolon."
        },
        {
            "id": 9,
            "question_type": "msq",
            "question": "9. Which UC patients have an enhanced risk of developing cancer?\nA Those who have had the disease since childhood.\nB Those who have had the disease for over 10 years.\nC Those who have had a very severe first attack.\nD Those who have the entire colon involved.\nE Those who have another member of the family with the disease.",
            "options": [
                "A Those who have had the disease since childhood.",
                "B Those who have had the disease for over 10 years.",
                "C Those who have had a very severe first attack.",
                "D Those who have the entire colon involved.",
                "E Those who have another member of the family with the disease."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "Patients with inflammatory bowel disease, particularly UC, have an increased risk of developing carcinoma, the risk increasing with the duration of the disease (Table 69.3).\nAfter 10 years the risk is 1% increasing to 10%–15% at 20 years and 30% at 30 years. Those who have had the disease since childhood, had a severe first attack and in whom the entire colon is involved (pancolitis) have an enhanced risk for carcinoma. Therefore patients with pancolitis of >10 years are entered into annual colonoscopic surveillance. The value of such screening programmes is questioned because most UC patients who develop cancer (3.5%) present between attendances for colonoscopic screening. Colonoscopic screening is a routine when multiple biopsies are taken to detect dysplasia, which can occur in a flat mucosa or in dysplasia-associated lesions or mass (DALMs)."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "10. Which of the following drugs are not used in the medical treatment of UC?\nA Prednisolone.\nB 5-ASA compounds.\nC Infliximab.\nD Azathioprine.\nE Isoniazid.",
            "options": [
                "A Prednisolone.",
                "B 5-ASA compounds.",
                "C Infliximab.",
                "D Azathioprine.",
                "E Isoniazid."
            ],
            "answer": "E",
            "explanation": "Isoniazid is not a drug used in UC. It is used in tuberculosis. The other four drugs on the list are used in the medical treatment of UC. The 5-ASA (5-aminosalicylic acid) compounds are given both systemically and as enemas and can be used on a long-term basis. Prednisolone is used in acute exacerbation locally and systemically for its anti-inflammatory action. As 'steroid-sparing' drugs, azathioprine and cyclosporin are used during remission. Recently infliximab and adalimumab, as monoclonal antibodies have been used as a tumour necrosis factor α (TNF-α) antagonist that plays a central role in inflammatory cascades."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "11. In the management of a severe attack of UC, which of the following is not true?\nA Every patient needs a proctocolectomy after resuscitation.\nB Daily plain abdominal x-ray is taken to assess transverse colon dilatation.\nC Parenteral high-calorie alimentation is instituted.\nD Intravenous hydrocortisone is given.\nE Azathioprine or cyclosporin A is given.",
            "options": [
                "A Every patient needs a proctocolectomy after resuscitation.",
                "B Daily plain abdominal x-ray is taken to assess transverse colon dilatation.",
                "C Parenteral high-calorie alimentation is instituted.",
                "D Intravenous hydrocortisone is given.",
                "E Azathioprine or cyclosporin A is given."
            ],
            "answer": "A",
            "explanation": "A severe case of UC is a medical emergency and occurs in about 10% of patients with UC; every patient does not require a proctocolectomy. The patient should be treated in a HDU or ICU. Daily (if necessary, twice daily) plain abdominal x-ray is taken to look for toxic dilatation of the transverse colon, presence of mucosal islands or intramural gas. Full supportive treatment is instituted in the form of intravenous fluids and alimentation, intravenous hydrocortisone and steroid enemas or suppositories. If improvement does not occur within 3–5 days, surgery should be undertaken. This should be a team decision between the surgeon and gastroenterologist to ensure that surgery is undertaken at the optimum time. Sometimes, immunosuppressive drugs and infliximab might be considered to prevent emergency surgery. As the patient is on steroids, one should be very wary of a silent perforation."
        },
        {
            "id": 12,
            "question_type": "msq",
            "question": "12. What are the indications for surgery in UC?\nA Severe fulminating disease not responding to vigorous medical treatment.\nB Severe dysplastic change or cancer on biopsy.\nC Non-compliance of medical treatment.\nD Chronic steroid-dependent disease requiring large doses.\nE Extraintestinal disease.",
            "options": [
                "A Severe fulminating disease not responding to vigorous medical treatment.",
                "B Severe dysplastic change or cancer on biopsy.",
                "C Non-compliance of medical treatment.",
                "D Chronic steroid-dependent disease requiring large doses.",
                "E Extraintestinal disease."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E"
            ],
            "explanation": "The indications for surgery in UC are best enumerated as those carried out as an emergency and those carried out as an elective procedure (Tables 69.4 and 69.5). Noncompliance by the patient should not be an indication. The patient should be educated and help from a psychologist sought if necessary."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "13. The following statements regarding surgery in UC are true except:\nA In the emergency situation, total abdominal colectomy and ileostomy should be the procedure of choice.\nB Proctocolectomy and ileostomy are associated with the lowest complication rate.\nC Restorative proctocolectomy with an ileoanal pouch should be considered in all patients.\nD Colectomy with ileorectal anastomosis is the most favoured procedure.\nE Ileostomy with a continent intra-abdominal pouch is not often done.",
            "options": [
                "A In the emergency situation, total abdominal colectomy and ileostomy should be the procedure of choice.",
                "B Proctocolectomy and ileostomy are associated with the lowest complication rate.",
                "C Restorative proctocolectomy with an ileoanal pouch should be considered in all patients.",
                "D Colectomy with ileorectal anastomosis is the most favoured procedure.",
                "E Ileostomy with a continent intra-abdominal pouch is not often done."
            ],
            "answer": "D",
            "explanation": "Colectomy with ileorectal anastomosis is a rare procedure because the rectum is diseased in the vast majority. The patient needs regular rectal surveillance for malignancy. Although the operation prevents a stoma and has minimal risk of sexual dysfunction, it has largely been replaced by restorative proctocolectomy.\nIn the emergency or urgent situation, total abdominal colectomy and terminal ileostomy should be the procedures of choice. Once the patient has fully recovered, ileoanal pouch procedure might be considered as a second stage. In the elective situation proctocolectomy and permanent terminal ileostomy does have the lowest complication rate although all patients should be considered for restorative proctocolectomy. Ileostomy with a continent intra-abdominal pouch is not often done."
        },
        {
            "id": 14,
            "question_type": "msq",
            "question": "14. Which of the following statements are true regarding an ileo-anal pouch procedure?\nA This should be considered in any case of inflammatory bowel disease that requires surgery.\nB The patient must have normal anal sphincter.\nC In 15%, the pouch has to be removed.\nD Small bowel obstruction as a postoperative complication occurs in 10%–15%.\nE Pouchitis occurs on 30%.",
            "options": [
                "A This should be considered in any case of inflammatory bowel disease that requires surgery.",
                "B The patient must have normal anal sphincter.",
                "C In 15%, the pouch has to be removed.",
                "D Small bowel obstruction as a postoperative complication occurs in 10%–15%.",
                "E Pouchitis occurs on 30%."
            ],
            "answer": [
                "B",
                "C",
                "D",
                "E"
            ],
            "explanation": "Prior to considering a pouch procedure, the patient's anal sphincter must be normal. Some surgeons establish this by doing a rectal examination and asking the patient to tighten the anal sphincter, whilst others might do sphincter pressure studies and anal manometry. Once a pouch procedure is carried out, 15% of patients have the pouch removed for poor pouch function. Overall 50% of patients with ileoanal pouch have a very good quality of life, while 35% are less satisfied but keep their pouch.\nSmall-bowel obstruction as a postoperative complication occurs in about 10%–15%, while pouchitis occurs in about 30%. Pouchitis is inflammation of the pouch, which might result in increased frequency, tenesmus, bleeding, purulent discharge, malaise and fever with raised inflammatory markers. It responds to metronidazole and ciprofloxacin. Sometimes the condition might be asymptomatic.\nA pouch procedure should not be done in any case of inflammatory bowel disease. It must be done only in ulcerative colitis. However, there is an entity called indeterminate colitis where after much deliberation a pouch procedure might be offered but only after warning the patient of the failure rate of 25%–30%."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "15. Which of the following statements is not true of Crohn's disease (CD)?\nA The ileum is affected in 60% of cases.\nB It affects the entire thickness of the bowel.\nC Non-caseating granulomas are found in only 60% of patients.\nD One in 10 patients have a first-degree relative with the disease.\nE A patient can be cured of CD once the diseased small or large bowel is removed.",
            "options": [
                "A The ileum is affected in 60% of cases.",
                "B It affects the entire thickness of the bowel.",
                "C Non-caseating granulomas are found in only 60% of patients.",
                "D One in 10 patients have a first-degree relative with the disease.",
                "E A patient can be cured of CD once the diseased small or large bowel is removed."
            ],
            "answer": "E",
            "explanation": "Crohn's disease is not a curable disease, let alone by resectional surgery. It can recur in other parts of the gastrointestinal tract even after removal of a diseased section of the bowel. Hence resection for CD must always be conservative, and as little bowel as possible should be sacrificed.\nWhile CD affects any part of the gastrointestinal tract, the ileum is most commonly affected, which is in 60%, sometimes along with the right colon. Hence, when it was described by Crohn, Ginzburg and Oppenheimer in 1932, they called the disease ‘Regional Ileitis'. The large bowel alone is involved in almost one-third, while in 5% the stomach and duodenum is site of the disease. Perianal disease is present in 50%–75% of sufferers. Patients with small-bowel disease have perianal involvement in 25%, whilst three-quarters of those with large bowel Crohn's have perianal disease.\nThe condition affects the entire thickness of the bowel in the form of transmural inflammation. Although non-caseating giant cell granulomas are regarded as the hallmark of the disease, they are found in only 60% of patients and most common in anorectal involvement. Amongst the sufferers 1 in 10 patients have a first-degree relative with the disease."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "16. Which of the following pathological features is not found in CD?\nA Internal fistulae.\nB Serpiginous and aphthous ulcers.\nC Chronic inflammation involves all layers of the bowel wall.\nD Pseudopolypi.\nE Cobblestone mucosa.",
            "options": [
                "A Internal fistulae.",
                "B Serpiginous and aphthous ulcers.",
                "C Chronic inflammation involves all layers of the bowel wall.",
                "D Pseudopolypi.",
                "E Cobblestone mucosa."
            ],
            "answer": "D",
            "explanation": "Pseudopolypi do not occur in CD. It is a feature seen in advanced chronic UC where chronic mucosal ulceration is associated with granulation tissue and regeneration of normal mucosa, also called inflammatory polyposis; this occurs in 25% of UC patients. Internal fistulae are a common complication due to the transmural inflammation, involving all layers of the bowel wall, causing the diseased bowel to penetrate into neighbouring structures – skin, urinary bladder, colon, small bowel and vagina. Macroscopically, the diseased bowel shows serpiginous (snake-like) deep mucosal and aphthous ulcers; mucosal oedema between the ulcers gives the classical ‘cobblestone' appearance. The complications of CD are enumerated in Tables 69.6 and 69.7."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "17. Which of the following can cause acute presentation of CD?\nA Mimicking acute appendicitis.\nB Perforation.\nC Intestinal obstruction.\nD Toxic megacolon.\nE All of the above.",
            "options": [
                "A Mimicking acute appendicitis.",
                "B Perforation.",
                "C Intestinal obstruction.",
                "D Toxic megacolon.",
                "E All of the above."
            ],
            "answer": "E",
            "explanation": "All the previously mentioned presentations are the methods by which CD can present clinically as an acute emergency. The dilemma is obviously the management in each of these situations. When a patient has been opened as 'acute appendicitis' and the diagnosis is CD, the appendix should be removed provided the caecum and appendix are not grossly involved with an inflammatory mass. When perforation occurs, after optimum resuscitation, the bowel containing the perforation is resected with end-to-end anastomosis removing as little bowel as possible. On opening a patient with acute intestinal obstruction from structuring, after thorough optimisation, localised resection and end-to-end anastomosis is the treatment."
        },
        {
            "id": 18,
            "question_type": "msq",
            "question": "18. Which of the following are true of large-bowel CD?\nA 50%–75% will have an anal lesion.\nB Non-caseating giant-cell granulomas are most common in anorectal disease.\nC In a strictured area, malignancy can occur.\nD A perianal abscess or a fissure might be the first presenting feature.\nE Surgery is usually indicated.",
            "options": [
                "A 50%–75% will have an anal lesion.",
                "B Non-caseating giant-cell granulomas are most common in anorectal disease.",
                "C In a strictured area, malignancy can occur.",
                "D A perianal abscess or a fissure might be the first presenting feature.",
                "E Surgery is usually indicated."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "In colonic CD 50%–75% will have perianal involvement (Figure 69.2) in the form of fistulae-in-ano, fissures and recurrent abscesses. Non-caseating giant cell granulomas (Figure 69.3), the keystone in the diagnosis, are most common in anorectal disease. When a stricture is seen in the large bowel, malignancy must be excluded by colonoscopy and biopsy as malignant transformation most often occurs in those areas. Often one of the first presentations of CD is an acute perianal abscess or a fissure that needs urgent treatment when the underlying condition of CD comes to light."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "19. Which of the following is not a clinical presentation of CD?\nA Bloodstained diarrhoea.\nB Intermittent abdominal pain.\nC Mass in the right iliac fossa.\nD Typical evening rise of temperature.\nE Pneumaturia and urinary tract infections.",
            "options": [
                "A Bloodstained diarrhoea.",
                "B Intermittent abdominal pain.",
                "C Mass in the right iliac fossa.",
                "D Typical evening rise of temperature.",
                "E Pneumaturia and urinary tract infections."
            ],
            "answer": "D",
            "explanation": "Evening pyrexia is not a clinical feature of CD. It is suggestive of tuberculosis in general and might be a typical symptom in abdominal tuberculosis (see Chapter 6). Patients present with blood-stained diarrhoea, particularly in colonic disease. Intermittent generalised abdominal pain, colicky in nature (denoting strictures) with a dull ache in between attacks, is common. If there is a colo-vesical or entero-vescial fistula, the patient might present with recurrent urinary infections and pneumaturia. On examination a mass might be felt in the right iliac fossa of which the patient might be unaware."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "20. Which of the following statements about imaging in CD are true?\nA Small-bowel enema is the imaging of choice in small-bowel disease.\nB Barium enema and colonoscopy should be done for large-bowel disease.\nC MRI is the 'gold standard' for perianal fistulae.\nD CT scan is used for suspected intra-abdominal abscess and internal fistulae.\nE All of the above.",
            "options": [
                "A Small-bowel enema is the imaging of choice in small-bowel disease.",
                "B Barium enema and colonoscopy should be done for large-bowel disease.",
                "C MRI is the 'gold standard' for perianal fistulae.",
                "D CT scan is used for suspected intra-abdominal abscess and internal fistulae.",
                "E All of the above."
            ],
            "answer": "E",
            "explanation": "With regard to imaging in CD, all the techniques mentioned are used depending upon the clinical situation. In suspected small bowel disease when a patient presents electively, a small bowel enema (Figure 69.4a and b) is carried out. This would show strictures, skip lesions, string sign, fistulae, mucosal fissuring with radiating spicules and cobblestone mucosa.\nWhen large bowel disease is suspected, a barium enema would show similar features. This should be followed by colonoscopy to accurately assess the extent of the disease and biopsy to confirm the diagnosis. In perianal disease MRI is the ‘gold standard', while CT scan will accurately localise abscesses and fistulae."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "21. Which of the following drugs are used in the treatment of CD?\nA Steroids.\nB 5-ASA compounds.\nC Azathioprine.\nD Infliximab.\nE All of the above.",
            "options": [
                "A Steroids.",
                "B 5-ASA compounds.",
                "C Azathioprine.",
                "D Infliximab.",
                "E All of the above."
            ],
            "answer": "E",
            "explanation": "CD is mainly treated medically, with all the previously mentioned drugs used from time to time. Steroids (prednisolone) are the mainstay of treatment and help in remission in 70%–80%. 5-ASA compounds are particularly useful in colonic disease. Immunosuppressive agents (azathioprine) are used for their steroid-sparing effect, particularly when the disease is quiescent. Infliximab is a monoclonal antibody that is useful especially in peri-anal fistula. Metronidazole is known to control disease activity in ileocolic and colonic disease in short courses given from time to time along with the other medications."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "22. The following operations are done in CD depending upon the indications except:\nA Restorative proctocolectomy with ileoanal pouch.\nB Strictureplasty.\nC Proctocolectomy and ileostomy.\nD Colectomy and ileorectal anastomosis.\nE Segmental resections.",
            "options": [
                "A Restorative proctocolectomy with ileoanal pouch.",
                "B Strictureplasty.",
                "C Proctocolectomy and ileostomy.",
                "D Colectomy and ileorectal anastomosis.",
                "E Segmental resections."
            ],
            "answer": "A",
            "explanation": "In proven CD, restorative proctocolectomy with ileoanal pouch should never be done because of the high incidence of recurrence and pouchitis. Moreover, the ileum to be used for a pouch might be involved with the disease. Perianal disease, which is common in colonic CD, is another reason for this operation being unsuitable.\nStrictureplasty, whereby a longitudinal incision is made and closed transversely (similar to the Heineke-Mikulicz pyloroplasty), is suitable for short strictures. In long strictures not suitable for the usual type of strictureplasty and where bowel preservation is vital, some surgeons have opted for a 'Finney's type' of strictureplasty. In very severe and extensive disease, proctocolectomy and ileostomy is the procedure of choice; when the rectum is free of disease, colectomy and ileorectal anastomosis can be done. In the vast majority, however, segmental resections of diseased bowel is the procedure most often carried out."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "23. Which of the following statements about inflammatory bowel disease (UC and CD) is not true?\nA Patients must be managed jointly by the physician and surgeon.\nB Surgery, when indicated, must be as radical as possible.\nC Patients must be given a good trial of optimum medical treatment prior to surgery.\nD There is more chance of a cure after surgery in UC than in CD.\nE In emergency presentation, patients must be vigorously resuscitated prior to operation and managed in the ITU postoperatively.",
            "options": [
                "A Patients must be managed jointly by the physician and surgeon.",
                "B Surgery, when indicated, must be as radical as possible.",
                "C Patients must be given a good trial of optimum medical treatment prior to surgery.",
                "D There is more chance of a cure after surgery in UC than in CD.",
                "E In emergency presentation, patients must be vigorously resuscitated prior to operation and managed in the ITU postoperatively."
            ],
            "answer": "B",
            "explanation": "Surgery must be as conservative as possible in inflammatory bowel disease (IBD). In CD, resections must be as limited as possible. In UC, in emergency situations such as toxic megacolon or perforation, a total abdominal colectomy and ileostomy is performed, avoiding a pelvic dissection. The rectal stump is brought out as a mucous fistula or closed as a Hartmann's procedure.\nAll patients with IBD must be under the joint care of the gastroenterologist and surgeon. In the elective situation, all patients must be given a very good trial of medical treatment before embarking upon surgery. When surgery is required as an emergency, ITU management is vital for preoperative optimisation and postoperative care. Overall after surgical treatment in IBD, the chances of cure are more likely after UC than CD."
        },
        {
            "id": 24,
            "question_type": "msq",
            "question": "24. Which of the following statements are true?\nA Campylobacter is the most common cause of gastroenteritis in the United Kingdom.\nB Yersinia can cause acute appendicitis.\nC Actinomycosis might present as an enterocutaneous fistula.\nD AIDS patients might develop opportunistic intestinal infections.\nE The presence of Clostridium difficile might necessitate an operation.",
            "options": [
                "A Campylobacter is the most common cause of gastroenteritis in the United Kingdom.",
                "B Yersinia can cause acute appendicitis.",
                "C Actinomycosis might present as an enterocutaneous fistula.",
                "D AIDS patients might develop opportunistic intestinal infections.",
                "E The presence of Clostridium difficile might necessitate an operation."
            ],
            "answer": [
                "A",
                "C",
                "D",
                "E"
            ],
            "explanation": "A Gram-negative rod with a spiral shape, Campylobacter jejuni, is the most common cause of gastroenteritis in the United Kingdom. It is due to eating infected poultry. It causes diarrhoea and acute abdominal pain; severe cases might be confused with UC. It is not easy to grow in stool culture. Treatment is supportive, the condition being notifiable. Actinomycosis is a rare infection caused by Actinomycosis israeli. It develops several weeks after removal of a perforated acute appendicitis. It results in an abscess that spreads across tissue planes from the retroperitoneum to the overlying skin forming a woody indurated mass that discharges thin, watery odourless material, which becomes thick and malodorous. The discharge grows sulphur granules. Treatment is long-term penicillin or cotrimoxazole in high doses.\nAfter the development of AIDS with human immunodeficiency virus (HIV) infection, there might be opportunistic intestinal infection caused by bacteria, viruses, protozoa and fungi. Treatment is medical specifically against the organism. Clostridium difficile is a cause of nosocomial infection. It is caused by a Gram-positive bacillus that produces a toxin. It is a cause of antibiotic-associated diarrhoea and pseudomembranous colitis. The patient might be very ill with fever, diarrhoea and abdominal pain. Besides full supportive care, the patient is treated by vancomycin or metronidazole. In extreme cases emergency subtotal colectomy and ileostomy might be necessary.\nAmoebiasis, typhoid and tuberculosis are discussed in Chapter 6: ‘Surgery in the tropics'."
        },
        {
            "id": 25,
            "question_type": "msq",
            "question": "25. Which of the following statement/s are not true?\nA Small bowel tumours account for 10% of all gastrointestinal neoplasms.\nB Small bowel adenocarcinoma is more common in patients with CD.\nC Carcinoid tumour of the appendix does not gives rise to carcinoid syndrome.\nD Hodgkin's lymphoma is the most common type of lymphoma to affect of the small bowel.\nE The ileum is the most common site for GIST (gastrointestinal stromal tumour).",
            "options": [
                "A Small bowel tumours account for 10% of all gastrointestinal neoplasms.",
                "B Small bowel adenocarcinoma is more common in patients with CD.",
                "C Carcinoid tumour of the appendix does not gives rise to carcinoid syndrome.",
                "D Hodgkin's lymphoma is the most common type of lymphoma to affect of the small bowel.",
                "E The ileum is the most common site for GIST (gastrointestinal stromal tumour)."
            ],
            "answer": [
                "D",
                "E"
            ],
            "explanation": "The most common type of small bowel lymphoma is a non-Hodgkin's ẞ-cell lymphoma. Small bowel lymphomas are classified as primary or secondary, the latter being more common and is secondary to systemic lymphoma. The condition is more common in patients with CD, immunodeficiency syndromes and coeliac disease in whom it is a T-cell lymphoma. Their elective presentation is anaemia, anorexia and weight loss; as an emergency they present with bleeding, perforation and intestinal obstruction. GISTs are stromal tumours, and most of them occur in the stomach as leiomyoma.\nOne in 10 gastrointestinal tumours occur in the small bowel. The benign ones are adenomas, lipomas, and Peutz-Jeghers syndrome, which is an autosomal dominant disease that has melanosis of the mouth and lips and polyps in the small bowel and colon. Adenocarcinoma of the small bowel, more often in the jejunum, occurs more commonly in patients with CD, coeliac disease, familial adenomatous polyposis and Peutz-Jeghers syndrome. A carcinoid tumour that arises from the appendix does not give rise to carcinoid syndrome. The syndrome is produced by secondaries in the liver, which are metastases from a tumour in the ileum."
        },
        {
            "id": 26,
            "question_type": "msq",
            "question": "26. Which of the following statements are true of carcinoid tumour?\nA Appendicular carcinoid are most commonly found incidentally.\nB The substance that causes the syndrome is 5-hydroxytryptamine (serotonin).\nC The syndrome can affect the heart in the form of mitral stenosis.\nD Tumours in the ileum and rectum might metastasise to the liver long after removal of the primary tumour.\nE The syndrome produces features affecting the pulmonary, cardiovascular and gastrointestinal systems.",
            "options": [
                "A Appendicular carcinoid are most commonly found incidentally.",
                "B The substance that causes the syndrome is 5-hydroxytryptamine (serotonin).",
                "C The syndrome can affect the heart in the form of mitral stenosis.",
                "D Tumours in the ileum and rectum might metastasise to the liver long after removal of the primary tumour.",
                "E The syndrome produces features affecting the pulmonary, cardiovascular and gastrointestinal systems."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E"
            ],
            "explanation": "Appendicular carcinoid is almost always found incidentally when an appendix is removed following a diagnosis of acute appendicitis. At operation no acute inflammation is found; instead a solid yellowish tumour is found usually in the distal appendix. Appendicectomy is the treatment. However, if the tumour occupies the base of the appendix or invades the caecum, a right hemicolectomy has to be done.\nThe cause of this syndrome is the excessive secretion of 5-hydroxytryptamine (5-HT, serotonin). These tumours arise from the gastro-entero-pancreatic part of the diffuse neuroendocrine system. Therefore this tumour is a part of the family of neuroendocrine tumours (NET). They arise from the ileum and rectum, the former being more common. They have a propensity to metastasise to the liver long after removal of the primary. It is the liver secondaries that produce the syndrome by secreting serotonin. They have a common embryological origin and cyto-chemical features which are a high amine (A) content, capacity for amine precursor uptake (APU) and the property of decarboxylation (D), hence the acronym for the tumour APUDOMA.\nThe clinical manifestations are protean in nature. The syndrome usually occurs in relation to malignant tumours that have metastasized, usually to the liver. The features are the following:\nVasomotor: Flushing in face and neck and sun-exposed areas; bronchial tumours can cause widespread flushes with devastating severity\nGastrointestinal: Mild to explosive diarrhoea with its effects, abdominal pain, bloating, tenesmus\nCardiopulmonary: Hypotension during flushing attacks, right-sided heart failure, pulmonary and tricuspid stenosis (not mitral stenosis), bronchospasm\nNutritional: Weight loss, features of pellagra: dementia and skin lesions from niacin deficiency"
        },
        {
            "id": 27,
            "question_type": "msq",
            "question": "27. Which of the following statements are true about familial adenomatous polyposis (FAP)?\nA More than 80% of patients have a positive family history.\nB The condition is inherited as an autosomal recessive condition.\nC Family members should be screened until the age of 50 years.\nD Restorative proctocolectomy with an ileal pouch is the preferred surgical treatment.\nE Hereditary non-polyposis colorectal cancer (HNPCC) occurs as an autosomal dominant condition.",
            "options": [
                "A More than 80% of patients have a positive family history.",
                "B The condition is inherited as an autosomal recessive condition.",
                "C Family members should be screened until the age of 50 years.",
                "D Restorative proctocolectomy with an ileal pouch is the preferred surgical treatment.",
                "E Hereditary non-polyposis colorectal cancer (HNPCC) occurs as an autosomal dominant condition."
            ],
            "answer": [
                "A",
                "C",
                "D",
                "E"
            ],
            "explanation": "In FAP more than 80% have a positive family history. The remaining 20% are the result of new mutations in the adenomatous polyposis coli (APC) gene. For families there should be a screening policy in place. Genetic testing should be offered in the early teens; from teenage years, annual colonoscopy should be carried out; those who get the disease would do so by the age of 20 years; those clear at the age of 20 should be offered 5-year colonoscopic surveillance until 50 years of age.\nThose with the disease should be offered surgical treatment. Of the surgical options available, restorative proctocolectomy with an ileo-anal pouch is one of the choices offered. Although this removes the whole colon and rectum, in a stapled anastomosis, the small strip of rectal mucosa between the pouch and dentate line has a chance of developing cancer. Therefore some surgeons perform a complete mucosectomy of the rectal cuff; the price paid by the patient for such an immunity against cancer is a worse functional result.\nHNPCC is an autosomal dominant condition caused by a mutation in one of the DNA mismatch repair genes, MLH1 and MSH2. There is an 80% lifetime risk of developing colorectal cancer which is diagnosed at 45 years whilst females have an almost 50% risk of developing endometrial cancer. Genetic testing or the Amsterdam II criteria helps in diagnosing HNPCC. FAP is inherited as an autosomal dominant gene (not recessive gene).\nBoth sexes are equally affected and either might transmit the disease; only those with the disease can transmit the condition and half the children are likely to inherit."
        },
        {
            "id": 28,
            "question_type": "msq",
            "question": "28. Which of the following statements are not true?\nA Colonic adenomas occur more on the right and carcinomas in the left colon.\nB Sporadic adenomas are different from those of FAP.\nC The larger the adenoma the greater the chance of dysplasia.\nD Colorectal cancer incidence falls with screening programmes.\nE Mutations of the APC gene occurs in two-thirds of colonic adenomas and carcinomas.",
            "options": [
                "A Colonic adenomas occur more on the right and carcinomas in the left colon.",
                "B Sporadic adenomas are different from those of FAP.",
                "C The larger the adenoma the greater the chance of dysplasia.",
                "D Colorectal cancer incidence falls with screening programmes.",
                "E Mutations of the APC gene occurs in two-thirds of colonic adenomas and carcinomas."
            ],
            "answer": [
                "A",
                "B"
            ],
            "explanation": "The distribution of colonic adenomas and carcinomas is the same, 70% of them being left-sided. Sporadic adenomas are identical to those of FAP. Left untreated, cancer is inevitable, with a 100% chance of adenomas in FAP turning malignant. The larger the adenoma, the greater is the chance of it showing dysplasia; when dysplasia occurs in them, it is of a higher grade.\nThere is a fall in the incidence of colorectal carcinoma where screening programmes have colonoscopy and polypectomy as an integral part. In two-thirds of colonic adenomas and carcinomas, there is mutation of the APC gene, a process that develops early in the pathway to carcinogenesis. K-ras mutations, more common in larger lesions is associated with a poor prognosis. Mutation of the p53 tumour suppressor gene causes the transition from the adenoma to carcinoma signalling invasion. Knowledge of certain mutations can be used to assess prognosis and target adjuvant treatment."
        },
        {
            "id": 29,
            "question_type": "mcq",
            "question": "29. Which of the following statements are true?\nA Almost 60% occur in the rectosigmoid region.\nB At the time of diagnosis, one-third will have liver metastases.\nC 20% of patients present as an emergency with intestinal obstruction.\nD Reduced dietary fibre is associated with an increased risk.\nE All of the above.",
            "options": [
                "A Almost 60% occur in the rectosigmoid region.",
                "B At the time of diagnosis, one-third will have liver metastases.",
                "C 20% of patients present as an emergency with intestinal obstruction.",
                "D Reduced dietary fibre is associated with an increased risk.",
                "E All of the above."
            ],
            "answer": "E",
            "explanation": "The most common site (60%) of colorectal cancer is the rectosigmoid region. This is thought to be due to the prolonged contact of the faeces with the mucosa in that region. It therefore follows that the majority will be within reach of the rigid sigmoidoscope so that a biopsy can be obtained in the outpatient department. At the time of diagnosis, one-third of the patients will have liver secondaries. Clinically patients might present either as electively or as an emergency; 20% of patients present as an emergency with intestinal obstruction or peritonitis, the cause of which is perforation. Emergency presentation is associated with a worse prognosis. Reduced dietary fibre is well known as a factor in the aetiology of large bowel cancer. Increased fibre in the diet causes large amount of roughage, which helps to reduce the transit time thus diminishing the exposure of mucosa to dietary carcinogens."
        },
        {
            "id": 30,
            "question_type": "mcq",
            "question": "30. Which one of the following statements is false?\nA Right colonic cancers present with features of anaemia.\nB Left colonic cancers present with rectal bleeding and obstructive symptoms.\nC Even for an experienced colonoscopist, the failure rate to visualise the caecum is 10%.\nD Intravenous urography (IVU) should be routinely done.\nE Synchronous cancers occur in 5%.",
            "options": [
                "A Right colonic cancers present with features of anaemia.",
                "B Left colonic cancers present with rectal bleeding and obstructive symptoms.",
                "C Even for an experienced colonoscopist, the failure rate to visualise the caecum is 10%.",
                "D Intravenous urography (IVU) should be routinely done.",
                "E Synchronous cancers occur in 5%."
            ],
            "answer": "D",
            "explanation": "Intravenous urography is not a routine investigation for colorectal cancer. It is done when an US or CT shows hydronephrosis to see the function of the opposite kidney. In a patient known to have a solitary kidney, IVU is done to assess renal function. The elective clinical presentation for right and left colonic carcinomas differs. Right-sided cancers present with features of iron deficiency anaemia such as malaise or undue shortness of breath while carrying out normal daily activities due to anaemic hypoxia from microscopic bleeding; this is shown by positive faecal occult blood. Left-sided carcinomas present with altered bowel habit in the form of increasing constipation and need to use laxatives; this is because the faeces in the left colon is more formed. Rectal bleeding is another feature.\nColonoscopy is the method to confirm the diagnosis by taking a biopsy. It is also useful to exclude a synchronous carcinoma, which is present in 5% or an adenoma (Figure 69.5), the latter being found in one-third of specimens resected for colonic cancer. Even in expert hands the caecum is not visualised in about 10% of colonoscopies."
        },
        {
            "id": 31,
            "question_type": "msq",
            "question": "31. Which of the following statements are true?\nA Thorough preoperative assessment and staging should be done with colonoscopy, US and spiral CT.\nB Resection is not done if the patient has liver metastases.\nC If, at operation, hepatic metastases are found, biopsy should be done.\nD Hepatic resection for metastases should be considered as a staged procedure.\nE Left colonic carcinomas presenting with intestinal obstruction should be treated as a staged procedure.",
            "options": [
                "A Thorough preoperative assessment and staging should be done with colonoscopy, US and spiral CT.",
                "B Resection is not done if the patient has liver metastases.",
                "C If, at operation, hepatic metastases are found, biopsy should be done.",
                "D Hepatic resection for metastases should be considered as a staged procedure.",
                "E Left colonic carcinomas presenting with intestinal obstruction should be treated as a staged procedure."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "Often the diagnosis can be established in the one-stop rectal bleeding clinic using a flexible sigmoidoscope, which will reach the splenic flexure. This should detect 70% of large bowel cancers. Once the diagnosis is made on colonoscopy, thorough assessment with regard to local and regional staging by spiral CECT and US is carried out.\nIf staging detects liver secondaries, the case is discussed in a MDT meeting as to the best way forward and considering treating the secondaries as a staged procedure. Those patients who present as acute intestinal obstruction should be considered for a staged procedure, of which there are choices. A left colonic carcinoma causing acute closed-loop obstruction could have a stent inserted, which will get over the acute emergency. The patient can then be resuscitated and staged and then have a one-stage resection and anastomosis without a temporary stoma.\nIf staging shows liver secondaries, resection of the large bowel is carried out by the appropriate hemicolectomy as there is no better palliation than removal of the original cancer. Liver secondaries are never biopsied for fear of causing dissemination of the growth and bleeding."
        },
        {
            "id": 32,
            "question_type": "msq",
            "question": "32. The following statements are true except:\nA Routine follow up after surgery for colorectal cancer is a waste of resources.\nB In resectable hepatic metastases from colorectal cancer the 5-year survival is 30%.\nC In Dukes' stage A the 5-year disease-free survival is 90%.\nD Enhanced recovery programme (ERP) reduces hospital stay considerably.\nE Preoperative chemotherapy in colonic cancer has a role in selected patients.",
            "options": [
                "A Routine follow up after surgery for colorectal cancer is a waste of resources.",
                "B In resectable hepatic metastases from colorectal cancer the 5-year survival is 30%.",
                "C In Dukes' stage A the 5-year disease-free survival is 90%.",
                "D Enhanced recovery programme (ERP) reduces hospital stay considerably.",
                "E Preoperative chemotherapy in colonic cancer has a role in selected patients."
            ],
            "answer": [
                "A",
                "E"
            ],
            "explanation": "Routine follow up is not a waste of resources following surgery for colonic surgery. Follow up aims to identify synchronous cancers missed during emergency surgery, metachronous cancers and liver metastases. This is done by measurement of carcinoembryonic antigen (CEA), US of liver and colonoscopic surveillance. Trials are being carried out to ascertain the optimum frequency of these follow-up methods. Preoperative chemotherapy has no role at present, although it is used in a selected group postoperatively.\nAfter resection for hepatic metastases the 5-year survival is 30%. Hence all patients with liver secondaries should be referred to the hepatobiliary unit for consideration for surgery. In Dukes' stage A (disease confined to the bowel wall), the 5-year recurrence-free interval is 90%. Following surgery, units that have instituted the ERP have a much more rapid turnover of patients who remain in hospital for only up to 2 to 3 days after surgery."
        },
        {
            "id": 33,
            "question_type": "msq",
            "question": "33. Which of the following statements are true?\nA Duodenal diverticulum might result from a long-standing duodenal ulcer.\nB Jejunal diverticula might give rise to malabsorption problems.\nC A Meckel's diverticulum can cause severe lower gastrointestinal haemorrhage.\nD A suspected Meckel's diverticulum is best imaged by a barium meal and follow through.\nE Pain originating in a Meckel's diverticulum is located around the umbilicus.",
            "options": [
                "A Duodenal diverticulum might result from a long-standing duodenal ulcer.",
                "B Jejunal diverticula might give rise to malabsorption problems.",
                "C A Meckel's diverticulum can cause severe lower gastrointestinal haemorrhage.",
                "D A suspected Meckel's diverticulum is best imaged by a barium meal and follow through.",
                "E Pain originating in a Meckel's diverticulum is located around the umbilicus."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "E"
            ],
            "explanation": "An acquired duodenal diverticulum is always the outcome of a long-standing duodenal ulceration causing duodenal stenosis. Congenital duodenal diverticula are known to occur at the ampulla of Vater and are most often an incidental finding. Jejunal diverticula (Figure 69.6a and b), although they might be asymptomatic, can cause malabsorption problems such as anaemia, steatorrhoea, hypoproteinaemia and vitamin B12 deficiency.\nA Meckel's diverticulum can be the source of a major lower gastrointestinal bleed from a peptic ulcer arising from ectopic gastric mucosa. It can also be the source of chronic bleed presenting as anaemia. The ideal imaging method is not a barium study. Scanning after patient's own red blood cells are labelled with technetium-99 is an accurate method of identifying such a source of bleeding. As the diverticulum is part of the midgut, pain originating from it would be felt initially around the umbilicus."
        },
        {
            "id": 34,
            "question_type": "mcq",
            "question": "34. Which of the following statements are false?\nA In the Western world, 75% of the population over the age of 70 has diverticular disease.\nB A low-fibre diet causes the disease.\nC These diverticula consist of mucosa, muscle and serosa.\nD Those with perforation have a higher mortality than those with an inflammatory mass.\nE Sepsis is the principal cause of morbidity.",
            "options": [
                "A In the Western world, 75% of the population over the age of 70 has diverticular disease.",
                "B A low-fibre diet causes the disease.",
                "C These diverticula consist of mucosa, muscle and serosa.",
                "D Those with perforation have a higher mortality than those with an inflammatory mass.",
                "E Sepsis is the principal cause of morbidity."
            ],
            "answer": "C",
            "explanation": "Colonic diverticula are acquired. Hence, they consist of the mucosa covered by the serosa. Unlike congenital diverticula, they do not have any muscle. Because of the dietary habits, in the Western World 75% of the population of 70-year-olds has diverticular disease of the colon. A low-residue diet (consumed in the West) results in excessive segmentation of the sigmoid colon causing increased intraluminal pressure. This produces herniation of the colonic mucosa at the site of maximum weakness, which is the entrance of the blood vessel; thus a diverticulum is formed. The principal cause of morbidity is sepsis, which is the underlying cause of most complications. Perforated diverticulitis causing faecal or purulent peritonitis carries a higher mortality than those with an inflammatory mass."
        },
        {
            "id": 35,
            "question_type": "mcq",
            "question": "35. Which of the following is not a complication of diverticular disease of the colon?\nA Paracolic abscess.\nB Fistulae.\nC Lower gastrointestinal haemorrhage.\nD Carcinoma.\nE Stricture.",
            "options": [
                "A Paracolic abscess.",
                "B Fistulae.",
                "C Lower gastrointestinal haemorrhage.",
                "D Carcinoma.",
                "E Stricture."
            ],
            "answer": "D",
            "explanation": "Carcinoma is not a complication of diverticular disease. However, as diverticular disease is so common, both can co-exist. However, paracoilic abscess, fistulae, lower gastrointestinal haemorrhage and stricture are all recognised complications. See Figure 69.7 for a summary of the complications of diverticular disease."
        },
        {
            "id": 36,
            "question_type": "mcq",
            "question": "36. Which of the following are not true in complicated diverticular disease?\nA Urinary symptoms might be the predominant presentation at times.\nB Profuse colonic haemorrhage might occur in 17%.\nC Fistulae occur in 5% of cases.\nD The most common fistula is enterocolic.\nE In acute diverticulitis, CT scan is the 'gold standard' for imaging.",
            "options": [
                "A Urinary symptoms might be the predominant presentation at times.",
                "B Profuse colonic haemorrhage might occur in 17%.",
                "C Fistulae occur in 5% of cases.",
                "D The most common fistula is enterocolic.",
                "E In acute diverticulitis, CT scan is the 'gold standard' for imaging."
            ],
            "answer": "D",
            "explanation": "Enterocolic fistula is not the most common type of fistula that occurs in complicated diverticular disease; colo-vesical fistula is the most common. Overall fistulae form in 5% of cases. Urinary symptoms might be the predominant presentation in a colo-vesical fistula. These take the form of dysuria, repeated attacks of UTI and bilateral loin pain with rigors from ascending pyelonephritis. Pneumaturia and faecaluria are symptoms that patients admit to having only when questioned.\nProfuse colonic haemorrhage as a complication occurs in 17%. Typically it is painless and comes out of the blue and might be severe enough to require blood transfusion. Most often it stops by conservative management. In acute diverticulitis, the most common complication, the best investigation for confirmation is a CT scan."
        },
        {
            "id": 37,
            "question_type": "mcq",
            "question": "37. Which of the following is not a cause of colo-vesical fistula?\nA Carcinoma of rectosigmoid.\nB Radiation enteritis.\nC Crohn's colitis.\nD Diverticular disease.\nE Amoebic colitis.",
            "options": [
                "A Carcinoma of rectosigmoid.",
                "B Radiation enteritis.",
                "C Crohn's colitis.",
                "D Diverticular disease.",
                "E Amoebic colitis."
            ],
            "answer": "E",
            "explanation": "Amoebic colitis does not cause colo-vesical fistula. Of the others on the list, diverticulitis, rectosigmoid cancer and Crohn's colitis are three common causes. Chronic radiation proctitis can rarely give rise to a colo-vesical fistula."
        },
        {
            "id": 38,
            "question_type": "msq",
            "question": "38. In the surgical treatment of diverticular disease, which of the following statements are true?\nA Colonoscopy must be carried out in all elective cases.\nB Barium enema is essential prior to elective operation.\nC Primary resection and end-to-end anastomosis must be carried out in all cases.\nD Hartmann's operation is the procedure of choice in perforated diverticulitis.\nE In vesicocolic fistula, a one-stage operation can usually be done.",
            "options": [
                "A Colonoscopy must be carried out in all elective cases.",
                "B Barium enema is essential prior to elective operation.",
                "C Primary resection and end-to-end anastomosis must be carried out in all cases.",
                "D Hartmann's operation is the procedure of choice in perforated diverticulitis.",
                "E In vesicocolic fistula, a one-stage operation can usually be done."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E"
            ],
            "explanation": "The imaging methods to confirm diverticular disease or one of its chronic complications are colonoscopy, barium enema, CT colonography and virtual colonoscopy. Because of narrowing of the bowel, it might not always be possible to do a full colonoscopy and biopsy, much as it is very important to exclude any coincidental colonic cancer. A combination of all the available methods might be necessary to be sure of excluding a carcinoma.\nIn all cases of diverticular disease and its complications that require surgery, primary resection and anastomosis cannot be carried out, particularly the patient who presents with perforated diverticulitis where Hartmann's resection is the safest operation; only in selected cases can it be attempted in an emergency after intraoperative colonic irrigation. In a vesicocolic fistula, after thorough investigation, a one-stage resection and anastomosis can be done."
        },
        {
            "id": 39,
            "question_type": "msq",
            "question": "39. Which of the following statements are true?\nA Thrombosis most often affects the origin of superior mesenteric artery (SMA), while embolism affects the middle colic artery.\nB Pain out of proportion to the physical findings is the cardinal clinical feature.\nC Angiodyplasia most commonly occur in the sigmoid colon.\nD Ischaemic colitis affects mostly the splenic flexure.\nE Ischaemic colitis might result in a colonic stricture.",
            "options": [
                "A Thrombosis most often affects the origin of superior mesenteric artery (SMA), while embolism affects the middle colic artery.",
                "B Pain out of proportion to the physical findings is the cardinal clinical feature.",
                "C Angiodyplasia most commonly occur in the sigmoid colon.",
                "D Ischaemic colitis affects mostly the splenic flexure.",
                "E Ischaemic colitis might result in a colonic stricture."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E"
            ],
            "explanation": "The superior mesenteric vessels is most often involved, embolisation being more common than thrombosis. Obstruction at the origin of SMA is most commonly from thrombosis, whilst embolism is the most common cause at the origin of the middle colic artery. The source of the embolus is a mural thrombus in the left ventricle adjacent to the fibrotic ventricular muscle from a recent myocardial infarction.\nPatients, usually with atrial fibrillation, complain of very severe generalised abdominal pain and a paucity of signs because the pain is out of proportion to the physical findings – mild abdominal tenderness with minimal rigidity or rebound. Hypovolaemic shock of rapid onset associated with bloody diarrhoea is another feature.\nIschaemic colitis affects the left colon in the distribution of the inferior mesenteric artery with acute features similar to those affecting the SMA. The condition might also come on insidiously with left-sided abdominal pain with passage of altered blood rectally. Most of these patients recover without any treatment, the underlying pathology in due course resulting in a stricture from fibrosis.\nAngiodysplasia, a vascular malformation, usually presents as an emergency with haemorrhage, occurring in the ascending colon and caecum not the sigmoid colon."
        },
        {
            "id": 40,
            "question_type": "msq",
            "question": "40. The following statements are true except:\nA A loop transverse colostomy is the ideal method to defunction an anterior resection.\nB An end ileostomy is always a permanent procedure.\nC A loop ileostomy is always a temporary procedure.\nD An end colostomy can be a permanent or a temporary procedure.\nE Stoma complications are common.",
            "options": [
                "A A loop transverse colostomy is the ideal method to defunction an anterior resection.",
                "B An end ileostomy is always a permanent procedure.",
                "C A loop ileostomy is always a temporary procedure.",
                "D An end colostomy can be a permanent or a temporary procedure.",
                "E Stoma complications are common."
            ],
            "answer": [
                "A",
                "B"
            ],
            "explanation": "A loop transverse colostomy is no longer regarded as the ideal method to defunction an anterior resection; a loop ileostomy has replaced the procedure because of the following:\n(1) A loop ileostomy is formed in the right iliac fossa and hence the patient finds it much easier to manage the bag; (2) Loop transverse colostomy has the potential to prolapse; (3) Proximity to the rib cage makes attachment of the bag in loop colostomy insecure; (4) Loop colostomy can sometimes compromise the blood supply to the distal anastomosis; and (5) Contents of a loop ileostomy are not malodorous. An end ileostomy is not always a permanent procedure. It is the stoma constructed in an emergency situation when a subtotal colectomy is done for acute toxic megacolon or perforation in UC or CD.\nA loop ileostomy is always a temporary procedure constructed in the right iliac fossa to defunction a low anterior resection or ileo-anal pouch procedure after total colectomy for UC or FAP. Before closing it, a contrast study is always carried out to make sure that the distal anastomosis is securely intact. An end colostomy in the left iliac fossa can be permanent as after an abdomino-perineal resection for low rectal cancer or temporary as in a Hartmann's operation. To know clinically if a stoma is permanent or temporary, the patient must be turned on the side to see if the anus is still present. If it is, the stoma is temporary. Stoma complications are common and often underestimated. This is because the patient tends to put up with the inconvenience as he or she ‘has had enough' and does not seek advice unless it is an emergency or making his or her life miserable."
        },
        {
            "id": 41,
            "question_type": "msq",
            "question": "41. Which of the following statements are true?\nA The most common cause is a surgical complication.\nB In the management attention to nutrition is important.\nC The 'cut-off point' between a high-output and low-output fistula is 500 mL/day.\nD At operation end-to-end anastomosis should be carried out in all cases.\nE Always look for a cause when a fistula does not heal spontaneously.",
            "options": [
                "A The most common cause is a surgical complication.",
                "B In the management attention to nutrition is important.",
                "C The 'cut-off point' between a high-output and low-output fistula is 500 mL/day.",
                "D At operation end-to-end anastomosis should be carried out in all cases.",
                "E Always look for a cause when a fistula does not heal spontaneously."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "E"
            ],
            "explanation": "There are several causes of an enterocutaneous fistula, the most common being a surgical complication from an anastomotic leak or an inadvertent injury to the small bowel during a difficult dissection. The other causes are CD, radiation enteritis and abdominal trauma. In the management, attention to nutrition is vital as the patient would be losing a large amount of intestinal fluid, the amount depending upon whether it is a high-output or low-output fistula. Arbitrarily, 500 mL of daily lost fluid is regarded as the ‘cut-off point' – > than 500 mL/day is high-output fistula and <500 mL/day low out-put fistula.\nThe higher the fistula, the greater will be the loss of fluid and hence the paramount need for attention to detail regarding nutrition. Although the ideal route for nutrition is enteral, in a high-output fistula this might not be possible; hence parenteral nutrition should be instituted. When a fistula does not close spontaneously, it indicates epithelial continuity between gut and skin or underlying pathology such as an obstructing carcinoma, CD, or abscess."
        },
        {
            "id": 42,
            "question_type": "msq",
            "question": "42. Which of the following randomised controlled trials (RCTs) demonstrate the benefits of laparoscopic surgery over traditional surgery for colorectal cancer?\nA COST.\nB COLOR 1 and 2.\nC CLASICC.\nD LAFA.\nE DREAMS.",
            "options": [
                "A COST.",
                "B COLOR 1 and 2.",
                "C CLASICC.",
                "D LAFA.",
                "E DREAMS."
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D"
            ],
            "explanation": "The COST trial from the United States, COLOR 1 trial from Europe and CLASICC trial from the United Kingdom are multi-centre RCTs that showed improved short-term benefits of laparoscopic colon surgery over conventional surgery. The benefits include less postoperative pain, less intra-operative blood loss, faster recovery of bowel function and shorter hospital stay. In addition the COST trial demonstrated there is no difference in port-site metastasis between laparoscopic and open surgery. Some of these trials have matured data at 3 and 5 years showing no difference in the oncological outcomes between laparoscopic and open surgery. The CLASICC and COLOR 2 are the two trials comparing laparoscopic and open surgery for rectal cancer. These studies similarly showed improved short-term benefits with no difference in anastomotic complications. The LAFA trial is a randomised controlled trial comparing open and laparoscopic colon surgery in the setting of the enhanced recovery programme (ERP). This has also shown a similar improved short-term benefit with minimal access surgery.\nDREAMS is a randomised controlled multi-centre study to determine the use of dexamethasone at the time of induction to reduce post-operative nausea and vomiting in patients undergoing elective colorectal resections."
        },
        {
            "id": 43,
            "question_type": "msq",
            "question": "43. Which of the following statements regarding laparoscopic colorectal surgery is not true?\nA Decreased surgical site infection with minimal access technique.\nB Conversion rate of >10% is considered a good outcome.\nC Decreased length of stay in the hospital.\nD Decreased long-term survival.\nE NICE (National institute for health and clinical excellence) recommends that cancer should be suitable for laparoscopic resection and the surgeon should be experienced in performing both open and laparoscopic procedures.",
            "options": [
                "A Decreased surgical site infection with minimal access technique.",
                "B Conversion rate of >10% is considered a good outcome.",
                "C Decreased length of stay in the hospital.",
                "D Decreased long-term survival.",
                "E NICE (National institute for health and clinical excellence) recommends that cancer should be suitable for laparoscopic resection and the surgeon should be experienced in performing both open and laparoscopic procedures."
            ],
            "answer": [
                "B",
                "D"
            ],
            "explanation": "In laparoscopic colorectal surgery, one should aim for a conversion rate of <10% is aimed for. RCTs have shown increased postoperative morbidity in the converted group. Hence conversion is a bad outcome. Conversion is not a failure and nowadays it is recommended to convert early to decrease intra and postoperative complications. The large multi-centre RCTs and meta-analysis have shown similar oncological outcomes between open and laparoscopic techniques. The only long-term benefits of minimal-access techniques appear to be a tendency to demonstrate a decrease in incisional hernia and adhesion-related complications. The NICE guidance (TA 105) recommends laparoscopic colorectal surgery in patients with localised lesions and the surgeon to be experienced in performing both the procedures competently."
        },
        {
            "id": 44,
            "question_type": "mcq",
            "question": "44. The following statements are true except:\nA Laparoscopic approach is particularly suitable for colonic resection in Crohn's disease.\nB Radical lymphadenectomy in cancer is as good as in open surgery.\nC Operative times are longer.\nD Tattooing the lesion preoperatively is performed as per the unit policy.\nE The dissection is usually performed in a medial to lateral direction.",
            "options": [
                "A Laparoscopic approach is particularly suitable for colonic resection in Crohn's disease.",
                "B Radical lymphadenectomy in cancer is as good as in open surgery.",
                "C Operative times are longer.",
                "D Tattooing the lesion preoperatively is performed as per the unit policy.",
                "E The dissection is usually performed in a medial to lateral direction."
            ],
            "answer": "A",
            "explanation": "When resection is indicated in Crohn's colitis, laparoscopic approach is not particularly suitable for the less experienced because transmural inflammation causes the mesentery to be foreshortened and colonic disease is usually more severe. In general, benign conditions are difficult to deal with laparoscopically. However, experienced laparoscopic colorectal surgeons might consider an initial laparoscopic attempt provided there is a safe conversion threshold.\nLymph node retrieval is the same as those performed by the traditional method although the operative times are longer. In laparoscopic surgery, as the ability to palpate the lesion is not possible, tattooing the lesion at preoperative colonoscopic assessment is used according to the unit's policy; this is usually advocated as a standardised approach. Unlike in open surgery, the initial dissection is commenced medially by taking the major vascular pedicles thus freeing the mesocolon and then dividing the lateral peritoneal reflection as the lateral attachments provide retraction during early dissection."
        },
        {
            "id": 45,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nA A 52-year-old woman complains of being 'out of sorts' for almost 3 months. During this time she has felt unduly short of breath in doing her daily household work and going up one flight of stairs. Her haemoglobin is 8.6 g/dL, and her general practitioner (GP) felt a vague mass in the right iliac fossa.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "A": "2"
            },
            "explanation": "Patients with caecal carcinoma can present as an emergency or electively, the latter presentation being due to the primary tumour or metastatic disease such as liver secondaries.\nIn the emergency situation they can present with perforation and acute distal small bowel obstruction due to the ileocaecal valve being obstructed by the tumour and masquerading as 'acute appendicitis' as a result of the tumour causing blockage of the appendicular lumen. When an older patient presents with suspected features of acute appendicitis and preoperatively is found to be anaemic, the diagnosis is almost certainly a caecal carcinoma as genuine acute appendicitis does not cause anaemia.\nIn the elective situation, the presentation is from features of iron deficiency anaemia due to chronic occult bleeding or pain and lump over the right side of the abdomen. Sometimes, patients present with symptoms due to metastatic disease. This can be in the form of jaundice due to liver secondaries. A barium enema would show an irregular filling defect in the caecum (Figures 69.8a and b).\nThe management in the emergency situation is resuscitation and stabilisation of the patient. Electively, ideally haemoglobin close to 9 g/dL is aimed for, followed by confirmation of the diagnosis by colonoscopy and biopsy. The histology will show adenocarcinoma. This is followed by staging CT of the chest, abdomen and pelvis, and also carcinoembryonic antigen (CEA), the latter being useful in surveillance if it is elevated initially.\nDefinitive treatment is radical right hemicolectomy, which can nowadays be performed using a laparoscopic approach depending upon the choice of the surgical team.\nPostoperatively if the growth is Dukes' C stage the patient is given adjuvant chemotherapy."
        },
        {
            "id": 46,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nB A 75-year-old man complains of sudden onset of very severe lower abdominal pain radiating to the entire abdomen for 6 hours. On examination he is hypotensive (blood pressure of 80/60 mmHg), tachycardic (pulse rate of 120/minute) and cold and clammy; abdominal examination shows severe lower abdominal tenderness with rigidity and rebound tenderness.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "B": "9"
            },
            "explanation": "A patient with perforated diverticulitis presents with generalised peritonitis with features of septic shock. The peritonitis in such patients might be purulent or faecal. The patient requires optimal resuscitation and confirmation of the diagnosis followed by definitive treatment. The patient is started on oxygen; intravenous access is obtained with bloods being sent for routine haematology, biochemistry and culture; and an indwelling urinary catheter inserted. At his age with the prospect of postoperative ITU care, a CVP line is essential as this patient could well go into SIRS or sepsis syndrome in due course. Clinical examination is followed by CT scan with oral and IV contrast, which will show extra-luminal air with CXR showing gas under the right dome of the diaphragm.\nThe patient with free perforation needs an emergency laparotomy after optimum resuscitation. At operation through a lower midline incision, the perforated sigmoid colon is resected with end colostomy and the rectum closed off as a Hartmann's procedure. The peritoneal cavity is thoroughly washed out with several litres of warm normal saline. The peritoneum is closed with the incision being left open for delayed primary closure a few days later. Once the patient has recovered, after 3 months consideration might be given to reversal of the Hartmann's, a procedure nowadays done laparoscopically."
        },
        {
            "id": 47,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nC A 48-year-old man complains of altered bowel habit in the form of episodes of diarrhoea that last for few days when he has several loose stools a day with passage of mucus and sometimes blood. During the bouts of loose stools he has colicky abdominal pain mostly on the right side. A few months ago he had an acute perianal abscess drained, which has not completely healed. Examination shows vague abdominal tenderness with a discharging perianal sinus.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "C": "5"
            },
            "explanation": "Crohn's disease was first brought to light in 1932 by Crohn, Ginzburg and Oppenheimer, from Mount Sinai Hospital in New York, who called it ‘Regional ileitis'. However, it was TK Dalziell, a surgeon from Glasgow, who in 1913 described the same disease, which he called 'Chronic interstitial enteritis' and likened the macroscopic appearance of the small bowel to 'an eel in rigor mortis'.\nThe disease, a type of inflammatory bowel disease, is characterised by transmural inflammation that can affect the entire gastrointestinal tract from the mouth to the anus. It affects males and females equally and has a bimodal distribution with increased incidence in the twenties followed by further spike in the late sixties. The aetiology is multi-factorial, the possible causes being immunologic, infectious, genetic, and environmental.\nThe initial pathology is the formation of apthous and serpiginous ulcers with normal intervening mucosa that appear nodular and is referred to as cobblestone mucosa (Figure 69.13). Typical transmural inflammation can lead to perforation or internal fistulae or cause a stricture; there is overgrowth of fat beyond the mesentery covering the bowel wall (Figure 69.14) associated with regional lymphadenopathy. Diseased bowel is interspersed with normal unaffected bowel, an outcome referred to as skip lesions, which is typical of Crohn's disease. The pathology in CD is summarised in Table 69.8.\nThe most frequent site of Crohn's disease is the terminal ileum. This is followed by isolated colonic disease and then by isolated disease of the small bowel. Anal disease by itself is rare and usually accompanies colonic involvement.\nOn microscopy (Figure 69.3) the typical feature is non-caseating granuloma, which is present in about 60% of patients. The complications are local pertaining to the bowel (Table 69.6) and systemic or extra-intestinal (Table 69.7).\nCrohn's disease needs close collaboration between an aggressive physician and a conservative surgeon. The extent of the disease is established by a barium meal and follow-through showing a string sign of Kantor (Figure 69.15) or small bowel enema and colonoscopy and biopsy in large bowel disease. Other radiological findings are skip lesions, cobblestone mucosa, fistulae and spiculation (Figure 69.4). Treatment is mainly medical and should be tailored for the individual patient. Drugs used are steroids, 5-aminosalicylic acid derivatives (mainly for large bowel disease), antibiotics, immunosuppresives and tumour necrosis factor α (TNF-α) antagonists such as infliximab and adalimumab.\nThe indication for surgery in Crohn's disease are shown in Tables 69.9 and 69.10 and the available surgical options in Tables 69.11 and 69.12.\nAnorectal Crohn's disease (Figure 69.2) Perianal CD occurs most often in association with large bowel involvement; it can, however, occur in isolation or in the presence of ileal disease.\nIn keeping with Crohn's disease in general, conservative approach is the first option. Perianal abscesses are drained. MRI of the pelvis is the 'gold standard' to distinguish between a high anal and a low anal fistula, a distinction that is mandatory, as the management is different. Whilst a low anal fistula can be treated by laying open, the high fistula requires the use of a seton and staged procedure to drain the sepsis and is the domain of an expert colorectal specialist."
        },
        {
            "id": 48,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nD An 80-year-old man complains of rectal bleeding on and off for 10 months; the blood is dark red and associated with diarrhoea off and on. He has dull left-sided abdominal pain and vague tenderness. He had a myocardial infarction 3 years ago and now is on medical treatment for angina.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "D": "7"
            },
            "explanation": "Patients present as an emergency with rectal bleeding with pain on the left side of the abdomen over the left colon. If the ischaemia results in complete disruption of the blood supply, infarction of the colon ensues. This manifests with full-blown peritonitis from a gangrenous colon. Elective patients present with episodes of rectal bleeding with pain in the left upper quadrant, symptoms that reflect ischaemia of the splenic flexure from atheromatous obstruction to the inferior mesenteric artery.\nOn examination there might be tenderness over the left side of the abdomen. Most of these patients are elderly and settle down with conservative management. In a more serious presentation there might be SIRS response in the form of hypotension, fever, oliguria and altered mental status. Patients who have settled down with conservative management might later present with features of a left colonic stricture, complaining of increasing constipation and intermittent colicky abdominal pain. This might require local resection and end-to-end anastomosis. The summary of presentations is shown in Figure 69.16. The various causes are shown in Figure 69.17.\nIn the elective situation colonoscopy is performed to look for mucosal ischaemia, which can be patchy. CT will show a thickened colon, while a barium enema (Figure 69.18) shows a narrowing of the colon confined to the distribution of the inferior mesenteric artery in the region of the splenic flexure with thumb-printing.\nIn the emergency presentation, initial treatment is conservative with active resuscitation in the form of bed rest, analgesia, antibiotics and appropriate treatment of hypovolaemia. The patient who presents with peritonitis from gangrenous colon needs optimisation followed by urgent laparotomy, resection of the infarcted bowel and exteriorisation as colostomy and mucus fistula. A laparostomy should be considered as these patients often have further ischaemia for which a second-look operation might be necessary."
        },
        {
            "id": 49,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nE A 65-year-old man complains of frequency of micturition and passing foul-smelling urine that sometimes contains some semi-solid material. A few weeks ago he was treated as an emergency for severe bilateral loin pain diagnosed as acute bilateral pyelonephritis. Clinical examination does not show any abnormality but urine examination confirms heavy growth of E. coli.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "E": "4"
            },
            "explanation": "Patients with colovesical fistula present primarily with urinary symptoms such as dysuria, recurrent urinary tract infections, attacks of ascending pyelonephritis, pneumaturia and passing foul-smelling urine due to faeces in the urine. On questioning patients might admit to constipation, which would point to pathology in the large bowel, most often diverticular disease. The other causes are carcinoma of the rectosigmoid and Crohn's colitis.\nManagement should be to confirm the diagnosis by various imaging techniques such as barium enema, which would show air (Figure 69.10) or barium (Figure 69.11) within the urinary bladder and CT scan also to confirm air in the bladder (Figure 69.12). This should be followed by colonoscopy (or flexible sigmoidoscopy, as diverticular stricture would preclude a full colonoscopy) and biopsy, most importantly to exclude the possibility of a carcinoma within a segment of sigmoid diverticulitis. Once carcinoma is excluded and diverticulitis is confirmed, sigmoid colectomy is carried out. At operation the inflamed colon is pinched off the vault of the urinary bladder and the hole in the bladder closed off with interrupted absorbable sutures; sigmoid colectomy with end-to-end anastomosis is performed.\nIn the case of colovesical fistula due to rectosigmoid cancer, operation is performed after confirmation of the diagnosis and staging the disease. The operation will involve en bloc resection of the sigmoid carcinoma in the form of high anterior resection with partial cystectomy. When the fistula is due to Crohn's disease, sigmoid colectomy is performed followed by removal of macroscopic disease from the bladder and the urinary bladder closed in two layers with catheter left in situ for 10 days."
        },
        {
            "id": 50,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nF A 38-year-old woman complains of blood-stained diarrhoea with passage of slime on and off for 6 months. She passes 4 to 6 loose motions a day; this is associated with tenesmus and generalised vague abdominal pain and a feeling of ill health. She has lost some weight and recently found a raised, tender red swelling on her shin.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "F": "10"
            },
            "explanation": "Patients with ulcerative colitis might present electively or as an emergency. The vast majority, about 95%, present electively. The usual sufferer is a female between 30 and 40 years who complains of loose stools with blood and mucus. Sometimes she has to rush to the toilet and might be caught short. Anything up to 4 to 6 trips to the lavatory per day leaves her constantly with a feeling of insufficient evacuation and tenesmus. Colicky left-sided abdominal pain usually accompanies the loose stools. On examination there is not much to find except for some left iliac fossa tenderness and blood and mucus on rectal examination. Sigmoidoscopy (rigid or flexible) in the outpatient shows evidence of proctitis – hyperaemic mucosa with purulent and mucoid exudate.\nDiagnosis is by clinical assessment followed by endoscopy and histological confirmation. At endoscopy (Figure 69.20), the mucosa appears reddened, oedematous and haemorrhagic; there might be tiny ulcerations. Mucosal friability with contact bleeding is a feature. Mucosal changes start in the rectum and proceed proximally to a varying extent. In left-sided colitis the proximal extent is up to the splenic flexure; when the inflammation extends proximal to this level, it is considered as extensive colitis; backwash ileitis is seen in about 10% of patients.\nBarium enema shows the classical shortened pipe-stem colon (Figure 69.1a), which lacks haustrations while increase in the presacral space (Figure 69.1b) is a typical finding in advanced disease. There might be strictures with cancer (Figure 69.21). Biopsies show that inflammation is confined to the mucosa with characteristic crypt abscess (Figure 69.22). A summary of the imaging procedures is shown in Tables 69.13 and 69.14.\nThe two main differential diagnoses are Crohn's disease and indeterminate colitis. Crohn's disease is diagnosed by segmental and transmural inflammation and its propensity to affect all parts of the gastrointestinal tract from the mouth to the anus. Indeterminate colitis is diagnosed when clinical, endoscopic, radiologic and pathological features of both ulcerative colitis and Crohn's disease are present.\nThe emergency patient (5%) presents with cramp-like abdominal pain, tenesmus, faecal urgency, blood-stained diarrhoea and faecal incontinence. Bowel actions can be anything up to 12 times with extreme urgency. Failure to reach the toilet results in faecal incontinence.\nFever, malaise, anorexia, weight loss, dehydration and anaemia will be obvious. With fulminant colitis, the patient might be suffering from acute toxic megacolon bordering on perforation. The abdomen might be distended, tympanitic and tender (see previous multiple choice questions).\nThe complications of ulcerative colitis are enumerated in (Tables 69.1 and 69.2). One of the most serious complications is dysplastic change leading to cancer. Patients most vulnerable to malignant change are shown in Table 69.3. The indications for surgery are shown in Tables 69.4 and 69.5). The surgical options, elective operations and emergency operations are shown in Tables 69.15 and 69.16."
        },
        {
            "id": 51,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nG A 70-year-old man complains of increasing constipation for 6 months. He has a bowel movement once in 2 or 3 days whereas previously he was regular. In spite of taking laxatives there has been no improvement. He has occasional bright-red rectal bleeding when he strains at stool. Examination reveals no abnormality.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "G": "3"
            },
            "explanation": "Patients with descending colon carcinoma can present as an emergency or electively. As an emergency they present as acute closed-loop large-bowel obstruction or perforation and peritonitis. Elective presentation is change in bowel habit in the form of increasing constipation because the stools are formed and bowel lumen in the descending colon is narrow. Sometimes there is a history of colicky abdominal pain due to impending obstruction. A barium enema (Figure 69.9) would show irregular stricture and filling defect with 'shouldering'.\nA colonoscopy is carried out to confirm the diagnosis by biopsy. In a stricture, it is highly unlikely that the entire colon will be visualised to exclude synchronous growths. A CT scan of the chest, abdomen and pelvis is carried out to accurately stage the disease. This is followed by discussion in a MDT meeting prior to definitive treatment. The definitive treatment is radical left hemicolectomy with end-to-end anastomosis between the transverse colon and upper rectum. Postoperatively in Dukes' stage C patients adjuvant chemotherapy is given.\nAll patients following large bowel surgery are placed in the enhanced recovery programme (ERP), the usual practice to reduce hospital stay and the metabolic response to the surgical insult. In this regard, patient education is commenced preoperatively by the surgical, anaesthetic and nursing teams."
        },
        {
            "id": 52,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nH A 65-year-old man presents as an emergency with severe rectal bleeding that is dark red. He has features of hypovolaemia with tachycardia, with a blood pressure of 100/60 mmHg (his normal being 140/90). In the past he has had episodes of small rectal bleeds. He is known to have aortic stenosis for which he has been investigated in the past and did not need any treatment.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "H": "1"
            },
            "explanation": "Angiodysplasia is a thin-walled arteriovenous communication located within the mucosa and submucosa of the intestine, usually the ascending colon and caecum. Sometimes it is associated with aortic stenosis, when it is called Heyde's syndrome.\nThe typical presentation is with lower gastrointestinal bleeding that can be overt or occult. When the bleeding is overt it might be profuse, resulting in hypovolaemic shock. Initial management is resuscitation and stabilisation. This is followed by diagnostic evaluation usually by colonoscopy. In some cases three-vessel angiogram might be done when the pathology can be seen as a vascular blush. Therapeutic embolisation can be carried out at the same time.\nA CT angiogram is another diagnostic procedure; direct infusion of vasopressin will decrease or stop the bleeding. Colonoscopy could identify the bleeding site, which can then be managed by argon plasma coagulation, clips and adrenaline injection into the lesion. When bleeding cannot be controlled endoscopically, laparotomy is inevitable. On-table colonoscopy can sometimes localise the lesion when a segmental resection is carried out. If the bleeding site cannot be determined in spite of all available investigations, a subtotal colectomy might be necessary."
        },
        {
            "id": 53,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nI A-55-year old man, a known sufferer from CD, was admitted as an emergency with high temperature with rigors and a tender mass in the right iliac fossa, which on CT scan showed an abscess. This was drained percutaneously under antibiotic cover, following which his general condition improved. However, after removal of the catheter for drainage of the pus he developed a leakage of small-bowel contents from the site.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "I": "6"
            },
            "explanation": "Enterocutaneous fistula (see previous multiple choice questions) is a challenging situation that requires teamwork among the surgeon, physician, radiologist, dietician and stomatherapist. The team should be prepared for a long haul. If there is no distal obstruction, or pathology, or underlying sepsis, an enetrocutaneous fistula should close by good supportive management. It is essential to find the cause; in this case it is CD. The principles of management can be summarised by the acronym SNAP which stands for the following:\nSepsis elimination and Skin protection; Nutrition; Anatomical assessment; Planned surgery.\nTo achieve this goal, the principles of management must be instituted concurrently. Sepsis and skin: Under image guidance all sepsis must be eliminated by percutaneous drainage. Repeat CT scans, WCC count and CRP should be done. The role of the stoma nurse is very important to take care of skin excoriation, which can be very distressing for the patient.\nNutrition: In high-output fistula (> 500 mL/day) it will be necessary to establish total parenteral nutrition (TPN) as hypoproteinaemia must be combated.\nAnatomy is best defined by contrast studies, which might require barium meal, and follow through, barium enema and fistulography carried out in conjunction with CT scan. This is where the radiologist's input is vital.\nPlanned surgical procedure, which can be most challenging, is carried out only after the aforementioned principles have been optimally established. It might be necessary to perform staged procedures of exteriorisation to be followed by anastomosis when the conditions are right."
        },
        {
            "id": 54,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nJ A 68-year-old woman, who has never been ill, presents as an emergency with temperature and rigors and generally feeling unwell for 3 days. She has not moved her bowels during this period and has vomited a few times. On examination she is pyrexial with a tender boggy mass in the left iliac fossa.",
            "options": {
                "items": [
                    "1 Angiodyplasia",
                    "2 Carcinoma of caecum",
                    "3 Carcinoma of descending colon",
                    "4 Colovesical fistula",
                    "5 Crohn's disease",
                    "6 Enterocutaneous fistula",
                    "7 Ischaemic colitis",
                    "8 Paracolic abscess",
                    "9 Perforated diverticulitis",
                    "10 Ulcerative colitis"
                ],
                "choices": [
                    "A",
                    "B",
                    "C",
                    "D",
                    "E",
                    "F",
                    "G",
                    "H",
                    "I",
                    "J"
                ]
            },
            "answer": {
                "J": "8"
            },
            "explanation": "This patient has the clinical features of a paracolic abscess, one of the complications of diverticular disease shown in Figure 69.7. This is an ill and septic patient who needs resuscitation, confirmation of the diagnosis and definitive treatment. The patient needs intravenous fluids with bloods having been sent for culture, haematological and biochemical investigations. Broad-spectrum antibiotics are started. The best imaging technique to confirm the diagnosis is contrast spiral CT scan.\nOn confirmation of the paracolic abscess the abscess is drained under CT guidance, which would result in improvement in the patient's general condition and local symptoms. Sometimes drainage of the abscess might result in a colocutaneous fistula. Once the patient has recovered from the acute episode, definitive treatment is planned after investigations in the form of a colonoscopy and contrast CT scan to exclude an unsuspected carcinoma within the diverticular segment. A sigmoid colectomy with end-to-end anastomosis is performed as an elective procedure.\nComplicated diverticulitis is stratified on CT scan according to the Hinchey classification which has the following four grades: Grade I – mesenteric or pericolic abscess; Grade II – pelvic abscess; Grade III – purulent peritonitis; Grade IV – faecal peritonitis. The first two grades can be treated by minimal-access surgery in the form of image-guided drainage and laparoscopic wash-outs under antibiotic cover while the higher grades will require laparotomy. Stricture is a complication that can mimic carcinoma with the typical radiological features of shouldering on barium enema (Figure 69.19a). In such patients a biopsy must be taken to exclude a carcinoma before performing a sigmoid resection (Figure 69.19b)."
        }
    ]
}
{
  "chapter_name": "Nutrition and Metabolism",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding daily caloric and/or protein requirements?",
      "options": [
        "A. Preterm infants may need up to 2 g/kg per day of protein.",
        "B. A 60-kg adult needs about 90 g/day of protein.",
        "C. A respiratory quotient greater than 1.0 suggests overfeeding.",
        "D. Burn victims generally require less protein than other trauma victims.",
        "E. A respiratory quotient (RQ) of 0.8 suggests starvation."
      ],
      "answer": "C",
      "explanation": "- The daily recommended protein requirement in an adult is approximately 0.8 g/kg per day.\n- Burn patients' protein requirement is closer to 2 to 2.5 g/kg per day.\n- Preterm infants may need 3 to 4 g/kg per day.\n- A 60-kg adult needs approximately 48 g protein/day (60 kg × 0.8 g/kg per day).\n- The RQ is the ratio of carbon dioxide produced to oxygen consumed, used to estimate the primary energy source.\n- RQ values: greater than 1 for lipogenesis (overfeeding state), 1.0 for carbohydrates, 0.8 for proteins, and 0.7 for fatty acids.\n- A normal RQ is around 0.85 because the body uses about 50% carbohydrates and 50% fatty acids.\n- The overfed state, with conversion of glucose into fats, correlates with an RQ of more than 1.\n- Starving patients primarily use fatty acids as fuel and have an RQ of less than 0.7."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 23-year-old male was admitted 7 days ago for multisystem trauma including multiple long-bone fractures, subdural hematoma, and pulmonary contusions and is still on the ventilator. Which of the following is true regarding tools for assessing nutritional status?",
      "options": [
        "A. Use of serial measurements of albumin and prealbumin is the “gold standard\" for trauma patients.",
        "B. Measurement of nitrogen balance is limited because it underestimates nitrogen input.",
        "C. The Mini Nutritional Assessment is designed specifically for hospitalized patients.",
        "D. Creatinine height index may overestimate lean body mass in trauma patients.",
        "E. Out of all of the serum protein measurements, transferrin seems to correlate the closest to nitrogen balance."
      ],
      "answer": "D",
      "explanation": "- Nutritional assessment in hospitalized patients is limited by multiple confounding factors; no single item is infallible.\n- Current Eastern Association for the Surgery of Trauma (EAST) Guidelines use nitrogen balance as the \"gold standard\" for nutritional assessment in trauma patients.\n- Nitrogen balance is accurate but limited by impractical 24-hour urine collection and often inaccurate recording of daily nitrogen input; output is often underestimated and input overestimated.\n- Of the serum proteins, prealbumin seems to correlate closest with nitrogen balance.\n- Many serum proteins (albumin, prealbumin, transferrin, retinol binding protein) are altered by stress or infection; acute phase reactants like CRP should be considered.\n- Creatinine height index can estimate lean body mass, but changes in creatinine excretion from systemic processes (e.g., trauma, renal disease) can make results unreliable.\n- The Mini Nutritional Assessment is specifically designed for the elderly."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the risk of hypoglycemia following cessation of total parenteral nutrition (TPN)?",
      "options": [
        "A. It commonly occurs in patients with liver disease.",
        "B. TPN should be tapered in most patients so as to avoid this complication.",
        "C. This complication is relatively common.",
        "D. It is more likely to occur in a diabetic patient.",
        "E. It is more likely to occur in patients with renal disease."
      ],
      "answer": "D",
      "explanation": "- Hypoglycemia following abrupt cessation of TPN has been reported but is very rare.\n- Symptoms include diaphoresis, confusion, agitation, tachycardia, and, if severe, diabetic coma.\n- Most patients tolerate abrupt cessation of TPN; tapering is generally unnecessary.\n- Two studies showed no difference in symptomatic hypoglycemia or serum glucose measurements between abrupt cessation versus step-wise tapering.\n- Tapering of TPN should be considered in diabetic patients and those with poor glucose control."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is true about the pharmacologic treatment of cancer cachexia?",
      "options": [
        "A. There is no evidence that ghrelin mimetics are of benefit.",
        "B. Cannabinoids are superior to megestrol acetate in stimulating appetite and weight gain.",
        "C. When initiated early, megestrol acetate has been demonstrated to improve survival.",
        "D. Megestrol is a progesterone derivative.",
        "E. Anabolic steroids have been shown to have lasting improvements in appetite and improved long-term weight gain."
      ],
      "answer": "D",
      "explanation": "- Cancer-related cachexia/anorexia is associated with failure of cancer treatment, increased toxicity, early discontinuation of treatment, and shorter survival.\n- Current NCCN Guidelines recommend early screening and treatment.\n- Megestrol acetate (Megace) is the most widely studied and efficacious medication for improving appetite and weight gain.\n- Megestrol acetate is a synthetic, orally active progesterone derivative.\n- It has been found to improve appetite, caloric intake, and nutritional status.\n- Megestrol acetate has not consistently been demonstrated to improve survival.\n- Thromboembolic events occur in 1 in 23 patients using megestrol acetate.\n- Steroids have equivalent results to megestrol acetate but are short-lived, with patients quickly returning to baseline after cessation.\n- Cannabinoids have been looked at for chemotherapy-related nausea and AIDS-cachexia, but studies show inferiority to megestrol acetate in the cancer population.\n- Ghrelin mimetics have been demonstrated to improve lean body mass."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding energy homeostasis during periods of fasting or starvation?",
      "options": [
        "A. The largest source of energy after glycogen is depleted is free fatty acids.",
        "B. Skeletal muscle has the largest store of glycogen available systemically.",
        "C. Glucose is converted to lactate in the liver.",
        "D. Red blood cells are reliant on aerobic metabolism of glucose.",
        "E. The brain is unable to utilize ketones."
      ],
      "answer": "A",
      "explanation": "- After a meal, carbohydrates are stored as fatty acids or glycogen (primarily in liver and skeletal muscle).\n- Skeletal muscle glycogen is not systemically available during fasting due to lack of glucose-6-phosphatase; it is used only locally.\n- Liver glycogen stores are typically used within 16 to 36 hours.\n- After glycogen depletion, the body turns to the breakdown of skeletal muscle and lipids for energy.\n- The largest source of energy is free fatty acids, though they are a relatively poor source of free glucose.\n- Amino acids from protein breakdown can be used for gluconeogenesis in the liver (early starvation) and kidney (late starvation); most proteins serve an important role in bodily functions.\n- Lactate and glycerol can also be used as substrates for gluconeogenesis.\n- During prolonged fasting, tissues able to use alternate fuel sources (breakdown products of fatty acids) begin to do so, slowing muscle breakdown and increasing body fat breakdown.\n- Gluconeogenesis never completely stops because several cells rely heavily on glucose as a fuel source.\n- Red blood cells rely solely on anaerobic conversion of glucose to lactate because they lack mitochondria for fatty acid utilization or aerobic glucose breakdown.\n- White blood cells, adrenal medulla cells, and peripheral nerves are obligate glucose users.\n- The brain is heavily reliant on glucose but can use ketones to some degree."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is true regarding fluid homeostasis during and immediately after a 4-hour laparotomy?",
      "options": [
        "A. The majority of postoperative oral fluid replacement will be primarily absorbed in the colon.",
        "B. Laparoscopic and open abdominal causes have similar unmeasured fluid losses.",
        "C. Administration of 5% albumin pulls third-space fluids into the intravascular space.",
        "D. Insensible fluid deficit may be as high as 4 L",
        "E. About 50% of a crystalloid fluid bolus will remain intravascular."
      ],
      "answer": "D",
      "explanation": "- Open abdominal cases, more so than laparoscopic, can be associated with significant insensible losses ranging from 0.5 to 1 L/hour.\n- Fluid status should be evaluated by a combination of factors including urinary output, calculated losses, and hemodynamic status.\n- Isotonic crystalloids (e.g., normal saline or lactated ringers) administered during or after the case will replete some fluid deficit, but only about 33% will remain intravascular after equilibration.\n- 5% albumin has a similar osmotic pressure to serum; it stays intravascular longer (up to 24 hours) but does not \"pull\" fluids from the extravascular space.\n- The majority of postoperative oral fluid is absorbed by the small bowel, not the colon; the colon's primary function is water absorption, not large total volume."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A potential complication of massive red blood cell transfusions is:",
      "options": [
        "A. Metabolic acidosis from citrate preservative",
        "B. Hypocalcemia from citrate preservative",
        "C. Hypokalemia due to prolonged red cell storage",
        "D. A rise in 2,3-diphosphoglycerate (DPG)",
        "E. Shift of the oxyhemoglobin dissociation curve to the right"
      ],
      "answer": "B",
      "explanation": "- Hypocalcemia is a very common sequela of massive transfusion, worsening coagulopathy and potentially increasing mortality.\n- It is primarily caused by the chelation of calcium by citrate, used to prevent clotting of stored blood.\n- Citrate is rapidly cleared by the liver with small volume transfusions.\n- In trauma patients receiving massive transfusion, reduced clearance occurs due to high transfused products, hypothermia, and multiorgan system dysfunction.\n- A study showed 90% of trauma patients requiring massive transfusion protocol had some degree of calcium deficiency; the strongest predictor of severe hypocalcemia was transfusion of more than 15 units of total blood products, associated with significantly higher mortality.\n- Patients with massive transfusions can develop hyperkalemia due to potassium leakage from lysed red blood cells.\n- Metabolism of citrate in the liver can result in metabolic alkalosis.\n- As the shelf time of stored red blood cells increases, intracellular adenosine triphosphate (ATP) and 2,3-DPG decrease, resulting in a left shift of the oxyhemoglobin dissociation curve."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following amino acids can be synthesized de novo in humans in any physiologic state?",
      "options": [
        "A. Tryptophan",
        "B. Tyrosine",
        "C. Glycine",
        "D. Serine",
        "E. Any branched-chain amino acid"
      ],
      "answer": "D",
      "explanation": "- Nonessential amino acids can be created de novo without an exogenous source; these include alanine, aspartic acid, asparagine, glutamic acid, and serine.\n- Essential amino acids cannot be synthesized and require an exogenous source: phenylalanine, threonine, tryptophan, methionine, lysine, and histidine.\n- All branched-chain amino acids (leucine, isoleucine, and valine) are essential amino acids.\n- A third category of amino acids can become essential in certain physiologic states, such as in premature infants or severe distress; these include arginine, cysteine, glycine, glutamine, proline, and tyrosine.\n- In patients with phenylketonuria (PKU), tyrosine can become an essential amino acid because it is a precursor to tyrosine and phenylalanine intake must be kept low."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the use of preoperative TPN to prevent postoperative complications?",
      "options": [
        "A. It is useful even if used for as little as 3 days.",
        "B. It is efficacious if the patient has lost more than 15% weight before surgery.",
        "C. There is no evidence that it lowers the complication rate.",
        "D. Slightly overfeeding for 7 days is preferable as a means to maximize replacement of caloric deficits.",
        "E. TPN is efficacious even in mild to moderate malnutrition."
      ],
      "answer": "B",
      "explanation": "- Nutritional intervention should be limited to patients with severe malnutrition and immunologic dysfunction.\n- In a Veterans Affairs multicenter trial, malnourished patients who lost more than 15% of their baseline body weight had decreased operative septic complications when they received preoperative nutritional intervention for 7 to 10 days.\n- In the group stratified as having mild to moderate malnutrition, the decrease in surgical complications was more than offset by the increase in catheter-related infectious complications.\n- TPN-induced hyperglycemia is likely a contributor to adverse outcomes.\n- Improperly administered TPN increases the risk of catheter-related and non-catheter-related infection.\n- Buzby guidelines for TPN use:\n  - Postoperative TPN: considered if oral or enteral feeding is not anticipated within 7 to 10 days (previously well-nourished) or 5 to 7 days (previously malnourished or critically ill).\n  - Preoperative TPN: considered if patients cannot eat or receive enteral feedings and operation must be delayed for more than 3 to 5 days.\n  - Preoperative TPN: considered in most severely malnourished surgical candidates if operative delay is not contraindicated.\n  - Preoperative TPN is not indicated for patients with only mild to moderate degrees of malnutrition."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true regarding nutritional deficiencies following a partial gastrectomy with a Billroth II (gastrojejunostomy) reconstruction?",
      "options": [
        "A. Calcium absorption will be minimally affected because this primarily occurs in the ileum.",
        "B. Iron deficiency anemia is more common with a Billroth I (gastroduodenostomy) than a Billroth II.",
        "C. Vitamin B12 deficiency will present with a low mean corpuscular volume.",
        "D. The stomach has no intrinsic absorptive ability.",
        "E. Carbohydrate absorption is not impaired after surgery."
      ],
      "answer": "E",
      "explanation": "- The main deficiencies of clinical concern after gastrectomy are iron (most common), calcium, and vitamin B12.\n- Stomach acid helps reduce dietary iron from a ferric to a ferrous state, allowing it to be actively absorbed in the duodenum and jejunum, putting patients at risk for iron-deficiency anemia.\n- Iron deficiency anemia is more common with a Billroth II compared to a Billroth I.\n- Calcium absorption primarily occurs in the duodenum by an active process regulated by vitamin D and parathyroid hormone.\n- After gastrectomy with Billroth II reconstruction, patients are at risk for nutritional deficiencies primarily due to quicker gastric emptying and anatomically bypassing the duodenum.\n- Parietal cells in the gastric fundus and corpus produce intrinsic factor, required for vitamin B12 absorption in the terminal ileum.\n- Vitamin B12 deficiency presents with megaloblastic anemia (increased MCV) and peripheral neuropathy.\n- The stomach does not typically absorb many nutrients, but can absorb some lipid-soluble compounds such as alcohol, aspirin, and nonsteroidal antiinflammatory drugs (NSAIDs).\n- Fatty acid absorption has been shown to be affected after gastrectomy, but there is no evidence that carbohydrate absorption is impaired."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "The most important amino acid used for gluconeogenesis by the liver is:",
      "options": [
        "A. Glutamine",
        "B. Serine",
        "C. Alanine",
        "D. Tyrosine",
        "E. Asparagine"
      ],
      "answer": "C",
      "explanation": "- In humans, the main substrates for gluconeogenesis are lactate, pyruvate, amino acids, and, to a lesser extent, glycerol.\n- Gluconeogenesis is primarily stimulated by glucagon.\n- Alanine is the most important amino acid precursor in gluconeogenesis.\n- When the liver has exhausted its alanine supply, the kidney takes over gluconeogenesis, where glutamine may be used.\n- Alanine and phenylalanine are the only amino acids that increase during times of stress.\n- Serine, tyrosine, and asparagine are not substrates for gluconeogenesis."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 65-year-old male with a malignant tumor has an elevated serum level of tumor necrosis factor alpha (TNF-a) and an elevated urine level of proteolysis-inducing factor (PIF). Which of the following cancers does this patient most likely have?",
      "options": [
        "A. Colon",
        "B. Prostate",
        "C. Pancreas",
        "D. Breast",
        "E. Liver"
      ],
      "answer": "C",
      "explanation": "- Cachexia is a progressive wasting syndrome characterized by extensive loss of adipose tissue and skeletal muscle.\n- It occurs in approximately one-half of all cancer patients and is most prominent in upper gastrointestinal cancers, particularly pancreatic, as well as lung cancer.\n- It is noticeably absent in breast cancer.\n- Patients with cancer often have anorexia, but energy deficit alone does not explain the pathogenesis of cachexia.\n- PIF has been found in the urine in a significant number of patients with weight loss due to pancreatic cancer.\n- TNF-a and PIF can both induce catabolism and activate the ubiquitin-proteasome pathway in muscle.\n- Exocrine insufficiency seen in pancreatic cancer may be an important contributor to weight loss.\n- Sixty-five percent of patients with pancreatic cancer have weight loss, which is associated with worse morbidity and is a negative prognostic factor for survival."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Poor glucose control is a manifestation of deficiency of:",
      "options": [
        "A. Zinc",
        "B. Copper",
        "C. Chromium",
        "D. Molybdenum",
        "E. Selenium"
      ],
      "answer": "C",
      "explanation": "- Chromium is a cofactor involved in insulin utilization at the tissue level; deficiency often manifests as a sudden diabetic state with difficult blood sugar control, along with peripheral neuropathy and encephalopathy.\n- Zinc deficiency has numerous manifestations, including alopecia, poor wound healing, immunosuppression, night blindness or photophobia, impaired taste or smell, neuritis, and various skin disorders.\n- Copper deficiency manifests as microcytic anemia, pancytopenia, depigmentation, and osteopenia.\n- Molybdenum deficiency is characterized by the toxic accumulation of sulfur-containing amino acids and encephalopathy.\n- Selenium deficiency may result in diffuse skeletal myopathy and cardiomyopathy, loss of pigmentation, and erythrocyte macrocytosis."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Which of the following is true regarding long-term TPN?",
      "options": [
        "A. Fat is considered the nutritional basis of TPN.",
        "B. It may lead to a mucin gel matrix of cholesterol crystals and calcium bilirubinate in the gallbladder.",
        "C. Hepatic dysfunction related to TPN is less likely to be lethal in infants than in adults.",
        "D. It has not been shown to lead to hepatic fibrosis.",
        "E. Carnitine supplementation has been shown to reverse TPN-related liver damage."
      ],
      "answer": "B",
      "explanation": "- Glucose is considered the nutritional basis of TPN, while fat is considered the nutritional basis of peripheral parenteral nutrition (PPN).\n- Liver dysfunction is commonly observed in patients receiving TPN, developing in 40% to 60% of infants requiring long-term TPN for intestinal failure.\n- The clinical spectrum includes cholestasis, biliary sludge (mucin gel matrix of cholesterol crystals and calcium bilirubinate), cholelithiasis, hepatic fibrosis with progression to biliary cirrhosis, and development of portal hypertension and liver failure.\n- Predisposing factors include short gut syndrome, history of bacterial overgrowth, and recurrent sepsis or chronic inflammatory state.\n- Lack of enteral feeding contributes by leading to reduced gut hormone secretion, decreased bile flow, and biliary stasis.\n- Deficiencies in particular nutrients such as carnitine, taurine, cysteine, and S-adenosylmethionine are also implicated in TPN-related liver disease.\n- Hepatic steatosis may be improved with carnitine supplementation, but there is no evidence that it will reverse TPN-related liver damage.\n- Hepatic dysfunction is more serious and lethal in infants dependent on TPN compared with adults.\n- Even when enteral feeding is begun and TPN is discontinued, hepatic dysfunction may persist and progress to cirrhosis and death.\n- The ultimate solution is combined liver and small bowel transplantation."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following amino acids has shown potential for increasing the absorptive capability of the intestine in patients that have undergone large segment small bowel resection?",
      "options": [
        "A. Glutamine",
        "B. Serine",
        "C. Alanine",
        "D. Tyrosine",
        "E. Arginine"
      ],
      "answer": "A",
      "explanation": "- In two randomized studies, patients with short gut syndrome secondary to small bowel resection showed modest improvements after administration of supplemental glutamine, exogenous growth hormone, and a modified diet with increased fiber.\n- One study showed improvement in calorie, protein, and carbohydrate absorption, as well as a reduction in stool volume.\n- The second study failed to show an increase in macronutrient absorption but showed improvement in electrolyte absorption and a reduction in delayed gastric emptying.\n- These specific interventions seemed to exert bowel-specific trophic effects, which may influence nutritional absorption, though the mechanism is unclear.\n- These studies were done on a small number of patients but show promise for otherwise completely TPN-dependent patients.\n- The remaining answer choices have not been shown to improve intestinal absorption efficiency.\n- Glutamine can also lead to improved immunologic function when given to critically ill patients in catabolic states (e.g., sepsis, trauma)."
    }
  ]
}
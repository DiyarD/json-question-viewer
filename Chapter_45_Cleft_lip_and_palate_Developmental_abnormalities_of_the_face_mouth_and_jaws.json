{
    "chapter_name": "Cleft lip and palate: Developmental abnormalities of the face, mouth and jaws",
    "questions": [
        {
            "id": 1,
            "question_type": "msq",
            "question": "1. In cleft palate anatomy, which of the following are true?",
            "options": [
                "A Primary palate is anterior to incisive foramen.",
                "B The maxillary complex in cleft palate patients has normal growth potential.",
                "C In cleft palate the muscles are oriented transversely.",
                "D Bifid uvula is present.",
                "E Notched posterior hard palate is present.",
                "F Levator palatini is the most important muscle for velopharyngeal closure."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E",
                "F"
            ],
            "explanation": "Embryologically, the primary palate consists of all anatomical structures anterior to the incisive foramen. The secondary palate is defined as the part of the palate behind the incisive foramen, which is divided into hard palate anteriorly and soft palate posteriorly.\nThe cleft of the secondary palate does not disrupt a basic growth mechanism of the upper jaw, hence the maxillary complex has normal growth potential. In normal palate, muscles are oriented transversely and meet in midline, while in cleft palate the muscle fibers are oriented in the anteroposterior direction inserting into the posterior edge of hard palate and cleft mucosa.\nBifid uvula and notched posterior hard palate are indications of submucous cleft palate through bifid uvula might be present in 2% of normal population. The levator palatini muscles of both sides form a sling and are mostly responsible for pushing the soft palate backward for velopharyngeal closure during speech (see Figures 45.1 through 45.4)."
        },
        {
            "id": 2,
            "question_type": "msq",
            "question": "2. Which of the following statements about cleft palate are true?",
            "options": [
                "A The incidence of cleft lip and palate is one in 6000 live births.",
                "B The incidence of cleft palate is one in 1000 live births.",
                "C The typical distribution of cleft lip alone is 35%.",
                "D. The typical distribution of isolated cleft palate is 40%.",
                "E Cleft palate alone is more common in males"
            ],
            "answer": [
                "B",
                "D"
            ],
            "explanation": "The incidence of cleft lip and palate is 1 in 600 live births and that of isolated cleft palate is 1 in 1000 live births. Cleft lip alone comprises 15% of all clefts, while cleft palate alone comprises 40%. The latter is more common in females."
        },
        {
            "id": 3,
            "question_type": "msq",
            "question": "3. Which of the following statements regarding congenital abnormalities of cleft lip and palate are true?",
            "options": [
                "A The most common congenital abnormalities of the orofacial structures are cleft lips, alveolus and palate.",
                "B They are also an associated feature in more than 300 recognised syndromes.",
                "C There is an increased incidence in the black population.",
                "D Genetics and the environment both play a part in causation.",
                "E Family history with a first-degree relative affected increases the risk to one in 100 live births."
            ],
            "answer": [
                "A",
                "B",
                "D"
            ],
            "explanation": "The most common orofacial congenital abnormalities are cleft lips, alveoli and cleft palates. There are at least 300 recognised syndromes that have associated cleft problems. The black population does not have an increased cleft incidence, but it is increased in ethnic Chinese and highest among the Native American tribes of Montana, United States. Both genetic and environmental factors play a part in causation. A family history of a cleft in a first-degree relative increases the risk to 1 in 25 live births."
        },
        {
            "id": 4,
            "question_type": "msq",
            "question": "4. Which of the following statements regarding causal factors of cleft lip and palate are true?",
            "options": [
                "A Environmental factors are less important for cleft palates than for cleft lip/palate.",
                "B Environmental maternal epilepsy is one factor not associated with clefts.",
                "C Down syndrome can be associated with clefts.",
                "D Apert's and Treacher-Collins syndromes are not associated with clefts.",
                "E An isolated cleft palate is more commonly associated with a syndrome than cleft lip alone."
            ],
            "answer": [
                "C",
                "E"
            ],
            "explanation": "The environment is of greater importance in cleft palate than in cleft lip/palate. Environmental factors implicated in clefts include maternal epilepsy and drugs, including steroids, diazepam and phenytoin. Down, Apert's and Treacher-Collins syndromes can be associated with clefts, especially an isolated cleft palate."
        },
        {
            "id": 5,
            "question_type": "msq",
            "question": "5. Which of the following statements are true?",
            "options": [
                "A Pierre Robin syndrome is the most common syndrome associated with clefts.",
                "B Pierre Robin syndrome includes glossoptosis.",
                "C Retrognathia is not a feature of Pierre Robin syndrome.",
                "D Pierre Robin syndrome is named after the first patient in whom the condition was described in 1729.",
                "E Pierre Robin syndrome is associated with early respiratory and feeding difficulties."
            ],
            "answer": [
                "A",
                "B",
                "E"
            ],
            "explanation": "Pierre Robin was a professor of dentistry, who described the syndrome in 1929. Glossoptosis and retrognathia in this syndrome contribute to early respiratory and feeding problems. It is the most common syndrome associated with clefts."
        },
        {
            "id": 6,
            "question_type": "msq",
            "question": "6. Which of the following statements are true?",
            "options": [
                "A In cleft lip there is disruption of the two groups of muscles of the upper lip and nasolabial region.",
                "B In bilateral cleft lip, the disruption is associated with a prolabium.",
                "C Prolabial tissue contains muscle tissue.",
                "D. The secondary palate is defined as the structures anterior to the incisive foramen.",
                "E Cleft palate results owing to failure of fusion of the two palatine shelves."
            ],
            "answer": [
                "A",
                "B",
                "E"
            ],
            "explanation": "Cleft lip is caused by disruption of the nasolabial and bilabial muscles, with this more profound and symmetrical in bilateral clefts. The prolabium has no muscle tissue and is associated with bilateral cleft lips. The secondary palate is found posterior to the incisive foramen, and a cleft palate is the result of failure in fusion of two palatine shelves."
        },
        {
            "id": 7,
            "question_type": "msq",
            "question": "7. Which of the following statements are true?",
            "options": [
                "A In a complete cleft palate, the nasal septum and vomer are completely separated from the palatine processes.",
                "B In a cleft of the soft palate, the muscle fibres are oriented wrongly but insert into the posterior edge of the hard palate.",
                "C In a submucous soft-palate cleft, the mucosa is not intact.",
                "D The LAHSHAL system of classification describes the features of a cleft.",
                "E Using the LAHSHAL classification, the incomplete right unilateral cleft lip and incomplete cleft of soft palate extending onto the hard palate are represented by lahSh."
            ],
            "answer": [
                "A",
                "B",
                "D"
            ],
            "explanation": "In complete cleft palate, the nasal septum and vomer are separated from the palatine processes. The attachment of the muscle fibres is into the posterior edge of the hard palate in a cleft of the soft palate. In submucous clefts of the soft palate, the mucosa is intact and a groove occurs as a result of muscle abnormality. Classification of clefts can simplified using the LAHSHAL system – lahSh is an incomplete right unilateral cleft lip and alveolus with a complete cleft soft palate extending partly onto the hard palate (see Figure 45.2)."
        },
        {
            "id": 8,
            "question_type": "msq",
            "question": "8. Which of the following statements are true?",
            "options": [
                "A Antenatal scans are useful in the early diagnosis of cleft palates.",
                "B As a result of scan results, the parents-to-be should get appropriate support and counselling.",
                "C Diagnosis by scan of a cleft can be made before 15 weeks of gestation.",
                "D Most babies born with a cleft lip and palate feed well and thrive.",
                "E Major respiratory problems occur exclusively in Pierre Robin syndrome."
            ],
            "answer": [
                "B",
                "D",
                "E"
            ],
            "explanation": "Antenatal scans are of use in diagnosing cleft lips but they are of no value in the diagnosis of cleft palates. Appropriate counselling should be given to prospective parents when the diagnosis has been made. Ultrasonic scans and diagnosis of cleft lips can be made after 18 weeks’ gestation but not before. Feeding and thriving in cleft lip and palate babies are usually normal. Major respiratory problems can occur in the Pierre Robin syndrome."
        },
        {
            "id": 9,
            "question_type": "msq",
            "question": "9. Which of the following statements are true?",
            "options": [
                "A Labioglossopexy is not a procedure used in Pierre Robin syndrome problems.",
                "B Hypoxia is more likely to occur in the awake Pierre Robin baby than during sleep.",
                "C In cleft surgery, the emphasis is repair of the muscles.",
                "D There are four muscles of the soft palate.",
                "E Tensor palati is a soft palate muscle."
            ],
            "answer": [
                "C",
                "E"
            ],
            "explanation": "A technique that might be useful in preventing respiratory complications in Pierre Robin cases is labioglossopexy. In that syndrome, hypoxia occurs while asleep, not awake. Repair of muscle is the crucial thing in cleft repairs. There are five muscles that control activity in the soft palate, one of which is the tensor palati muscle."
        },
        {
            "id": 10,
            "question_type": "msq",
            "question": "10. In cleft palate repair, which of the following statements are true?",
            "options": [
                "A Adult cases are less problematic because of larger area to work.",
                "B Future facial growth depends upon the nature of surgery.",
                "C Minimal dissection to detach the abnormal soft palate muscles decreases facial growth abnormality.",
                "D Speech results are better if palate repair is done early.",
                "E Facial growth is better if palate repair is done early.",
                "F Primary goal of palate repair is to prevent nasal regurgitation of food material.",
                "G Pushback techniques of palate lengthening are adequate for proper speech development."
            ],
            "answer": [
                "B",
                "C",
                "D"
            ],
            "explanation": "Primary goal of cleft palate repair is proper development of speech, tension free closure of cleft and prevention of ear problems. Through speech results are better if palate repair is done early, i.e., before beginning of language learning, ideally by 12 months, simultaneous facial growth disturbance because of post-op scarring should also be considered. But speech is the most important goal and should be given priority (see Figures 45.3 and 45.4).\nDissection should be limited to adequate mobilisation of mucoperiosteal flaps to ensure tension-free closure. Freeing up of all the abnormal muscular attachments and achieving an adequate pushback is of utmost importance to have a good speech. The muscle pushback is achieved by the Intravelar veloplasty principle of Sommerlad or the double opposing Z-plasty principle of Furlow.\nCleft palate repair obtains tension-free complete nasal and oral closure from front to back and detachment of abnormal insertions of levator and tensor muscles with re-establishment of muscle sling with adequate pushback of soft palate, which helps in proper speech.\nAdult cases are more problematic because of more bleeding."
        },
        {
            "id": 11,
            "question_type": "msq",
            "question": "11. Which of the following statements are true?",
            "options": [
                "A Restoration of normal anatomy does not encourage normal facial growth in cleft surgery.",
                "B Cleft lip repair is usually performed between 3 and 6 months of age.",
                "C Cleft palate repair is frequently performed between 19 and 24 months.",
                "D A two-stage repair of cleft palate means more tissue damage occurs.",
                "E The Delaire method of repair of a cleft lip is the only satisfactory method for cleft lip closure."
            ],
            "answer": [
                "B"
            ],
            "explanation": "It is important in cleft surgery to encourage normal facial growth by restoring normal anatomy. Cleft lip repair is done at the age of 3 to 6 months, while cleft palates are repaired at 6 months. When there are combined cleft lip and palates, usually there are two operations, the second being the repair of the hard palate with or without lip revision at 15–18 months. A two-stage repair of palatal clefts is sensible as well as being less destructive than a single-stage one. There are several techniques available for cleft repairs, and the Millard methods have become popular in recent years."
        },
        {
            "id": 12,
            "question_type": "msq",
            "question": "12. Which of the following statements are true?",
            "options": [
                "A Management of clefts requires a multidisciplinary team approach.",
                "B Long-term review is not required.",
                "C In cleft palate, Eustachian tube dysfunction is not the cause of otitis media.",
                "D Early (6 to 12 months) prophylactic myringotomy and grommet insertion temporarily eliminate middle ear effusion.",
                "E Regular audiology tests should always be done during childhood."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "A multidisciplinary team approach is essential in the management of clefts as is long-term review including audit of results. Otitis media is associated with cleft palate and Eustachian tube problems. Elective myringotomy and insertion of grommets at 6–12 months can eliminate middle-ear effusion. Audiology tests should always be done throughout childhood to check on potential hearing problems."
        },
        {
            "id": 13,
            "question_type": "msq",
            "question": "13. Which of the following statements regarding speech problems in cleft patients are true?",
            "options": [
                "A Speech problems are common in cleft palate patients.",
                "B Assessment should be performed at 18 months.",
                "C Speech problems are not associated with airflow.",
                "D Velopharyngeal incompetence is associated with hyponasal speech.",
                "E Speech problems are managed by speech and language therapy, surgery and speech training devices."
            ],
            "answer": [
                "A",
                "B",
                "E"
            ],
            "explanation": "Speech problems are commonly found in cleft patients and are associated with airflow problems. They are assessed at the age of 18 months. Velopharyngeal incompetence is associated with hypernasal speech. The management of speech problems involves surgery, therapists and speech training devices."
        },
        {
            "id": 14,
            "question_type": "msq",
            "question": "14. Which of the following statements regarding dental care in cleft patients are true?",
            "options": [
                "A Tooth management is not usually an issue in cleft cases.",
                "B Orthodontic care should only be done in cases where dentition is diseased or poorly maintained.",
                "C An abnormal number of eruption problems of teeth rarely occur in cleft patients.",
                "D Orthodontic treatment is commonly carried out at 8-10 years and 14–18 years.",
                "E Expansion of the maxillary arches is done at 14-18 years."
            ],
            "answer": [
                "D"
            ],
            "explanation": "Problems with teeth are common in cleft patients – orthodontic care is used to prevent disease and abnormal dentition, including eruption problems or abnormal numbers of teeth. It is done at 8-10 and 14-18 years of age. Expansion of the maxilla is done earlier than 14–18 years; this is when surgery to correct a malpositioned or retrusive maxilla by osteotomy is performed."
        },
        {
            "id": 15,
            "question_type": "msq",
            "question": "15. Which of the following statements are true?",
            "options": [
                "A Revisional lip surgery in previously repaired cleft lips should usually be delayed for 2 years unless the original muscle repair has been judged inadequate.",
                "B Nasal deformity confirms incomplete reconstruction of skin deformity.",
                "C The Cupid's bow is an important cosmetic area of the soft palate.",
                "D Alveolar bone grafts should be performed long before orthodontics are considered.",
                "E Alveolar bone grafts are useful in closing residual fistula of the anterior palate."
            ],
            "answer": [
                "A",
                "E"
            ],
            "explanation": "Any revision of previously repaired cleft lips is considered after 2 years. Nasal cleft deformities are the result of incomplete reconstruction of the nasolabial muscle ring. The Cupid’s bow is an important cosmetic feature of the upper-lip repair – and the normal lip. Alveolar bone grafts are done as a rule, though not always, after a period of orthodontics and can be useful in closing a fistula of the anterior palate."
        },
        {
            "id": 16,
            "question_type": "msq",
            "question": "16. Which of the following statements are true?",
            "options": [
                "A Alveolar bone grafts can receive an osseointegrated dental implant.",
                "B Alveolar bone grafts cannot be used with simultaneous secondary lip revision.",
                "C Alveolar bone grafts are obtained from the humerus and femur.",
                "D It is useful to ensure a tooth erupts into the alveolar bone graft.",
                "E Failure of D results in bone absorption in the long term."
            ],
            "answer": [
                "A",
                "D",
                "E"
            ],
            "explanation": "Alveolar bone graft can receive an osseointegrated dental implant and can be performed at the same time as secondary lip revision. Bone for grafting is obtained from the iliac crest or tibia. It is useful to get any teeth to erupt into the graft, and failure for this to happen will result in bone absorption in the long term."
        },
        {
            "id": 17,
            "question_type": "msq",
            "question": "17. Which of the following statements are true?",
            "options": [
                "A Orthognathic surgery is designed to correct poor mid-face growth.",
                "B Elective setback of the maxilla is the method of choice to correct the mid-face problem.",
                "C Mandibular advancement might also help.",
                "D Orthognathic surgery does not commence until the age of 6 years.",
                "E Major osteotomies are required in Apert's and Crouzon's syndromes, when a craniofacial team working in designated centres must be involved."
            ],
            "answer": [
                "A",
                "E"
            ],
            "explanation": "Orthognathic surgery is used to correct poor mid-face growth problems. The mandible is set back while the maxilla is set forward when mid-face retrusion exists. This type of surgery is not performed at the age of 5 years but is best done before the canine tooth erupts – between 8 and 11 years. Major osteotomies in Apert’s or Crouzon’s syndromes are operated on by specialised craniofacial surgeons in designated centres."
        },
        {
            "id": 18,
            "question_type": "msq",
            "question": "18. Which of the following statements are true?",
            "options": [
                "A Open rhinoplasty is not a procedure to be done after orthognathic surgery.",
                "B Open rhinoplasty is indicated when there is dislocation of cartilaginous septum into the cleft nostril.",
                "C Open rhinoplasty is also indicated when there is collapse of the lower lateral cartilage on the cleft side.",
                "D Tip projection of the nose cannot be improved by a postauricular onlay graft.",
                "E Meticulous recordkeeping, including speech recordings and audits, is essential in the overall care of cleft patients."
            ],
            "answer": [
                "C",
                "E"
            ],
            "explanation": "Open rhinoplasty is usually performed after orthognathic surgery has corrected facial structure and deformities. It is done when there is dislocation of the central septum into the non-cleft nostril, or there is collapse of the lower lateral cartilage on the cleft side. Tip projection is done by using cartilage onlay graft material, which can be obtained from the ear – by a postauricular or a preauricular approach. Meticulous recordkeeping and audit and analysis over many years are essential in the overall management of cleft patients."
        },
        {
            "id": 19,
            "question_type": "msq",
            "question": "19. Which of the following statements regarding tooth structure are true?",
            "options": [
                "A Partial anodontia is not found in cleft lip patients.",
                "B Removal of supernumerary teeth encourages eruption of secondary dentition.",
                "C Genetic disorders can cause changes in structure and attrition of teeth.",
                "D Measles does not cause defects in the structure of teeth.",
                "E Tetracycline can cause defects in the structure of teeth."
            ],
            "answer": [
                "B",
                "C",
                "E"
            ],
            "explanation": "Partial anodontia can be found in clefts, and removal of supernumerary teeth will encourage the eruption of secondary dentition. Genetic disorders can cause changes in the structure and attrition of teeth. Diseases, such as measles, and drugs, such as tetracycline, can also cause disorders of teeth."
        },
        {
            "id": 20,
            "question_type": "msq",
            "question": "20. Which of the following statements regarding tooth eruption are true?",
            "options": [
                "A Eruption of teeth might be impaired by a dentigerous cyst.",
                "B Eruption of teeth is not a problem in cleidocranial dysostosis.",
                "C Management of partial anodontia is not possible.",
                "D Management of unerupted teeth involves removal of any obstruction, including overcrowding caused by supernumerary teeth.",
                "E The most common site for supernumerary teeth is in the mandible."
            ],
            "answer": [
                "A",
                "D"
            ],
            "explanation": "Dentigerous cysts can cause non-eruption of teeth, and this is also a feature of cleidocranial dysostosis. The management of partial anodontia is possible and management of unerupted teeth by removal of any obstruction, including supernumerary teeth, is very helpful. The most common site of supernumerary teeth is in the maxilla and not the mandible."
        },
        {
            "id": 21,
            "question_type": "msq",
            "question": "21. Which of the following statements are true?",
            "options": [
                "A Dental occlusion problems can arise when there is disproportion in growth between the maxilla and mandible.",
                "B Class II occlusion deformity is associated with over development of the mandible.",
                "C Condylar hyperplasia is an idiopathic condition occurring between 35 and 45 years of age.",
                "D Condylar hyperplasia causes asymmetrical growth of the jaw in both the vertical and horizontal planes.",
                "E Facial disproportionate growth is not a feature of Treacher-Collins syndrome."
            ],
            "answer": [
                "A",
                "D"
            ],
            "explanation": "Dental occlusion disparity causes growth problems for the mandible and maxilla. In class II dental occlusion, the mandibular teeth are placed posterior to the maxillary teeth. Condylar hyperplasia occurs in the 15–30 year age group and causes abnormal growth of the jaw in vertical and horizontal planes. Treacher–Collins syndrome is associated with facial growth disparity."
        },
        {
            "id": 22,
            "question_type": "msq",
            "question": "22. Which of the following statements are true?",
            "options": [
                "A A bone scan is a useful investigation in condylar hyperplasia.",
                "B Orthognathic surgery is the term given to surgical correction of deformities of the jaw.",
                "C A combination between orthodontic and maxillofacial surgeons is important in orthognathic surgery.",
                "D Treatment planning usually begins with orthodontic treatment at the age of 17-18 years.",
                "E Cephalometric studies are of little value in the above planning."
            ],
            "answer": [
                "A",
                "B",
                "C"
            ],
            "explanation": "A bone scan is a useful method of examination in cases of condylar hyperplasia. The correction of jaw deformities is orthognatics surgery, and the combination of orthodontics and maxillofacial surgery is important in orthognathic surgery. Orthodontic care should be done earlier than the age of 17–18 years of age. Cephalometric investigations are helpful and important in abnormalities of facial growth."
        },
        {
            "id": 23,
            "question_type": "msq",
            "question": "23. Complications of cleft repair\nAn 11-year-old boy came for follow-up following a cleft lip and palate repair with regurgitation of food material per nose and speech problem. Which of the following could be the probable causes?",
            "options": [
                "A Palatal fistula",
                "B Inadequate veloplasty",
                "C Residual alveolar cleft",
                "D Infection",
                "E Intrinsic muscle abnormality",
                "F Dehiscence",
                "G Bleeding",
                "Η Nasal cartilage abnormality",
                "I Inadequate speech therapy",
                "J Hypertrophic scarring",
                "K Airway obstruction"
            ],
            "answer": [
                "A",
                "B",
                "C",
                "I"
            ],
            "explanation": "Complications of cleft lip and palate repair can be immediate, early and late. Immediate complications are usually bleeding (usually treated with ice-cold fluids and pressure, but may need re-exploration) and nasal obstruction, especially in bilateral lip and nose repair.\nEarly complication can be bleeding, respiratory difficulty, infection, wound dehiscence and loss of prolabial flap in case of bilateral cleft.\nPalatal fistula usually occurs at the junction of hard and soft palates in wide defect or at the junction of primary and secondary palate in pushback techniques.\nLip repair\nHypertrophic scarring, lip contraction and notching.\nEarly complication of cleft lip repair\nD, E, G, K\nCleft lip repair can be complicated by bleeding, infection, or wound dehiscence, which is more common in bilateral cleft lip repair than unilateral cases. However, the most serious complication of bilateral repair is airway obstruction. Infection is essentially a stitch abscess. Ischemic loss of premaxilla is an uncommon complication."
        },
        {
            "id": 24,
            "question_type": "msq",
            "question": "1. Anatomy of cleft lip. Match the listed options with the characteristics that follow:\n1 Unilateral complete cleft lip\n2 In complete cleft lip\n3 Bilateral cleft lip",
            "options": [
                "A Vertical height discrepancy",
                "B Failure of fusion of medial and lateral nasal process",
                "C Intrinsic maxillary bone growth retardation",
                "D Abnormal muscle insertion also influences the cleft",
                "E Horizontal width discrepancy",
                "F Protruded premaxilla",
                "G Columellar shortening",
                "H Prolabium is devoid of any muscle",
                "I Deformed nasal cartilage",
                "J Cleft of alveolus",
                "K Thinning of nasolabial and orbicularis oris muscles"
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D",
                "G",
                "I",
                "J",
                "K"
            ],
            "explanation": "Normal upper lip is characterized by a Cupid's bow, two philtral ridges, a well-defined white roll (junction between skin and lip mucosa), red line (junction between wet and dry vermilion), nasal columella in the mid-line with symmetrical ala on both sides. Unilateral cleft lip deformity is due to failure of fusion of medial and lateral nasal process, with disruption and abnormal insertion of nasolabial and orbicularis oris on one side. Clefting usually occurs along the phitral ridges. This results in an asymmetrical deformity in form of loss of Cupid's bow, lip vertical height shortening on cleft side, columellar shortening and deformities of external nasal cartilages and nasal septum and premaxilla (see Figures 45.5 through 45.7).\nIn case of incomplete cleft lip, there is a rim of tissue with varying amounts of muscle, on the nasal sill. Bony and muscle anatomical abnormality associated with incomplete cleft lip is similar to a complete cleft but of a lesser degree (see Figures 45.1, 45.2, 45.7 and 45.8).\nBilateral cleft lip is symmetrical clefting along the philtral ridges on both sides extending to the alveolus, resulting in a protruded premaxilla and prolabium, which is devoid of any muscle. In bilateral cleft the deformity is more severe, and the bony, cartilaginous and muscular abnormalities are more profound, which is to be kept in mind during surgical planning."
        },
        {
            "id": 25,
            "question_type": "msq",
            "question": "2. Principles of repair of cleft lip. Match the listed options with the facts that follow:\n1 Unilateral cleft lip repair does not include\n2 Bilateral cleft lip repair includes",
            "options": [
                "A Vertical height discrepancy correction by rotational flap advancement",
                "B Lip adhesion",
                "C Naso alveolar moulding",
                "D Alveolar bone grafting",
                "E Open rhinoplasty",
                "F Columellar lengthening",
                "G Anterior palate repair",
                "H Labial muscle repair",
                "I Incomplete cleft lip repair does not require extensive labial muscle exposure"
            ],
            "answer": [
                "A",
                "B",
                "C",
                "D",
                "E",
                "F",
                "G",
                "H"
            ],
            "explanation": "In bilateral cleft repair, the severity of deformity must be considered prior to surgical planning. Often lip adhesion and nasoalveolar molding are required to align the severely protruded premaxilla along the lateral alveolar arches, which facilitates the muscular sling reconstruction on later stage. Lip adhesion is done without violating the important anatomical landmarks and might be useful in final definitive repair.\nIn normal palate muscles are oriented transversely and meet in midline, while in cleft palate the muscle fibers are oriented in the anteroposterior direction inserting into the posterior edge of hard palate and cleft mucosa.\nBifid uvula and notched posterior hard palate are indications of submucous cleft palate, though bifid uvula may be present in 2% of normal population. The levator palatini muscles of both sides form a sling and are mostly responsible for pushing the soft palate backward for velopharyngeal closure during speech.\n1. Incomplete cleft lip repair does not require extensive labial muscle exposure\nIn cleft lip repair, the ideal goal is to correct the vertical height discrepancy between the cleft and non-cleft side, approximate cleft edges with recreation of Cupid's bow in balanced position, removal of abnormal muscle and insertion and alignment resulting in pouting of lip, and matching of red line and white line. This is usually achieved by one of the modifications of the rotation advancement technique of Millard, or by one of the variants of the triangular wedge technique.\nIdeally nasal correction should be done along with the primary lip repair achieving a matched alar base and alar flare, equal columella and tip height on both sides. Lip adhesion and naso alveolar molding are more commonly indicated in bilateral cleft lip cases but can be very rarely used for wide unilateral cleft lip defect with significant alveolar arch collapse.\nEven in incomplete cases, full muscular exposure and restoration is required. Anterior palate should be repaired along with lip repair in case of complete clefts. Alveolar bone grafting may be required in later stages."
        },
        {
            "id": 26,
            "question_type": "msq",
            "question": "Cleft lip revision would be of benefit in which of the above conditions?",
            "options": [
                "A Malaligned vermillion",
                "B Poor nasal tip projection",
                "C Asymmetrical cupids bow",
                "D Maxillary retrusion",
                "E To promote eruption of canine tooth",
                "F Oronasal fistula",
                "G Poor speech",
                "H Collapse of lower lateral cartilage",
                "I Deviated nasal septum"
            ],
            "answer": [
                "A",
                "C"
            ],
            "explanation": "Malaligned vermillion occurs due to poor alignment during initial lip repair. Asymmetrical Cupid's bow occurs due to poor alignment, notching due to poor muscle repair and repeated scar revision can produce a short lip. Hypertrophic scars can occur in lip. Lip revision in the form of 'z' plasty and 'w' plasty can be used in minor discrepancies. In major discrepancies, a formal repair is recommended."
        },
        {
            "id": 27,
            "question_type": "msq",
            "question": "Rhinoplasty would be of benefit in which of the above conditions?",
            "options": [
                "A Malaligned vermillion",
                "B Poor nasal tip projection",
                "C Asymmetrical cupids bow",
                "D Maxillary retrusion",
                "E To promote eruption of canine tooth",
                "F Oronasal fistula",
                "G Poor speech",
                "H Collapse of lower lateral cartilage",
                "I Deviated nasal septum"
            ],
            "answer": [
                "B",
                "H",
                "I"
            ],
            "explanation": "Following revisional cleft lip and palate surgery, orthognathic surgery and alveolar bone grafting, many patients still require definitive nasal correction. The principal deformity is collapse of the lower lateral cartilages on the cleft side, together with a dislocation of the cartilaginous septum with the non-cleft nostril. Rhinoplasty is done to relocate alar cartilages, correct septal deformity and improve nasal tip projection."
        }
    ]
}
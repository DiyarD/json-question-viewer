{
  "chapter_name": "Alimentary Tract—Stomach",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Three years after a laparoscopic Roux-en-Y gastric bypass (LRYGB), a 45-year-old male presents with symptoms and signs of a small bowel obstruction (SBO). He reports a 150-lb weight loss. Which of the following is the most likely etiology?",
      "options": [
        "A. An internal hernia",
        "B. Adhesions",
        "C. Roux compression due to mesocolon scarring",
        "D. Kinking of the jejunojejunostomy",
        "E. Incarcerated abdominal wall hernia"
      ],
      "answer": "A",
      "explanation": "*   The most common etiology of small bowel obstruction in the United States is adhesions from previous abdominal surgery; however, this does not hold true for patients who have previously had a LRYGB.\n*   In LRYGB, a potential hernia site (Petersen's space hernia) is created, increasing the risk for the development of an internal hernia, which is the most common cause of SBO in this patient population with an incidence of 1% to 5%.\n*   This potential space results from herniation of intestinal loops through a defect in the mesentery and between small bowel limbs, transverse mesocolon, and the retroperitoneum.\n*   Additionally, when compared to its open counterpart, the laparoscopic approach further facilitates a Petersen's hernia because of the decreased frequency of postoperative adhesions, which seemingly have a physiologic role of preventing bowel mobility and thus, internal herniation.\n*   Risk of SBO is significantly higher with a retrocolic versus antecolic approach.\n*   Roux compression due to mesocolon scarring is the second most common etiology for SBO in patients with LRYGB, followed by adhesions.\n*   Kinking of the jejunojejunostomy and incarcerated abdominal wall hernia occur less frequently."
    },
    {
      "id": 2,
      "question_type": "clinical_scenario",
      "question": "A 79-year-old male with chronic back pain and chronic obstructive pulmonary disease (COPD) requiring supplemental oxygen presents to the emergency department (ED) with epigastric abdominal pain that started suddenly 2 days ago. His abdominal examination is significant for epigastric tenderness but is otherwise unremarkable. A computed tomography (CT) scan demonstrates a small amount of free air under the right hemidiaphragm but no contrast extravasation. An upper gastrointestinal (GI) water-soluble contrast study demonstrates a duodenal ulcer but no extravasation. Which of the following is the best management?",
      "options": [
        "A. Nasogastric tube decompression, intravenous (IV) antibiotics, and proton pump inhibitor (PPI)",
        "B. Exploratory laparotomy",
        "C. Diagnostic laparoscopy",
        "D. Oral antibiotics, clear liquid diet for 2 weeks, and follow-up in clinic",
        "E. Serial abdominal exam in the ED for 6 to 8 hours and if improving, he may be discharged with oral antibiotics"
      ],
      "answer": "A",
      "explanation": "*   Nonoperative management for perforated peptic ulcer disease is gaining popularity and is now accepted as an appropriate first-line management for poor surgical candidates (e.g., COPD using home oxygen) who are stable, have no evidence of peritonitis, and have no contrast extravasation.\n*   Conservative management is also more favorable if the duration of symptoms has been present for more than 24 hours, as the perforation has typically been sealed.\n*   Self-sealing of the perforation is achieved by either adhesion formation to the caudate lobe, the greater omentum, the gallbladder, or the falciform ligament.\n*   In one study, only 3 out of 109 patients managed nonoperatively developed an intra-abdominal abscess.\n*   Eighty percent of nonoperative cases respond favorably, and morbidity is not significantly increased.\n*   Patients deemed appropriate candidates for nonoperative management should be admitted, placed NPO (nothing by mouth), and given IV fluid resuscitation, IV antibiotics covering gram-negative and anaerobic organisms, and PPIs.\n*   Nasogastric tube insertion is critical to help decompress the stomach and allow the perforation to heal.\n*   CT scan may be considered for patients who fail to improve or those who deteriorate clinically.\n*   Surgery is the next step for patients who fail conservative management.\n*   Outpatient follow-up is not appropriate because nonoperative management should be performed in a monitored setting with frequent abdominal exams and follow-up esophagogastroduodenoscopy (EGD) to ensure that the perforation has sealed."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the management of obesity?",
      "options": [
        "A. Indications for bariatric surgery include a body mass index (BMI) greater than 30 with weight-related comorbidities or BMI greater than 35.",
        "B. Sibutramine inhibits pancreatic lipase, reduces absorption of dietary fat, and leads to weight loss.",
        "C. Roux-en-y gastric bypass (RYGB) does not have a restrictive component.",
        "D. RYGB has a lower 30-day mortality compared with biliopancreatic diversion (BPD).",
        "E. Patients with obesity-related comorbidities do not need to attempt nonoperative management before obesity surgery."
      ],
      "answer": "D",
      "explanation": "*   Obesity has been linked to multiple comorbidities including hypertension and diabetes and is on the rise.\n*   Two FDA-approved medications to help treat obesity include sibutramine and orlistat. Sibutramine blocks the presynaptic uptake of serotonin thereby potentiating its anorexic effects in the CNS. Orlistat inhibits pancreatic lipase, which decreases dietary fat absorption.\n*   Indications for weight loss surgery include BMI > 35 with associated obesity-related comorbidities (e.g., hypertension, diabetes) or BMI > 40.\n*   Additionally, all patients will need to demonstrate that they have successfully attempted and failed nonoperative weight loss management such as diet and exercise programs.\n*   The four standard approaches in the United States include laparoscopic gastric banding, sleeve gastrectomy, BPD, and RYGB.\n*   Laparoscopic gastric banding and sleeve gastrectomy are considered restrictive procedures.\n*   BPD is considered a malabsorptive procedure.\n*   RYGB is considered a combined approach and involves creating a small restricted gastric remnant (restrictive component) and a roux-limb from the stomach to the distal jejunum (malabsorptive component).\n*   RYGB has a lower 30-day mortality compared to BPD and is slightly favored by surgeons as it is technically easier to perform.\n*   RYGB has a slightly higher mean excess weight loss at 2 years compared to sleeve gastrectomy, but sleeve gastrectomy has a higher perioperative leak rate.\n*   Both procedures are equally effective in eliminating type 2 diabetes mellitus."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is the best management for primary gastric (non-MALT [mucosa-associated lymphoid tissue]) lymphoma?",
      "options": [
        "A. Surgical resection",
        "B. Chemotherapy followed by surgical resection",
        "C. Radiation therapy",
        "D. Chemotherapy",
        "E. Surgical resection followed by radiation therapy"
      ],
      "answer": "D",
      "explanation": "*   Gastric lymphoma is a subtype of non-Hodgkin lymphoma (NHL) and considered the most common form of extranodal NHL.\n*   The vast majority are either MALT gastric lymphoma or diffuse large B-cell lymphoma (DLBCL).\n*   The current foundation for the treatment of gastric DLBCL is chemotherapy.\n*   Depending on the response, and initial tumor size, locoregional radiation therapy may be added."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is the gold standard for the diagnosis of gastroparesis?",
      "options": [
        "A. Upper endoscopy",
        "B. Plain abdominal x-rays",
        "C. Nuclear medicine scan",
        "D. CT",
        "E. It is considered a clinical diagnosis."
      ],
      "answer": "C",
      "explanation": "*   Gastroparesis is defined as delayed gastric emptying without a mechanical cause for obstruction.\n*   Although diabetes is the most common known cause of gastroparesis (29%), idiopathic gastroparesis occurs more frequently (36%).\n*   The most common symptoms are nausea, early satiety, and abdominal bloating. Most patients do not have abdominal pain.\n*   Although symptoms alone can be suggestive of this condition, it needs to be confirmed with imaging.\n*   Gastric emptying scintigraphy (delayed gastric emptying study) is the gold standard in diagnosing gastroparesis.\n*   This involves asking the patient to eat a small meal along with a radioactive tracer. The rate of emptying is measured 1, 2, 3, and 4 hours after the meal is ingested, and if more than 10% of the meal remains in the stomach after 4 hours, the study is considered consistent with gastroparesis."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is true regarding gallstone disease after weight loss surgery?",
      "options": [
        "A. The rate of postoperative cholecystectomy is the same regardless of the type of weight loss surgery.",
        "B. Prophylactic cholecystectomy should be performed at the time of surgery in most patients.",
        "C. Ursodiol is recommended for 6 months after gastric bypass surgery.",
        "D. Decreased secretion of calcium and mucin contributes to gallstone formation after weight loss surgery.",
        "E. Acute cholecystitis after weight loss surgery is uncommon."
      ],
      "answer": "E",
      "explanation": "*   Gallstone formation occurs in 30% to 52% of patients undergoing weight loss surgery, but only 7% to 15% are symptomatic.\n*   Among those 7% to 15% who do become symptomatic, acute cholecystitis is uncommon.\n*   Rapid weight loss is a known risk factor for cholelithiasis; excess weight loss greater than 25% is considered the strongest predictor of postoperative cholecystectomy and occurs more commonly in patients who have had a gastric bypass versus laparoscopic banding or sleeve gastrectomy.\n*   Several mechanisms have been shown to contribute to gallstone formation during weight loss including increased secretion of calcium and mucin into bile, increased concentrations of arachidonic acid derivatives, and bile stasis secondary to stringent dietary restrictions postoperatively.\n*   Prophylactic cholecystectomy at the time of weight loss surgery has been a point of debate in the surgical community.\n*   It has been shown in several large studies that the rate of postoperative cholecystectomy remains under 15%, and so the routine removal of the gallbladder during weight loss surgery is not currently supported by the American Society of Metabolic and Bariatric Surgery.\n*   In contrast, symptomatic patients may undergo concomitant cholecystectomy safely.\n*   Ursodiol after gastric bypass can significantly decrease the rate of gallstone formation, but because it has not been shown to be cost effective and lead to improved outcomes, it is not routinely recommended."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "The most significant etiologic factor in peptic ulcer disease is:",
      "options": [
        "A. Duodenogastric reflux",
        "B. Acid hypersecretion",
        "C. Nonsteroidal antiinflammatory drug (NSAID) ingestion",
        "D. Bacterial colonization",
        "E. Smoking"
      ],
      "answer": "D",
      "explanation": "*   *Helicobacter pylori* is considered the most significant etiologic factor in peptic ulcer disease.\n*   It is reportedly found in 80% to 90% of duodenal ulcers and more than 70% of gastric ulcers.\n*   *H. pylori* is a helix-shaped, microaerophilic gram-negative rod and is more prevalent in low and middle income countries.\n*   *H. pylori* also causes acute gastritis.\n*   The exact mechanism by which it causes ulceration is unclear, but it may be by the production of local toxic products, induction of a local immune response, or an increase in gastrin levels leading to an increase in acid.\n*   The organism seems to be the cause of hypergastrinemia in duodenal ulcers because the infection reduces the number of antral D cells, thus reducing somatostatin levels, which then disinhibits G (gastrin) cells.\n*   *H. pylori* is a potent producer of urease, which splits urea into ammonia and bicarbonate; this allows the bacteria to survive in a microenvironment of relative alkalinity within the stomach.\n*   It only lives in gastric epithelium (including heterotopic gastric mucosa) because it expresses specific adherence receptors recognized by the bacteria.\n*   After *H. pylori*, ingestion of NSAIDs and smoking are the next most important risk factors.\n*   Smoking increases gastric acid secretion and duodenogastric reflux and decreases pancreaticoduodenal bicarbonate production."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is the first manifestation of gastric leak following Roux-en-Y gastric bypass?",
      "options": [
        "A. Abdominal pain",
        "B. Tachycardia",
        "C. Nausea",
        "D. Increased serum glucose",
        "E. Tachypnea"
      ],
      "answer": "B",
      "explanation": "*   The rate of obesity is rising in the United States, and an increasing number of patients are undergoing weight loss surgery.\n*   Gastric leak in the early postoperative period may be an indication to go back to the operating room, so early recognition of this complication is important.\n*   The first manifestations of a gastric leak are tachycardia and fever.\n*   This may also be accompanied by tachypnea, abdominal pain, chest pain, oliguria, and/or hypotension."
    },
    {
      "id": 9,
      "question_type": "clinical_scenario",
      "question": "A 45-year-old male with a history of laparoscopic gastric banding 5 years ago presents to the ED with complaints of pain at his port site. He first noticed it several days ago after he got his gastric band adjusted in clinic. On exam, the port site appears erythematous, warm, and is tender to palpation. He is afebrile and normotensive. Which of the following is the best next step?",
      "options": [
        "A. CT of the abdomen",
        "B. Admit to the hospital, start IV antibiotics and fluid resuscitation",
        "C. EGD",
        "D. Incision and drainage",
        "E. Discharge with oral antibiotics"
      ],
      "answer": "A",
      "explanation": "*   Laparoscopic gastric banding involves placing an inflatable balloon around the proximal stomach at the angle of His.\n*   It lost traction after subsequent studies demonstrated that it was far inferior to gastric bypass.\n*   Additionally, patients with laparoscopic bands were more likely to require revisions for complications associated with the gastric band.\n*   One such complication is band erosion (BE) into the stomach and/or adjacent organs.\n*   This may present as port site erythema, fooling the clinician into thinking the patient may only have an overlying skin infection.\n*   Most patients with BE presenting with port site erythema do not have a subfascial port infection.\n*   BE can occur many years after surgery, and one proposed mechanism involves overtightening of the band.\n*   With the conversion of the perigastric technique to the pars flaccid approach, the incidence of this complication has decreased from 8% to less than 1%.\n*   CT of the abdomen should be performed in patients suspected of having BE, and if found, the port site should be completely deflated and the patient should be scheduled for laparoscopic removal of the band.\n*   EGD may demonstrate BE if it has completely eroded into the gastric lumen but may miss partial BE.\n*   Incision and drainage are not indicated because there is no abscess.\n*   The patient should be monitored for the development of a subsequent port site infection, but the first step is to get a CT scan."
    },
    {
      "id": 10,
      "question_type": "clinical_scenario",
      "question": "A 60-year-old man presents with a 12-hour history of worsening epigastric pain. He has a history of duodenal ulcer, and the results of a recent biopsy 2 weeks earlier were negative for H. pylori. Upright chest radiograph demonstrates free air under the diaphragm. The patient is hemodynamically stable. At surgery, a perforated duodenal ulcer is found with mild peritoneal contamination. Which of the following is the best management option?",
      "options": [
        "A. Graham patch of duodenal ulcer",
        "B. Graham patch of duodenal ulcer with truncal vagotomy and pyloroplasty",
        "C. Truncal vagotomy and antrectomy with Billroth I reconstruction",
        "D. Truncal vagotomy and antrectomy with Billroth II reconstruction",
        "E. Graham patch of duodenal ulcer with a highly selective vagotomy"
      ],
      "answer": "E",
      "explanation": "*   In the majority of patients with a perforated duodenal ulcer, simple closure of the ulcer with an omental (Graham) patch is all that is necessary, followed by treatment for *H. pylori*.\n*   In addition, a Graham patch alone should be used if the patient is unstable, if there is extensive exudative peritonitis, or if the perforation is long standing (>24 hours).\n*   However, in the setting of a patient with a known ulcer diathesis who has either already been treated for *H. pylori* or is *H. pylori* negative, an ulcer surgery should be added to the operation, provided the patient is a good operative risk, is hemodynamically stable, and does not have extensive peritonitis.\n*   The options are either to perform a highly selective vagotomy (HSV) or a vagotomy and pyloroplasty.\n*   An HSV is the preferred approach in the good-risk patient who is stable, provided the surgeon is comfortable with the procedure.\n*   Pyloroplasty is typically performed along with a vagotomy because the widened outlet from the stomach to the duodenum helps circumvent any unwanted effects of the decreased gastric peristalsis and overall change in gastric emptying patterns that occur following vagotomy.\n*   The entire procedure can be performed laparoscopically in select patients.\n*   Truncal vagotomy and antrectomy is generally not recommended in the setting of perforation because of the high associated morbidity and mortality rates."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which of the following is the most effective treatment for intractable dumping syndrome?",
      "options": [
        "A. Low-fat, lactose-free diet",
        "B. Serotonin antagonists",
        "C. Low-carbohydrate, high-fat diet",
        "D. Octreotide",
        "E. Creation of a reversed jejunal segment"
      ],
      "answer": "D",
      "explanation": "*   Dumping syndrome can occur after any type of gastric surgery and is divided into early and late forms.\n*   Early dumping (20-30 minutes after eating) is more common and has both GI (nausea, vomiting, crampy abdominal pain, and explosive diarrhea) and cardiovascular (diaphoresis, dizziness, flushing) symptoms.\n*   The symptoms are related to the release of various substances including serotonin, neurotensin, bradykinins, and enteroglucagon.\n*   Late dumping (2-3 hours after eating) is the result of a reaction to a large amount of carbohydrates suddenly reaching the small intestine; this leads to a sudden release of large amounts of insulin with subsequent hypoglycemia with resultant diaphoresis, confusion, and tachycardia.\n*   The initial therapy for dumping syndrome is quite effective and consists of dietary modification.\n*   This includes eating frequent small meals, avoiding large amounts of carbohydrates and instead eating food high in protein and fat, and avoiding large amounts of fluids with meals.\n*   Octreotide, a long-acting somatostatin analogue, is the most effective treatment.\n*   It is effective against both the GI and cardiovascular symptoms.\n*   Long-term use of octreotide is associated with steatorrhea and cholelithiasis.\n*   Serotonin antagonists have been used for dumping syndrome but have not been routinely effective.\n*   Creation of a reversed jejunal segment can be considered in the management of postvagotomy diarrhea."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is true regarding postvagotomy diarrhea?",
      "options": [
        "A. It is effectively treated with octreotide.",
        "B. It does not improve with oral cholestyramine.",
        "C. Cardiovascular manifestations are common.",
        "D. Most patients require the creation of a reversed jejunal segment.",
        "E. Diarrhea may improve with the administration of codeine."
      ],
      "answer": "E",
      "explanation": "*   Postvagotomy syndromes include diarrhea, gastric atony, and incomplete vagotomy (leading to recurrent ulceration).\n*   Diarrhea follows truncal vagotomy and may be confused with dumping syndrome.\n*   The diarrhea associated with vagotomy occurs more frequently and is not associated with the other cardiovascular manifestations seen with dumping syndrome.\n*   The initial treatment is similar to that for dumping syndrome, with dietary modifications such as frequent small meals with decreased fluid intake and an increase in fiber.\n*   A proposed mechanism of the diarrhea is an increase in stool bile salts.\n*   Oral cholestyramine is often helpful because it binds bile salts.\n*   Loperamide and codeine have also been shown to delay intestinal transit time and improve symptoms.\n*   In the very rare patient who does not respond to medical management, reversal of a segment of jejunum is effective in slowing transit time and improving diarrhea.\n*   Octreotide is not effective for postvagotomy diarrhea and may make the situation worse by decreasing pancreatic secretions and thus increasing steatorrhea."
    },
    {
      "id": 13,
      "question_type": "clinical_scenario",
      "question": "A 45-year-old woman is undergoing an exploratory laparotomy for Zollinger-Ellison syndrome (ZES). Preoperative localization studies failed to demonstrate the location of the tumor. At surgery, no obvious tumor is seen despite an extensive Kocher maneuver and careful inspection. An intraoperative ultrasound scan is negative. The next step in the management would be:",
      "options": [
        "A. Closing the abdomen",
        "B. Distal pancreatectomy and splenectomy",
        "C. Proximal pancreaticoduodenectomy",
        "D. Blind proximal duodenotomy",
        "E. Blind distal duodenotomy"
      ],
      "answer": "D",
      "explanation": "*   More than 80% of gastrinomas are localized preoperatively.\n*   For those that cannot be localized, surgical exploration is still indicated because excision of the primary tumor leads to a decreased rate of liver metastasis.\n*   When exploring, it is important to be aware that 80% of gastrinomas are found within the gastrinoma (Passaro) triangle, an area defined by the junction of the cystic duct and common bile duct, the second and third portions of the duodenum, and the neck and body of the pancreas.\n*   As many as 60% of gastrinomas are within the wall of the duodenum, primarily in the first and second portions and can be very small.\n*   Thus, the next maneuver would be to perform a blind proximal duodenotomy to manually palpate the duodenal wall for tumors.\n*   Closing the abdomen would be inappropriate.\n*   Blind distal pancreatectomy and splenectomy (these share blood supply) or distal duodenotomy would have very low yields.\n*   A pancreaticoduodenectomy (Whipple procedure) would not be indicated in this setting; it is potentially indicated for multiple duodenal or proximal pancreatic head tumors that could not be enucleated."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Which of the following is true regarding TNM (tumor, nodes, and metastases) staging for gastric adenocarcinoma?",
      "options": [
        "A. Triple-phase helical computed tomography scan is the most accurate means of determining T and N staging.",
        "B. The accuracy of endoscopic ultrasound (EUS) is higher for N stage than T stage.",
        "C. N staging is based on the number of positive nodes and not the anatomic distribution.",
        "D. Magnetic resonance imaging (MRI) with gadolinium should be routinely performed.",
        "E. T3 invades the subserosa."
      ],
      "answer": "C",
      "explanation": "*   Staging of gastric cancer involves depth of invasion (T1 invades lamina propria; T2, muscularis propria or subserosa; T3, serosa; T4, adjacent structures), nodes, and distant metastasis.\n*   EUS is the best modality for assessing tumor depth of invasion and nodal status.\n*   It is approximately 80% accurate in determining whether the tumor is transmural (invading serosa, T3) but only 50% accurate in assessing whether pathologically enlarged lymph nodes are present.\n*   EUS seems to be more accurate with advanced disease than early disease.\n*   CT scanning is the preferred method for determining distant metastases, but it is not as useful for T and N staging.\n*   The routine use of MRI and positron emission tomography scanning for staging of gastric cancer has not as yet been established.\n*   N1 disease includes 1 to 6 regional nodes; N2, 7 to 15 regional nodes; and N3, more than 15 regional nodes."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is associated with hypergastrinemia?",
      "options": [
        "A. Diabetes",
        "B. Hypothyroidism",
        "C. Hyperparathyroidism",
        "D. Chronic gastritis",
        "E. D-cell hyperplasia"
      ],
      "answer": "D",
      "explanation": "*   When considering gastrinoma, it is important to be aware of the differential diagnosis of an elevated gastrin level.\n*   Causes of hypergastrinemia with increased acid production include gastrinoma, G-cell hyperplasia (not D-cell), retained antrum after distal gastrectomy, renal failure, and gastric outlet obstruction.\n*   Hypergastrinemia with normal or low acid production includes pernicious anemia, postvagotomy states, use of acid-suppressive medication, and chronic gastritis.\n*   Hypothyroidism is associated with a low gastrin level, whereas hyperthyroidism increases gastrin levels.\n*   Diabetes and hyperparathyroidism do not affect gastrin levels."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "A 46-year-old male undergoes a distal gastrectomy for a small tumor in the gastric antrum that is biopsy proven to be adenocarcinoma. The specimen is sent for pathology. Pathology reveals microscopic evidence of tumor at the margins. Which of the following most accurately describes this resection?",
      "options": [
        "A. D1 resection",
        "B. D2 resection",
        "C. R0 resection",
        "D. R1 resection",
        "E. R2 resection"
      ],
      "answer": "D",
      "explanation": "*   R0 resection is resection of all gross and microscopic tumors.\n*   R1 indicates removal of all macroscopic disease but microscopic margins are positive for disease.\n*   An R2 resection indicates that gross residual disease is left behind.\n*   A D1 resection refers to removal of group 1 lymph nodes.\n*   D2 refers to resection of lymph nodes in groups 1 and 2.\n*   A D3 resection is a D2 resection plus removal of para-aortic lymph nodes."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Which of the following is considered to be a risk factor for gastric cancer?",
      "options": [
        "A. Pernicious anemia",
        "B. Blood group O",
        "C. Carbonated acidic soda",
        "D. Female gender",
        "E. Diabetes"
      ],
      "answer": "A",
      "explanation": "*   Risk factors for gastric cancer include dietary factors such as a large consumption of smoked meats, pickled foods, high nitrates, and high salt, whereas a diet high in fruits and vegetables may be protective.\n*   Other risk factors include smoking, low socioeconomic status, black race, *H. pylori* infection, chronic atrophic gastritis, blood type A, previous partial gastrectomy, achlorhydria, pernicious anemia, polyps (adenomatous and hyperplastic), male gender, and certain familial syndromes such as hereditary nonpolyposis colorectal cancer, Li-Fraumeni syndrome, familial adenomatous polyposis, and Peutz-Jeghers syndrome.\n*   Peutz-Jeghers syndrome is associated with a markedly increased risk of cancer in the esophagus, stomach, small bowel, colon, pancreas, breast, lung, uterus, and ovary, with a cumulative 93% risk of cancer.\n*   Carbonated acidic soda has not been shown to increase the risk for cancer.\n*   Gastric cancer has been categorized by Lauren into intestinal and diffuse types based on histology.\n*   The intestinal type is thought to be more related to environmental factors, is associated with chronic gastritis, and is well differentiated.\n*   The diffuse type is usually poorly differentiated and associated with signet rings and occurs in younger patients and in association with familial disorders and also with type A blood.\n*   The diffuse type has a worse prognosis."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Early gastric cancer is best defined as:",
      "options": [
        "A. Lymph node negative",
        "B. Limited to the mucosa",
        "C. Limited to the mucosa and submucosa with negative nodes",
        "D. Limited to the mucosa and submucosa regardless of nodes",
        "E. In the muscularis propria but not the serosa"
      ],
      "answer": "D",
      "explanation": "*   Early gastric cancers are defined as adenocarcinoma limited to the mucosa and submucosa of the stomach, regardless of lymph node status.\n*   In Japan, aggressive screening programs are used, resulting in as many as one-half of gastric cancers being detected early, whereas in the United States, less than one-fourth are considered early gastric cancer.\n*   In one large series of nearly 400 patients with early gastric cancer, 11.9% had positive lymph nodes.\n*   Risk factors for lymph node metastasis included large tumor size, lymphatic vessel involvement, and invasion of the submucosa.\n*   Lymph node status was the most important determinant of survival."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Which of the following is true regarding gastrointestinal stromal tumor (GIST)?",
      "options": [
        "A. They rarely present with GI bleeding.",
        "B. They arise from smooth muscle cells.",
        "C. Malignant potential is readily determined by histologic features.",
        "D. They can be managed by laparoscopic wedge resection.",
        "E. The extent of the tumor is best determined preoperatively by endoscopy."
      ],
      "answer": "D",
      "explanation": "*   GISTs were previously called leiomyomas or leiomyosarcomas because they were thought to arise from smooth muscle cells, but they in fact originate from mesenchymal components (from Cajal cells).\n*   They stain positive for CD117 (c-kit).\n*   They are most commonly found in the stomach and, although rare, it is the most common mesenchymal tumor of the intestinal tract.\n*   Because they are not epithelial tumors and grow in the wall of the stomach, they tend to be large at the time of presentation.\n*   They cause mucosal ulceration and frequently present with GI bleeding.\n*   Large tumors may also produce symptoms of weight loss, abdominal pain, and fullness and early satiety.\n*   An abdominal mass may be palpable.\n*   An endoscopic biopsy specimen may be negative in as many as one-half of cases due to sampling error because most of the tumor is submucosal.\n*   A CT scan provides a better assessment of the extent of the tumor.\n*   Determining whether a GIST is malignant is not straightforward because there are no discriminating cellular features.\n*   The malignant potential is determined by mitotic activity (> 5 mitoses/50 high power field) with 1 cm.\n*   Lymph node dissection is not necessary because tumors spread hematogenously and lymph node metastasis is extremely rare.\n*   Wedge resection with 1 cm margins is adequate treatment in most cases.\n*   This can be performed laparoscopically.\n*   However, microscopically positive margins have not been demonstrated to affect survival."
    },
    {
      "id": 20,
      "question_type": "clinical_scenario",
      "question": "A 56-year-old man presents with epigastric pain, diarrhea, and weight loss. Upper endoscopy reveals giant gastric folds in the proximal stomach. A biopsy specimen demonstrates diffuse foveolar hyperplasia with no evidence of malignancy. Twenty-four-hour gastric pH levels are consistent with achlorhydria. Which of the following is true regarding the most likely condition?",
      "options": [
        "A. There is no risk for the development of cancer.",
        "B. It is associated with cytomegalovirus in adults.",
        "C. Medical therapy is highly effective.",
        "D. It is an inherited condition.",
        "E. Treatment includes a high-protein diet."
      ],
      "answer": "E",
      "explanation": "*   The patient has Ménétrier disease, an acquired disease with no family predisposition.\n*   The etiology is unknown, but it is associated with an increase in transforming growth factor alpha.\n*   Giant rugal folds, particularly in the fundus and body, and a loss of parietal cells develop.\n*   Thus, patients have hypo- or achlorhydria.\n*   Patients lose a large amount of protein in the stomach due to the hypersecretion of mucus.\n*   This results in weight loss and peripheral edema.\n*   Giant rugal folds are also seen with ZES; however, the latter can be ruled out by the demonstration of achlorhydria.\n*   Mucosal biopsy shows diffuse hyperplasia of the surface mucus-secreting cells as well as loss of parietal cells.\n*   There seems to be an increased risk of gastric cancer, although it is not high.\n*   It is associated with cytomegalovirus infection in children and with *H. pylori* infection in adults.\n*   Most patients with Ménétrier disease are middle-aged men.\n*   Symptoms include epigastric pain, weight loss, diarrhea, and hypoproteinemia.\n*   Treatment includes a high-protein diet, anticholinergic agents, and *H. pylori* eradication if the patient tests positive.\n*   Medical treatment has not been particularly effective, although there are cases of spontaneous resolution.\n*   For patients who do not respond to medical therapy, gastric resection may be indicated, particularly for intractable severe hypoproteinemia or if dysplasia or malignancy develops.\n*   Recently, Erbitux (cetuximab), which blocks the action of transforming growth factor alpha, has been used as a potential new treatment."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "Which of the following is true regarding postgastrectomy bile reflux?",
      "options": [
        "A. Most patients with bile reflux into the stomach will develop symptoms.",
        "B. Symptoms usually correlate with the amount of bile entering the stomach.",
        "C. In symptomatic patients, medical management is generally effective.",
        "D. Creation of a Roux-en-Y gastrojejunostomy is an effective surgical option.",
        "E. It is more likely to occur after a Billroth I than a Billroth II reconstruction."
      ],
      "answer": "D",
      "explanation": "*   Bile reflux into the stomach can occur without previous surgery, but in most instances it follows ablation of the pylorus, such as after gastric resection or pyloroplasty.\n*   After such procedures, most patients will have bile in the stomach on endoscopic examination, along with some degree of gross or microscopic gastric inflammation.\n*   However, only a small fraction of patients will have a significant degree of symptoms such as nausea, epigastric pain, and bilious vomiting consistent with alkaline (bile) reflux gastritis.\n*   Symptoms often develop months or years after the index operation.\n*   The differential diagnosis includes afferent or efferent loop obstruction, gastric stasis, and small bowel obstruction.\n*   These other diagnoses can be ruled out using a combination of abdominal radiographs, upper endoscopy, and abdominal CT scan.\n*   A hepatoiminodiacetic acid (HIDA) scan is particularly helpful for demonstrating bile reflux.\n*   Bile reflux and gastritis are more likely to occur after Billroth II reconstruction than after Billroth I and least likely after vagotomy and pyloroplasty.\n*   Medical management of symptomatic patients is not particularly effective.\n*   The surgical procedure of choice is to convert the Billroth II into a Roux-en-Y gastrojejunostomy with a lengthened jejunal limb (at least 45 cm)."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "The best test for localization of a gastrinoma is:",
      "options": [
        "A. MRI",
        "B. CT",
        "C. Abdominal ultrasound",
        "D. Octreotide scan",
        "E. Selective angiography"
      ],
      "answer": "D",
      "explanation": "*   More than 90% of gastrinomas have receptors for somatostatin.\n*   Octreotide scanning (somatostatin receptor scintigraphy) has been shown to be the most sensitive test for localization of gastrinomas.\n*   However, successful localization depends on size and location.\n*   Somatostatin receptor scintigraphy is poor for very small (<1.1 cm) tumors and for small primary duodenal tumors.\n*   Duodenal gastrinomas are best localized by endoscopic ultrasonography.\n*   Abdominal ultrasound is not helpful.\n*   Failure to detect the tumor preoperatively should not preempt surgical exploration because an additional 33% will be found at surgery.\n*   CT and angiography may also be useful adjuncts in detecting gastrinoma.\n*   Aside from MRI's utility in detecting liver metastasis, it is not often employed in the workup for a presumed gastrinoma."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "The best test to confirm eradication of H. pylori after treatment is:",
      "options": [
        "A. H. pylori serology",
        "B. Urea breath test",
        "C. Histologic biopsy",
        "D. Rapid urease test",
        "E. Antral mucosal biopsy with culture"
      ],
      "answer": "B",
      "explanation": "*   A urea breath test is the best way to confirm eradication of *H. pylori*.\n*   The test relies on the fact that the bacteria hydrolyze urea.\n*   The patient is given radiolabeled urea to ingest orally. If *H. pylori* is present, the urea will be converted to ammonia and radiolabeled bicarbonate, which is then exhaled as carbon dioxide.\n*   The amount of exhaled carbon dioxide is quantified.\n*   Positive *H. pylori* serology provides evidence of current infection if the patient has never been treated for it but will remain positive even after successful treatment; thus, it is not useful in this setting.\n*   Antral mucosa biopsy with histologic examination for the organism is the gold standard test; it is useful in the initial evaluation of patients with upper GI symptoms because it permits evaluation of the stomach via endoscopy at the time of biopsy.\n*   However, given its invasive nature and increased cost, it is not routinely recommended to confirm eradication.\n*   Cultures of the gastric mucosa are not routinely available at every laboratory, and a repeat endoscopy is required.\n*   The rapid urease test, also known as the campylobacter-like organism (CLO) test, is ideally used if another endoscopy and biopsy are being performed.\n*   The study requires placing a sample of gastric mucosa in a urea solution and then using a pH indicator to demonstrate the production of ammonia."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "Which of the following is true regarding a highly selective vagotomy (HSV)?",
      "options": [
        "A. The anterior and posterior vagal trunks are divided.",
        "B. The nerve of Grassi is spared.",
        "C. The anterior Latarjet nerve is divided.",
        "D. The crow's feet to the antrum are spared.",
        "E. The celiac branch is divided."
      ],
      "answer": "D",
      "explanation": "*   HSV is also known as a parietal cell vagotomy or proximal gastric vagotomy.\n*   The goal of the operation is to divide the vagal nerves of the proximal two-thirds of the stomach where the parietal cells are located and preserve the distal third to maintain antral function and thus not require a drainage procedure (such as a pyloroplasty).\n*   This results in fewer complications than the classic truncal vagotomy.\n*   The operation spares the main anterior and posterior vagal trunks but divides the branches of the anterior and posterior Latarjet nerves that directly innervate the proximal stomach.\n*   The distal 7 cm (approximately) of nerves, known as the crow's feet, are spared.\n*   Likewise, the celiac and hepatic branches are spared.\n*   Proximally, it is important to divide the nerve of Grassi, which is a branch off the posterior trunk of the vagus; it is often referred to as the criminal nerve of Grassi because failure to divide this branch leads to a higher ulcer recurrence rate.\n*   With the recognition of *H. pylori* as the main etiology of peptic ulcer, the role of surgery has greatly diminished.\n*   HSV is still indicated in certain rare situations, such as patients who do not respond to medical management, patients who are bleeding who do not respond to endoscopic management, or with perforation in patients with a long-standing ulcer diathesis."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "The most common metabolic disorder after gastric resection is a deficiency of:",
      "options": [
        "A. Iron",
        "B. Vitamin B12",
        "C. Folate",
        "D. Calcium",
        "E. Vitamin D"
      ],
      "answer": "A",
      "explanation": "*   Gastric resection leads to numerous disturbances in metabolism.\n*   These include deficiencies of iron, vitamin B12, folate, fat-soluble vitamins, and calcium.\n*   Of these, iron deficiency is the most common.\n*   Iron is absorbed in the duodenum and is facilitated by an acidic environment.\n*   After gastric resection, overall iron intake is decreased, and the reduced acidity impairs absorption.\n*   Reduction in the parietal cell mass from gastric resection leads to a decrease in intrinsic factor, which is necessary for the enteric absorption of vitamin B12, occurring in the terminal ileum.\n*   This leads to a megaloblastic anemia.\n*   Furthermore, an acidic environment facilitates the bioavailability of vitamin B12.\n*   Vitamin B12 deficiency usually only develops when at least one-half of the stomach is resected.\n*   Fat malabsorption can occur after gastrectomy (particularly with a Billroth II reconstruction) because of inadequate mixing of food with bile and digestive enzymes.\n*   This leads to a decreased absorption of fat-soluble vitamins.\n*   Calcium is absorbed in the duodenum and small bowel and is also facilitated by an acid environment.\n*   Long-term deficiencies manifest as osteoporosis.\n*   Folate deficiency is rare."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "Which of the following is true regarding ZES?",
      "options": [
        "A. Symptoms decrease with fasting.",
        "B. Ulcers are most often located in the distal duodenum.",
        "C. It is most commonly familial.",
        "D. It is the most common functional neuroendocrine tumor.",
        "E. Treatment with proton pump inhibitors (PPIs) can control symptoms in the majority of patients."
      ],
      "answer": "E",
      "explanation": "*   ZES (gastrinoma) is caused by uncontrolled secretion of gastrin by a pancreatic or a duodenal neuroendocrine tumor.\n*   Most cases are sporadic, but 20% are inherited.\n*   The inherited or familial form of gastrinoma is associated with multiple endocrine neoplasia type 1.\n*   Gastrinoma is the most common functional neuroendocrine tumor in multiple endocrine neoplasia type 1, but insulinoma is the most common overall.\n*   The most common symptoms are epigastric pain, gastroesophageal reflux, and diarrhea.\n*   The massive acid hypersecretion leads to a secretory diarrhea that persists even with fasting.\n*   The majority will have demonstrable peptic ulceration that is most commonly located in the proximal duodenum.\n*   Unlike typical ulcers, those associated with gastrinoma on occasion will be found in the distal duodenum or jejunum.\n*   Ulcers in these locations should raise suspicion for gastrinoma, as should recurrent or refractory peptic ulcers, ulcers in association with secretory diarrhea, finding gastric rugal hypertrophy or esophagitis-related stricture on endoscopy, bleeding or perforated ulcer, family history of ulcer, and ulcers in the setting of hypercalcemia or kidney stones.\n*   PPIs are highly effective in relieving the symptoms of ZES, although definitive treatment consists of localizing and resecting the tumor."
    },
    {
      "id": 27,
      "question_type": "clinical_scenario",
      "question": "A 70-year-old man presents with an 8-hour history of acute abdominal pain. On examination, the patient is febrile to 101°F, with a blood pressure of 105/70 mm Hg and a heart rate of 130 beats per minute and has diffuse abdominal tenderness with rebound and guarding; the rectal examination is guaiac positive. Laboratory values are significant for a white blood cell count of 16,000 cells/µL and a hematocrit of 26%. CT demonstrates extravasation of oral contrast in the proximal duodenum. After resuscitation, management consists of:",
      "options": [
        "A. Closure of the perforation with omental patch plus an HSV",
        "B. Closure of the perforation and omental patch via the open approach",
        "C. Closure of the perforation with omental patch and duodenotomy with oversewing of posterior ulcer",
        "D. Vagotomy and antrectomy with oversewing of the posterior ulcer and omental patch",
        "E. Closure of the perforation and omental patch via laparoscopic approach"
      ],
      "answer": "C",
      "explanation": "*   The presentation of oral contrast extravasation in the proximal duodenum (or free air under the diaphragm) combined with anemia and guaiac-positive stool is highly suggestive of a \"kissing\" duodenal ulcer.\n*   This represents a rare combination of an anterior duodenal ulcer that perforates into the peritoneum and a posterior ulcer that erodes into the gastroduodenal artery and bleeds.\n*   The majority of perforated ulcers can be managed by simple ulcer closure with an omental (Graham) patch.\n*   This can be achieved via an open or laparoscopic approach.\n*   In this patient, one must rule out a bleeding posterior ulcer.\n*   This would best be achieved via an anterior duodenotomy across the pylorus.\n*   If a posterior ulcer is identified, it should be oversewn."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "A 50-year-old woman presents with symptoms of early satiety, nausea, vomiting, and epigastric pain. Upper endoscopy reveals a large mass of undigested food particles in the stomach that is partially obstructing the pylorus. Which of the following is true regarding this condition?",
      "options": [
        "A. Most patients require surgery.",
        "B. It can be treated with oral administration of cellulase.",
        "C. Psychiatric treatment is critical in long-term management.",
        "D. The patient likely has patchy areas of alopecia.",
        "E. Peptic ulcer disease is a risk factor."
      ],
      "answer": "B",
      "explanation": "*   Bezoars are accumulations of indigestible material in the stomach.\n*   Bezoars often produce nonspecific symptoms and are usually found incidentally in patients undergoing upper gastrointestinal endoscopy or imaging.\n*   There are two types: Phytobezoars (composed of undigested vegetable matter, as in this patient) and Trichobezoars (composed of hair).\n*   Risk factors for phytobezoars include previous gastric surgery and gastroparesis.\n*   Peptic ulcer disease is not a risk factor.\n*   Bezoars produce obstructive symptoms but can also cause ulceration and bleeding.\n*   Diagnosis is suggested by an upper GI series and confirmed by endoscopy.\n*   Treatment generally consists of a combination of enzymatic degradation, endoscopic disruption, irrigation, and removal.\n*   Enzyme therapy can be performed with papain (present in meat tenderizers) or with cellulase.\n*   However, the use of papain has been associated with hypernatremia, gastric ulceration, and esophageal perforation so that cellulase is preferred.\n*   More recently, nasogastric Coca-Cola lavage has been successfully used; the mechanism responsible is believed to be a combination of the mucolytic effect of sodium bicarbonate and digestion of the bezoar by CO2 bubbles, all of which is exaggerated by the cola's acidity.\n*   Trichobezoars occur most commonly in girls and young women who swallow their hair (trichophagia).\n*   Interestingly, most have long hair with patchy areas of alopecia, and many have an underlying psychiatric disorder, so psychiatric care is important in prevention.\n*   The hair creates a cast of the stomach and strands of hair can extend into the small bowel (the so-called Rapunzel syndrome).\n*   Large trichobezoars are likely to require surgical removal because they are less likely to respond to enzymatic degradation."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "Which of the following is true regarding surgical resection for gastric adenocarcinoma?",
      "options": [
        "A. For cardia cancers, proximal gastric resection is preferable to total gastrectomy.",
        "B. Splenectomy should be performed to attain adequate lymph node sampling.",
        "C. Proximal and distal resection margins of 3 cm are considered adequate.",
        "D. D2 resections provide improved survival with morbidity similar to that with D1 resections.",
        "E. Total gastrectomy is an acceptable option for palliation in stage IV disease."
      ],
      "answer": "E",
      "explanation": "*   Surgical resection is the mainstay of treatment for gastric adenocarcinoma.\n*   Survival does not seem to be affected by whether a total or subtotal gastrectomy is performed, provided adequate margins are obtained.\n*   However, for patients with a proximal gastric cancer, performing a proximal gastrectomy has been shown to be associated with a higher complication rate than total gastrectomy; thus, total gastrectomy is preferred for proximal cancers.\n*   For distal cancers, there does not seem to be a difference in outcome between a distal gastrectomy and a total gastrectomy, provided margins are adequate.\n*   Proximal margins should be at least 6 cm because the tumor tends to spread intramurally.\n*   When recurrence rates were compared in one study, those without recurrence had a median proximal margin of 6 cm versus 3.5 cm for those with a recurrence.\n*   The extent of lymph node dissection remains controversial.\n*   In Japan, a D2 resection (group 1 and 2 nodes as well as splenectomy and distal pancreatectomy) has been shown to improve survival compared with D1 (group 1 nodes only).\n*   In Western countries, D2 resection has not been shown to improve survival and is associated with a higher morbidity rate and perioperative mortality rate.\n*   The poorer results with D2 resection in Western countries are likely a reflection of low case volume and the associated morbidity of performing the pancreaticosplenectomy (as such, routine splenectomy is not recommended).\n*   For patients with advanced stage IV gastric cancer, total gastrectomy in select patients with symptoms of bleeding or obstruction can provide good palliation with relatively low morbidity and mortality rates."
    },
    {
      "id": 30,
      "question_type": "clinical_scenario",
      "question": "A 70-year-old man presents to the ED with sudden onset of severe epigastric pain associated with retching but with little vomitus. His blood pressure is 140/90 mm Hg and his heart rate is 90 beats per minute. Attempts by the ED physician to place a nasogastric tube are unsuccessful. Upright chest radiograph reveals a large gas bubble just above the left diaphragm. Which of the following is true regarding this condition?",
      "options": [
        "A. The stomach is likely twisted along the axis transecting the lesser and greater curvature.",
        "B. In children it is largely due to a paraesophageal hernia.",
        "C. It is associated with Bergman's triad.",
        "D. It is associated with a wandering spleen.",
        "E. It is initially managed conservatively for the majority of patients."
      ],
      "answer": "D",
      "explanation": "*   Gastric volvulus is associated with Borchardt's triad (sudden onset of severe upper abdominal pain, recurrent retching without vomitus, and an inability to pass a nasogastric tube).\n*   Bergman's triad (mental status changes, petechiae, and dyspnea) is seen with fat emboli syndrome.\n*   The volvulus can be either organoaxial (twisting around the axis between the gastroesophageal junction and pylorus), which is twice as common, or mesenteroaxial (twisting along the axis between the lesser and greater curvature).\n*   Gastric volvulus most commonly occurs in association with a diaphragmatic defect.\n*   The stomach becomes trapped in the defect and twists.\n*   In children, the defect is congenital (such as a Bochdalek hernia), whereas in adults, it is more often traumatic or secondary to paraesophageal hernias.\n*   Gastric volvulus can also occur in the absence of a diaphragmatic defect.\n*   In such situations, there is typically a congenital absence of intraperitoneal visceral attachments.\n*   It is seen in association with a wandering spleen, a condition in which the spleen also lacks peritoneal attachments and is prone to torsion.\n*   Gastric volvulus is a surgical emergency because there is a high risk of gastric necrosis if it is unrecognized.\n*   On occasion, there is a delay in diagnosis because the nasogastric tube is successfully passed and subsequent imaging is negative.\n*   Management consists of detorsion and repair of the diaphragmatic defect.\n*   If a paraesophageal hernia is present, consideration is given to performing a fundoplication.\n*   If the stomach is compromised, a gastric resection may be needed.\n*   If a volvulus is found without necrosis and without a diaphragmatic defect, then detorsion and gastropexy are performed."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "Which of the following describes the association between Sister Mary Joseph's nodule and gastric cancer?",
      "options": [
        "A. A metastatic left axillary lymph node",
        "B. A metastatic left supraclavicular lymph node",
        "C. An ovarian mass from gastric metastasis",
        "D. Umbilical metastasis suggesting carcinomatosis",
        "E. An anterior nodule palpable on rectal examination suggesting drop metastasis"
      ],
      "answer": "D",
      "explanation": "*   A metastatic left supraclavicular lymph node is called the Virchow node (Troisier sign).\n*   Intra-abdominal cancers tend to metastasize to the left secondary to lymph drainage into the left subclavian vein via the thoracic duct.\n*   A metastatic left axillary lymph node from gastric cancer is called an Irish node.\n*   A Blumer shelf is a palpable nodule on rectal examination suggesting a drop metastasis.\n*   An ovarian mass from a gastric metastasis is also known as Krukenberg tumor.\n*   An umbilical nodule (Sister Mary Joseph node) suggests carcinomatosis.\n*   Although associated with gastric cancer, it may represent any metastatic lesion, most commonly from an intra-abdominal cancer.\n*   It was named after Dr. William Mayo's surgical assistant, who made the observation while scrubbing patients for gastric surgery that those with umbilical nodules had widely metastatic and unresectable gastric cancer.\n*   Current recommendations are that if such nodules are found on physical examination, the patient should undergo fine-needle aspiration because such umbilical nodules may sometimes represent benign disease."
    },
    {
      "id": 32,
      "question_type": "clinical_scenario",
      "question": "A 68-year-old woman presents with an upper GI hemorrhage. She has a history of ulcer disease and has recently completed a treatment for H. pylori. Upper endoscopy reveals brisk arterial bleeding from a duodenal ulcer located on the posterior wall. Despite numerous attempts to control the bleeding endoscopically, the ulcer continues to bleed. The patient has received 4 units of blood. Her hematocrit is 25%, her blood pressure is 110/60 mm Hg, and her heart rate is 120 beats per minute. Which of the following is the best management option?",
      "options": [
        "A. Duodenotomy, oversewing the ulcer, truncal vagotomy, and pyloroplasty",
        "B. Duodenotomy and oversewing the ulcer",
        "C. Truncal vagotomy and antrectomy with Billroth I reconstruction",
        "D. Truncal vagotomy and antrectomy with Billroth II reconstruction",
        "E. Highly selective vagotomy"
      ],
      "answer": "A",
      "explanation": "*   Bleeding from duodenal ulcers can be controlled endoscopically in the majority of patients; thus, surgery is rarely indicated.\n*   Predictors of failure of endoscopic management include the presence of shock or a large ulcer (>2 cm).\n*   Even when bleeding recurs after having been controlled endoscopically, endoscopic treatment can again be attempted with a high rate of success, thus avoiding surgery.\n*   The bleeding is usually from a posterior ulcer that has eroded into the gastroduodenal artery (remember anterior ulcers cause a free perforation and peritonitis, posterior ulcers penetrate and bleed).\n*   Surgical management decisions should be based on the hemodynamic stability of the patient, the patient's overall medical condition, and whether the patient has a history of ulcer disease that has been treated for *H. pylori*.\n*   In the patient who is actively bleeding, the duodenum should be opened across the pylorus as is used in a pyloroplasty.\n*   The ulcer bed should be oversewn with multiple figure-of-eight sutures.\n*   If the patient has a history of ulcers that have been treated for *H. pylori* and is stable in the operating room, an ulcer operation should be performed.\n*   The best option in this type of emergent setting is to perform a truncal vagotomy and to close the longitudinal duodenotomy in a transverse fashion as with a pyloroplasty.\n*   If the patient is a high surgical risk and unstable, another option would be to simply perform a smaller duodenotomy, oversew the ulcer, simply close the duodenotomy, and treat postoperatively for *H. pylori*.\n*   Although vagotomy and antrectomy are another option, they would seldom be used in the emergent setting because of the higher associated morbidity rate.\n*   An HSV would not address the actively bleeding ulcer."
    },
    {
      "id": 33,
      "question_type": "clinical_scenario",
      "question": "A 42-year-old alcoholic male with recurrent episodes of pancreatitis presents to the ED with one episode of hematemesis in the morning. He does not appear to have any active bleeding currently. CT scan demonstrates splenic artery thrombosis. Lipase and liver function tests are normal. EGD demonstrates isolated gastric varices that are not currently bleeding and one 2-cm ulcer at the angularis. Which of the following endoscopic features confers the lowest risk of rebleeding?",
      "options": [
        "A. Oozing ulcer",
        "B. Nonbleeding ulcer with overlying clot",
        "C. Nonbleeding visible vessel",
        "D. Visible ulcer base",
        "E. Flat pigmented spot"
      ],
      "answer": "E",
      "explanation": "*   Recurrent episodes of acute pancreatitis predispose patients to developing splenic vein thrombosis, which can result in isolated gastric varices.\n*   Historically, patients were offered a splenectomy as a prophylactic measure to prevent severe upper GI bleeding.\n*   However, with improved imaging, we are better able to identify splenic vein thrombosis, and we now know that only 4% of patients will have clinically significant gastric variceal bleeding, so routine splenectomy has fallen out of favor.\n*   This patient also has a concomitant ulcer, which could have been contributing to hematemesis.\n*   The Forrest classification grades peptic ulcers based on endoscopic features and allows the clinician to determine risk of rebleeding.\n*   The risk decreases in the following order: active spurting bleeding (17-100%), active oozing bleeding (17–100%), nonbleeding visible vessel (0–81%), adherent clot (14-36%), flat pigment spot (0-13%), and clean visible ulcer base (0-10%).\n*   Although patients with high-risk peptic ulcers (active bleeding/oozing, nonbleeding visible vessel) may benefit from a second-look endoscopy, current guidelines recommend against routine second-look endoscopy."
    },
    {
      "id": 34,
      "question_type": "mcq",
      "question": "Which of the following is true regarding gastric polyps?",
      "options": [
        "A. Fundic gastric polyps have the highest risk of harboring malignant cells.",
        "B. Adenomatous gastric polyps are the most common type.",
        "C. Hamartomatous polyps are associated with H. pylori infection.",
        "D. Heterotopic polyps most commonly present with gastrointestinal bleeding.",
        "E. Inflammatory polyps do not have a risk of malignancy."
      ],
      "answer": "E",
      "explanation": "*   Hyperplastic polyps are by far the most common gastric polyps (70-90%).\n*   Other types include adenomatous, hamartomatous, inflammatory (pseudopolyps), fundic gland, and heterotopic.\n*   Hyperplastic polyps are seen in association with chronic atrophic gastritis, which is due to *H. pylori* infection.\n*   Hyperplastic polyps are further classified into polypoid foveolar hyperplasia and typical hyperplastic polyps.\n*   Polypoid foveolar hyperplasia does not seem to have malignant potential, whereas the typical hyperplastic polyp has an approximately 2% chance of developing malignancy.\n*   Adenomatous polyps have the highest risk of malignancy (10-20%), and the risk of malignancy seems to be related to size and histology (greater risk for villous than tubular).\n*   Fundic gastric polyps are associated with long-term PPI use, and the risk of cancer is negligible.\n*   Additionally, hamartomatous, inflammatory, and heterotopic polyps do not seem to have a risk of malignancy.\n*   Heterotopic polyps are usually the result of ectopic pancreatic tissue and are typically benign lesions without clinical significance.\n*   However, large heterotopic polyps can lead to obstruction and intussusception.\n*   Treatment for most polyps is simply endoscopic polypectomy.\n*   Additional surgical resection is recommended for polyps that are sessile and larger than 2 cm, those with areas of invasive tumor, and those that cause symptoms (bleeding or pain)."
    },
    {
      "id": 35,
      "question_type": "mcq",
      "question": "Bleeding from a Dieulafoy gastric lesion is due to:",
      "options": [
        "A. Antral vascular ectasia",
        "B. Abnormal gastric rugal folds",
        "C. Ingested foreign material",
        "D. An abnormal submucosal vessel",
        "E. A premalignant lesion"
      ],
      "answer": "D",
      "explanation": "*   A Dieulafoy lesion is a congenital malformation in the stomach (typically on the lesser curvature) characterized by a submucosal artery that is abnormally large and tortuous.\n*   As a result of its relatively superficial location, it may erode through the mucosa and become exposed to gastric secretions, leading to massive upper GI hemorrhage.\n*   On endoscopy, the mucosa of the stomach appears normal, and the only finding is a pinpoint area of mucosal defect with brisk arterial bleeding.\n*   The lesion may easily be missed if the bleeding is not active.\n*   Dieulafoy lesion is not premalignant and is not associated with the ingestion of foreign material.\n*   Treatment is endoscopic, via electrocautery, heater probe, or injection with a sclerosing agent.\n*   Surgery, which consists of a wedge resection, is reserved for the rare patient who is not controlled endoscopically.\n*   Antral vascular ectasia is seen in a condition known as watermelon stomach and can lead to significant acute or chronic GI blood loss.\n*   Dilated mucosal blood vessels containing thrombus, mucosal fibromuscular dysplasia, and hyalinization are prominent features.\n*   It derives its name from the mucosal vessels that create parallel lines in the mucosal folds.\n*   The stomach is typically not enlarged.\n*   It is seen predominantly in elderly women with autoimmune disease or elderly males with cirrhosis."
    },
    {
      "id": 36,
      "question_type": "mcq",
      "question": "Which of the following is true regarding low-grade early mucosa-associated lymphoid tissue (MALT) lymphoma?",
      "options": [
        "A. Translocation of chromosome 11 with chromosome 18 predicts poor responsiveness to antibiotics.",
        "B. Regression most commonly takes 3 years to achieve.",
        "C. Ampicillin is an antibiotic often used as part of triple therapy.",
        "D. It is considered a clonal proliferation of T cells.",
        "E. Patients with stable disease at 6 months should be referred for chemoradiation."
      ],
      "answer": "A",
      "explanation": "*   Low-grade MALT lymphoma develops most commonly in association with *H. pylori* infection.\n*   The infection induces a lymphoid infiltrate.\n*   B cells proliferate as a result of the immunogenic stimulation.\n*   The infection also results in the release of toxic oxygen-free radicals by neutrophils.\n*   It is thought that these free radicals may trigger a malignant transformation of the B cells.\n*   Initial treatment of MALT lymphoma is with triple-therapy (PPI and antibiotics) targeted toward *H. pylori*.\n*   Antibiotic treatment for *H. pylori* includes a combination of one of the following: clarithromycin and amoxicillin, metronidazole and amoxicillin, or metronidazole and tetracycline.\n*   Remission was achieved with triple therapy in 79% in one study.\n*   Most cases take 1 year to achieve remission but rarely, it can take up to 3 years.\n*   Lack of response or stable disease at 1 year is usually considered an indication for radiotherapy or chemotherapy.\n*   The current recommendations are to proceed to standard lymphoma chemotherapy using CHOP (cyclophosphamide, doxorubicin, vincristine, and prednisone).\n*   Factors that predict whether regression will occur with antibiotics include depth of invasion by endoscopic ultrasonography (beyond the mucosa), high-grade lesions, spread beyond the initial location, and the presence of nodal involvement.\n*   The overall 5-year survival rate approaches 80%.\n*   MALT lymphomas that demonstrate the (11;18) translocation are unlikely to respond to *H. pylori* eradication and will require alternative therapies including surgery and/or chemoradiation."
    },
    {
      "id": 37,
      "question_type": "mcq",
      "question": "The most sensitive and specific diagnostic test for gastrinoma is:",
      "options": [
        "A. Basal and stimulated gastric acid outputs",
        "B. Octreotide scan",
        "C. Fasting serum gastrin",
        "D. Calcium stimulation test",
        "E. Secretin stimulation test"
      ],
      "answer": "E",
      "explanation": "*   The most sensitive and specific test for gastrinoma (ZES) is the secretin stimulation test.\n*   An IV bolus of secretin is administered, and gastrin levels are checked before and after injection.\n*   An increase in serum gastrin of 120 pg/mL or greater has the highest sensitivity and specificity for gastrinoma.\n*   There are numerous other causes of hypergastrinemia.\n*   They can be divided into those associated with an increased acid production and those with a decreased acid production.\n*   In the latter situation, the hypergastrinemia is reactive due to hypo- or achlorhydria.\n*   In addition to ZES, G-cell hyperplasia, gastric outlet obstruction, and retained antrum after Billroth II reconstruction are associated with increased acid production.\n*   Reactive hypergastrinemia is seen with atrophic gastritis, pernicious anemia, and gastric cancer; in patients receiving H2-receptor antagonists and PPIs; and after vagotomy.\n*   Hypergastrinemia is also seen in chronic renal failure due to decreased catabolism.\n*   Given this broad differential, fasting serum gastrin levels are not sufficient specific to establish the diagnosis of ZES in the majority of patients unless gastrin levels are extremely high (>1000 pg/mL).\n*   The secretin stimulation test has higher sensitivity and specificity than the calcium stimulation test.\n*   The calcium stimulation test is used if the secretin test result is negative and there is a high suspicion for ZES in the presence of hypergastrinemia.\n*   Once the diagnosis of ZES is established, a nuclear octreotide scan seems to be the most sensitive test to localize the tumor."
    },
    {
      "id": 38,
      "question_type": "mcq",
      "question": "Which of the following is the procedure of choice for an intractable duodenal ulcer that fails to heal despite maximal medical therapy?",
      "options": [
        "A. Truncal vagotomy and pyloroplasty",
        "B. Truncal vagotomy and antrectomy with Billroth I reconstruction",
        "C. Truncal vagotomy and antrectomy with Billroth II reconstruction",
        "D. Highly selective vagotomy (HSV)",
        "E. Distal gastrectomy"
      ],
      "answer": "D",
      "explanation": "*   An HSV is the procedure of choice for intractable duodenal ulcer in which medical management fails.\n*   In the current era of *H. pylori* treatment, surgery for intractable duodenal ulceration is rare.\n*   There are three main surgical options: HSV, vagotomy and pyloroplasty, and vagotomy and antrectomy.\n*   The use of vagotomy and antrectomy has the overall lowest rate of ulcer recurrence (<2%); however, because it involves a gastric resection, it has the highest complication rate.\n*   The procedure also predisposes the patient to both postvagotomy syndromes and postgastrectomy syndromes.\n*   As such, it is the least favored option in this setting.\n*   The use of vagotomy and pyloroplasty has a higher ulcer recurrence rate than vagotomy and antrectomy but less morbidity.\n*   An HSV has the highest ulcer recurrence rate (≈10-15%) but the lowest morbidity rate.\n*   It requires more time and skill, so it is not an optimal choice in an emergent setting.\n*   It also has the advantage that it can be performed laparoscopically.\n*   Distal gastrectomy is not an option for duodenal ulcer because it does not reduce acid secretion."
    },
    {
      "id": 39,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the types of gastric ulcers?",
      "options": [
        "A. Type II ulcers are the most common.",
        "B. Type IV ulcers occur near the gastroesophageal junction.",
        "C. Type I ulcers usually have increased acid secretion.",
        "D. Type III ulcers are associated with decreased acid secretion.",
        "E. Type I gastric ulcers are prepyloric."
      ],
      "answer": "B",
      "explanation": "*   Gastric ulcers have been categorized into five types.\n*   The most common is the type I lesion (≈60%), which is located near the angularis incisura at the border between the antrum and the fundus, usually along the lesser curve.\n*   These patients usually have normal or decreased acid secretion.\n*   Type II gastric ulcers are located in the fundus and are associated with a concomitant duodenal ulcer.\n*   Type III gastric ulcers are prepyloric.\n*   Both types II and III gastric ulcers are usually associated with increased gastric acid secretion.\n*   Type III ulcers are thought to behave like duodenal ulcers.\n*   Type IV gastric ulcers are located near the gastroesophageal junction.\n*   Like type I ulcers, type IV gastric ulcers have normal or low acid production and are associated with impaired mucosal defense.\n*   Type V gastric ulcers are considered a diffuse process and are associated with NSAID use."
    },
    {
      "id": 40,
      "question_type": "mcq",
      "question": "Which of the following is the procedure of choice for an intractable type I gastric ulcer that fails to heal despite maximal medical therapy?",
      "options": [
        "A. Truncal vagotomy and antrectomy with Billroth I reconstruction",
        "B. Truncal vagotomy and antrectomy with Billroth II reconstruction",
        "C. HSV alone",
        "D. Distal gastrectomy with Billroth I reconstruction",
        "E. Distal gastrectomy with Billroth II reconstruction"
      ],
      "answer": "D",
      "explanation": "*   With gastric ulcers, one must always be concerned about the risk of malignancy.\n*   As such, biopsies should be performed at the time of endoscopy.\n*   If they do not heal despite maximal medical therapy, surgical management should include excision of the ulcer.\n*   In the case of a type I gastric ulcer, this is achieved via a distal antrectomy since these ulcers are located near the angularis incisura at the border between the antrum and the fundus.\n*   The extent of resection is determined by the ulcer location.\n*   Frozen sections should be obtained to rule out malignancy.\n*   Because acid hypersecretion is not an issue with type I ulcers, vagotomy is considered unnecessary.\n*   Reconstruction can be achieved with a gastroduodenostomy (Billroth I) or a gastrojejunostomy (Billroth II).\n*   In general, a Billroth I is preferred because it is more anatomic and thus avoids the complications of a Billroth II such as a duodenal stump leak, a retained antrum, and afferent loop obstruction.\n*   If the duodenal remnant is severely scarred from ulcer disease, a Billroth I may not be feasible.\n*   Another option for a type I ulcer would be to excise the gastric ulcer using a wedge excision in combination with an HSV, but an HSV alone would be inadequate.\n*   For type II or III ulcers, vagotomy would be added because these ulcers are associated with acid hypersecretion."
    },
    {
      "id": 41,
      "question_type": "clinical_scenario",
      "question": "A frail 85-year-old female presents to the ED with severe dehydration and ketoacidosis due to persistent vomiting. She is not a diabetic. She has had significant weight loss. Workup eventually demonstrates gastroparesis. After this initial hospitalization, which of the following long-term treatment strategies should be initiated?",
      "options": [
        "A. Cisapride",
        "B. Metoclopramide",
        "C. Botulinum toxin injection at the pylorus",
        "D. Gastric electrical stimulation device",
        "E. Six low-fat, low-fiber meals per day"
      ],
      "answer": "E",
      "explanation": "*   The etiology of gastroparesis is most commonly idiopathic. Diabetes is the next most common etiology.\n*   The first step in the management of gastroparesis is fluid hydration and nutritional support.\n*   Agents to prevent nausea and vomiting are also important.\n*   Long-term management begins with dietary modification.\n*   Symptoms can be controlled with eating six small, low-fat, low-fiber meals throughout the day, which slows down gastric emptying.\n*   This may require additional nutritional supplementation with high-caloric shakes.\n*   Promotility agents such as metoclopramide or erythromycin can be helpful as well but have additional side effects restricting their widespread use; metoclopramide can lead to tardive dyskinesia and has a black box warning for this.\n*   Botulinum toxin injection at the pylorus has not been shown to have effective results.\n*   Cisapride, a cholinergic agonist, has been banned in the United States secondary to its multiple drug interactions.\n*   Rarely, and in severe refractory cases of gastroparesis, a gastric cardiac pacemaker can be implanted, but this needs to be done at laparoscopy under general anesthesia and lead placement must be confirmed by intraoperative endoscopy.\n*   This, however, would not be appropriate for an elderly and frail patient."
    }
  ]
}
{
  "chapter_name": "Trauma",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 45-year-old man presents with second- and third-degree burns to the anterior surface of both arms and entire right leg. He also has superficial burns to both hands. What is his estimated total body surface area (TBSA) burned?",
      "options": [
        "A. 25%",
        "B. 27%",
        "C. 29%",
        "D. 36%",
        "E. 38%"
      ],
      "answer": "B",
      "explanation": "- Estimated TBSA burned determines appropriate fluid resuscitation volumes.\n- Each upper extremity accounts for 9% of the TBSA (anterior surface is 4.5%).\n- Each lower extremity accounts for 18%.\n- Anterior and posterior trunk each account for 18%.\n- Head and neck account for 9%.\n- Hands account for 1% each.\n- Perineum accounts for 1%.\n- First-degree burns are not included in TBSA calculation.\n- For this patient: anterior surface of both arms (9%) + entire right leg (18%) = 27%.\n- Superficial burns to both hands are first-degree and are not counted.\n- The Parkland formula (4 mL/kg per %TBSA burned over 24 hours, with half in the first 8 hours) is commonly used for fluid resuscitation.\n- Ringer's lactate is the fluid of choice; large volumes of normal saline can lead to hyperchloremic metabolic acidosis.\n- Reference: Mermel, L. A., Allon, M., & Bouza, E., et al. (2009). Clinical practice guidelines for the diagnosis and management of intravascular catheter-related infection: 2009 Update by the Infectious Diseases Society of America. Clinical Infectious Diseases, 49(1), 1-45."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 22-year-old male presents to the emergency department (ED) after a gunshot wound (GSW) to the abdomen. He is hypotensive. Which of the following intravenous (IV) routes is the most appropriate way to deliver rapid fluid resuscitation to this patient?",
      "options": [
        "A. 18-gauge peripheral catheter",
        "B. 20-gauge peripheral catheter",
        "C. 6-French femoral vein central line catheter",
        "D. 7-French subclavian vein central line catheter",
        "E. 7-French internal jugular vein central line catheter"
      ],
      "answer": "A",
      "explanation": "- In an emergent setting, the fastest way to gain vascular access is via a peripheral catheter, often at the median antecubital fossa.\n- Short, wide catheters maximize volume flow for rapid resuscitation.\n- Fluid flow rate is proportional to the cross-sectional area and inversely proportional to the fourth power of the catheter's radius.\n- An 18-gauge catheter has a larger diameter than a 20-gauge catheter, making it preferable for rapid infusion.\n- Central vein catheterization is not the preferred mode for immediate trauma resuscitation due to time consumption and high complication rates, which are exacerbated by urgency, hypovolemia, and suboptimal sterile technique.\n- Central line-associated bloodstream infections have a mortality rate up to 20%.\n- A short but large central vein cordis allows faster infusion but is not appropriate for initial trauma setting.\n- Reference: Mermel, L. A., Allon, M., & Bouza, E., et al. (2009). Clinical practice guidelines for the diagnosis and management of intravascular catheter-related infection: 2009 Update by the Infectious Diseases Society of America. Clinical Infectious Diseases, 49(1), 1-45."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is the leading cause of death in the trauma patient reaching the hospital alive?",
      "options": [
        "A. Head injury",
        "B. Hemorrhagic shock",
        "C. Multiorgan failure",
        "D. Sepsis",
        "E. Cardiac injury"
      ],
      "answer": "A",
      "explanation": "- Trauma is the leading cause of death for individuals over 45 years old in the United States.\n- Traumatic brain injury (TBI) is the single largest contributor to trauma deaths, accounting for nearly half of all fatalities.\n- TBI is the most common cause of death in trauma patients who reach the hospital alive.\n- Hemorrhagic shock is the most common cause of death in trauma patients within the first hour of injury.\n- Preventing secondary injury to the brain by avoiding hypotension and hypoxia is a critical component of TBI management.\n- References: Baker, C. C., Oppenheimer, L., & Stephens, B., et al. (1980). Epidemiology of trauma deaths. American, Journal of Surgery, 140(1):144-150. Traumatic Brain Injury in the United States: a Report to Congress, CDC, Dec 1999."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 35-year-old male is taken to the ED after being stabbed in the right abdomen. He complains of minimal abdominal pain with no rebound or guarding. During local wound exploration (LWE), it appears that the anterior fascia is not violated. His vital signs are normal. Which of the following is the most appropriate management?",
      "options": [
        "A. Admission for 24-hour observation",
        "B. Discharge after 6 hours if abdominal exam does not change",
        "C. Computed tomography (CT) scan of the abdomen and pelvis",
        "D. Focused assessment with sonography for trauma (FAST)",
        "E. Discharge home"
      ],
      "answer": "E",
      "explanation": "- The anterior abdomen is defined by the nipples, groin crease, and anterior axillary lines.\n- Stab wounds to this area: one-third do not penetrate the peritoneal cavity, one-third penetrate but cause no significant intra-abdominal injury, and one-third cause significant intra-abdominal injury.\n- Immediate exploratory laparotomy is mandated for hemodynamically unstable patients or those with diffuse peritonitis.\n- For hemodynamically stable patients without peritonitis, options include serial abdominal exams, CT scan, FAST scan, and local wound exploration (LWE).\n- The main advantage of LWE is that if the anterior fascia is not violated, the patient can be discharged from the ED.\n- A positive LWE does not necessarily mean peritoneal violation, and taking all positive LWE patients to the OR results in a high negative laparotomy rate.\n- Given the negative LWE and normal vital signs, discharge home is the most appropriate management.\n- References: Shanmuganathan, K., Mirvis, S., Chiu, W., et al. (2004). Penetrating torso trauma: triple-contrast helical CT in peritoneal violation and organ injury—a prospective study in 200 patients. Radiology, 231(3), 775-784, 2004. Cothren, C. C., Moore, E. E., & Warren, F. A., et al. (2009). Local wound exploration remains a valuable triage tool for the evaluation of anterior abdominal stab wounds. American Journal of Surgery, 198(2), 223-226."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 45-year-old male is brought to the ED after a GSW to the right leg. He is hypotensive in the ED, with a large amount of blood loss at the scene. Massive transfusion protocol is initiated. Following interposition vein graft for a superficial femoral artery transection, he is admitted to the ICU for observation. The following morning he is found to be oliguric, has rising peak airway pressures, and has a distended abdomen. Which of the following would be expected in this patient?",
      "options": [
        "A. Increased pulmonary compliance",
        "B. Increased functional reserve capacity (FRC)",
        "C. Decreased pulmonary vascular resistance",
        "D. Increased pulmonary capillary wedge pressure",
        "E. Increased venous return"
      ],
      "answer": "D",
      "explanation": "- This patient received a large volume of fluid resuscitation, leading to abdominal compartment syndrome (ACS).\n- ACS presents with a triad of oliguria, rising peak airway pressures, and increased intra-abdominal pressure (IAP).\n- Bladder pressure (measured via indwelling Foley) is used as a surrogate for IAP.\n- Intra-abdominal hypertension is defined as sustained IAP ≥ 12 mm Hg.\n- End-organ damage typically occurs with IAP > 20 mm Hg.\n- As IAP increases, the diaphragm's ability to contract is compromised, which lessens pulmonary compliance and functional residual capacity (FRC).\n- This translates to increased intrathoracic pressure, resulting in decreased venous return, increased pulmonary vascular resistance, and increased pulmonary capillary wedge pressure.\n- Treatment for ACS is decompressive laparotomy, leaving the abdomen open (covered with a protective bag).\n- Reference: Papavramidis, T. S., Marinis, A. D., & Pliakos, I., et al. (2011). Abdominal compartment syndrome—intra-abdominal hypertension: defining, diagnosing, and managing. Journal of Emergency Traumatology Shock, 4(2), 279."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 45-year-old male presents with nausea, vomiting, and dyspnea. Past history is significant for a motor vehicle collision (MVC) 5 years earlier for which he was hospitalized for a week, without requiring surgery. There are decreased breath sounds in the left chest. Chest x-ray (CXR) demonstrates an elevated left hemidiaphragm, with blunting of the costophrenic angle, as well as multiple gas bubbles in the left lower chest. WBC count is 18,000 cells/µL. Which of the following is the best management recommendation?",
      "options": [
        "A. Left tube thoracostomy",
        "B. Left chest pig tail catheter",
        "C. Video-assisted thoracoscopic surgery (VATS)",
        "D. Intravenous antibiotics",
        "E. Exploratory laparotomy"
      ],
      "answer": "C",
      "explanation": "- Most traumatic diaphragmatic hernias (TDHs) present acutely; delayed presentation (as in this case) is rare and often misdiagnosed.\n- TDH is commonly confused with pneumonia, pleural effusion, or empyema, leading to inappropriate chest tube insertion.\n- Clues to diagnosis include a history of blunt or penetrating thoracoabdominal trauma, combined GI (nausea, vomiting) and respiratory (dyspnea, chest pain) symptoms.\n- Additional clues: bowel sounds auscultated in the chest, elevated hemidiaphragm on CXR, and a nasogastric (NG) tube in the chest.\n- While CXR is the best initial tool, it can miss over 50% of cases; CT scan has higher sensitivity and specificity for demonstrating herniation.\n- Recent series suggest penetrating trauma (especially GSW) as the leading cause of TDH.\n- For immediate TDH diagnosis, exploratory laparotomy is the gold standard.\n- For delayed diagnosis, VATS (with possible thoracotomy) is preferred as it allows evaluation of herniated viscera, pleural adhesions, reduction of contents, and repair of the hernia defect.\n- Sometimes, dense adhesions may necessitate laparoscopy and/or laparotomy if reduction via the thoracic approach is difficult.\n- References: Chandra, A. et al. (2007). Surgical management of diaphragmatic injuries. Indian Journal of Thoracic and Cardiovascular Surgery, 23(3), 202-207. Scharff, J. R., & Naunheim, K. S. (2007). Traumatic diaphragmatic injuries. Thoracic Surgery Clinics, 17(1), 81–85. Fair, K. A., Gordon, N. T., & Barbosa, R. R., et al. (2015). Traumatic diaphragmatic injury in the American College of Surgeons National Trauma Data Bank: a new examination of a rare diagnosis. American Journal of Surgery, 209(5), 864-869."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true with regards to burn injury?",
      "options": [
        "A. Superficial partial-thickness burns do not have blistering.",
        "B. Full-thickness third-degree burns can involve underlying fascia.",
        "C. Deep partial-thickness burns have a loss of hair follicles.",
        "D. Deep partial-thickness burns often heal spontaneously.",
        "E. Superficial partial-thickness burns are not painful."
      ],
      "answer": "C",
      "explanation": "- Burn injuries are classified into five categories.\n- First-degree (superficial) burns involve only the epidermis, characterized by red skin, no blisters, and pain (e.g., sunburns).\n- Second-degree burns are divided into two sub-classifications:\n    - Superficial partial-thickness burns: characterized by blistering, pain, blanching, and intact hair follicles; limited to the dermal layer; typically do not require skin grafting.\n    - Deep partial-thickness burns: characterized by blistering, less sensitivity (sometimes painless), nonblanchable, and loss of hair follicles. These do not heal spontaneously and often require intervention like skin grafting.\n- Third-degree (full thickness) burns involve all skin layers, characterized by a white, leathery appearance.\n- Fourth-degree burns are full thickness and involve underlying muscle, fascia, or bone, typically leading to disfigurement.\n- Reference: Tiwari, V. K. (2012). Burn wound: how it differs from other wounds? Indian Journal of Plastic Surgery, 45(2), 364-373."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is correct regarding common topical antimicrobials used in burn care?",
      "options": [
        "A. Mafenide acetate leads to a respiratory alkalosis by increasing minute alveolar ventilation.",
        "B. Silver sulfadiazine has broad coverage against Pseudomonas.",
        "C. Bacitracin has gram-negative coverage.",
        "D. Silver nitrate can be used in patients with a sulfa allergy.",
        "E. Silver sulfadiazine can lead to electrolyte abnormalities."
      ],
      "answer": "D",
      "explanation": "- Prophylactic IV antibiotics are discouraged in burn patients due to the risk of breeding multidrug-resistant organisms.\n- Topical ointments are widely used to prevent bacterial colonization.\n- Silver sulfadiazine: broad-spectrum agent, but poor coverage for Pseudomonas; poor eschar penetration; can lead to neutropenia and thrombocytopenia. Should be avoided in patients with a sulfa allergy.\n- Silver nitrate: broad-spectrum agent, does not work against Pseudomonas; painful application; poor eschar penetration; causes tissue discoloration; can lead to severe electrolyte derangements (depletes Na+, K+, and Cl-). It can be used in patients with a sulfa allergy.\n- Bacitracin and neomycin: painless application, limited eschar penetration, poor gram-negative coverage.\n- Mafenide acetate (Sulfamylon): broad-spectrum agent, active against Pseudomonas and Enterococcus spp.; good eschar penetration. As a carbonic anhydrase inhibitor, it can lead to hyperchloremic metabolic acidosis, limiting its use to small areas of full-thickness burns.\n- Reference: Dai, T., Huang, Y., & Sharma, S., et al. (2010). Topical antimicrobials for burn wound infections. Recent Patents on Anti-Infect Drug Discovery, 5(2), 124."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is an indication to transfer a patient to a burn center?",
      "options": [
        "A. 45-year-old female with first-degree burns 30% TBSA",
        "B. 10-year-old female with third-degree burns 4% TBSA",
        "C. 21-year-old male with a chemical burn to the right hand",
        "D. 30-year-old female with second-degree burns 18% TBSA",
        "E. 71-year-old female with second-degree burns 8% TBSA"
      ],
      "answer": "C",
      "explanation": "- The American College of Surgeons and American Burn Association have guidelines for burn center transfer to improve outcomes and survival.\n- Indications for transfer:\n    - Second- or third-degree burns >20% TBSA in patients aged 10 to 50 years.\n    - Second- or third-degree burns >10% TBSA in patients younger than 10 or older than 50 years.\n    - Third-degree burns >5% TBSA in any age.\n    - Any second- or third-degree burn to hands, feet, face, eyes, genitalia, perineum, or skin over major joints.\n    - Any electrical or chemical burn.\n    - Any concomitant inhalation injury or multiple trauma.\n- First-degree burns do not require referral.\n- Option C (21-year-old male with a chemical burn to the right hand) meets the criteria for chemical burn and burn to hands.\n- References: [No authors listed]. 1990. Hospital and prehospital resources for optimal care of patients with burn injury: guidelines for development and operation of burn centers. Journal of Burn Care & Rehabilitation, 11(2),98-104. Resources for Optimal Care of the Injured Patient: 1993. 1993 by the American College of Surgeons, p. 64."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 28-year-old morbidly obese male arrives at the ED after suffering an electrical shock. He was working on his car at the time of injury. He has a burn mark on his hand and his forearm appears swollen. Which of the following is true regarding this patient?",
      "options": [
        "A. The source of the shock was likely a direct current.",
        "B. Renal failure is the main cause of death in those who survive the initial injury.",
        "C. He likely had repetitive, tetanic muscle contractions at the time of electrocution.",
        "D. His body habitus will likely protect him from deep thermal injury.",
        "E. Red urine on admission is suggestive of bladder injury."
      ],
      "answer": "A",
      "explanation": "- Electrical shock patients require burn center expertise and should be transferred once stable.\n- Alternating current (AC) leads to repetitive, tetanic muscle contractions, often causing prolonged exposure due to stronger flexor muscle tone.\n- Direct current (DC) electrocution (e.g., from a car battery) typically results in a single, large muscle contraction that throws the patient away from the source.\n- Adipose tissue has high resistance to electricity, leading to increased tissue temperature and coagulation; obese patients are more susceptible to deep thermal burns.\n- The main cause of death in the early post-electrocution period is cardiac arrhythmias.\n- Other immediate complications include posterior shoulder dislocation and spinal cord injury.\n- Long-term risks include cataracts, polyneuritis, and ototoxicity.\n- The external skin burn mark can vastly underestimate the severity of underlying muscle and connective tissue injury.\n- Patients are susceptible to rhabdomyolysis, suggested by red urine, and CK levels should be routinely sent.\n- Patients should be admitted, placed on cardiac monitoring, and resuscitated with IV fluids to maintain high urine output.\n- Reference: Wesner, M. L., & Hickie, J. (2013). Long-term sequelae of electrical injury. Canadian Family Physician Medecin de Famille Canadien, 59(9), 935-939."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 36-year-old alcoholic female arrives at the ED during a winter storm with a frostbite to the right arm and hand. She passed out in a park with her arm exposed on a freezing metallic bench. Her right hand has several areas of what appear to be hemorrhagic bullae. It has been 7 hours since she was brought to the ED. Which of the following is true regarding this patient?",
      "options": [
        "A. She likely has a second-degree frostbite.",
        "B. She should receive early debridement of obviously necrotic tissue.",
        "C. She will likely respond favorably to tissue plasminogen activator (tPA) treatment.",
        "D. Reperfusion injury is an important contributor to the damage seen with her injury.",
        "E. Rewarming in warm water should be done gradually."
      ],
      "answer": "D",
      "explanation": "- Frostbite occurs when tissue is exposed to temperatures below -2°C or 28°F, with severity proportional to exposure duration.\n- Frostbite classifications:\n    - First degree: hyperemia, no necrosis, yellow plaque.\n    - Second degree: superficial vesicles, hyperemia, partial-thickness necrosis.\n    - Third degree: hemorrhagic bullae, full-thickness necrosis.\n    - Fourth degree: frank gangrene, involvement of underlying muscle and bone.\n- Treatment begins with rapid rewarming in a warm water bath (40-42°C).\n- Early debridement or amputation should be avoided as tissue viability can take weeks to determine.\n- Both tissue freezing and reperfusion contribute to tissue damage in frostbite burns.\n- Crystallization of extracellular space leads to increased extracellular oncotic pressure, cellular dehydration, and impaired intracellular metabolism.\n- An inflammatory response ultimately leads to thrombosis, tissue ischemia, and endothelial injury.\n- Reperfusion injury is a significant contributor to the damage.\n- tPA has an emerging role in frostbite management by limiting microvascular thrombosis and preventing reperfusion injury.\n- Predictors of poor tPA response include warm ischemia time >6 hours, cold exposure >24 hours, and multiple freeze-thaw cycles.\n- This patient had 7 hours of warm ischemia, making her ineligible for tPA treatment.\n- Reference: Gross, E. A., & Moore, J. C. (2012). Using thrombolytics in frostbite injury. Journal of Emergency Traumatology Shock, 5(3), 267-271."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 33-year-old alcoholic female presents to the ED after a high-speed MVC. She is drunk, combative, and promptly intubated. On computed tomography (CT), she is found to have a Chance fracture at L1, has free fluid in the abdomen, but does not have any evidence of solid organ injury. Her vitals are normal and stable. The next step in management is:",
      "options": [
        "A. Admission to the ICU for close monitoring",
        "B. Magnetic resonance imaging (MRI) of the spine",
        "C. Exploratory laparotomy",
        "D. FAST scan",
        "E. Repeat CT scan of the abdomen in 6 hours"
      ],
      "answer": "C",
      "explanation": "- Chance fractures (seat-belt fractures) are flexion-distraction injuries of the spine, often associated with intra-abdominal injuries (most commonly hollow viscus and pancreas).\n- Recent registry data suggests intra-abdominal injury occurs in about 33% of Chance fracture cases.\n- A Chance fracture alone is not an indication for laparotomy.\n- However, an unreliable abdominal examination (due to intoxication) combined with free fluid on CT (in the absence of solid organ injury) raises suspicion for a hollow viscus injury, which mandates exploratory laparotomy.\n- In an alert, oriented, nonventilated patient, serial abdominal examination would be the initial management.\n- MRI of the spine is helpful for spinal cord impingement but should be performed after exploratory laparotomy, with strict spine precautions maintained until then.\n- Repeat imaging alone is not appropriate if hollow viscus injury is suspected.\n- References: Neugebauer, H., Wallenboeck, E., & Hungerford, M. (1999). Seventy cases of injuries of the small intestine caused by blunt abdominal trauma: a retrospective study from 1970 to 1994. Journal of Traumatology 46(1), 116–121. Tyroch, A. H., McGuire, E. L., & McLean, S. F., et al. (2005). The association between Chance fractures and intra-abdominal injuries revisited: a multicenter review. The American Surgeon, 71(5), 434-438."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "A 42-year-old female presents to the ED complaining of abdominal pain after a MVC. CT scan shows contrast extravasation in the spleen with a significant hemoperitoneum. Heart rate is presently 120 beats per minute and blood pressure (BP) is 90/70 mm Hg. Hemoglobin is 7.1 g/dL. She is a Jehovah's Witness and refuses blood transfusions. Which of the following is the most appropriate next step in management?",
      "options": [
        "A. Document refusal of blood products and administer normal saline to keep BP above 100 mm Hg",
        "B. Document refusal of blood products and perform a splenectomy",
        "C. Document refusal of blood products and perform angiography with embolization",
        "D. Document refusal of blood products and consult the hospital ethics committee",
        "E. Administer 2 units of packed red blood cells given life-threatening situation and perform splenectomy"
      ],
      "answer": "B",
      "explanation": "- Adult Jehovah's Witnesses have the right to refuse blood products, even in lifesaving situations.\n- Anemia does not render a patient incapable of making an informed decision.\n- Administering blood products against a patient's wishes violates autonomy and can lead to reprimand by the American Medical Association.\n- The patient should still receive the care they would otherwise get if they consented to blood transfusion.\n- Given the relative hemodynamic instability (tachycardia and hypotension), contrast extravasation in the spleen, anemia, and hemoperitoneum, there is little margin for error, and splenectomy is indicated.\n- The physician must document the patient's refusal of blood products in the electronic medical record due to the higher risk of death.\n- Angiography with embolization is considered appropriate for hemodynamically stable patients with contrast extravasation.\n- In a true emergency setting, there is no time to consult the ethics committee.\n- References: Patanwala, A. E., Acquisto, N. M., & Erstad, B. L. (2011). Prothrombin complex concentrate for critical bleeding. The Annals of Pharmacotherapy, 45(7-8), 990-999. Emanuel, E. J., & Emanuel, L. L. (1992). Proxy decision making for incompetent patients: an ethical and empirical analysis. JAMA, 267(15), 2067-2071."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 29-year-old male arrives at the ED after a high-speed MVC with a Glasgow Coma Scale (GCS) of 4. He has a cervical collar that was placed by emergency medical services (EMS). He is intubated and taken for a CT scan, which demonstrates a large subdural hemorrhage and diffuse punctate hemorrhage with no evidence of cervical spine injury. He is admitted to the ICU. With regard to the management of the cervical collar, which of the following is recommended?",
      "options": [
        "A. Remove immediately.",
        "B. MRI cervical spine (c-spine) and remove the cervical collar if there are no injuries identified.",
        "C. Continue cervical collar until the patient can be clinically evaluated.",
        "D. Exchange the cervical collar placed by EMS with a soft-collar.",
        "E. Exchange the cervical collar placed by EMS with a soft-collar and order MRI c-spine."
      ],
      "answer": "A",
      "explanation": "- C-spine clearance in trauma patients is accomplished using the National Emergency X-Radiography Utilization Study (NEXUS) criteria.\n- Patients meeting any NEXUS criteria should continue spinal precautions until a CT scan of the c-spine is performed.\n- NEXUS criteria mnemonic: NSAID (Neurologic deficit, Spinal tenderness, Altered mental status, Intoxicated, Distracting injury).\n- Patients with a negative CT c-spine can be clinically cleared and the c-collar removed.\n- This is not possible in an obtunded or intubated patient.\n- If a patient is expected to be obtunded or intubated for a short period (e.g., combative drunk), it's reasonable to keep the c-collar on and assess when awake.\n- This patient has extensive traumatic brain injury and will likely be intubated for a prolonged period.\n- Prolonged hard cervical collar application can compress jugular veins, causing venous outflow obstruction and increased intracranial pressure (ICP).\n- The collar also creates a nociceptive stimulus, potentially contributing to elevated ICP, increasing complication risk.\n- The Eastern Association for the Surgery of Trauma (EAST) recently recommended that in an obtunded adult blunt trauma patient, the c-collar should be removed after a negative CT c-spine alone.\n- MRI c-spine may no longer have a role in obtunded trauma patients as it can lead to higher complication rates and longer ICU stays by identifying clinically irrelevant occult injuries.\n- No studies show improved outcomes from switching to a soft-collar.\n- Reference: Patel, M. B., Humble, S. S., & Cuillinane, D. C., et al. (2015). Cervical spine collar clearance in the obtunded adult blunt trauma patient: a systematic review and practice management guideline from the Eastern Association for the Surgery of Trauma. Journal of Traumatology Acute Care Surgery, 78(2), 430."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is true regarding pneumothorax in the trauma patient?",
      "options": [
        "A. A small asymptomatic pneumothorax identified on CT scan will resolve within 24 hours using 100% inspired supplemental oxygen.",
        "B. A small asymptomatic pneumothorax should be managed with a tube thoracostomy if the patient is to undergo general anesthesia.",
        "C. A small asymptomatic pneumothorax in a ventilated patient in the ICU, discovered on re-review of admission CT, should be managed with a tube thoracostomy.",
        "D. A persistent air leak identified on postinjury day 3 is best managed with VATS.",
        "E. Penetrating injuries leading to pneumothorax have concomitant hemothorax less than half of the time."
      ],
      "answer": "D",
      "explanation": "- Pneumothorax is a common complication of both penetrating and blunt trauma.\n- It is a clinical diagnosis made during the primary survey.\n- Patients with decreased breath sounds, trachea deviation, and hypotension should be suspected of having a tension pneumothorax and require immediate needle decompression or tube thoracostomy.\n- Occult pneumothorax is not seen on initial radiograph but may be demonstrated on CT.\n- Penetrating trauma results in concomitant hemothorax up to 80% of the time.\n- Small pneumothoraces identified on CT can be observed if the patient is stable.\n- Normally, 1.25% of pneumothorax volume is absorbed in 24 hours.\n- The use of 100% inspired supplemental oxygen is controversial due to potential oxygen toxicity.\n- EAST recommends that an occult pneumothorax can be safely observed in a stable patient undergoing general anesthesia, as it is unlikely to progress regardless of positive pressure ventilation.\n- Similarly, an occult pneumothorax can be observed in a ventilated patient that remains asymptomatic.\n- EAST recommends that persistent air leaks identified on postinjury day 3 should be further evaluated with VATS, as this can suggest underlying bronchial injury or bronchopleural fistula.\n- References: Sharma, A., & Jindal, P. (2008). Principles of diagnosis and management of traumatic pneumothorax. Journal of Emergency Traumatology Shock, 1(1), 34-41. Mowery, N. T., Gunter, O. L., & Collier, B. R., et al. (2011). Practice management guidelines for management of hemothorax and occult pneumothorax. Journal of Traumatology, 70(2), 510-518."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is the most common electrolyte abnormality seen in the burn patient?",
      "options": [
        "A. Hypernatremia",
        "B. Hyponatremia",
        "C. Hypercalcemia",
        "D. Hypoglycemia",
        "E. Hypermagnesemia"
      ],
      "answer": "A",
      "explanation": "- Burn patients are subject to severe electrolyte derangements.\n- The most common electrolyte abnormality is hypernatremia, primarily due to insensible water loss through the burn wound.\n- Iatrogenic hyponatremia can occur once the burn patient is fully resuscitated.\n- Hypernatremia (not hyponatremia) is an independent predictor of mortality in burn patients.\n- Hyperglycemia can occur as a result of increased glucose production and widespread insulin resistance.\n- Calcium can be sequestered in the burned skin, leading to hypocalcemia.\n- Infrequently, burn patients may experience muscle cramps secondary to hypomagnesemia.\n- Reference: Stewart, I. J., Morrow, B. D., & Tilley, M. A., et al. (2013). Dysnatremias and survival in adult burn patients: a retrospective analysis. American Journal of Nephrology, 37(1), 59-64."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 31-year-old obese female presents to the ED after a large refrigerator fell on her. She is complaining of severe pain at her hips. Her hemoglobin is 7.9 g/dL. Her heart rate is 128 beats per minute, and her systolic blood pressure is 105 mm Hg. She has no evidence of extremity injuries, and distal pulses are normal. She has an unstable pelvis, so a pelvic binder is applied. Massive transfusion protocol is initiated. She is rushed to the angiography suite and undergoes embolization, then stabilizes. The following day, her CK levels rise to 40,000 and her urine turns red tinged. The most likely source is the muscles of her:",
      "options": [
        "A. Thighs",
        "B. Buttocks",
        "C. Abdominal wall",
        "D. Arms",
        "E. Calves"
      ],
      "answer": "B",
      "explanation": "- The patient shows evidence of muscle ischemia/necrosis and rhabdomyolysis, indicated by CK levels rising to 40,000 u/L (normal 45–260 u/L).\n- Rhabdomyolysis can occur from any setting causing muscle ischemia (e.g., hypotension after trauma) or prolonged pressure on muscle compartments.\n- Obesity and improper padding can exacerbate rhabdomyolysis.\n- The ischemia/reperfusion cycle puts the patient at risk of developing compartment syndrome.\n- A study on obese patients undergoing roux-en-y bypass found BMI to be an independent risk factor for postoperative rhabdomyolysis.\n- In the supine position, the gluteal muscles are most likely to be compressed.\n- Pelvic embolization, performed for trauma or AAA repair, is a known risk factor for developing buttock claudication.\n- It is rarely associated with devastating pelvic ischemia and/or buttock ischemia/necrosis.\n- Aggressive fluid hydration and inspection of buttock muscles are imperative.\n- References: Yasumura, K., Ikegami, K., & Kamohara, T., et al. (2005). High incidence of ischemic necrosis of the gluteal muscle after transcatheter angiographic embolization for severe pelvic fracture. Journal of Traumatology, 58(5), 985-990. Benevides, ML. et al. (2006). Rhabdomyolysis secondary to gluteal compartment syndrome after bariatric surgery: case report. Revista Brasileira de Anestesiologia, 56(4), 408-412."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 46-year-old woman presents to the ED hemodynamically stable after a high-speed MVC. A CT scan of the abdomen and pelvis reveals a right perinephric hematoma with a deep laceration in the inferior aspect of the renal parenchyma with some localized urine extravasation within the collecting system. Management consists of:",
      "options": [
        "A. Observation",
        "B. Right nephrectomy",
        "C. Attempt at partial nephrectomy",
        "D. Attempt at renal salvage with suture repair of the parenchyma",
        "E. Nephrostomy tube"
      ],
      "answer": "A",
      "explanation": "- Kidney injuries are graded I to V.\n- Grade I: contusion or subcapsular, nonexpanding hematoma.\n- Grade V: completely shattered kidney or avulsion of the renal hilum.\n- Grade I and II are minor injuries.\n- Grade III: deep lacerations not involving the collecting system.\n- Grade IV: lacerations extending into the collecting system or injury to the main renal artery.\n- The vast majority (approximately 90%) of blunt renal injuries can be managed nonoperatively.\n- This patient's injury is Grade IV.\n- In a hemodynamically stable patient, Grade IV blunt renal injury can be managed nonoperatively.\n- Most urinary extravasation resolves spontaneously.\n- If extravasation persists or the patient develops sepsis, treatment involves a combination of endourologic and percutaneous techniques (e.g., percutaneous nephrostomy).\n- Exploration of a Zone II or perinephric retroperitoneal hematoma in blunt trauma, without hemodynamic instability or rapid expansion/pulsation, is not indicated.\n- For penetrating trauma, in the absence of preoperative imaging, a perinephric retroperitoneal hematoma mandates exploration.\n- If nephrectomy is indicated, palpation for a contralateral kidney should precede it.\n- Surgery is indicated for vascular or renal pedicle injuries or a completely shattered kidney.\n- References: Tinkoff, G., Esposito, T. J., & Reed, J., et al. (2008). American Association for the Surgery of Trauma Organ Injury Scale I: spleen, liver, and kidney, validation based on the National Trauma Data Bank. Journal of the American College of Surgeons, 207(5), 646-655. Kuan, J. K., Wright, J. L., & Nathens, A. B., et al. (2006). American Association for the Surgery of Trauma Organ Injury Scale for kidney injuries predicts nephrectomy, dialysis, and death in patients with blunt injury and nephrectomy for penetrating injuries. Journal of Traumatology, 60(2),351-356."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "A 28-year-old male presents to the ED 2 days after being involved in a bar fight where he punched another patron in the mouth. His right hand appears to have a soft-tissue infection. Which of the following is the most likely pathogen?",
      "options": [
        "A. Treponema pallidum",
        "B. Prevotella spp.",
        "C. Hepatitis C",
        "D. Propionibacterium spp.",
        "E. Bacteroides"
      ],
      "answer": "B",
      "explanation": "- A patient who punches another person in the mouth is at risk for a human bite wound.\n- The most common organisms isolated from infected human bites are Streptococcus, followed by Staphylococcus.\n- Other common organisms include Eikenella, Fusobacterium, Prevotella, and Porphyromonas.\n- Treponema pallidum (syphilis) transmission by human bite is rare.\n- Propionibacterium and Bacteroides are anaerobic organisms unlikely to be transmitted by a human bite.\n- Hepatitis C is a leading cause of liver disease in the United States, but transmission from infected persons is rare; Hepatitis B is more likely to be transmitted.\n- References: Talan, D. A., Abrahamian, F. M., & Emergency Medicine Human Bite Infection Study Group. (2003). Clinical presentation and bacteriologic analysis of infected human bites in patients presenting to emergency departments. Clinical Infectious Diseases, 37(11), 1481-1489. Stevens, D. L., Bisno, A. L., & Changers, H. F., et al. (2014). Practice guidelines for the diagnosis and management of skin and soft tissue infections: 2014 update by the Infectious Diseases Society of America. Clinical Infectious Diseases, 59(2), 147-159."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "A 45-year-old male arrives at the ED with a GSW to the head. He has declined organ donation on his driver's license registration which is several years old. He is declared to be brain dead the following morning. His parents and sister fly in from out of state. His sister has end-stage renal disease and would like to receive her brother's kidney because she states he was tested \"and found to be a match.\" His parents are saddened by their son's passing but agree that their daughter should receive the kidney and that their son would have wanted this. The treating physician should:",
      "options": [
        "A. Arrange for organ harvesting and coordinate with a transplant surgeon to perform the kidney transplant",
        "B. Contact an organ donation service to facilitate a discussion with the family",
        "C. Remove the patient from ventilator support",
        "D. Administer a lethal dose of morphine sulfate",
        "E. Consult the hospital ethics committee"
      ],
      "answer": "B",
      "explanation": "- Brain death is a medical and legal determination of death, diagnosed by standardized tests (electroencephalography, nucleotide brain scan, apnea test, clinical assessment including brain stem reflexes).\n- Supporting a brain-dead patient on a ventilator for a limited time helps the family cope and facilitates organ donation.\n- Organ donation should always be facilitated by an organ donation service, not by the physician.\n- If the patient is not registered for or against organ donation, the decision should be guided by the standard of substituted judgment, where a family member or close friend makes the decision based on the patient's known wishes or preferences.\n- Any inconsistencies regarding the patient's wishes for organ donation should be properly investigated by an organ donation service.\n- Administering a lethal dose of morphine sulfate or euthanasia is only practiced in several states and requires an awake patient's consent.\n- Consulting the hospital ethics committee would not be appropriate in this situation.\n- Reference: Emanuel, E. J., & Emanuel, L. L. (1992). Proxy decision making for incompetent patients: an ethical and empirical analysis. JAMA, 267(15), 2067-2071."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 30-year-old male presents to the ED after a high-speed MVC complaining of chest pain. He is found to have a right-sided hemothorax and a tube thoracostomy (chest tube) is performed. After initial insertion, 400 cc of blood is drained. The following day he continues to have evidence of retained hemothorax on chest x-ray. The next step is:",
      "options": [
        "A. Continue with current chest tube",
        "B. Remove the current chest tube and insert a new chest tube one intercostal space above",
        "C. Place a second chest tube",
        "D. VATS",
        "E. Start IV antibiotics"
      ],
      "answer": "D",
      "explanation": "- Hemothorax is treated similarly to pneumothorax with tube thoracostomy, but a larger-bore chest tube (36 French) should be used.\n- Indications for thoracotomy: initial chest tube drainage >1500 cc or >250 cc/hour for 3 hours.\n- In other cases, chest tube drainage should continue with daily CXR.\n- The Eastern Association for the Surgery of Trauma (EAST) discourages placing a second chest tube for retained hemothorax due to increased risk of fibrothorax.\n- Patients with retained hemothorax are better served with early Video-Assisted Thoracoscopic Surgery (VATS).\n- A prospective randomized trial demonstrated that patients undergoing VATS for retained hemothorax had shorter hospital stays and lower hospital costs.\n- There is no indication of infection, so IV antibiotics are not indicated.\n- Reference: Mowery, N. T., Gunter, O. L., & Collier, B. R., et al. (2011). Practice management guidelines for management of hemothorax and occult pneumothorax. Journal of Traumatology, 70(2), 510-518."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "A 45-year-old male presents to the ED following a high-speed MVC with evidence of severe facial fractures and bilateral lower extremity deformities. Paramedics report a significant amount of blood in his airway, and the patient's respirations are being assisted with bag-valve mask ventilation. On exam, the patient is hemodynamically stable with an O2 saturation of 85% on a non-rebreather mask and GCS is 7. Attempts at rapid sequence intubation are unsuccessful because of the inability to visualize the airway as a result of ongoing bleeding. Attempts at bagging become more difficult. Which of the following is the next best step in management?",
      "options": [
        "A. Needle cricothyroidotomy",
        "B. Nasotracheal intubation",
        "C. Surgical cricothyroidotomy",
        "D. Fiberoptic bronchoscopic-assisted intubation",
        "E. Apneic oxygenation"
      ],
      "answer": "C",
      "explanation": "- In the uncommon scenario of a patient who \"cannot be intubated nor ventilated,\" a surgical cricothyroidotomy should be immediately performed.\n- Surgical cricothyroidotomy involves a transverse or vertical incision of the skin directly over the cricothyroid membrane, followed by a transverse incision through the membrane.\n- A vertical skin incision is preferred to avoid injuring the anterior jugular veins.\n- The airway should be dilated with a finger to allow insertion of an appropriately sized endotracheal or tracheostomy tube (6 Fr or smaller).\n- Needle cricothyroidotomy is traditionally reserved for children under 12 years old due to the risk of subglottic stenosis with surgical cricothyroidotomy.\n- A high-jet insufflator is typically required for temporary oxygenation after needle cricothyroidotomy.\n- Nasotracheal intubation requires spontaneous breathing and is contraindicated in patients with severe maxillofacial fractures or potential cribriform plate fracture.\n- Fiberoptic bronchoscopy is unlikely to be beneficial due to significant bleeding and is limited by setup, equipment, and availability in emergent trauma.\n- Apneic oxygenation provides supplemental high-flow oxygenation via nasal cannula in addition to standard preoxygenation, potentially decreasing desaturation during intubation, but it is not a definitive airway replacement.\n- Reference: American College of Surgeons Committee on Trauma. (2012). Advanced trauma life support program for doctors (9th ed.). Chicago, IL: American College of Surgeons."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A 36-year-old male is brought to the ED after a high-speed head-on MVC with significant front-end damage to the vehicle. Extrication of the patient took nearly 4 hours. On arrival, the patient is complaining of left-sided chest and abdominal pain. His systolic blood pressure is 80 mm Hg and heart rate is 120 beats per minute. Breath sounds are present and equal bilaterally. Abdominal exam reveals significant tenderness to palpation. Plain films of the chest and pelvis show a widened mediastinum (10 cm). Pelvic x-ray is normal. FAST is positive for free fluid in the abdomen. Following a 2-L crystalloid bolus, the patient's blood pressure is unchanged. Which of the following is the most appropriate next step in management?",
      "options": [
        "A. Administer a bolus of tranexamic acid (TXA) and continue infusion on the way to the OR for an exploratory laparotomy",
        "B. Take patient to the OR for an exploratory laparotomy and provide a bolus of TXA intraoperatively",
        "C. Take patient to the OR for an exploratory laparotomy without administration of TXA",
        "D. Transthoracic echocardiography",
        "E. Endovascular repair of thoracic injury followed by exploratory laparotomy"
      ],
      "answer": "C",
      "explanation": "- This patient is hemodynamically unstable with a positive abdominal FAST after blunt trauma and is a nonresponder to fluid resuscitation.\n- Patients in hemorrhagic shock are classified as responders, transient responders, or nonresponders based on vital signs improvement after fluid challenge.\n- Transient and nonresponders should be considered to have ongoing blood loss.\n- Given these findings, the patient should be taken to the operating room for an exploratory laparotomy.\n- Shock and peritonitis are absolute indications for laparotomy in trauma patients.\n- The CRASH-2 trial demonstrated that early administration of tranexamic acid (TXA) in blunt trauma reduced all-cause mortality and overall blood transfusion needs by 33%.\n- TXA is administered as a bolus with continued infusion for up to 12 hours; its benefit is best seen if given within the first hour and is non-existent after three hours, potentially increasing mortality secondary to bleeding if given later.\n- Chest pain and widened mediastinum with high-speed deceleration injury are concerning for blunt aortic injury.\n- Management of traumatic blunt aortic injury typically begins with blood pressure and pain control.\n- Studies comparing immediate versus delayed endovascular stenting for blunt aortic injuries have shown improved mortality with delayed repair.\n- If an aortic transection or severe aortic injury had occurred, the patient would likely have expired in the field.\n- The most likely cause of imminent death in a hemodynamically unstable patient with a positive FAST scan is bleeding in the abdomen.\n- Transthoracic echocardiography can provide information on cardiac function and volume status, but it is not indicated given the patient's ongoing hemodynamic instability.\n- Due to ongoing shock and nonresponsiveness to crystalloid, administration of blood products and balanced resuscitation, in conjunction with hemorrhage control, should be initiated.\n- References: American College of Surgeons Committee on Trauma. (2012). Advanced trauma life support program for doctors (9th ed.). Chicago, IL: American College of Surgeons. CRASH-2 Trial Collaborators, Shakur, H., Roberts, I., & Bautista, R., et al. (2010). Effects of tranexamic acid on death, vascular occlusive events, and blood transfusion in trauma patients with significant haemorrhage (CRASH-2): a randomised, placebo-controlled trial. Lancet, 376(9734), 23-32. Demetriades, D., Velmahos, G. C., & Scalea, T. M., et al. (2009). Blunt traumatic thoracic aortic injuries: early or delayed repair--results of an American Association for the Surgery of Trauma prospective study. Journal of Traumatology, 66(4), 967-973. Henry, D. A., Carless, P. A., & Moxey, A. J., et al. (2007). Antifibrinolytic use for minimising perioperative allogeneic blood transfusion. Cochrane Database Syst Rev, 4 (CD001886)."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "A 22-year-old man sustains a GSW to the right leg below the knee. Vital signs are within normal limits. Physical exam reveals a single GSW to the lateral leg with minimal swelling and no obvious deformity. Pulse exam reveals diminished pedal pulses on the right in comparison to the left. Which of the following is the most appropriate next step in management?",
      "options": [
        "A. CT angiogram",
        "B. OR and angiogram",
        "C. Administration of IV papaverine",
        "D. Formal angiogram",
        "E. Arterial-pressure index (API)"
      ],
      "answer": "E",
      "explanation": "- Penetrating extremity trauma can be accompanied by hard or soft signs of vascular injury.\n- Hard signs (shock, pulsatile bleeding, expanding/pulsatile hematoma, palpable thrill or bruit, absent distal pulses) warrant immediate operative exploration.\n- Soft signs (diminished pulse, proximity of wounds to vessels, hematomas, significant blood loss) suggest potential vascular injury and require further diagnostic testing.\n- Given the absence of hard signs and stable vital signs, this patient can undergo further diagnostic workup and does not require immediate operation.\n- Ankle-brachial index (ABI) is sensitive and specific for extremity vascular injuries and does not require ionizing radiation or contrast.\n- An ABI < 0.9 suggests vascular injury and prompts a CT angiography.\n- A negative predictive value of 99% for significant vascular injury exists when ABI is >0.9.\n- Arterial-pressure index (API) is an alternative to ABI and is used similarly.\n- Arterial vasospasm can occur following proximity trauma, but this diagnosis is usually one of exclusion and does not warrant immediate papaverine treatment.\n- References: Johansen, K., Lynch, K., & Paun, M., et al. (1991). Non-invasive vascular tests reliably exclude occult arterial trauma in injured extremities. Journal of Traumatology, 31(4), 515-522. Feliciano, D.V., Moore, F. A, & Moore, E. E., et al. (2011). Evaluation and management of peripheral vascular injury. Part 1. Western Trauma Association/critical decisions in trauma. Journal of Traumatology, 70(6), 1551-1556. Feliciano, D. V., Moore, E. E., & West, M. A., et al. (2013). Western Trauma Association critical decisions in trauma: evaluation and management of peripheral vascular injury, part II. Journal of Traumatology Acute Care Surgery, 75(3), 391–397."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "A 60-year-old male presents to the ED following a MVC in which he was a restrained passenger. CT of the abdomen reveals an isolated grade III splenic injury with active extravasation and a low volume hemoperitoneum. The initial systolic blood pressure was 90 mm Hg, but it has now improved to 110 mm Hg after 2 L of normal saline. Hemoglobin is stable at 12 g/dL. Which of the following is the best next step in management?",
      "options": [
        "A. Laparotomy with splenectomy",
        "B. Laparotomy with attempt at splenorrhaphy",
        "C. Angiography with embolization",
        "D. Serial abdominal examinations and hematocrits in the ICU",
        "E. Laparoscopic splenectomy"
      ],
      "answer": "C",
      "explanation": "- Nonoperative management (NOM) of solid organ injuries is a well-accepted treatment modality.\n- Criteria for NOM of splenic injuries include:\n    - No other indications for laparotomy (peritonitis, hemorrhagic shock, free air on CT).\n    - Evaluable patient (absence of complete high spinal cord injury or intoxication).\n    - Appropriate resources and personnel available.\n- Traumatic brain injury or older age do not preclude NOM.\n- Increasing hemoperitoneum and higher AAST injury grades are associated with higher NOM failure rates.\n- Angiography should be considered for patients with AAST injury grade >III, presence of a contrast blush, moderate hemoperitoneum, or evidence of ongoing splenic bleeding (requiring >2 units of packed red blood cells [PRBC]).\n- Patients with a pseudoaneurysm or suspected arteriovenous fistula should also undergo selective angiography and embolization if hemodynamically stable.\n- Serial abdominal exams and trending hematocrit are inappropriate in the presence of active extravasation of contrast.\n- Laparoscopic and open splenectomy are reasonable options for hemodynamically stable patients meeting surgical indications.\n- Attempts at splenic preservation via splenorrhaphy are also reasonable for hemodynamically stable patients.\n- Reference: Stassen, N. A., Bhullar, I., & Cheng, J. D., et al. (2012). Selective nonoperative management of blunt splenic injury: An Eastern Association for the Surgery of Trauma practice management guideline. Journal of Traumatology Acute Care Surgery, 73(5 Suppl. 4), S294-S300."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "An 18-year-old male is brought to the ED following a motorcycle crash. He is hemodynamically stable and complains of severe pelvic pain. Examination reveals blood at the urethral meatus, scrotal ecchymosis, and a scrotal hematoma. A pelvic x-ray confirms the presence of a pelvic fracture. Which of the following is the most appropriate next step in diagnosis?",
      "options": [
        "A. Insertion of a Foley catheter",
        "B. CT abdomen with IV contrast",
        "C. Retrograde urethrogram (RUG)",
        "D. Cystogram",
        "E. Intravenous pyelogram"
      ],
      "answer": "C",
      "explanation": "- The physical exam findings (blood at the urethral meatus, scrotal ecchymosis, and scrotal hematoma) are concerning for a urethral injury.\n- The most common location of urethral injury is the prostatic urethra.\n- Genitourinary injuries occur in up to 15% of patients with pelvic fractures.\n- Head injury is the most common associated injury with pelvic fractures.\n- Clinical suspicion of a urethral injury warrants performing a retrograde urethrogram (RUG) to identify its presence and location.\n- Blind insertion of a Foley catheter is contraindicated in this patient.\n- CT abdomen with IV contrast is helpful for identifying kidney injuries, and delayed acquisition images can aid in identifying ureteral or bladder injuries.\n- A CT cystogram accurately diagnoses both extraperitoneal and intraperitoneal bladder injuries.\n- Intravenous pyelogram is used to identify renal injuries and is rarely performed.\n- Management of urethral injuries depends on the location and severity of injury, as well as associated injuries and surgical expertise.\n- Reference: Johnsen, N. V., Dmochowski, R. R., & Mock, S., et al. (2015). Primary endoscopic realignment of urethral disruption injuries-a double-edged sword? The Journal of Urology, 194(4), 1022-1026."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "A 90-year-old female presents to the ED following a ground level fall. Her GCS is 13 (E4 V4 M5). The patient has a known history of atrial fibrillation and is currently prescribed warfarin. Laboratory results demonstrate an INR of 4.0. A CT scan of the head reveals a right subdural hematoma with frontal intraparenchymal contusions. Which of the following is the most appropriate next step in management?",
      "options": [
        "A. Insertion of an intracranial pressure monitor",
        "B. Administration of fresh frozen plasma",
        "C. Administration of prothrombin complex concentrate (PCC)",
        "D. Repeat head CT in 4 to 6 hours",
        "E. Administration of activated recombinant factor VII"
      ],
      "answer": "C",
      "explanation": "- Given the patient's known anticoagulation status (warfarin), supratherapeutic INR (4.0), and potentially life-threatening hemorrhage (subdural hematoma, contusions), urgent reversal of warfarin with prothrombin complex concentrate (PCC) is necessary.\n- PCC is an inactivated concentrate of proteins C and S, and factors II, IX, and X, with variable amounts of factor VII.\n- 4-factor PCC (with normal factor VII) is superior to 3-factor PCC (low factor VII), which may require additional fresh frozen plasma (FFP) for full reversal.\n- PCC has a clotting factor concentration approximately 25 times higher than normal plasma.\n- PCC is an effective and rapid treatment for warfarin-associated bleeding, with similar efficacy to plasma.\n- PCC offers advantages over FFP: it does not need to be thawed, has a more rapid INR correction, and can be infused faster with less volume (ideal for patients with ESRD or CHF).\n- Recombinant factor VIIa lowers INR faster than PCC, but concerns exist regarding potential thrombosis (stroke, deep venous thrombosis) and high cost.\n- Insertion of an intracranial pressure monitor may be considered if GCS drops to ≤8 or if clinical signs of herniation (e.g., blown pupil) develop.\n- A repeat head CT will likely be useful, but this decision should be made after consultation with the neurosurgical service.\n- Reference: Patanwala, A. E., Acquisto, N. M., & Erstad, B. L. (2011). Prothrombin complex concentrate for critical bleeding. The Annals of Pharmacotherapy, 45(7-8), 990-999."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "A 70-kg adult male is struck by a motor vehicle and sustains bilateral femur fractures with an estimated blood loss of 2 L. Which of the following statements is true of this patient?",
      "options": [
        "A. The patient is in Class II hemorrhagic shock.",
        "B. Tachycardia and tachypnea would be uncommon in this patient.",
        "C. Urine output should not be affected.",
        "D. Pulse pressure will remain unchanged.",
        "E. His estimated blood loss is 30% to 40% of his blood volume."
      ],
      "answer": "E",
      "explanation": "- Hemorrhagic shock is classified into four classes based on signs and symptoms of hypoperfusion.\n- Class I hemorrhagic shock: up to 750 mL blood loss (15% blood volume).\n- Class II hemorrhagic shock: 750–1500 mL blood loss (15–30% blood volume); usually presents with tachycardia and decreased pulse pressure.\n- Class III hemorrhagic shock: 1500–2000 mL blood loss (30–40% blood volume).\n- Class IV hemorrhagic shock: >40% or >2000 mL blood loss.\n- Patients in Class III and IV typically present with confusion and anxiety, increased heart rate, tachypnea, decreased blood pressure, decreased pulse pressure, and decreased urine output.\n- For a 70-kg male, 2 L of blood loss represents approximately 30–40% of his total blood volume (assuming ~5L total blood volume).\n- Reference: American College of Surgeons Committee on Trauma. (2012). Advanced trauma life support program for doctors (9th ed.). Chicago, IL: American College of Surgeons."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "A 28-year-old man sustains a GSW to the right supraclavicular area with no exit wound. On arrival, his systolic blood pressure is 60 mm Hg and he is confused and combative. Which of the following is the most appropriate next step in the management?",
      "options": [
        "A. Endotracheal intubation",
        "B. Right tube thoracostomy",
        "C. Normal saline bolus",
        "D. Resuscitative (ED) thoracotomy",
        "E. Median sternotomy"
      ],
      "answer": "A",
      "explanation": "- Initial management of all trauma patients begins with the primary survey: Airway (with cervical spine precautions); Breathing; Circulation (with hemorrhage control); Disability; and Exposure/Environment.\n- The first crucial step is to assess airway patency and provide supplemental oxygen.\n- Simultaneously, two large-bore IV catheters should be inserted, and aggressive resuscitation with normal saline or lactated Ringer's solution should be initiated.\n- Some medical centers now provide initial resuscitation with blood products for trauma patients in shock.\n- The injury location (zone I of the neck) suggests a high suspicion for a right subclavian or innominate artery injury.\n- Given the patient's hemodynamic instability (systolic BP 60 mm Hg) and altered mental status (confused and combative), establishing an airway via endotracheal intubation is the most appropriate immediate step.\n- If the patient's condition warrants, the next step after airway and circulation would be to take the patient directly to the operating room.\n- Proximal control of a right-sided injury is best achieved via a median sternotomy.\n- Manual compression of the bullet hole is ineffective for exsanguinating bleeding; temporary tamponade can be achieved with a Foley balloon.\n- Thoracostomy is indicated for pneumothorax or hemothorax seen on imaging or suggested by primary survey.\n- This patient has not had a cardiopulmonary arrest and does not meet indications for ED thoracotomy.\n- References: American College of Surgeons Committee on Trauma. (2012). Advanced trauma life support program for doctors (9th ed.). Chicago, IL: American College of Surgeons. Demetriades, D., Chahwan, S., & Gomez, H., et al. (1999). Penetrating injuries to the subclavian and axillary vessels. Journal of the American College of Surgeons, 188(3), 290-295."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "A 30-year-old man sustains a GSW to the left mid neck. On arrival at the ED, his systolic blood pressure is 70 mm Hg, heart rate is 120/ min, and his GCS is 5. An airway is immediately established and IV fluids are given but his blood pressure remains low. There is no hematoma in the neck, no active bleeding, and no bruit. The next most appropriate step in management is:",
      "options": [
        "A. Head CT scan",
        "B. CT angiography of the neck",
        "C. Standard four-vessel arteriography",
        "D. Surgical neck exploration",
        "E. Triple endoscopy"
      ],
      "answer": "D",
      "explanation": "- The first step in managing penetrating neck trauma is establishing the airway, especially with an expanding hematoma or depressed level of consciousness.\n- Next, determine if the patient has \"hard signs\" of vascular injury: rapidly expanding or pulsatile hematoma, visible exsanguination, palpable thrill or audible bruit, or dense neurologic deficit (as indicated by GCS 5).\n- The presence of a hard sign mandates immediate transfer to the operating room for neck exploration.\n- In the absence of hard signs, arteriography of the neck vessels would be the next step; CT angiography has largely replaced formal arteriography due to its ease and rapidity.\n- Assessment for injuries to the aerodigestive tract (triple endoscopy and/or esophagography) and cervical spine is also necessary.\n- Treatment of penetrating carotid artery injuries remains controversial, especially in comatose patients.\n- Repair of a carotid artery injury is recommended for neurologic deficit if it may improve function; ligation typically does not.\n- If the carotid artery is thrombosed at surgery, repair is recommended if back-bleeding from the internal carotid artery is obtained after resecting the injured segment.\n- Repair can be achieved by arteriorrhaphy, primary reanastomosis, or interposition graft (saphenous vein preferred).\n- If a graft is needed, a temporary shunt should be inserted during vein harvesting.\n- If the patient is unstable, the shunt can be placed inside the polytetrafluoroethylene graft to maintain cerebral perfusion.\n- After repair and patient stabilization, the bullet should be located via radiograph of the head, neck, and chest. Head CT scan can be considered if indicated.\n- Reference: Burlew, C. C., Moore, E. E., & Moore, F. A., et al. (2012). Western Trauma Association critical decisions in trauma: resuscitative thoracotomy. Journal of Traumatology Acute Care Surgery, 73(6),1359–1363. Seamon, M. J., Haut, E. R., Van Arendonk, K., et al. (2015). An evidence-based approach to patient selection for emergency department thoracotomy: a practice management guideline from the Eastern Association for the Surgery of Trauma. Journal of Traumatology Acute Care Surgery, 79(1), 159–173."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "Which of the following is the best indication for resuscitative (ED) thoracotomy?",
      "options": [
        "A. Severe blunt abdominal and head trauma with sudden arrest in the ED",
        "B. Abdominal stab wound with no signs of life (SOL) in the field, cardiopulmonary resuscitation (CPR) en route",
        "C. Blunt trauma with loss of pulse in the field, CPR en route",
        "D. Stab wound to chest with agonal breathing on transport, no pulse in ED",
        "E. GSW to abdomen with asystole as presenting rhythm and no pericardial tamponade on FAST"
      ],
      "answer": "D",
      "explanation": "- Resuscitative thoracotomy (EDT) is a potentially lifesaving procedure with evolving indications.\n- Outcomes are better for:\n    - Patients with signs of life (SOL) vs. no SOL.\n    - Penetrating trauma vs. blunt trauma.\n    - Chest trauma vs. abdominal trauma.\n    - Isolated injury vs. multiple injuries.\n    - No head injury vs. head injury.\n    - Short CPR duration vs. long.\n    - Stab wounds vs. GSW.\n- The best scenario for EDT is an isolated stab wound to the chest with SOL (pooled survival data ~21%). Such patients are more likely to have arrested due to cardiac tamponade rather than exsanguinating hemorrhage.\n- Conversely, for blunt trauma without SOL, survival is only ~0.7%.\n- Signs of life (SOL) include: agonal respirations, cardiac electrical activity, palpable pulse, measurable blood pressure, spontaneous movement, or pupillary reactivity.\n- The benefit of EDT is clear for SOL and penetrating chest trauma.\n- Less compelling but potentially beneficial indications include: penetrating chest trauma without SOL, penetrating extrathoracic injury (with or without SOL), and blunt trauma with SOL.\n- There is no benefit for blunt trauma with no SOL.\n- References: Burlew, C. C., Moore, E. E., & Moore, F. A., et al. (2012). Western Trauma Association critical decisions in trauma: resuscitative thoracotomy. Journal of Traumatology Acute Care Surgery, 73(6),1359–1363. Seamon, M. J., Haut, E. R., Van Arendonk, K., et al. (2015). An evidence-based approach to patient selection for emergency department thoracotomy: a practice management guideline from the Eastern Association for the Surgery of Trauma. Journal of Traumatology Acute Care Surgery, 79(1), 159–173."
    },
    {
      "id": 32,
      "question_type": "mcq",
      "question": "An 11-month-old boy presents to the ED with hypotension after being involved in a MVC. He has obvious deformities of both legs below his knees. Numerous attempts are made to establish venous access at the antecubital fossa without success. The best option for establishing access for fluid administration would be:",
      "options": [
        "A. Internal jugular central line",
        "B. Distal saphenous vein cutdown",
        "C. Femoral vein central line",
        "D. Intraosseous (IO) cannulation of the proximal tibia",
        "E. IO cannulation of the distal femur"
      ],
      "answer": "E",
      "explanation": "- The preferred access for young children and infants following trauma is via the peripheral percutaneous route (antecubital fossa or saphenous vein at the ankle).\n- After two unsuccessful attempts, intraosseous (IO) infusion via a bone marrow needle (18 gauge in infants, 15 gauge in young children) should be considered.\n- IO cannulation of the proximal tibia provides good short-term access for resuscitation by targeting the noncollapsible veins of the medullary sinus.\n- The optimal site of insertion for the tibia is the anteromedial tibia, 2 to 3 cm below the tibial tuberosity, angled away from growth plates.\n- If obvious deformities are present in the tibiae, the next location for IO cannulation is the distal femur, just above the femoral condyles.\n- In adults, sternal IO access is preferred, followed by the tibia.\n- Serum electrolytes, blood gases, and type and cross can all be performed using blood from IO access.\n- Distal saphenous vein cutdown is an option for children aged 1 to 6 years, but it is challenging and not appropriate for infants with obvious leg deformity.\n- Percutaneous femoral vein cannulation is an alternative for hypovolemic pediatric patients younger than 6 years, but it carries an increased risk of venous thrombosis and is challenging in infants.\n- Subclavian and internal jugular central lines are difficult to perform in small children in a trauma setting and are associated with increased iatrogenic injury risk.\n- The IO cannula should be removed expeditiously (within 24 hours) due to the potential risk of infectious complications, including osteomyelitis.\n- Extremity compartment syndrome is another potential complication of IO infusion.\n- References: Cullen, P. M. (2011). Intraosseous cannulation in children. Pediatric Critical Care, 13(1), 28-30. Pasley, J., Miller, C., & DuBose, J., et al. (2015). Intraosseous infusion rates under high pressure: a cadaveric comparison of anatomic sites. Journal of Traumatology Acute Care Surgery, 78(2), 295-299."
    },
    {
      "id": 33,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the pregnant trauma patient?",
      "options": [
        "A. Blood volume increases proportionally less than red blood cell volume.",
        "B. A pregnant patient tends to have a mild respiratory acidosis.",
        "C. Use of radiographs is unsafe for the fetus in the third trimester.",
        "D. The 2,3-diphosphoglycerate level is increased.",
        "E. The glomerular filtration rate decreases."
      ],
      "answer": "D",
      "explanation": "- In pregnant patients, blood volume increases more than red cell volume.\n- Blood volume increases by approximately 50% as term approaches, while red cell volume increases by approximately 30%, resulting in functional hemodilution and physiologic anemia of pregnancy.\n- Pregnant patients are less likely to manifest signs of blood loss such as tachycardia and hypotension; if these signs are present, they indicate a more severe blood loss (1500–2000 mL).\n- Pregnant patients have increased tidal volume and minute ventilation to increase oxygen release to the fetus, resulting in a mild respiratory alkalosis (Pco2 in the 27 to 32 range).\n- Oxygen consumption is increased, and functional residual capacity is decreased.\n- The 2,3-diphosphoglycerate level is increased to enhance oxygen release to the fetus.\n- These physiologic changes result in less pulmonary reserve in an acutely ill pregnant patient.\n- Radiographs are generally considered safe for the fetus after the 20th week of gestation.\n- The glomerular filtration rate increases, leading to a decrease in serum creatinine.\n- The gravid uterus can compress the IVC, causing decreased venous return; pregnant patients should be placed in the left lateral position at approximately 15 degrees.\n- Pregnant patients are more prone to aspiration, so early NG tube decompression is important.\n- Progressive stretching of the peritoneum leads to desensitization, making pregnant patients less likely to demonstrate peritoneal signs.\n- Reference: Shah, A. J., & Kilcline, B. (2003). Trauma in pregnancy. Emergency Medicine Clinics of North America, 21(3), 615–629."
    },
    {
      "id": 34,
      "question_type": "mcq",
      "question": "A 30-year-old man sustains a GSW to the right chest. His blood pressure in the emergency department is 70/40 mm Hg. A chest tube is placed in the right chest with 500 mL of initial output. A follow-up chest radiograph reveals a complete whiteout of the right lung. The patient is taken to the operating room and a right thoracotomy is performed. On evaluation of the right lung, there is a through-and-through injury to the right lower lobe that appears to have an active air leak and ongoing bleeding. Surgical management should consist of:",
      "options": [
        "A. Formal right lower lobectomy",
        "B. Pneumonectomy",
        "C. Closure of both the anterior and posterior parenchymal defects with interrupted sutures",
        "D. Pulmonary tractotomy",
        "E. Ligation of the right lower lobe pulmonary artery"
      ],
      "answer": "D",
      "explanation": "- Historically, the described injury would have been managed with a formal lobectomy.\n- Pulmonary tractotomy is now used as a less aggressive alternative.\n- The technique involves using a linear stapling device inserted directly into the injured bullet tract.\n- Two hemostatic staple lines are created, and the lung is divided between them.\n- This allows direct access to bleeding vessels and leaking bronchi within the parenchyma, which can then be oversewn with a polypropylene monofilament.\n- Lobectomy is a better choice for a completely devascularized or destroyed lobe.\n- Pneumonectomy is rarely indicated in trauma and is associated with an 80% mortality rate.\n- Ligation of a lobar pulmonary artery carries a high rate of morbidity.\n- Reference: Kim, D. Y., & Coimbra, R. (2014). Thoracic damage control. In S. Di Saverio, G. Tugnoli, & F. Catena, et al. (Eds.). Trauma surgery, Vol. 2: thoracic and abdominal trauma. Milan, Italy: Springer-Verlag. Cothren, C., Moore, E., & Biffl, W., et al. (2002). Lung-sparing techniques are associated with improved outcome compared with anatomic resection for severe lung injuries. Journal of Traumatology, 53(3), 483-487."
    },
    {
      "id": 35,
      "question_type": "mcq",
      "question": "Which of the following is true regarding flail chest?",
      "options": [
        "A. The initial chest radiograph provides a useful predictor of subsequent pulmonary insufficiency.",
        "B. Respiratory failure is primarily caused by the paradoxical motion of the chest wall.",
        "C. Operative chest wall stabilization in patients without pulmonary contusion may shorten the length of intubation.",
        "D. Aggressive fluid resuscitation is an important management adjunct.",
        "E. Once the diagnosis is established, the patient should be intubated."
      ],
      "answer": "C",
      "explanation": "- Flail chest occurs when two or more ribs are fractured in at least two locations.\n- Paradoxical movement of the free-floating chest wall segment is typically not sufficient alone to compromise ventilation.\n- Respiratory failure is primarily caused by pain and splinting, combined with underlying pulmonary contusions, leading to hypoxemia and hypercarbia due to shunting and ineffective ventilation.\n- Most patients can be managed without intubation.\n- Respiratory failure often does not occur immediately, and frequent re-evaluation is warranted.\n- The initial chest radiograph usually underestimates the degree of pulmonary contusion, which tends to evolve with time and with fluid resuscitation.\n- Intravenous fluid administration should be limited, as overzealous resuscitation can result in blossoming of pulmonary contusions.\n- The most important aspect of flail chest treatment is pain control, using patient-controlled analgesia, oral pain medications, and continuous epidural catheters.\n- While historically non-operative, recent literature indicates that internal fixation of the chest wall in select patients *without* pulmonary contusion can decrease intubation time, reduce complications, and improve cosmetic and functional results.\n- Internal fixation does not seem beneficial in the presence of a pulmonary contusion.\n- Internal fixation should be considered for flail chest in patients already undergoing thoracotomy for intrathoracic injury, flail chest without pulmonary contusion, noticeable paradoxical movement during ventilator weaning, and severe chest wall deformity.\n- References: Voggenreiter, G., Neudeck, F., & Aufmkolk, M., et al. (1998). Operative chest wall stabilization in flail chest—outcomes of patients with or without pulmonary contusion, Journal of the American College of Surgeons, 187(2), 130-138. Leinicke, J. A., Elmore, L., & Freeman B. D., et al. (2013). Operative management of rib fractures in the setting of flail chest: a systematic review and meta-analysis. Annals of Surgery, 258(6), 914-921."
    },
    {
      "id": 36,
      "question_type": "mcq",
      "question": "Which of the following is true regarding blunt cardiac injury (BCI)?",
      "options": [
        "A. Creatine kinase-myocardial bound (CK-MB) enzyme determination lacks sensitivity.",
        "B. It commonly results in serious ventricular arrhythmias.",
        "C. It usually results in traumatic thrombosis of a coronary artery branch.",
        "D. Presence of a sternal fracture predicts the presence of BCI.",
        "E. It should be suspected in patients with transient sinus tachycardia."
      ],
      "answer": "A",
      "explanation": "- Blunt cardiac injury (BCI) should be suspected in anyone with severe blunt chest trauma.\n- Attempts to identify BCI and stratify severity using CK-MB, nuclear scans, and echocardiography have not been successful due to their lack of sensitivity.\n- ECG is the most commonly recommended tool for initial BCI diagnosis.\n- The presence of a sternal fracture is not a reliable marker for BCI.\n- A normal screening ECG has a negative predictive value of 95%.\n- Adding a normal cardiac troponin level increases the negative predictive value to 100%.\n- If a stable patient has an abnormal cardiac troponin level or ECG, they should be admitted for observation in a monitored bed; however, troponin level does not correlate with the risk of cardiac complications.\n- If the patient is unstable, an emergent echocardiogram should be performed.\n- If tamponade is seen, emergent sternotomy should be performed for suspected cardiac rupture.\n- Rarely, BCI can lead to coronary artery thrombosis, valvular disruption, or septal disruption.\n- In an unstable patient with BCI but no anatomic abnormality on echocardiography, invasive blood pressure monitoring with pressor support should be instituted.\n- Most patients with a diagnosis of myocardial contusion have a benign course, with very few developing arrhythmias or heart failure.\n- References: Velmahos, G., Karaiskakis, M., & Salim, A., et al. (2003). Normal electrocardiography and serum troponin I levels preclude the presence of clinically significant blunt cardiac injury. Journal of Traumatology, 54(1), 45-50. Clancy, K., Velopulos, C., & Bilaniuk, J., et al. (2015). Screening for blunt cardiac injury: an Eastern Association for the Surgery of Trauma practice management guideline. Journal of Traumatology Acute Care Surgery, 73(5), S301-S306."
    },
    {
      "id": 37,
      "question_type": "mcq",
      "question": "A 55-year-old man presents to the ED with a stab wound to the left chest just below the nipple. His blood pressure is 100/60 mm Hg, heart rate is 120 beats per minute, and his respiratory rate is 14 breaths per minute. GCS is 14. On exam, he has distended neck veins, heart sounds are muffled, and breath sounds are clear bilaterally. The next best step in the management is:",
      "options": [
        "A. Endotracheal intubation",
        "B. Left tube thoracostomy",
        "C. Pericardiocentesis",
        "D. FAST scan",
        "E. Median sternotomy"
      ],
      "answer": "D",
      "explanation": "- The patient's presentation is highly suggestive of cardiac injury and pericardial tamponade (distended neck veins, muffled heart sounds).\n- If the patient is protecting their airway, urgent intubation is not needed.\n- Positive pressure ventilation can further exacerbate tamponade physiology by decreasing RV preload, stroke volume, and cardiac output.\n- Tension pneumothorax and cardiac tamponade are the most common forms of obstructive shock following trauma, both presenting with distended neck veins and hypotension.\n- Tamponade is associated with Beck's triad (hypotension, distended neck veins, muffled heart sounds) and pulsus paradoxus, though these are not always reliably present.\n- Muffled heart sounds and normal breath sounds are highly suggestive of pericardial tamponade, not tension pneumothorax.\n- The next best step is an emergent FAST scan to look for pericardial fluid.\n- A positive FAST scan for pericardial fluid confirms tamponade, and the patient should be rapidly transported to the operating room.\n- If the patient decompensates suddenly before transport or FAST, a left anterolateral thoracotomy should be performed in the ED.\n- The pericardium should be opened longitudinally, carefully avoiding the phrenic nerve.\n- The clot should be removed, and the cardiac injury temporarily controlled with a finger, staples, or a temporary suture.\n- Insertion of Foley balloon catheters into the cardiac wound should generally be avoided as it tends to enlarge the wound.\n- References: Asensio, J. A., Berne, J. D., & Demetriades, D., et al. (1998). One hundred five penetrating cardiac injuries: a 2-year prospective evaluation. Journal of Traumatology, 44(6), 1073-1082. Asensio, J. A., Petrone, P., & Pereira, B., et al. (2009). Penetrating cardiac injuries: a historic perspective and fascinating trip through time. Journal of the American College of Surgeons, 208(3), 462-472."
    },
    {
      "id": 38,
      "question_type": "mcq",
      "question": "Exposure is most difficult for which of the following vessels?",
      "options": [
        "A. Innominate artery",
        "B. Proximal right subclavian artery",
        "C. Proximal left subclavian artery",
        "D. Proximal left common carotid artery",
        "E. Proximal vertebral artery"
      ],
      "answer": "C",
      "explanation": "- Exposure of the innominate, proximal right subclavian, and proximal right and left common carotid arteries is fairly straightforward via a median sternotomy.\n- Exposure of the proximal vertebral artery (at its take-off from the subclavian artery) is readily achieved with a supraclavicular incision, requiring division of the anterior scalene muscle and clavicular head of the sternocleidomastoid muscle, and protection of the phrenic nerve and, on the left side, avoidance of the thoracic duct.\n- Exposure of the mid portion of the vertebral artery is not readily feasible due to its travel through bony foramina.\n- Exposure of the proximal left subclavian artery presents a difficult challenge; it arises posteriorly from the aortic arch and is not readily approached with a median sternotomy.\n- The best exposure for the proximal left subclavian artery is an anterolateral thoracotomy at the third intercostal space.\n- Distal control can be achieved via a supraclavicular approach.\n- Occasionally, resection of the medial head of the clavicle and a partial median sternotomy are needed to connect the two horizontal incisions and raise a chest wall flap.\n- Ribs can also be cut laterally for a \"trapdoor thoracotomy\" to gain additional exposure.\n- Reference: Hoyt, D. B., Coimbra, R., & Potenza, B. M., et al. (2001). Anatomic exposures for vascular injuries. The Surgical Clinics of North America, 81(6),1299-1330."
    },
    {
      "id": 39,
      "question_type": "mcq",
      "question": "Which of the following surgical maneuvers is most correct to access the listed vessel?",
      "options": [
        "A. Left-sided medial visceral rotation or Mattox maneuver for the mid inferior vena cava (IVC)",
        "B. Transection of the neck of the pancreas for the superior mesenteric artery",
        "C. Right-sided medial visceral rotation or Cattell maneuver for the suprarenal aorta",
        "D. Kocher maneuver for the celiac axis",
        "E. Division of the right common iliac artery for the distal vena cava and common iliac vein bifurcation"
      ],
      "answer": "E",
      "explanation": "- The Cattell maneuver involves a right medial visceral rotation of the cecum and ascending colon by incising the peritoneal reflection at the white line of Toldt, useful for exposing right retroperitoneal structures like the IVC and right ureter.\n- Further cephalad mobilization and medial rotation of the duodenum (Kocher maneuver) additionally assists in exposing the suprarenal IVC below the liver. The Kocher maneuver is not useful for exposing the celiac axis.\n- The celiac axis is best exposed by combining a Mattox maneuver with division of the left crus of the diaphragm and division of the celiac plexus.\n- The Mattox maneuver consists of a left medial rotation of the descending colon, spleen, and/or kidney toward the midline.\n- Exposure of injuries to the distal IVC and iliac vein bifurcations can be exceedingly difficult.\n- Occasionally, division of the right common iliac artery is needed to expose and repair injuries in this area.\n- A primary repair of the iliac artery can then be performed.\n- In rare cases of massive bleeding, the junction of the superior mesenteric vein (not artery), splenic, and portal veins may need to be exposed by dividing the neck of the pancreas.\n- References: Asensio, J. A., Chahwan, S., & Hanpeter, D., et al. (2000). Operative management and outcome of 302 abdominal vascular injuries. American Journal of Surgery, 180(6), 528-533. Hoyt, D. B., Coimbra, R., & Potenza, B. M., et al. (2001). Anatomic exposures for vascular injuries. The Surgical Clinics of North America, 81(6), 1299-1330."
    },
    {
      "id": 40,
      "question_type": "mcq",
      "question": "In the setting of trauma, ligation is best tolerated for which of the following vessels?",
      "options": [
        "A. Right renal vein",
        "B. Left renal vein",
        "C. Brachial artery",
        "D. Popliteal artery",
        "E. Suprarenal IVC"
      ],
      "answer": "B",
      "explanation": "- Most veins can be safely ligated in traumatic injury.\n- Certain veins are less tolerant to ligation:\n    - Superior vena cava (risk of acute SVC syndrome).\n    - Renal veins close to the renal parenchyma (risk of inadequate kidney outflow).\n    - IVC above the renal veins (impairs outflow to both kidneys).\n    - IVC at the diaphragm (risk of acute Budd-Chiari syndrome).\n    - Portal vein (supplies 75% of liver blood flow).\n- An exception is ligation of the left renal vein close to the IVC, which is well tolerated because drainage can occur via the adrenal, gonadal, and iliolumbar veins.\n- Portal vein ligation has been successfully performed with adequate fluid administration to compensate for transient bowel edema, but it is associated with a higher mortality rate than repair.\n- IVC ligation below the renal veins is better tolerated than suprarenal IVC ligation; however, marked leg swelling and fasciotomies may develop.\n- Superior mesenteric vein ligation is fairly well tolerated, but repair is preferable if the patient is stable and it is technically feasible, due to similar risks of bowel edema and infarction as portal vein repair.\n- Arteries for which repair should always be attempted include: innominate, brachial, superior mesenteric, proper hepatic, iliac, femoral, popliteal, and aorta.\n- If definitive repair is precluded by hemodynamic instability or damage control, perfusion or flow may be maintained via a temporary intravascular shunt.\n- In the forearm, either the radial or ulnar artery can be ligated if the other vessel is palpable.\n- In the lower leg, at least one of the two palpable vessels (anterior or posterior tibial artery) should be salvaged.\n- Ligation of the subclavian artery is well tolerated due to excellent collateralization.\n- Reference: Rich, N. M., & Spencer, F. C. (2004). Vascular trauma (2nd ed.). Philadelphia, PA: Elsevier Science."
    },
    {
      "id": 41,
      "question_type": "mcq",
      "question": "In a patient with a mangled extremity, primary amputation for trauma should be strongly considered in a pulseless lower extremity when open tibia and fibula fractures are combined with:",
      "options": [
        "A. Popliteal vein transection",
        "B. A 2-hour ischemia time",
        "C. Deep peroneal nerve transection",
        "D. Persistent blood pressure less than 90 mm Hg",
        "E. Inability to dorsiflex the foot"
      ],
      "answer": "D",
      "explanation": "- The decision for primary amputation versus reconstruction in a mangled extremity is complex.\n- Factors to consider: degree of soft tissue and bony defects, hemodynamic stability, ischemia severity and duration, injury mechanism (energy level), tibial nerve injury, and patient age (>50 years).\n- No single scoring system is definitive, but the Mangled Extremity Severity Score (MESS) is commonly cited, based on energy, ischemia, shock, and age.\n- While good MESS scores generally predict limb salvage, high scores do not necessarily rule out the ability to save the limb.\n- Attempts at limb salvage can lead to numerous operations (nonunion, osteomyelitis) and potentially result in a nonfunctional limb prone to ulceration.\n- A recent study observed similar quality of life for patients who underwent primary amputation versus limb salvage.\n- Primary amputation should generally be strongly considered for patients with a mangled lower extremity who are hemodynamically unstable, have profound ischemia >6 hours duration, have a complete amputation, or have a Gustilo grade IIIC tibia/fibula fracture (>10 cm soft-tissue defect requiring coverage and arterial injury) combined with a transection of the tibial nerve.\n- Tibial nerve transection is critical as it leads to paralysis of muscles in the superficial and deep posterior compartments and complete anesthesia of the plantar foot surface.\n- Gustilo classification is for open tibia fractures based on soft-tissue defect and vascular status.\n- Deep peroneal nerve injury leads to loss of anterior compartment muscle function (footdrop) and numbness in the first web space, which can be managed with an ankle-foot orthotic.\n- Popliteal vein injury can be repaired with primary repair or interposition vein graft with minimal comorbidity; venous ligation may be considered in an unstable patient.\n- References: Bosse, M., McCarthy, M., & Jones, A., et al. (2005). The Lower Extremity Assessment Project (LEAP) Study Group: the insensate foot following severe lower extremity trauma: an indication for amputation? The Journal of Bone and Joint Surgery. American Volume, 87(12), 2601-2608. Ekim, H., Basel, H., & Odabasi, D. (2012). Management of traumatic popliteal vein injuries. Injury, 43(9), 1482-1485."
    },
    {
      "id": 42,
      "question_type": "mcq",
      "question": "Which of the following is true regarding compartment syndrome?",
      "options": [
        "A. The soleus muscle must be detached from the tibia to decompress the deep posterior compartment of the lower leg.",
        "B. A compartment pressure greater than 45 mm Hg is necessary to establish the diagnosis.",
        "C. The lateral compartment is the most commonly affected lower leg compartment.",
        "D. An early sign of anterior compartment involvement of the lower leg is numbness on the plantar aspect of the foot.",
        "E. It does not occur in the buttocks."
      ],
      "answer": "A",
      "explanation": "- Extremity compartment syndrome can occur anywhere, including the buttocks, shoulders, and hands.\n- Mechanisms include extrinsic (cast, tight dressings, burn eschar) and intrinsic (bleeding, edema, exogenous fluid).\n- Bleeding is typically due to trauma but can also result from coagulopathy or anticoagulants.\n- Edema is the largest category, often seen after reperfusion of an ischemic limb (arterial embolus/thrombosis, trauma), drug overdose/alcoholism (falls asleep on limb), profound shock (diffuse muscle ischemia with reperfusion), and inadvertent IV fluid infusion into subcutaneous tissue.\n- Diagnosis begins with high clinical suspicion and knowledge of clinical scenarios.\n- Common features: severe pain disproportionate to physical exam, pain on passive motion, tense edema, and tenderness on palpation.\n- Distal arterial pulses typically remain palpable.\n- The anterior compartment of the leg is usually the first compartment involved.\n- The deep peroneal nerve runs within the anterior compartment; numbness on the first web space of the toe is an early sign of anterior compartment involvement.\n- Confirmation involves direct pressure measurements of individual compartments.\n- A compartment pressure >30 mm Hg in any compartment strongly suggests a four-compartment fasciotomy.\n- The use of an absolute pressure value is questioned; differential pressure (Δp = diastolic blood pressure – intracompartmental pressure) <30 mm Hg is proposed as more diagnostic.\n- There is no absolute pressure level that rules in or out compartment syndrome; measurements should be used with clinical examination.\n- The deep posterior compartment is most commonly inadequately decompressed.\n- The soleus muscle must be detached from the tibia to decompress the deep posterior compartment.\n- Buttock compartment syndrome has been described in obese patients after prolonged anesthesia.\n- Reference: von Keudell, A. G., Weaver, M. J., & Appleton, P. T., et al. (2015). Diagnosis and treatment of acute extremity compartment syndrome. Lancet, 386(10000), 1299–1310."
    },
    {
      "id": 43,
      "question_type": "mcq",
      "question": "A 17-year-old boy is brought to the ED after being involved in a high-speed motorcycle collision. He is hypotensive with a systolic pressure of 60 mm Hg. A FAST scan is positive. At laparotomy, he is found to have a large amount of bleeding from behind the liver. Temporary application of a Pringle maneuver does not control the bleeding. However, laparotomy packs are placed, and the bleeding appears to slow down. The systolic blood pressure increases to 110 mm Hg after aggressive resuscitation. The patient's pH is 7.06 and his temperature is 34°C. The next best step in management is:",
      "options": [
        "A. Obtain control of the IVC above and below the liver",
        "B. Perform a median sternotomy for atriocaval shunt placement",
        "C. Damage control closure and transport to ICU",
        "D. Damage control closure and transport to interventional radiology (IR) suite for hepatic embolization",
        "E. Obtain control of aorta at the diaphragmatic hiatus"
      ],
      "answer": "C",
      "explanation": "- Liver injury management has evolved from routine laparotomy to selective nonoperative management, liberal angiographic embolization, and operative damage control.\n- For hemodynamically stable blunt trauma patients, a CT scan with IV contrast is performed.\n- If a contrast blush is seen in the liver, the patient should be taken to angiography for embolization (if no other injuries require operative intervention).\n- For hemodynamically unstable patients, the patient should be taken to the operating room for packing of all four quadrants to obtain temporary hemostasis while anesthesia attempts resuscitation.\n- Activation of institutional massive transfusion protocol and administration of tranexamic acid should be considered.\n- Continued bleeding despite a Pringle maneuver suggests retrohepatic IVC or hepatic vein injury.\n- If bleeding is controlled with packing, and the patient is cold (<34°C), coagulopathic, and with refractory acidosis, the best option is to perform a damage control operation and transfer the patient to the ICU for resuscitation.\n- If bleeding is not controlled, the next step is to rapidly take down hepatic ligaments (ligamentum teres, falciform, triangular, right coronary) and perform a Kocher maneuver for better direct compression with packing.\n- A decision must then be made whether to attempt repair of a retrohepatic IVC injury, depending on surgeon experience, patient status, and bleeding control.\n- If bleeding has stopped with packing, one option is to take the patient back to the ICU to resuscitate and rewarm.\n- If bleeding persists, total vascular exclusion of the liver is possible by controlling the IVC below the diaphragm and inferior to the liver, combined with the Pringle maneuver.\n- Alternatively, an atriocaval (Schrock) shunt or venovenous bypass can be initiated.\n- References: Asensio, J., Demetriades, D., & Chahwan, S., et al. (2000). Approach to the management of complex hepatic injuries. Journal of Traumatology, 48(1), 66-69. Kozar, R. A., Feliciano, D. V., & Moore, E. E., et al. (2011). Western Trauma Association/critical decisions in trauma: operative management of adult blunt hepatic trauma. Journal of Traumatology, 71(1), 1-5."
    },
    {
      "id": 44,
      "question_type": "mcq",
      "question": "A 55-year-old man is brought in to the ED after a high-speed MVC. The patient is hemodynamically stable. Gross hematuria is present. CT cystography reveals air in the bladder and an accumulation of contrast in the right paracolic gutter. Which of the following is the best management option?",
      "options": [
        "A. Foley catheter drainage",
        "B. Suprapubic cystostomy tube placement",
        "C. Open repair of the intraperitoneal bladder injury with chromic catgut sutures",
        "D. Obtaining a formal cystogram",
        "E. Open repair of the intraperitoneal bladder injury with silk sutures"
      ],
      "answer": "C",
      "explanation": "- The majority of bladder injuries occur following blunt trauma, and over 80% of patients with a bladder rupture have a concomitant pelvic fracture.\n- Bladder injuries are classified as extraperitoneal, intraperitoneal, or combined.\n- Extraperitoneal bladder injuries often result from perforation due to adjacent pelvic bony fragments or spicules.\n- Intraperitoneal injuries typically occur due to a sudden increase in pressure when a full bladder sustains a direct blow (e.g., MVC following binge-drinking), resulting in large tears involving the dome of the bladder.\n- Hematuria in the presence of a pelvic fracture should increase suspicion for a bladder injury.\n- If blood is visible at the urethral meatus, a Foley catheter should not be inserted until a retrograde urethrogram rules out a urethral injury.\n- Otherwise, bladder injury diagnosis is typically made by stress cystography (standard radiographic or CT).\n- CT cystography offers advantages by assessing other abdominal and pelvic injuries. It involves instilling 300–400 cc of iodinated contrast into the bladder via a Foley catheter, which is then clamped.\n- When extravasation is seen, it is important to determine if it is intraperitoneal (e.g., contrast above the peritoneal reflection, in the paracolic gutter) or extraperitoneal.\n- Extraperitoneal bladder ruptures are managed nonsurgically, typically with an 18- to 20-French Foley catheter for 7 to 10 days, followed by a repeat cystogram to confirm no further extravasation.\n- Intraperitoneal injuries are managed operatively via a transabdominal approach.\n- Before closure, the bladder interior should be palpated and visualized to ensure no other injuries.\n- Repair is undertaken using absorbable sutures; permanent sutures (e.g., silk) are inappropriate as they increase the risk of ongoing bladder mucosal irritation and lithogenesis.\n- A suprapubic cystostomy is generally not required unless there are very large wounds or significant devitalized tissue.\n- If CT cystography is equivocal, a formal cystogram may be obtained, but it is otherwise unnecessary.\n- Reference: Myers, J. B., Taylor, M. B., & Brant, W. O., et al. (2013). Process improvement in trauma: traumatic bladder injuries and compliance with recommended imaging evaluation. Journal of Traumatology Acute Care Surgery, 74(1), 264-269."
    },
    {
      "id": 45,
      "question_type": "mcq",
      "question": "A 30-year-old man sustains a GSW to the abdomen and presents to the ED with a systolic blood pressure of 60 mm Hg. Emergent laparotomy reveals a 2-L hemoperitoneum with an injury to the IVC and right iliac vein. Both injuries are successfully repaired. Further exploration demonstrates a distal right ureteral injury below the level of the iliac vessels with a 3-cm defect. After 10 units of blood products, the patient's blood pressure is 80/60 mm Hg, his heart rate is 110 beats per minute, and his temperature is 96°F. Which of the following is the best management option?",
      "options": [
        "A. Proximal and distal ligation of the ureter",
        "B. Ureteroureterostomy",
        "C. Transureteroureterostomy",
        "D. Psoas hitch",
        "E. Ureteroneocystostomy"
      ],
      "answer": "A",
      "explanation": "- Ureteral injuries are relatively uncommon and most often occur following penetrating trauma.\n- Surgical management is dictated by the patient's hemodynamics, level of injury (upper, middle, or lower third), degree of ureteral loss, and status of surrounding tissues.\n- Ureteral repairs are usually performed over a stent.\n- For upper and middle third ureteral injuries with a small segment missing (<2 cm), primary repair can often be done.\n- For small segment injuries of the lower third, reimplantation to the bladder (ureteroneocystostomy) is preferred due to technical ease.\n- For larger ureteral injuries involving the upper or middle ureter, the ideal repair involves debridement of devitalized tissue, spatulation of the two ends, and performing an end-to-end anastomosis over a double J stent (ureteroureterostomy) using absorbable monofilament.\n- Ureter mobilization is feasible but risks interrupting the blood supply; dissection should be maintained approximately 1 cm away from the ureter.\n- Viability of the ureter ends can be assessed by bleeding from the cut edges.\n- When a large segment of ureter has been injured and primary reanastomosis is not possible, several options are available.\n- A psoas hitch involves mobilizing the bladder and suturing it to the iliopsoas fascia above the iliac vessels to achieve a tension-free reimplantation of the ureter.\n- If a tension-free repair cannot be achieved after bladder mobilization, a Boari or bladder flap may be considered.\n- More complex techniques include anastomosing the ureter to the contralateral ureter (transureteroureterostomy), ileal-ureteral replacement, and renal autotransplantation.\n- In this patient, with massive blood loss and hemodynamic instability, a damage control approach should be used.\n- Two damage control options: 1) simply ligate the ureter proximally and distally, followed by percutaneous nephrostomy once the patient is stabilized for later elective repair; 2) perform a temporary cutaneous ureterostomy over a single J stent.\n- Given the injury location and length, the patient would likely eventually need a psoas hitch or other more complex repairs.\n- Reference: Smith, T. G., 3rd, & Coburn, M. (2013). Damage control maneuvers for urologic trauma. The Urologic Clinics of North America, 40(3), 343-350."
    },
    {
      "id": 46,
      "question_type": "mcq",
      "question": "After a MVC, a 17-year-old girl with blunt abdominal trauma is found to have free fluid on abdominal CT without evidence of liver or spleen injury. She is hemodynamically stable. Her abdomen is diffusely tender. She is taken to the operating room. At surgery, she is found to have a 75% luminal circumference injury to the first portion of the duodenum. Surgical management consists of:",
      "options": [
        "A. Pyloric exclusion",
        "B. Duodenal diverticulization",
        "C. Primary duodenal repair",
        "D. Whipple resection",
        "E. Resection with duodenoduodenostomy"
      ],
      "answer": "E",
      "explanation": "- Management of duodenal injuries depends on location, extent, associated pancreatic injury, and patient clinical status.\n- Duodenal injuries are graded I to V (Grade I: hematoma or partial-thickness; Grade V: massive disruption of pancreaticoduodenal complex or complete devascularization).\n- Simple duodenal hematomas recognized preoperatively can be managed nonsurgically with nasogastric decompression and parenteral nutrition.\n- If a simple hematoma is found intraoperatively, it is left alone if small (<2 cm). If a large hematoma (>50% lumen), incise serosa, drain, and reclose.\n- Most full-thickness lacerations of the duodenum can be repaired primarily in a transverse fashion to avoid narrowing the lumen, with or without an overlying omental patch.\n- If the injury involves >50% of the luminal circumference, more extensive surgical treatment is required.\n- For injuries in the first, third, or fourth portion of the duodenum, resection with duodenoduodenostomy or duodenojejunostomy can be performed.\n- For injuries in the second or third portion of the duodenum where the ampulla is not injured, a Roux-en-Y duodenojejunostomy is a better option.\n- The second portion is tethered to the pancreas head by its blood supply and ducts, limiting mobilization.\n- Suture repair of the second portion with tissue loss often results in an unacceptably narrow lumen, and end-to-end anastomosis is not possible.\n- If the injury is distal to the ampulla of Vater, the distal duodenum is oversewn, the jejunum anastomosed end-to-end to the proximal duodenum, and the defunctionalized distal duodenum and proximal jejunum are drained into the jejunum.\n- Pyloric exclusion is rarely needed and involves stapling or oversewing the pylorus and creating a gastrojejunostomy.\n- Duodenal diverticularization (repair, antrectomy, vagotomy, gastrojejunostomy, duodenostomy, choledochostomy, and feeding jejunostomy) is generally not recommended.\n- For combined duodenal and pancreatic injury, each should be treated separately: duodenal repair for <50% circumference injury, and pancreatic drainage for pancreatic injury without ductal disruption or distal pancreatectomy for distal pancreatic injury with ductal disruption.\n- A Whipple procedure is rarely needed for combined massive disruption of the pancreatic head and duodenum.\n- Reference: Kashuk, J. L., & Burch, J.M. (2008). Duodenum and pancreas. In D. V. Feliciano, K. L. Mattox, & E. E. Moore (Eds.). Trauma (6th ed.). New York, NY: McGraw Hill."
    },
    {
      "id": 47,
      "question_type": "mcq",
      "question": "A 10-year-old boy presents to the ED with repeated episodes of vomiting 2 days after a MVC. Abdominal CT scan with oral and IV contrast is negative for free fluid. However, the wall of the second portion of the duodenum appears to be thickened with a slight amount of adjacent retroperitoneal stranding. There is no extraluminal air and no contrast extravasation. Which of the following is true about this condition?",
      "options": [
        "A. The patient should undergo exploratory laparotomy.",
        "B. This type of injury is more common in adults than children.",
        "C. The surgical procedure of choice is an intestinal bypass.",
        "D. It can develop in the absence of trauma in patients with hemophilia.",
        "E. Total parenteral nutrition is rarely needed."
      ],
      "answer": "D",
      "explanation": "- Duodenal hematomas are caused by a direct blow to the abdomen and occur more often in children than adults.\n- Obstruction occurs as fluid is sequestered into a hyperosmolar hematoma, accumulating between the seromuscular and submucosal layers of the bowel.\n- Diagnosis is suspected by the onset of vomiting after blunt abdominal trauma, usually on the third post-injury day.\n- A CT scan with oral and IV contrast is the best diagnostic modality, helping differentiate a duodenal hematoma from a free perforation.\n- Presence of contrast extravasation or free air indicates free perforation and mandates exploratory laparotomy.\n- In the absence of these findings, a presumptive diagnosis of duodenal hematoma is made.\n- An alternative imaging study is a water-soluble upper gastrointestinal study with oral contrast; the classic finding is a coiled-spring appearance of the duodenal wall.\n- The majority of such injuries in children are effectively managed nonoperatively by NG tube decompression and parenteral nutrition.\n- Resolution of obstruction typically occurs in 1 to 2 weeks.\n- Failure to improve should prompt reevaluation with a repeat CT scan.\n- If surgical intervention is necessary, evacuation of the hematoma by a partial-thickness incision in the duodenal wall, followed by closure, is associated with equal success but fewer complications than a bypass.\n- This may be performed laparoscopically or via an open approach.\n- A thorough and careful assessment of the duodenum and pancreas should be performed.\n- Duodenal hematomas can develop in the absence of trauma in patients with hemophilia.\n- References: Shilyansky, J., Pearl, R. H., & Kreller, M., et al. (1997). Diagnosis and management of duodenal injuries in children. Journal of Pediatric Surgery, 32(6), 880-886. Kashuk, J. L., & Burch, J.M. (2008). Duodenum and pancreas. In D. V. Feliciano, K. L. Mattox, & E. E. Moore (Eds.). Trauma (6th ed.). New York, NY: McGraw Hill."
    },
    {
      "id": 48,
      "question_type": "mcq",
      "question": "A 36-year-old woman sustains a GSW to the right upper quadrant and has marked abdominal tenderness. At surgery, she is found to have a blast injury with nearly complete transection of the second portion of the duodenum and a deep laceration to the head of the pancreas. On exploration of the pancreatic wound, the main pancreatic duct and the intrapancreatic portion of the common bile duct are both transected. Management consists of:",
      "options": [
        "A. Primary repair of duodenum and Roux-en-Y pancreaticojejunostomy and choledochojejunostomy",
        "B. Pancreaticoduodenectomy (Whipple procedure)",
        "C. Roux-en-Y duodenojejunostomy and primary repair of the pancreatic and common bile ducts",
        "D. Primary repair of the duodenum and drainage",
        "E. Pyloric exclusion"
      ],
      "answer": "B",
      "explanation": "- Pancreatic injuries are graded I to V (Grade I: minor contusion/laceration without duct injury; Grade V: massive disruption of pancreatic head).\n- Most pancreatic injuries can be managed by closed suction drainage.\n- The key issue is whether the main pancreatic duct is injured and its location relative to the superior mesenteric vessels.\n- Main pancreatic duct injury can be determined by intraoperative pancreatography (needle injection of contrast into the gallbladder).\n- Duct disruption to the left of the superior mesenteric vessels is managed by distal pancreatectomy.\n- Duct injury to the right of the superior mesenteric vessels, without major pancreatic head disruption, is best managed by drainage with subsequent pancreaticoenteric anastomosis if an ensuing fistula fails to heal.\n- Performing such an anastomosis in the emergent trauma setting carries a high risk of anastomotic breakdown.\n- In cases of massive destruction of the pancreatic head, such as this patient's combined injury (nearly complete duodenal transection, deep pancreatic head laceration, transected main pancreatic duct and common bile duct), a pancreaticoduodenectomy (Whipple procedure) is necessary.\n- This operation should not be performed immediately; damage control surgery should be performed first, and the definitive procedure delayed until after resuscitation.\n- Another indication for a Whipple procedure is massive devascularization of the duodenum, particularly when the ampullary complex is involved.\n- Reference: Biffl, W. L., et al. (2013). Western Trauma Association critical decisions in trauma: management of pancreatic injuries. Journal of Traumatology Acute Care Surgery, 75(6), 941-946."
    },
    {
      "id": 49,
      "question_type": "mcq",
      "question": "A 29-year-old man presents with a GSW to the right upper quadrant. On physical examination, the patient has a tender abdomen. At surgery, the patient is found to have a 500-mL hemoperitoneum with a through-and-through injury to the right lobe of the liver that is no longer actively bleeding. Further management would consist of:",
      "options": [
        "A. Closing the injury with a liver suture",
        "B. Packing the injury with omentum",
        "C. Application of a fibrin sealant",
        "D. No further management",
        "E. Drainage with a Penrose drain"
      ],
      "answer": "D",
      "explanation": "- Various techniques can control liver bleeding.\n- Simplest method: manual compression with or without topical hemostatic agents (microfibrillar collagen, oxidized cellulose, gelatin matrix thrombin sealants).\n- If unsuccessful: Pringle maneuver.\n- Ongoing bleeding despite porta hepatis occlusion suggests retrohepatic IVC injury.\n- Other hemostatic maneuvers for severe parenchymal injury include liver sutures (chromic suture with blunt-tipped needle) for superficial lacerations.\n- Hepatotomy via finger fracture to access and suture bleeding sites directly.\n- For profuse bleeding from a small hole in the liver where hepatotomy is not feasible, a balloon tamponade catheter can be fashioned (catheter with side holes placed through a Penrose drain, tied at ends, and inflated with air or contrast into the bullet wound).\n- In this case, since the bleeding has stopped, no further treatment is needed.\n- Placing liver stitches is unnecessary and increases the risk of liver necrosis.\n- Packing the injury with omentum is useful for large stellate lesions, but hemostasis is better achieved with packing.\n- The use of drains is controversial; not recommended for smaller wounds.\n- For larger injuries, closed suction drainage is used by some surgeons.\n- Open drains are generally not employed due to potential increased risk of infection.\n- Reference: Kozar, R. A., Feliciano, D. V., & Moore, E. E., et al. (2011). Western Trauma Association/critical decisions in trauma: operative management of adult blunt hepatic trauma. Journal of Traumatology, 71(1), 1-5."
    },
    {
      "id": 50,
      "question_type": "mcq",
      "question": "A 20-year-old morbidly obese man sustains a GSW to the abdomen. His blood pressure is 110/70 mm Hg and his heart rate is 100 beats per minute. At surgery, he is found to have a blast injury to the sigmoid colon involving 75% of the circumference of the bowel, with a moderate amount of fecal contamination. Which of the following is the best option?",
      "options": [
        "A. Sigmoid colectomy with primary anastomosis with a diverting ileostomy",
        "B. Primary repair of the sigmoid colon",
        "C. Sigmoid colectomy with primary anastomosis",
        "D. Primary repair of the sigmoid colon with exteriorization of the repair",
        "E. Sigmoid colectomy with a proximal colostomy and oversewing of the rectal stump"
      ],
      "answer": "C",
      "explanation": "- Colon injuries are increasingly treated with primary repair (if feasible) or resection with primary anastomosis.\n- This approach applies to both right- and left-sided colon injuries.\n- Primary repair is used when less than 50% of the bowel circumference is involved.\n- Resection is recommended for larger wounds.\n- After resection, the decision is made between primary reanastomosis or colostomy.\n- The primary contraindication to primary reanastomosis is hemodynamic instability.\n- In unstable situations, damage control surgery should be performed, and the decision to reanastomose or create a colostomy can be made at a subsequent operation once the patient is stabilized and fully resuscitated.\n- Factors associated with intra-abdominal complications after resection for severe colon injuries include severe fecal contamination, transfusion of ≥4 units of blood in the first 24 hours, and administration of single-agent antibiotics.\n- Vasopressors at the time of repair may be associated with anastomotic leaks.\n- The method of anastomosis (handsewn vs. stapled) has not been shown to affect leak rates.\n- Obesity makes stoma creation difficult, predisposes to stoma ischemia, and increases the risk of necrotizing soft-tissue infection, and makes subsequent colostomy takedown challenging.\n- Therefore, strong consideration should be given to primary reanastomosis in obese patients.\n- This patient has a blast injury involving 75% of the sigmoid colon circumference with moderate fecal contamination, requiring resection. He is hemodynamically stable, making primary anastomosis the best option.\n- References: Demetriades, D., Murray, J., & Chan, L., et al. (2002). Handsewn versus stapled anastomosis in penetrating colon injuries requiring resection: a multicenter study. The Journal of Traumatology, 52(1), 117-121. Naumann, D. N., Bhangu, A., & Kelly, M., et al. (2015). Stapled versus handsewn intestinal anastomosis in emergency laparotomy: a systemic review and meta-analysis. Surgery, 157(4), 609–618."
    },
    {
      "id": 51,
      "question_type": "mcq",
      "question": "A 25-year-old man presents with a GSW to the buttocks. Abdominal examination is unremarkable, and the patient is hemodynamically stable. Proctoscopy reveals blood and stool in the distal rectal vault, but an injury cannot be identified. Computed tomography (CT) scan of the abdomen and pelvis with rectal contrast is unremarkable. Which of the following is the best management option?",
      "options": [
        "A. IV antibiotics with close observation",
        "B. A proximal diverting colostomy",
        "C. Exploratory laparotomy with primary closure of rectal injury, diverting colostomy, distal rectal irrigation, and presacral drainage",
        "D. Presacral drainage and IV antibiotics",
        "E. Abdominal perineal resection"
      ],
      "answer": "B",
      "explanation": "- Rectal injury management depends on whether the injury is intra- or extraperitoneal, the degree of tissue destruction, and the patient's hemodynamic status.\n- Intraperitoneal injuries can be repaired primarily (treated like colon injuries).\n- For extraperitoneal injuries, there are two basic options: primary repair or a diverting colostomy.\n- The decision for primary repair relates to its accessibility; proximal extraperitoneal injuries can be repaired primarily.\n- If an extraperitoneal injury is primarily repaired, diversion via a colostomy is usually not necessary.\n- Exposing an extraperitoneal injury to the peritoneal cavity effectively renders it an intraperitoneal injury, thus presacral drainage is not indicated.\n- If the extraperitoneal injury cannot be identified and repaired, a proximal diverting colostomy has been shown to be effective in allowing the injury to heal.\n- While controversial, recent studies indicate that distal irrigation of the rectum and routine drainage of the presacral space are not necessary and may even force fecal material out of a rectal laceration.\n- Distal rectal irrigation is ineffective for anterior rectum injuries.\n- Abdominoperineal resection is not indicated.\n- IV antibiotics alone are not appropriate.\n- A CT scan is not reliable enough to rule out a distal rectal injury; blood on proctoscopy is sufficient indication for stool diversion.\n- In this case, the patient has a GSW to the buttocks with evidence of rectal injury (blood/stool on proctoscopy) but an unidentified injury and unremarkable CT, suggesting an extraperitoneal injury that cannot be directly repaired. Therefore, a proximal diverting colostomy is the best management option.\n- References: Gonzalez, R. P., Falimirski, M. E., & Holevar, M. R. (1998). The role of presacral drainage in the management of penetrating rectal injuries. Journal of Traumatology, 45(4), 656-661. Demetriades, D., Murray, J., & Chan, L., et al. (2001). Penetrating colon injuries requiring resection: diversion or primary anastomosis? An AAST prospective multicenter study. Journal of Traumatology, 50(5), 765-775. Bosarge, P. L., Como, J. J., & Fox, N., et al. (2001). Management of penetrating extraperitoneal rectal injuries: an Eastern Association for the Surgery of Trauma practice management guideline. Journal of Traumatology Acute Care Surgery, 80(3), 546-551."
    }
  ]
}
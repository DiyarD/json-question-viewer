{
    "chapter_name": "SECTION 17: PRACTICE EXAM",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "A 73-year-old woman is seen in the outpatients department. She complains of altered bowel habit and weight loss. A colonoscopy is performed which identifies a large polyp. Polypectomy was not possible due to the patient being on warfarin for a metal heart valve. You are asked to re-book the patient for definitive management. Which one of the following statements pertaining to this scenario is correct?\nA. Admission is required to monitor the patient while warfarin is stopped\nB. Warfarin should be replaced with therapeutic doses of low-molecular-weight heparin for 5 days prior to the procedure\nC. An echocardiogram is required prior to the procedure to exclude valve thrombus\nD. Conversion to unfractionated heparin infusion is required\nE. A computed tomography pneumocolon should be performed to identify/exclude further disease before a management decision is made",
            "options": [
                "A. Admission is required to monitor the patient while warfarin is stopped",
                "B. Warfarin should be replaced with therapeutic doses of low-molecular-weight heparin for 5 days prior to the procedure",
                "C. An echocardiogram is required prior to the procedure to exclude valve thrombus",
                "D. Conversion to unfractionated heparin infusion is required",
                "E. A computed tomography pneumocolon should be performed to identify/exclude further disease before a management decision is made"
            ],
            "answer": "D",
            "explanation": "This is a common scenario encountered in any centre where proce-dural endoscopy is common. Removal of polyps can result in significant bleeding as the lesions are often well vascularized. Patients on warfarin require their INR to be normalized prior to an attempted procedure. In patients receiving warfarin for indications such as atrial fibrillation, warfarin must be stopped 5 days before the procedure. In patients with metal valves, however, the risk of thrombus formation on the valve dur-ing this time is too great, and therefore these patients should ideally be admitted and managed on a heparin infusion pump. This allows close, accurate and rapidly reversible anticoagulation which therefore mini-mizes the time that the patient's anticoagulation is below therapeutic levels in the peri-procedure period.\nLow-molecular-weight heparin is not appropriate as it needs to be stopped 48 hours prior to the procedure, during which the patient would not be adequately anticoagulated. The echocardiogram is unnecessary, as is the CT pneumocolon. The patient requires an inter-vention; finding a further polyp on CT will not affect the need for polypectomy."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "A patient who underwent an oesophagectomy in an attempt to cure stage 1 can-cer becomes confused 4 days postoperatively and pulls out his nasogastric tube. What is the best course of action?\nA. Attempt reinsertion\nB. Endoscopic insertion of nasojejunal tube\nC. Restrict oral intake\nD. Computed tomography to identify complications of removal\nE. Sedation",
            "options": [
                "A. Attempt reinsertion",
                "B. Endoscopic insertion of nasojejunal tube",
                "C. Restrict oral intake",
                "D. Computed tomography to identify complications of removal",
                "E. Sedation"
            ],
            "answer": "C",
            "explanation": "Following an oesophagectomy, patients commonly become confused, either as a consequence of sepsis or simply due to the huge systemic impact of such major surgery on the body's physiology. Patients removing their own NG tube is a frequent (although not unavoidable) consequence of this and significantly complicates management. The NG tube func-tions to protect the anastomosis from forceful vomiting and dilatation of the upper gastrointestinal tract. Removal at 4 days is not disastrous but requires careful management; instrumentation of the remnant oesopha-gus should be avoided and therefore options A and B are inappropriate. A CT scan is unnecessary in the absence of additional indications since NG removal is unlikely to be traumatic, unless an attempt has been made to reinsert.\nSedation does not address the issue highlighted in the case. Also, seda-tives may increase the likelihood of ileus and gastrointestinal disten-sion; if sedation is necessary benzodiazepines are probably preferable to antipsychotics such as haloperidol; however, even minor tranquillizers may cause gastrointestinal disturbance. Most important in this case is to limit oral intake and in doing so limit distension and the likelihood of vomiting."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "Systemic inflammatory response syndrome is a term used to describe the dis-seminated response to an inflammatory insult such as sepsis, pancreatitis or severe trauma. Which one of the following is not a manifestation of systemic inflammatory response syndrome?\nA. Temperature <36°C\nB. Heart rate >90 beats/min\nC. Respiratory rate >20 breaths/min\nD. Blood pressure <90 mmHg\nE. White cell count >12 × 10º/L",
            "options": [
                "A. Temperature <36°C",
                "B. Heart rate >90 beats/min",
                "C. Respiratory rate >20 breaths/min",
                "D. Blood pressure <90 mmHg",
                "E. White cell count >12 × 10º/L"
            ],
            "answer": "D",
            "explanation": "Systemic inflammatory response syndrome is a term used to describe the disseminated response to an inflammatory insult such as sepsis, pancreatitis or severe trauma. The criteria for SIRS may be applied in the clinical definitions of certain conditions. For example, a patient may be said to have sepsis if they have the features of SIRS with a likely infective source. A patient is said to have SIRS if two or more of the following are present:\n1 Temperature <36°C or >38°C\n2 Heart rate >90 beats/min\n3 Respiratory rate >20 breaths/min or pCO2 <4.3 kPa\n4 White cell count >12 × 109/L or <4 × 109/L\nBlood pressure is not a consideration. However, if a patient is septic with a systolic BP of less than 90 mmHg, or there is a reduction in their systolic BP of >40 mmHg from their baseline, then they are said to be in septic shock."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "Your registrar asks you to consent a patient for insertion of a central line. You counsel the patient through the reasons for the procedure as well as intended benefits and complications. What is the most common immediate complication of central line insertion?\nA. Infection\nB. Thrombus\nC. Haemorrhage\nD. Pneumothorax\nE. Air embolism",
            "options": [
                "A. Infection",
                "B. Thrombus",
                "C. Haemorrhage",
                "D. Pneumothorax",
                "E. Air embolism"
            ],
            "answer": "C",
            "explanation": "Central venous catheters are commonly used in the management of sur-gical patients as they guide the fluid resuscitation of complex patients and allow the delivery of drugs and concentrated electrolytes which cannot otherwise be given. Therefore, candidates must familiarize themselves with the potential complications of such lines, which occur in approximately 20% of lines inserted.\nThe question asks specifically for the most common immediate compli-cation; this excludes line-associated sepsis, despite the fact that bacter-aemia is by far the most common complication overall. Of those options remaining, the majority of candidates should identify bleeding as the most likely immediate complication.\nNote: relative rates of complications differ between line sites. It is commonly held that femoral lines are more often associated with thrombus and infection, subclavian lines are more prone to haemor-rhage (due to the risk of arterial damage and the area being incom-pressible) and internal jugular lines are more prone to pneumothorax. However, in all line types, bleeding is the most common immediate adverse event."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "A 69-year-old man is admitted, complaining of right upper quadrant pain and fever. A correct diagnosis of acute cholecystitis is made and antibiotics pre-scribed. The option of immediate surgery is discussed, but the patient opts to wait for 6 weeks. Ten days later the patient phones to ask advice; his pain has not improved and his fevers have returned following completion of the antibiotics, with rigors and night sweats now a problem. In addition, he is concerned regard-ing itching the previous day, which he ascribed to his antibiotics. The most appropriate advice for this patient is\nA. This is normal, paracetamol should relieve the fevers\nB. Surgery is now not possible for 6 weeks, attend general practitioner for further course of antibiotics and analgesics\nC. Book an outpatients appointment for review\nD. Attend the emergency department\nE. Patient requires urgent cholecystectomy",
            "options": [
                "A. This is normal, paracetamol should relieve the fevers",
                "B. Surgery is now not possible for 6 weeks, attend general practitioner for further course of antibiotics and analgesics",
                "C. Book an outpatients appointment for review",
                "D. Attend the emergency department",
                "E. Patient requires urgent cholecystectomy"
            ],
            "answer": "D",
            "explanation": "An important consideration in patient management is that condi-tions are dynamic and clinical circumstances can easily change. Management must therefore also be dynamic and change when appropriate. Reading this scenario, candidates should identify that the new symptoms described by this unfortunate patient are no lon-ger consistent with his original diagnosis. Rigours suggest abscess formation or ascending biliary sepsis. Pruritus may indicate obstruc-tive jaundice and it would be appropriate to ask the patient about jaundice and colour changes in stool and urine. The patient probably has gallstones, and as such is at risk of obstructive jaundice with or without ascending cholangitis. A patient with these changes in his condition warrants reinvestigation and should therefore be readmit-ted urgently. Option E is incorrect since this patient requires urgent ERCP with decompression of his biliary tree. Cholecystectomy may still be deferred for 6 weeks."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "A 43-year-old patient is being managed following presentation with perfuse diarrhoea and profound dehydration secondary to an exacerbation of Crohn's colitis. Your initial bloods come back showing sodium 137 mmol/L, potassium 2.9 mmol/L, urea 9.2 mmol/L, creatinine 134 µmol/L. He has a peripheral can-nula in situ only. Which one of the following statements regarding potassium replacement in this patient is the most correct?\nA. 40 mmol potassium chloride can safely be given over 1 hour\nB. Central line insertion is advisable\nC. Bolus potassium is safe, provided a central line is used\nD. Maximum concentration of potassium to be given peripherally is 20 mmol/500 mL\nE. Maximum rate of potassium infusion peripherally is 20 mmol every 4 hours",
            "options": [
                "A. 40 mmol potassium chloride can safely be given over 1 hour",
                "B. Central line insertion is advisable",
                "C. Bolus potassium is safe, provided a central line is used",
                "D. Maximum concentration of potassium to be given peripherally is 20 mmol/500 mL",
                "E. Maximum rate of potassium infusion peripherally is 20 mmol every 4 hours"
            ],
            "answer": "D",
            "explanation": "Daily requirements of potassium may be calculated using the formula 1 mmol/kg per 24 hours. This will be increased in certain conditions, particularly in general surgical patients, in whom electrolyte and proton loss from the gastrointestinal tract is heavy. Therefore, candi-dates should be familiar with the safe administration of intravenous potassium.\nThe absolute maximum rate and concentration of infusion of potas-sium through a peripheral cannula is 20 mmol in 500 mL of fluid (nor-mal saline or dextrose) over 2–3 hours. Bolus potassium must never be given, it acts as a cardioplegic. Faster rates of infusion are possible in critical care scenarios where up to 40 mmol/100 mL per hour may be given through a central line. However, this is only advocated in extreme cases and would therefore be inappropriate in this case."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "A postoperative patient is being managed on a high-dependency unit following a subtotal colectomy. Blood results show the phosphate level is 0.25 mmol/L. Which one of the following statements regarding intravenous phosphate is incorrect?\nA. May cause hypercalcaemia\nB. Should never be given at a rate greater than 30 mmol over 6 hours\nC. Should preferentially be given via a central line\nD. May cause metastatic calcification\nE. Should be used even if the patient is asymptomatic",
            "options": [
                "A. May cause hypercalcaemia",
                "B. Should never be given at a rate greater than 30 mmol over 6 hours",
                "C. Should preferentially be given via a central line",
                "D. May cause metastatic calcification",
                "E. Should be used even if the patient is asymptomatic"
            ],
            "answer": "A",
            "explanation": "Hypophosphataemia may manifest as an arrhythmia, cardiogenic shock, seizures or even cardiac arrest. Rhabdomyolysis and erythrocyte dysfunc-tion may also occur. Those at risk include the severely debilitated, those on TPN and those with severe diabetic ketoacidosis. Phosphate replacement can be problematic as it binds to serum calcium, causing severe hypocal-caemia and precipitating into tissues (metastatic calcification). For these reasons phosphate should preferentially be given orally. When this is not possible, or the deficit is profound, intravenous phosphate may be given, ideally via a central line, at a rate no more than 30 mmol over 6 hours (usually slower). Because of the potentially fatal, and incipient, conse-quences of hypophosphataemia these patients should always be treated."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "A 34-year-old patient is admitted intoxicated. He appears neglected and smells strongly of alcohol. The third day following his admission, he develops alco-hol withdrawal and is managed with chlordiazepoxide. On day 5 of his admis-sion, he has the following blood results: haemoglobin 11.2 g/dL, white cell count 7.9 × 10º/L, mean corpuscular volume 103 fL, sodium 137 mmol/L, potassium 2.3 mmol/L, urea 3.4 mmol/L, creatinine 69 mmol/L, amylase 930 IU/L, phos-phate 0.17 mmol/L, calcium 2.25 mmol/L, C-reactive protein 8 mg/L. Which test should be done urgently?\nA. Group and save\nB. Septic screen\nC. Serum magnesium\nD. B12 and folate levels\nE. Urinary electrolytes",
            "options": [
                "A. Group and save",
                "B. Septic screen",
                "C. Serum magnesium",
                "D. B12 and folate levels",
                "E. Urinary electrolytes"
            ],
            "answer": "C",
            "explanation": "Candidates should identify that this patient has a low potassium and low phosphate. A patient with a background of poor nutrition who has recently restarted eating should alert one to the possible diagnosis of ‘refeeding syndrome'. Those at particular risk are the homeless, alcohol-ics and those with anorexia nervosa. When the concentration camps of Nazi Germany were liberated, many of the prisoners are thought to have died from this phenomenon on release.\nThe mechanism is as follows. In the starved state, metabolism is mainly of fat and protein. Insulin levels are minimal due to the lack of dietary carbohydrate. The catabolic state also depletes intracellular stores of potassium and phosphate, with the serum levels usually remaining normal. Once feeding re-commences, insulin levels rise driving potas-sium and phosphate into cells. The effect is maximal at around day 4. This condition is potentially fatal, primarily from cardiac rhythm disturbance.\nMagnesium levels normally closely follow those of potassium and phos-phate. Its deficiency predisposes to seizure and arrhythmia. This patient requires close cardiac monitoring and urgent electrolyte replacement."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "A patient is admitted complaining of central abdominal pain. On assessment the patient is thought to have subacute small bowel obstruction secondary to adhe-sions. He is managed with a nasogastric tube and 6 hourly bags of Hartmann's solution. His arterial blood gases the following day show the following:\n• p02= 10.5 (on 28% oxygen)\n• pCO2 = 5.2\n• pH = 7.46\n• Base excess = 7.5\nWhich one of the following statements is the most correct?\nA. This patient has a respiratory acidosis\nB. This patient has chronic obstructive pulmonary disease\nC. This patient should have their fluid rate reduced\nD. This patient requires ventilation\nE. This patient has a metabolic alkalosis",
            "options": [
                "A. This patient has a respiratory acidosis",
                "B. This patient has chronic obstructive pulmonary disease",
                "C. This patient should have their fluid rate reduced",
                "D. This patient requires ventilation",
                "E. This patient has a metabolic alkalosis"
            ],
            "answer": "E",
            "explanation": "This patient has a metabolic alkalosis. The base excess indicates an increased amount of base (bicarbonate) in the plasma. The rise in CO₂ is due to respiratory compensation; the body aims to retain carbon dioxide to reduce the bicarbonate load. Hartmann's solution contains 29 mmol of bicarbonate and is therefore the likely source of the excess alkali. This patient requires normal saline with potassium replacement; chloride is typically low, and its replacement aids bicarbonate excretion in the renal tubules. Increasing inhaled oxygen concentration might also be of benefit."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "You are asked to see a patient by the ward staff after a postoperative patient's urine output becomes low. On review, the patient appears comfortable with a urinary catheter in situ. Observations are stable at blood pressure 118/67 mmHg, pulse rate 98 beats/min and respiratory rate 18 breaths/min. Over the previous 3 hours the urinary output has been 55 mL, 43 mL and 35 mL. Currently, in the last hour no urine has been passed. Which one of the following statements is the most correct?\nA. The first course of action should be a colloid fluid challenge\nB. This patient requires central venous pressure monitoring\nC. The first course of action should be a crystalloid fluid challenge\nD. This patient is in acute renal failure\nE. The most likely cause is catheter occlusion",
            "options": [
                "A. The first course of action should be a colloid fluid challenge",
                "B. This patient requires central venous pressure monitoring",
                "C. The first course of action should be a crystalloid fluid challenge",
                "D. This patient is in acute renal failure",
                "E. The most likely cause is catheter occlusion"
            ],
            "answer": "E",
            "explanation": "The scenario describes a patient with a borderline urine output; a mini-mum acceptable output may be calculated using the patient's body mass (= 0.5 mL/kg/h). In all likelihood, this patient is hypovolaemic con-sidering their observations and history. Although options A and C are valid answers, a clinician must complete their assessment of the patient by taking account of the JVP and assessing the lung bases for signs of overload prior to administration of fluid. A better answer is option E: note the sudden cessation of urine output without change in vital parameters. More typical of hypovolaemia would be a gradual tailing of urine output with reciprocal changes in other observations. Sudden cessation such as this is highly suggestive of catheter occlusion; the catheter should be flushed and residual volume recorded. If this remains low and the patient is not in failure, fluid bolus would be the next appropriate course of action."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "Which one of the following is the first appreciable sign of shock in the paediatric patient?\nA. Narrowed pulse pressure\nB. Hypotension\nC. Tachycardia\nD. Reduced urinary output\nE. Reduced pain response",
            "options": [
                "A. Narrowed pulse pressure",
                "B. Hypotension",
                "C. Tachycardia",
                "D. Reduced urinary output",
                "E. Reduced pain response"
            ],
            "answer": "C",
            "explanation": "The physiological reserve of children far exceeds that of adults. Therefore, physiological manifestations of haemorrhage occur later, and are more subtle, than in adults. A loss of 30% of circulating volume is required before a child will become tachycardic – this being the earli-est indicator of hypovolaemia. At this point the child will typically be peripherally shut down; they will be cold to touch with weak pulses and prolonged capillary refill time. Narrowing of pulse pressure closely fol-lows tachycardia as the child compensates for reduced circulating vol-ume. At this degree of blood loss, a child will go from an irritable state to a state of lethargy, with a diminished pain response which becomes more apparent when inserting a peripheral cannula. Reduced urine out-put shortly precedes hypotension, as the child's compensatory mecha-nisms eventually fail. Hypotension in a child indicates that over 45% of circulating volume is lost and that the child is in imminent danger of cardiac arrest."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "A 4-year-old child is admitted following a road traffic accident. She is tachy-cardic and you wish to administer fluid and blood. The child is peripherally shut down and it has not been possible to gain access after two attempts at peripheral cannulation. Your next option is\nA. Intraosseous infusion\nB. Femoral line insertion\nC. External jugular cannulation\nD. Saphenous vein cut-down\nE. Internal jugular central line insertion",
            "options": [
                "A. Intraosseous infusion",
                "B. Femoral line insertion",
                "C. External jugular cannulation",
                "D. Saphenous vein cut-down",
                "E. Internal jugular central line insertion"
            ],
            "answer": "A",
            "explanation": "Vascular access in paediatric patients is difficult due to the greater amounts of subcutaneous fat and due to the effectiveness of their own peripheral vasoconstriction. The ‘shut down' paediatric patient will be difficult for even experienced clinicians to cannulate. Once two attempts have failed, and if the clinical need is adequate, intraosseous infusion may be attempted in any patient, paediatric or adult. The normal posi-tion is a fingerbreadth below the tibial tuberosity. Contraindications include fracture proximal to this site or infection/abrasion over the intended site. Intraosseous infusion is preferred as it provides rapid access with fewer complications compared to other techniques. It should be discontinued as soon as peripheral access is achieved.\nAlternatives to intraosseous infusion (in order of preference) are femo-ral line insertion, saphenous cut-down and external jugular cannula-tion. Central line insertion into the internal jugular or subclavian vein is avoided in children."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "Which one of the following mechanisms is the most common traumatic cause of death in the elderly (over 65)?\nA. Falls\nB. Motor vehicle accidents\nC. Burns\nD. Assault\nE. Non-accidental injury",
            "options": [
                "A. Falls",
                "B. Motor vehicle accidents",
                "C. Burns",
                "D. Assault",
                "E. Non-accidental injury"
            ],
            "answer": "A",
            "explanation": "Trauma is the seventh leading cause of death in the elderly popula-tion. Falls account for 40% of mortality related to trauma and 60% of all trauma, with the next leading cause of injury being road traffic accidents, followed by burns and assault. There is significant variance in the proportional representation of each mechanism of injury, accord-ing to age; falls make up 50% of total traumatic injury in the 65–74 age group, but this increases to over 80% in those over 85. All other modalities of injury reduce in prevalence with increasing age (see the table below for injury-specific incidence by age group)."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "Of the following, which parameter is typically unchanged from its adult normal range during the third trimester of pregnancy?\nA. Blood pressure\nB. Heart rate\nC. pCO2\nD. Haematocrit\nE. White cell count",
            "options": [
                "A. Blood pressure",
                "B. Heart rate",
                "C. pCO2",
                "D. Haematocrit",
                "E. White cell count"
            ],
            "answer": "A",
            "explanation": "Pregnancy induces a variety of physiological changes which prepare the body for the trauma of parturition. These adaptations influence vital signs and normal physiological parameters and therefore the emergency clinician should be familiar with them and able to interpret them accu-rately in a trauma scenario.\nPregnancy increases the plasma volume disproportionately with a similar increase in numbers of red blood cells. In other words, despite an overall increase in blood volume there is a decrease in haematocrit, so-called ‘physiological anaemia of pregnancy'. These changes allow a greater loss of blood volume, approximately 1200–1500 mL, before physiological signs of haemorrhagic shock become apparent. The white cell count increases to levels of 15-25 × 109/L depending on the stage of pregnancy.\nTidal volume increases secondary to actions of progesterone; this lowers the pCO2 and therefore baseline ABGs in a pregnant woman will typі-cally show hypocapnia. Cardiac output is increased by 1-1.5 L/min due to the increased plasma volume and reduced vascular resistance in the placenta, which receives 20% of blood at full term. There is a conse-quent increase in heart rate by 10–15 beats/min. Blood pressure initially falls below normal levels in the second trimester, but this resolves by the third term of pregnancy. Therefore hypotension in the third trimes-ter may be due to volume loss, or pressure effects of the gravid uterus compressing the vena cava and reducing venous return to the heart. The so-called 'supine hypotension syndrome' may reduce cardiac output by 30% and therefore pregnant women should be treated lying on their left side, or sat up, if injuries permit."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "A patient is admitted following a car accident where she was a restrained passenger. The patient is 32 weeks pregnant. She is shocked with a rigid and tender abdomen. An abdominal radiograph is performed which shows air under the diaphragm and the fetus's left leg appears extended. The most appropriate next course of action is\nA. Ultrasound examination\nB. Diagnostic peritoneal lavage\nC. Computed tomography scan of the abdomen\nD. Caesarean section\nE. Explorative laparotomy",
            "options": [
                "A. Ultrasound examination",
                "B. Diagnostic peritoneal lavage",
                "C. Computed tomography scan of the abdomen",
                "D. Caesarean section",
                "E. Explorative laparotomy"
            ],
            "answer": "E",
            "explanation": "Uterine rupture is most common in the third trimester when the uterine wall is at its thinnest and the uterus at its greatest point of expansion and therefore exposure; up to 12 weeks gestation the uterus remains within the bony pelvis, by 20 weeks it reaches the umbilicus, and at 34 weeks the costal margin. Blunt abdominal injury from seat belts is a common cause of uterine rupture and abruptio placentae. Such injuries are more common when the lap belt is worn in isolation, as it com-presses the uterus and allows forward flexion of the thorax over the gravid uterus; correct use of shoulder restraints in conjunction with lap belts minimizes risk.\nSigns of uterine rupture include those of haemoperitoneum, as well as an abnormal fetal lie and easy palpation of fetal extremities. Features on abdominal radiograph include air under the diaphragm, abnormal fetal lie and extension of fetal extremities outside of the confines of the uterus. In the above case, the certainty of the diagnosis and the compromised state of the mother precludes further delay in definitive treatment; therefore DPL and ultrasound are superfluous and CT should, in any case, be avoided in pregnancy. The choice is therefore between operative techniques, caesarean being inappropriate as it fails to allow sufficient access for a full exploration of the abdomen and exclusion of other compounding injuries. Thus, explorative laparotomy is indicated."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "The most common cause of chronic pancreatitis is\nA. Gallstone disease\nB. Hyperlipidaemia\nC. Alcohol\nD. Hypercalcaemia\nE. Cystic fibrosis",
            "options": [
                "A. Gallstone disease",
                "B. Hyperlipidaemia",
                "C. Alcohol",
                "D. Hypercalcaemia",
                "E. Cystic fibrosis"
            ],
            "answer": "C",
            "explanation": "The inherent pathophysiology of chronic pancreatitis is entirely dif-ferent from acute pancreatitis and the two diseases should be consid-ered different entities. There is continuing chronic inflammation within the gland, which causes the structure to be replaced by fibrous tissue and calcification. Normal function is disrupted, and patients will often develop secondary diabetes, which may be extremely brittle. Patients will often be malnourished not only because of their lifestyle, but also as a consequence of exocrine failure. Obstructive jaundice may also occur.\nIncidence is approximately 30/100,000 of the general population; 70% of sufferers have a history of significant alcohol overuse. Other causes are rarer; many cases are idiopathic, some are due to metabolic abnor-malities such as hyperlipidaemia and hypercalcaemia, and some are due to congenital or structural abnormalities, such as cystic fibrosis, choledochal cysts and pancreas divisum."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "Which one of the following statements regarding pancreatic cancer is correct?\nA. Predominantly a disease of the developing world\nB. Incidence is increasing\nC. Female predominance\nD. Majority occur in the neck and tail of the pancreas\nE. Associated with raised serum CA125",
            "options": [
                "A. Predominantly a disease of the developing world",
                "B. Incidence is increasing",
                "C. Female predominance",
                "D. Majority occur in the neck and tail of the pancreas",
                "E. Associated with raised serum CA125"
            ],
            "answer": "B",
            "explanation": "Pancreatic cancer is a disease of Western living with risk factors includ-ing smoking, high-fat diets and exposure to industrial chemicals and dyes. The incidence of pancreatic cancer is increasing; the current incidence is approximately 10/100,000 people. Peak incidence is in the 60-70 year age bracket and there is a male predominance (3:2). The majority of tumours occurs in the head of the gland (85%). Presentation is insidious, and the primary lesion is usually painless and first pre-sentation may be with obstructive jaundice, unintentional weight loss, or back pain/abdominal pain due to infiltration. Other rarer present-ing features include acanthosis nigrans and gastric outlet obstruction. Diagnosis is with imaging, although CA19-9 is 90% sensitive, and may be a useful diagnostic adjunct. Unfortunately, over 80% of cases are not resectable at initial presentation, and the prognosis is extremely poor with an average survival of less than 6 months from diagnosis."
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "Which of the following tumour markers are most commonly associated with pancreatic cancer?\nA. Carcinoembryonic antigen\nB. Cancer antigen (CA)125\nC. CA19-9\nD. a-fetoprotein (AFP)\nE. ẞ-human chorionic gonadotrophin",
            "options": [
                "A. Carcinoembryonic antigen",
                "B. Cancer antigen (CA)125",
                "C. CA19-9",
                "D. a-fetoprotein (AFP)",
                "E. ẞ-human chorionic gonadotrophin"
            ],
            "answer": "C",
            "explanation": "A tumour marker is a substance produced by a tumour which is detect-able in the blood or tissues. Such markers may be used in diagnosis or in monitoring response to treatment or detecting recurrence. Types of marker may be divided into hormones (e.g. ACTH, insulin), anti-gens (e.g. AFP), small peptides (e.g. vanillylmandelic acid, found in the urine of patients with phaeochromocytoma) and enzymes (e.g. PSA). Carcinoembryonic antigen is used to monitor bowel cancer reoccur-rence following attempted curative surgery, but may also be raised in smoking, cirrhosis and pancreatitis. a-fetoprotein is raised in 80% of hepatocellular carcinoma and 70% of testicular teratomas. Raised β-hCG is seen in pregnancy, but raised levels in a man suggest a possible diagnosis of testicular cancer; β-hCG is raised in 70% of teratomas, and 15% of seminomas. CA125 is raised in carcinoma of the ovary, uterus, breast and hepatocellular carcinoma, but may also be raised in peritoni-tis, cirrhosis and pregnancy. CA19–9 is raised in pancreatic and biliary tract malignancy, but may also be raised in colorectal cancer, biliary stasis and primary sclerosing cholangitis. Tumour markers are therefore non-specific and lack sensitivity, which limits their clinical use."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "The most common cause of a peptic ulcer is\nA. Non-steroidal anti-inflammatory drugs\nB. Cigarette smoking\nC. Frequent intake of caffeinated drinks\nD. Helicobacter pylori\nE. High levels of emotional stress",
            "options": [
                "A. Non-steroidal anti-inflammatory drugs",
                "B. Cigarette smoking",
                "C. Frequent intake of caffeinated drinks",
                "D. Helicobacter pylori",
                "E. High levels of emotional stress"
            ],
            "answer": "D",
            "explanation": "The most common cause of peptic ulcers is a bacterial infection called Helicobacter pylori. It causes 80% of peptic ulcers. H. pylori is a spi-ral-shaped Gram-negative microaerophilic bacterium that infects the stomach and duodenum. It has been postulated that this bacteria is transmitted orally through waste contaminated food and water. H. pylori is responsible for causing 95% of duodenal ulcers and 80% of gastric ulcers. It predisposes to peptic ulcers by creating an inflam-matory environment within the stomach and duodenal mucosa. The inflammatory process removes the protective lining of gut mucosa, making it more susceptible to acid erosion which eventually leads to peptic ulceration.\nThe second most common cause of peptic ulcers is NSAIDs. These drugs are responsible for causing 20% of gastric ulcers and 5% of duodenal ulcers. Cigarette smoking, drinking vast amounts of caffeinated drinks and experiencing high levels of emotional stress are not direct causes of peptic ulcers, but can worsen the clinical symptoms and disease pro-gression of an established peptic ulcer. H. pylori infection can be con-firmed by a stool antigen test, a urea breath test or tissue biopsy (under endoscopic guidance) of the gastric mucosa. Chronic untreated H. pylori infection has been shown to increase the risk of gastric cancer."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "A 29-year-old city worker is diagnosed with a duodenal ulcer which was visu-alized with upper gastrointestinal endoscopy. A tissue biopsy of the ulcer was taken and a Campylobacter-like organisms (CLO) test revealed the presence of Helicobacter pylori. Which one of the following treatment regimens will offer the highest chance of cure?\nA. Omeprazole, amoxicillin, clarithromycin\nB. Ranitidine, amoxicillin, metronidazole\nC. Omeprazole, clarithromycin\nD. Ranitidine, amoxicillin\nE. Amoxicillin, clarithromycin",
            "options": [
                "A. Omeprazole, amoxicillin, clarithromycin",
                "B. Ranitidine, amoxicillin, metronidazole",
                "C. Omeprazole, clarithromycin",
                "D. Ranitidine, amoxicillin",
                "E. Amoxicillin, clarithromycin"
            ],
            "answer": "A",
            "explanation": "H. pylori-associated duodenal peptic ulcers are best treated using a triple therapy regimen. The NICE guidelines recommend that patients with proven H. pylori-associated peptic ulcers should be started on a 7-day triple therapy twice daily dosing of either a PPI with clarithro-mycin (500 mg) and amoxicillin (1 g) or a PPI with clarithromycin (500 mg) and metronidazole (400 mg). Omeprazole (20 mg) or lanso-prazole (30 mg) are generally prescribed but other PPIs (e.g. esome-prazole, pantoprazole) can also be used, but have not been shown to be significantly more effective than omeprazole and lansoprazole which are generally cheaper. Ranitidine (a histamine 2 receptor antagonist) is not as effective in suppressing stomach acid production and hence is not recommended in the treatment regimen of H. pylori-associated duodenal ulcers.\nTriple therapy has shown to be 85%–90% effective in eradicating H. pylori ulcers. Usually after 7 days of treatment, the patient can be placed on a 2-month course of low-dose once daily PPI to further aid healing of the peptic ulcer.\nTherefore, from the list, option A (omeprazole, amoxicillin, clarithro-mycin) is the most appropriate."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "A 50-year-old man, who has come on holiday from India, presents with a 10-day history of aching abdominal pain and recent weight loss. On examination, his abdomen is tender in the right hypochondrium and distended with a positive shifting dullness. The liver is enlarged with a hard nodular consistency. The most likely diagnosis is\nA. Haemochromatosis\nB. Hepatocellular carcinoma\nC. Pyogenic liver abscess\nD. Alcoholic cirrhosis\nE. None of the above",
            "options": [
                "A. Haemochromatosis",
                "B. Hepatocellular carcinoma",
                "C. Pyogenic liver abscess",
                "D. Alcoholic cirrhosis",
                "E. None of the above"
            ],
            "answer": "B",
            "explanation": "Recent weight loss and nodular hepatomegaly coupled with ascites and abdominal discomfort is suggestive that this patient has an underlying malignancy, making the most likely answer hepatocellular carcinoma. Patients can also present with jaundice. Hepatocellular carcinoma is common in countries where chronic hepatitis infection is prevalent and usually occurs against a background of cirrhosis secondary to infective hepatitis, excess alcohol or haemachromatosis. Aflatoxin, a metabolite of the Aspergillus species of fungi (mainly Aspergillus flavus and Aspergillus parasiticus) that grows in nuts, has been shown to be another risk factor for hepatocellular carcinoma.\na-fetoprotein, a tumour marker, is usually raised and imaging (ultra-sound, CT, MRI) will confirm the presence of the tumour(s). Treatment involves chemotherapy as well as ablative therapies or surgical liver resection if feasible. Haemochromatosis is an autosomal recessive dis-order of increased dietary iron absorption. It is more common in men usually over the age of 40. Systemic iron deposition may lead to cirrho-sis, diabetes, heart failure and skin pigmentation resulting in a tanned appearance. Diagnosis can be made with a liver biopsy. Pyogenic liver abscess usually presents with an insidious onset of swinging pyrexia, rigours, a tender palpable liver and jaundice. Diagnosis can be con-firmed by blood culturing and imaging. Alcoholic cirrhosis usually presents with jaundice, ascites and a smoothly enlarged liver (in the early stages, fatty liver). In the late stages of cirrhosis, the liver may be impalpable (due to fibrosis) because of chronic inflammation of the liver caused by the alcohol."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "Which of the following is an absolute contraindication for pan-proctocolectomy?\nA. Dysplastic change in the rectal mucosa\nB. Toxic megacolon\nC. Intractable anaemia\nD. Previous pelvic surgery\nE. Young woman with concerns regarding fertility",
            "options": [
                "A. Dysplastic change in the rectal mucosa",
                "B. Toxic megacolon",
                "C. Intractable anaemia",
                "D. Previous pelvic surgery",
                "E. Young woman with concerns regarding fertility"
            ],
            "answer": "B",
            "explanation": "Options A and C should both be regarded as an indication for surgical intervention in ulcerative colitis and therefore cannot be the answer in this case. Previous pelvic surgery can complicate the procedure immensely, but should not prevent lifesaving surgery, although it may change the threshold at which a surgeon may contemplate intervention. Similarly, in cases of young female patients, adequate consideration should be made of the effect on fertility, with an increase in ectopic pregnancy risk and reduction in fertility by 50% due to pelvic adhesions after surgery. Adequate patient counselling is therefore paramount before agreeing on a management strategy, the alternative options being total colectomy with ileo-rectal anastomosis, which carries less risk to fertility, but can result in a symptomatic rectal remnant being left behind.\nThe only absolute contraindication for this type of surgery is toxic megacolon. In the acute setting, pan-proctocolectomy carries an unac-ceptably high mortality rate, as well as high leak rate if a pouch anas-tomosis is attempted. Surgery of this complexity in the acutely unwell patient with an unprepared, inflamed bowel is therefore avoided in favour of a total abdominal colectomy with ileostomy and preservation of the rectum. This removes the diseased bowel, avoids the complex and morbid pelvic dissection, and allows for definitive management once the patient's clinical condition has been stabilized. This may well include a completion proctectomy with ileoanal anastomosis as an elec-tive second operation."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "A 45-year-old patient presents to the outpatient department following refer-ral by his general practitioner for rectal bleeding. The patient reports that as well as the bleeding in the past few days he has experienced increased pain in the perianal area. On examination you identify thrombosed haemorrhoids. The appropriate management is\nA. Admit, analgesia, haemorrhoidectomy\nB. Oral and local analgesia and discharge with follow-up\nC. Outpatient department banding\nD. 5% phenol in arachis oil injection above the dentate line\nE. Discharge to general practitioner for management",
            "options": [
                "A. Admit, analgesia, haemorrhoidectomy",
                "B. Oral and local analgesia and discharge with follow-up",
                "C. Outpatient department banding",
                "D. 5% phenol in arachis oil injection above the dentate line",
                "E. Discharge to general practitioner for management"
            ],
            "answer": "B",
            "explanation": "Thrombosed haemorrhoids are painful and uncomfortable, but do not necessitate hospital admission in the acute stages. Appropriate analge-sia should be prescribed (avoid opiates as they can cause constipation) along with laxatives and stool softeners. Patients should be advised to use icepacks and elevate the foot of the bed. The majority of haemor-rhoids will heal spontaneously with fibrosis, however best practice is to follow up the patient in outpatients, to identify any further haemor-rhoids, which may become problematic, and to offer appropriate defini-tive management."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "A patient is being prepared for treatment of a fistula in the operating theatre. The consultant asks you to examine the patient and from your findings predict the course the tract is likely to have taken. You note a sinus in the 8 o'clock posi-tion with the patient in the lithotomy position. Where is the most likely point at which you may find the corresponding internal opening within the anal canal?\nA. 12 o'clock\nB. 8 o'clock\nC. Along the transverse line bisecting the anal canal\nD. 6 o'clock\nE. It is not possible to predict",
            "options": [
                "A. 12 o'clock",
                "B. 8 o'clock",
                "C. Along the transverse line bisecting the anal canal",
                "D. 6 o'clock",
                "E. It is not possible to predict"
            ],
            "answer": "D",
            "explanation": "This question aims to evaluate a candidate's understanding of Good-sall's Rule. This states that the primary (internal) orifice of a fistula can be predicted from the position of its secondary (external) orifice. With the patient lying in the lithotomy position, an imaginary trans-verse line is drawn from 9 o'clock to 3 o'clock centred on the anal canal. A fistula with its external opening anterior to this line typі-cally has a straight radial tract leading to its internal orifice. Therefore an external orifice positioned at 2 o'clock will have a corresponding primary orifice also at 2 o'clock. An external orifice posterior to the transverse line will typically follow a curved tract and open internally at the 6 o'clock position, such as in this case."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "Which one of the following is not an independent risk factor for development of pilonidal sinus?\nA. Family history\nB. Poor personal hygiene\nC. Obesity\nD. Male sex\nE. Professional driver",
            "options": [
                "A. Family history",
                "B. Poor personal hygiene",
                "C. Obesity",
                "D. Male sex",
                "E. Professional driver"
            ],
            "answer": "A",
            "explanation": "Pilonidal literally means ‘nest of hair' in Latin. They most commonly occur in young adults and there is a male preponderance of 4:1. The aetiology is unclear, but it is thought that implantation of hair occurs in susceptible areas which sets up a foreign body reaction. They are typically asymptomatic until they become infected, when they form abscesses. Risk factors include poor hygiene, obesity and racial origin (Mediterranean, Middle Eastern, Indian subcontinent). Hairdressers are also at risk as they are exposed to large amounts of cut hair, as are those with jobs involving a lot of sitting. There is no genetic link save for preponderance towards body hair."
        },
        {
            "id": 26,
            "question_type": "mcq",
            "question": "A 40-year-old patient presents with abdominal pain. He appears unkempt and gives only a vague history. On examination, he is tender over his right iliac fossa where a mass can be felt. The mass is soft and boggy. Compression is pos-sible, which accentuates a similar swelling found below the level of the inguinal ligament. The swelling is not hot or erythematous. On mobilization, the patient complains of severe back pain. The diagnosis is\nA. Ureteric abscess\nB. Appendix mass\nC. Femoral hernia\nD. Psoas abscess\nE. Spigelian hernia",
            "options": [
                "A. Ureteric abscess",
                "B. Appendix mass",
                "C. Femoral hernia",
                "D. Psoas abscess",
                "E. Spigelian hernia"
            ],
            "answer": "D",
            "explanation": "Tuberculosis is re-emerging rapidly in the UK, its prevalence being greatest in large urban areas, especially London. Complications of TB such as psoas abscess are also becoming more common and clinicians must re-familiarize themselves with presentations which were thought to be historical. The at-risk populations are immigrants and the home-less, as well as the immunocompromised.\nPsoas abscesses form when pus tracts down the sheath of the psoas muscle, presenting as abdominal pain, fever and an iliac fossa mass. Extension below the inguinal ligament results in a groin swelling. On examination, it is often possible to empty the iliac fossa swelling into the groin swelling, and vice versa. Worldwide, psoas abscesses are most commonly associated with tuberculous abscesses of the lumbar spine, hence the back pain in this case. Psoas abscesses may also be caused by non-mycobacteria; any pyogenic gastrointestinal or urological infec-tion may be causative, although the presentation is typically more acute with sepsis and erythematous, warm swelling of the afflicted area. The examination findings described in the above scenario do not support the diagnosis of hernia."
        },
        {
            "id": 27,
            "question_type": "mcq",
            "question": "A 46-year-old patient is seen in the outpatient department for follow-up of Crohn's disease. He reports intractable diarrhoea, but does not report any systemic symp-toms or abdominal pain. Contrast follow-through fails to show any evidence of active disease or fistulation. He is otherwise well. His maintenance medications include mesalazine and 6-mercaptopurine. The most appropriate choice of drug is\nA. Loperamide hydrochloride\nB. Ispaghula husk\nC. Methotrexate\nD. Cholestyramine\nE. Codeine phosphate",
            "options": [
                "A. Loperamide hydrochloride",
                "B. Ispaghula husk",
                "C. Methotrexate",
                "D. Cholestyramine",
                "E. Codeine phosphate"
            ],
            "answer": "D",
            "explanation": "Diarrhoea in Crohn's disease may be due to bile acid malabsorption sec-ondary to disease or resection of the terminal ileum. Increased delivery of bile salts into the colon irritates the bowel wall and causes diarrhoea.\nPrescribing a bile acid sequester such as cholestyramine can reduce symptoms by 30%–40%.\nAntimotility agents such as codeine and loperamide should be avoided in IBD because of the risk of propagating paralytic ileus. A bulking agent in this scenario would not deal with the root cause of the diar-rhoea and is unlikely to be effective. As there is no evidence of active inflammation in this patient, methotrexate would be inappropriate."
        },
        {
            "id": 28,
            "question_type": "mcq",
            "question": "You are asked to assist in theatre during an emergency appendicectomy. The con-sultant asks you to locate McBurney's point. From the list below, which answer best describes the location of McBurney's point?\nA. Two-thirds of the distance from the umbilicus to the right anterior superior iliac spine\nB. The midpoint between the anterior superior iliac spine and the pubic symphysis\nC. The midpoint between the anterior superior iliac spine and the pubic tubercle\nD. Two-thirds the distance from the right anterior superior iliac spine to the umbilicus\nE. One-third the distance from the umbilicus to the right anterior superior iliac spine",
            "options": [
                "A. Two-thirds of the distance from the umbilicus to the right anterior superior iliac spine",
                "B. The midpoint between the anterior superior iliac spine and the pubic symphysis",
                "C. The midpoint between the anterior superior iliac spine and the pubic tubercle",
                "D. Two-thirds the distance from the right anterior superior iliac spine to the umbilicus",
                "E. One-third the distance from the umbilicus to the right anterior superior iliac spine"
            ],
            "answer": "A",
            "explanation": "McBurney's point is classically described as ‘two-thirds the distance along a line drawn from the umbilicus to the right ASIS'. This point marks the usual site of the base of the appendix. The classical incision made over McBurney's point, which is also perpendicular to the imagi-nary line joining the umbilicus to the right ASIS, is termed a ‘grid iron incision'. The ‘Lanz incision' is more commonly used now as it has a better cosmetic result and is made horizontally over McBurney's point.\nThe midpoint between the ASIS and the pubic symphysis marks the landmark of the mid inguinal point. The common femoral artery lies beneath this point (±1.5 cm either way at this point due to anatomical variance). The midpoint between the ASIS and the pubic tubercle marks the landmark of the midpoint of the inguinal ligament. The deep ingui-nal ring, which marks the entrance of the inguinal canal, can be found 1.5 cm above the midpoint of the inguinal ligament. Options D and E are variants of option A and are incorrect."
        },
        {
            "id": 29,
            "question_type": "mcq",
            "question": "The most common cause of mechanic intestinal obstruction is\nA. Inflammatory bowel disease\nB. Volvulus\nC. Neoplasia\nD. Adhesions\nE. Hernias",
            "options": [
                "A. Inflammatory bowel disease",
                "B. Volvulus",
                "C. Neoplasia",
                "D. Adhesions",
                "E. Hernias"
            ],
            "answer": "D",
            "explanation": "Overall, the most common cause of mechanical bowl obstruction (small and large bowel) is adhesions, after which follow hernias, neoplasia and inflammatory conditions such as inflammatory bowel disease (ulcer-ative and Crohn's colitis) and diverticulitis."
        },
        {
            "id": 30,
            "question_type": "mcq",
            "question": "A patient is sent for emergency laparoscopic cholecystectomy after being diag-nosed with acute cholecystitis, which failed to resolve after 48 hours. One step of this procedure entails clamping and dividing the arterial blood supply to the gallbladder to facilitate its resection. From the list of answers below, select the artery that supplies the gallbladder.\nA. Cystic artery\nB. Right hepatic artery\nC. Common hepatic artery\nD. Left hepatic artery\nE. Gastroduodenal artery",
            "options": [
                "A. Cystic artery",
                "B. Right hepatic artery",
                "C. Common hepatic artery",
                "D. Left hepatic artery",
                "E. Gastroduodenal artery"
            ],
            "answer": "A",
            "explanation": "The common hepatic artery arises from the coeliac trunk, and along its course gives off the gastroduodenal artery (supplies the pylorus and proximal part of the duodenum). After giving off the gastroduodenal artery, the common hepatic artery becomes the hepatic artery proper which gives off the right gastric artery (supplies the lesser curvature of the stomach). The hepatic artery proper then divides into the left and right hepatic arteries. The right hepatic artery gives off the cystic artery, which supplies the gallbladder. It is worth noting that variations in the origin of the cystic artery exist which will inevitably have con-sequences on the course of the operative procedure. In 70% of patients the cystic artery arises from the right hepatic artery."
        },
        {
            "id": 31,
            "question_type": "mcq",
            "question": "A patient with a perforation of the sigmoid colon, secondary to diverticulitis, is sent for an emergency colonic resection. From the list below, select the most appropriate colonic resection that should be performed in this patient.\nA. Right hemicolectomy\nB. Left hemicolectomy\nC. Anterior resection\nD. Abdominoperineal resection\nE. Hartmann's procedure",
            "options": [
                "A. Right hemicolectomy",
                "B. Left hemicolectomy",
                "C. Anterior resection",
                "D. Abdominoperineal resection",
                "E. Hartmann's procedure"
            ],
            "answer": "E",
            "explanation": "If signs of perforated diverticulitis are present (please see answer to Question 11 in Section 6), the patient is sent to the theatre to have an emergency explorative laparotomy, which will confirm the diagnosis. The abdomen is washed to remove contaminated debris. Hartmann's procedure is commonly performed for perforated diverticulitis or emergency large bowel obstruction. The affected sigmoid colon is resected and the rectal stump is oversewn and left within the pelvis. The proximal end is surfaced and stitched to the skin and usually acts as a temporary left iliac fossa colostomy. The temporary colostomy can be reanastomosed to the rectal stump a few months after surgery; this allows for the inflammation, sec-ondary to bacterial contamination and surgery, to resolve, which improves the rate of success of reanastomosis (if not contraindicated).\nHigh rectal tumours are treated by anterior resection whereby the rec-tal tumour is removed and the rectal stump is anastomosed with the colon above it. Low rectal tumours are treated with the abdominoperi-neal resection whereby the rectum and anus are excised and a perma-nent colostomy is made. See Section 5 for more information regarding colonic resections."
        },
        {
            "id": 32,
            "question_type": "mcq",
            "question": "A 55-year-old man who has been constipated for the past 5 days presents with suprapubic colicky pain. On examination his abdomen is distended and there is marked tenderness in the suprapubic region. Bowel sounds are increased. A plain film supine abdominal film shows dilated loops of large bowel. A barium enema shows an 'apple core narrowing' in the rectosigmoid area. The most likely cause of this man's large bowel obstruction is\nA. Adhesions\nB. Colorectal carcinoma\nC. Volvulus\nD. Faecal impaction\nE. Inflammatory bowel disease",
            "options": [
                "A. Adhesions",
                "B. Colorectal carcinoma",
                "C. Volvulus",
                "D. Faecal impaction",
                "E. Inflammatory bowel disease"
            ],
            "answer": "B",
            "explanation": "The apple core lesion seen on the contrast barium enema is highly sug-gestive of an underlying malignancy, and also the cause of the large bowel obstruction. In the UK, the most common cause of large bowel obstruction is colorectal carcinoma. The colonic luminal diameter decreases as tumour infiltration increases, leading to a narrowing of the bowel lumen, which further results in intraluminal mechanical obstruction of the large bowel."
        },
        {
            "id": 33,
            "question_type": "mcq",
            "question": "A 50-year-old postmenopausal woman with stage 4 invasive ductal carcinoma of the right breast presents with slight shortness of breath. On clinical examina-tion, you notice that the right lung base is stony dull on percussion coupled with decreased air entry. A chest radiograph confirms pleural effusion of the right lung. A chest drain is inserted and some of the drained pleural aspirate is sent for cytological examination and a computed tomography scan of the chest is performed. The results confirm metastatic spread to the lungs. What is the most likely route of metastases that accounts for the pleural effusion?\nA. Transcoelomic spread\nB. Haematogenous spread\nC. Lymphatic spread\nD. Direct extension\nE. None of the above",
            "options": [
                "A. Transcoelomic spread",
                "B. Haematogenous spread",
                "C. Lymphatic spread",
                "D. Direct extension",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "Generally, breast tumours can spread via four main routes:\n• Direct extension – To surrounding structures such as muscle and to the chest wall.\n• Lymphatic spread – Cancer cells can then block the lymphatic drainage in certain areas of the body causing oedema and changes in the overlying skin.\n• Haematogenous spread – Micrometastatic cancer cells can spread via blood vessels and infiltrate bone, lungs, liver and brain.\n• Transcoelomic spread – This is a term used to describe invasion of the serosal lining of an organ by malignant cells. The malig-nant cells trigger an inflammatory response which results in the formation of serous exudates. These exudates then collect in a coelomic cavity, such as the pleural space/cavity.\nIn this case, the effusion has occurred due to dissemination of malig-nant cells to the pleura resulting in the formation of malignant pleural seedings. These seedings undergo an inflammatory process which gen-erates serous exudates into the pleural cavity."
        },
        {
            "id": 34,
            "question_type": "mcq",
            "question": "Which hormone receptor status of breast carcinoma is more likely to respond to hormonal therapy?\nA. Oestrogen receptor negative and progesterone receptor negative\nB. Oestrogen receptor positive and progesterone receptor positive\nC. Oestrogen receptor negative and progesterone receptor positive\nD. Oestrogen receptor positive and progesterone receptor negative\nE. None of the above",
            "options": [
                "A. Oestrogen receptor negative and progesterone receptor negative",
                "B. Oestrogen receptor positive and progesterone receptor positive",
                "C. Oestrogen receptor negative and progesterone receptor positive",
                "D. Oestrogen receptor positive and progesterone receptor negative",
                "E. None of the above"
            ],
            "answer": "B",
            "explanation": "Studies have shown that tumours that express oestrogen and proges-terone receptors show a greater response to hormonal therapy and consequently reduce the growth of tumours that express both of the mentioned receptors. The tumours which express oestrogen alone can respond to hormonal treatment, but to a lesser extent when compared with oestrogen- and progesterone-positive tumours. The tumours which are oestrogen negative tend to express high levels of HER-2 neu transmembrane receptors. These are members of the tyrosine kinase receptors, which have shown to respond to trastuzumab, a monoclonal antibody. Trastuzumab binds to the extracellular portion of the HER-2 neu receptor and thus the cancer cells undergo arrest during the G1 phase of the cell cycle, resulting in decreased cell proliferation."
        },
        {
            "id": 35,
            "question_type": "mcq",
            "question": "A 55-year-old man presents with frequency of urine and excessive thirst. He also experiences muscle cramps and has a 5-year history of hypertension that is being managed conservatively. Blood tests show his capillary glucose is 4.1 mmol/L, sodium is 149 mmol/L and potassium is 3.1 mmol/L. The most likely diagnosis is\nA. Hyperparathyroidism\nB. Hypoparathyroidism\nC. Phaeochromocytoma\nD. Conn's syndrome\nE. Cushing's syndrome",
            "options": [
                "A. Hyperparathyroidism",
                "B. Hypoparathyroidism",
                "C. Phaeochromocytoma",
                "D. Conn's syndrome",
                "E. Cushing's syndrome"
            ],
            "answer": "D",
            "explanation": "Polyuria, polydipsia and muscle cramps coupled with high sodium and low potassium suggests that this patient has Conn's syndrome. Conn's syndrome results from an aldosterone-secreting adenoma of the adrenal gland. The excessive amounts of aldosterone leads to increased sodium and water retention and enhances potassium excretion which results in high blood pressure. Hypokalaemia ensues, which is characterized by muscle cramps and polyuria (which occurs secondary to renal tubular damage). This condition can be diagnosed by measuring serum aldoste-rone and renin levels, which reveal raised aldosterone and renin titres. Managing this patient involves administering an aldosterone antagonist (e.g. oral spironolactone), and surgical resection of the adenoma once it has been localized with CT.\nCushing's syndrome is the result of raised levels of serum cortisol. Causes include a pituitary adenoma (Cushing's disease), adrenal hyperplasia or neoplasia and ectopic ACTH. The main clinical features of Cushing's syndrome include polyuria, polydipsia, hypertension, increased weight, moon face, central obesity, insulin resistance leading to hyperglycae-mia and diabetes mellitus, thinning of the skin and striae and hirsut-ism. This patient is normoglycaemic and thus Cushing's syndrome can be ruled out.\nThis patient does not raise or decrease serum calcium levels, which would be seen in hyperparathyroidism and hypoparathyroidism, respectively. Phaeochromocytoma is a neuroendocrine tumour of the adrenal glands originating from the chromaffın cells. Patients present with hypertension, tachycardia and palpitations, anxiety, headaches and weight loss. Diagnosis can be made by measuring catecholamines and metanephrines in blood or urine (24-hour urine collection)."
        },
        {
            "id": 36,
            "question_type": "mcq",
            "question": "A 63-year-old woman presents to the emergency department with episodes of difficulty breathing coupled with flushing and diarrhoea. On taking the his-tory you ascertain that these episodes are precipitated by stress and alcohol. On examination, her blood pressure is 129/83 mmHg and heart rate is 80 beats/min. Based on this patient's history, select the best distinguishing investigation from the list below.\nA. 24-hour urinary 5-hydroxyindole acetic acid\nB. 24-hour urinary vanillylmandelic acid\nC. Dexamethasone suppression test\nD. Aldosterone and renin levels\nE. Short Synacthen test",
            "options": [
                "A. 24-hour urinary 5-hydroxyindole acetic acid",
                "B. 24-hour urinary vanillylmandelic acid",
                "C. Dexamethasone suppression test",
                "D. Aldosterone and renin levels",
                "E. Short Synacthen test"
            ],
            "answer": "A",
            "explanation": "Paroxysmal flushing, diarrhoea, breathlessness (due to bronchospasm) and abdominal pain, precipitated by stress, alcohol and caffeine, are symptoms highly suggestive of carcinoid syndrome. Carcinoid tumours arise from the enterochromaffın cells of the gastrointestinal tract (mostly small intestine and appendix). Typically, these tumours secrete serotonin (5-HT), which is transported to the liver and broken down into harmless products. When carcinoid secondaries form in the liver, the secreted 5-HT bypasses liver metabolism and is released into the blood stream where the above described symptoms are experienced (also known as carcinoid syndrome). This condition can be diagnosed by measuring 24-hour urinary 5-hydroxyindole acetic acid, a break-down product of serotonin. General management of this condition involves either surgical resection of the primary tumour or, in meta-static disease, with a somatostatin analogue (e.g. octreotide) for symp-tomatic treatment.\nThe 24-hour urinary vanillylmandelic acid test is used in the diagnosis of a phaeochromocytoma. The dexamethasone suppression test is used for diagnosing Cushing's syndrome. Aldosterone and renin levels may be measured for the diagnosis of Conn's syndrome. The short Synacthen test can be used to assess the cortisol-secreting efficiency of the adrenal glands and aid the diagnosis of Addison's disease."
        },
        {
            "id": 37,
            "question_type": "mcq",
            "question": "During a ward round you are told to list the structures found in the adductor (Hunter's) canal. From the list below, select the statement that best describes the structures found in the adductor (Hunter's) canal.\nA. Femoral artery, femoral vein, saphenous nerve and the nerve to the vastus medialis\nB. Anterior tibial artery, posterior tibial artery and common peroneal nerve\nC. Femoral artery, femoral vein, saphenous nerve and peroneal nerve\nD. Femoral vein, anterior tibial artery and saphenous nerve\nE. Posterior tibial artery, femoral vein, saphenous nerve",
            "options": [
                "A. Femoral artery, femoral vein, saphenous nerve and the nerve to the vastus medialis",
                "B. Anterior tibial artery, posterior tibial artery and common peroneal nerve",
                "C. Femoral artery, femoral vein, saphenous nerve and peroneal nerve",
                "D. Femoral vein, anterior tibial artery and saphenous nerve",
                "E. Posterior tibial artery, femoral vein, saphenous nerve"
            ],
            "answer": "A",
            "explanation": "The adductor (Hunter's) canal is usually 15 cm in length and is a narrow fascial tunnel found in the thigh. It is located deep in the middle third of the sartorius muscle and provides an intermuscular passage through which the femoral vessels pass to reach the popli-teal fossa, where they become popliteal vessels. The adductor canal begins about 15 cm inferior to the inguinal ligament, where the sar-torius muscle crosses over the adductor longus muscle. It ends at the adductor hiatus in the tendon of the adductor magnus muscle. The structures within the adductor canal are the femoral artery, femoral vein, saphenous nerve and the nerve to the vastus medialis. The site at which the femoral artery exits the adductor canal is a common place for the build-up of atherosclerotic plaques. On auscultation of this area, a bruit may be heard. Note that not hearing a bruit does not exclude stenotic vessels."
        },
        {
            "id": 38,
            "question_type": "mcq",
            "question": "Lipodermatosclerosis is commonly associated with which one of the following conditions?\nA. Deep vein thrombosis\nB. Intermittent claudication\nC. Acute leg ischaemia\nD. Varicose veins\nE. Superficial thrombophlebitis",
            "options": [
                "A. Deep vein thrombosis",
                "B. Intermittent claudication",
                "C. Acute leg ischaemia",
                "D. Varicose veins",
                "E. Superficial thrombophlebitis"
            ],
            "answer": "D",
            "explanation": "Lipodermatosclerosis is characterized by induration, hyperpigmenta-tion and depression of the skin resulting from fibrosis of subcutane-ous fat. It is associated with chronic venous insufficiency, occurs just above the ankles, and is commonly seen in patients with varicose veins. The affected area appears erythematous initially and progresses to a purple-brown colour (chronic deposition of haemosiderin coupled with fibrosis of subcutaneous fat), and the overlying skin becomes tight and fırm, which may result in pain. Circumferential lipodermatosclerosis may produce the appearance of an inverted champagne bottle. Venous ulcers can develop in areas of lipodermatosclerosis if the chronic venous insufficiency is not corrected."
        },
        {
            "id": 39,
            "question_type": "mcq",
            "question": "Your senior colleague asks you to see a patient in clinic who has Fontaine's clas-sification stage 3 peripheral vascular disease. Which one of the following options best describes the symptoms associated with stage 3 of Fontaine's classification of peripheral vascular disease?\nA. Ischaemic rest pain\nB. Ulceration with or without gangrene\nC. Asymptomatic\nD. Intermittent claudication\nE. None of the above",
            "options": [
                "A. Ischaemic rest pain",
                "B. Ulceration with or without gangrene",
                "C. Asymptomatic",
                "D. Intermittent claudication",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "Fontaine's classification is used for clinical categorization according to disease progression of peripheral vascular disease:\n• Stage 1 - Asymptomatic patient\n• Stage 2 - Patient suffering from intermittent claudication\n• Stage 3 - Ischaemic rest pain\n• Stage 4 – Ulceration and/or gangrene"
        },
        {
            "id": 40,
            "question_type": "mcq",
            "question": "You are told that a 40-year-old woman, who has had a 4-month history of left upper limb muscular fatigue, dizziness and vertigo, has been diagnosed with sub-clavian steal syndrome. The most common cause of subclavian steal syndrome is\nA. Distal occlusion of the left subclavian artery\nB. Proximal occlusion of the left subclavian artery\nC. Distal occlusion of the left brachial artery\nD. Proximal occlusion of the left brachial artery\nE. Proximal occlusion of the left radial artery",
            "options": [
                "A. Distal occlusion of the left subclavian artery",
                "B. Proximal occlusion of the left subclavian artery",
                "C. Distal occlusion of the left brachial artery",
                "D. Proximal occlusion of the left brachial artery",
                "E. Proximal occlusion of the left radial artery"
            ],
            "answer": "B",
            "explanation": "Peripheral vascular disease of the upper limbs is less common compared with PVD of the lower limbs. Twice as many patients who have upper limb PVD are women. Subclavian artery occlusion tends to be more com-mon on the left with symptoms of muscular fatigue and pain (similar to what is felt in intermittent claudication of the lower limbs). Occlusion of the proximal subclavian artery can sometimes result in a subclavian steal syndrome whereby blood reaches the affected arm via the ipsi-lateral carotid artery, the circle of Willis and by retrograde flow down the vertebral artery to the distal subclavian artery. With an increase in upper limb physical activity, there is an increase in the demand for oxygenated blood, and the affected arm ‘steals' blood from the posterior arterial cerebral circulation. The resulting symptoms include muscular pain and fatigue in the affected arm, dizziness, vertigo and in some cases, syncope. There are reduced blood pressure measurements in the affected arm and, there may be weak or absent pulses distal to the site of the occlusion. Initial investigations include duplex ultrasound and angiography will usually localize the proximal subclavian occlu-sion. Percutaneous transluminal angioplasty is usually performed to revascularize the occlusion. If PTA fails, bypass grafting using reversed saphenous vein or synthetic grafts such as PTFE can be used to bypass the occlusion and revascularize the affected arm."
        },
        {
            "id": 41,
            "question_type": "mcq",
            "question": "During a ward round one of your patients, who had an elective repair of an abdominal aortic aneurysm 4 days ago, tells you that her left arm is severely painful. On examination, you notice that the proximal forearm is erythematous and swollen, particularly in the region of the left anterior cubital fossa. You are told by a member of staff that it was difficult to insert an intravenous cannula the day before. The patient is apyrexial. What is the most likely diagnosis?\nA. Deep vein thrombosis\nB. Cellulitis\nC. Superficial thrombophlebitis\nD. Tendonitis\nE. Lymphangitis",
            "options": [
                "A. Deep vein thrombosis",
                "B. Cellulitis",
                "C. Superficial thrombophlebitis",
                "D. Tendonitis",
                "E. Lymphangitis"
            ],
            "answer": "C",
            "explanation": "The most likely diagnosis here is superficial thrombophlebitis (inflam-mation of superficial veins) which is commonly associated with recent trauma (i.e. in this case, multiple attempts of intravenous cannulae insertion), varicose veins, malignancy and thromboangiitis obliter-ans (a progressive occlusive disease of the blood vessels in the lower extremities associated with cigarette smoking). The patient usually presents with pain and swelling at the site where the superficial vein is inflamed (i.e. site of trauma, varicose veins, etc.). On palpation the vein feels hard and the overlying skin is erythematous and swollen. Management involves removing the underlying cause and treating symptoms with ice packs and NSAIDs. This condition is self-limiting and will usually resolve within 2–3 days. Complications of superficial thrombophlebitis include abscess formation, which will require drain-age and antibiotic cover.\nCellulitis is a bacterial infection of the connective tissue underlying the skin. Patients usually present with symptoms similar to superficial thrombophlebitis in addition to fever, nausea and headaches. Common organisms include normal skin flora and Group A streptococcus. If the bacteria penetrate deeper tissues, this can lead to necrotizing fasci-itis. Lymphangitis is an acute bacterial infection of the lymphatic ves-sels characterized by painful, red streaks below the skin surface which travel from the site of the infection to the armpits or groin. Associated symptoms include fever, muscle aches and nausea. The most common causative organism is Streptococcus pyogenes and in some cases, staph-ylococci. This is a life-threatening infection and leads to widespread sepsis if prompt treatment is not initiated. Although blood cultures will identify the causative organism, antibiotic therapy should be started immediately if this condition is suspected."
        },
        {
            "id": 42,
            "question_type": "mcq",
            "question": "A 30-year-old man presents with a 2-month history of swelling in the left testi-cle that is associated with an occasional dull ache. On examination, it is possible to get above the swelling, but it is not palpable separate to the scrotal contents. In addition, it transilluminates brightly when a light is shone through it. This is likely to be a\nA. Inguinoscrotal hernia\nB. Spermatocele\nC. Hydrocele\nD. Varicocele\nE. Testicular tumour",
            "options": [
                "A. Inguinoscrotal hernia",
                "B. Spermatocele",
                "C. Hydrocele",
                "D. Varicocele",
                "E. Testicular tumour"
            ],
            "answer": "C",
            "explanation": "Hydrocele is a collection of fluid within the tunica vaginalis. Hydroceles are termed primary, i.e. cause unknown (the predominant type espe-cially in children and those over 40 years of age), or secondary to trauma, infection or neoplasm. Patients present mainly with a swelling in the scrotum or an increase in the size of the testis. On examination, it is possible to get above a hydrocele, but as the swelling is within the testis, it is not palpable as a separate entity. Additionally, is it not possi-ble to reduce the swelling, which would distinguish it from an inguino-scrotal hernia. The fluid within a hydrocele is typically protein-rich and has a clear yellow colour. If large, there is a fluid thrill on palpation and dullness to percussion. Classically, a hydrocele transilluminates brightly when a light is shone through.\nInguino-scrotal hernia occurs as a result of weakness of the deep inguinal ring through which intra-abdominal viscera can pass, exit-ing through the superficial ring and descending into the scrotum. On examination it is not possible to get above the swelling and a cough impulse will be present. In addition, the swelling is frequently reducible and may be controlled with pressure over the deep ring. The testis and epididymis will also be palpable separate to the hernia and, finally, the structure is opaque to light shone behind it.\nSpermatocele is a type of epididymal cyst containing slightly grey, opaque fluid and few spermatozoa. The condition is diagnosed follow-ing fluid aspiration and microscopic examination. Physical examina-tion will reveal a swelling in the scrotum above and behind the testis, which is separately palpable. It is usually multilocular and may pro-trude onto the testicular surface allowing individual loculi to be pal-pable. Presentation is similar to that of a hydrocele but the ability to palpate the testis separately distinguishes the two conditions.\nA varicocele is a bunch of dilated and tortuous veins of the pampini-form plexus (the venous supply of the testis). These are akin to varicose veins of the spermatic cord. They are more common on the left hemi-scrotum and may result in a vague, dragging sensation and dull ache in the scrotum/groin. Varicoceles may be primary or secondary to a left-sided renal tumour (testicular artery branches off the left renal artery). The patient with suspected varicocele must be examined standing up as the veins empty on lying flat. The veins are often visible and palpable and classically have the feel of a ‘bag of worms'. Management is either conservative with a scrotal support, embolization of the testicular vein under radiological guidance (the preferred method), or surgically by clipping the testicular vein.\nMost patients with a testicular tumour will present with a painless lump in the testicle although a small proportion may present with testicular pain. The lump is mostly confined to the scrotum, with the testis and epididymis palpable separately. The lump will also be opaque to light. Definitive diagnosis lies in further tests such as ultrasonography."
        },
        {
            "id": 43,
            "question_type": "mcq",
            "question": "In the initial management of suspected testicular torsion, all of the following are appropriate management steps, except\nA. Intravenous access and fluid resuscitation\nB. Obtain blood for full blood count, urea and electrolytes, clotting, group and save\nC. Analgesia\nD. Make patient nil by mouth\nE. Ultrasound scan of the scrotum",
            "options": [
                "A. Intravenous access and fluid resuscitation",
                "B. Obtain blood for full blood count, urea and electrolytes, clotting, group and save",
                "C. Analgesia",
                "D. Make patient nil by mouth",
                "E. Ultrasound scan of the scrotum"
            ],
            "answer": "E",
            "explanation": "Testicular torsion is a surgical emergency most common in males aged 10–25 years. It is commonly preceded by a trivial exertion or trauma, presenting initially as poorly localized pain in the abdomen and loin (the testicle is supplied by the T10 dermatomal level). Severe testicu-lar pain and tenderness follows, usually affecting a single testicle. The pain can be accompanied by severe nausea and vomiting. On exami-nation the testicle can be hot, swollen and extremely tender to touch. Classically the testicle lies horizontally and is high riding. Symptoms progress rapidly over hours and, as the twisting of the testis within the tunica vaginalis compromises the testicular blood supply, leave only a short window in which the testicle is salvageable. A scrotal explora-tion should be performed as soon as possible in suspected cases of tor-sion with derotation of the testis and three-point fixation of both the affected and unaffected testicle within the scrotum (orchidopexy).\nThe first four options for management are appropriate when prepar-ing a patient for most surgical procedures. Given the urgent nature of testicular torsion, requesting an ultrasound scan would cause delay in definitive treatment and could lead to the loss of a potentially viable testis. As a result, in cases of suspected testicular torsion, it is the norm to perform a scrotal examination under general anaesthesia and treat as indicated, i.e. orchidectomy if the testicle is not viable, or orchidopexy."
        },
        {
            "id": 44,
            "question_type": "mcq",
            "question": "As the surgical house officer on call, you are asked to review a 72-year-old man who has undergone transurethral resection of prostate (TURP) earlier in the day, and appears to be very confused. On further questioning, he is disoriented to time and place and reports feeling nauseous. In addition, observations show a blood pressure of 157/95 mmHg and a heart rate of 55 beats/min. A review of his notes indicates that he takes aspirin regularly, but otherwise has no chronic medical problems or past history of confusion. You suspect that this man may have TURP syndrome and request a full set of bloods including urea and elec-trolytes. Which biochemical marker would you typically expect to be low in this condition?\nA. Calcium\nB. Sodium\nC. Potassium\nD. Chloride\nE. Hydrogen",
            "options": [
                "A. Calcium",
                "B. Sodium",
                "C. Potassium",
                "D. Chloride",
                "E. Hydrogen"
            ],
            "answer": "B",
            "explanation": "Transurethral resection of prostate (TURP) is a commonly performed sur-gical procedure predominantly to relieve lower urinary tract symptoms that arise due to prostatic enlargement in middle-aged and elderly men. One of the potential major complications of this procedure, affecting some 2% of patients, is TURP syndrome, which occurs during or after the opera-tion as a result of absorption of large volumes of irrigation fluid used in the procedure through the prostatic venous plexus. This process can lead to hyponatraemia, high nitrogen load, dehydration, hypothermia and eventually cerebral oedema. Clinically, patients may become confused, reporting visual disturbances, nausea, vomiting, hypertension, bradycar-dia and seizures if severe. There is a high mortality associated with this condition and treatment involves supportive measures, fluid restriction, diuretics and an early review by a senior colleague."
        },
        {
            "id": 45,
            "question_type": "mcq",
            "question": "A 36-year-old man presents to the emergency department with a 2-day his-tory of fever, dysuria, frequency and occasional haematuria. He has under-gone cystoscopy for investigation of recurrent urinary tract infections 4 days prior to admission. On examination, he is found to be pyrexial with mild tachycardia while rectal examination reveals a swollen, firm and tender pros-tate gland. Blood tests reveal raised inflammatory markers and a urine dip is positive for nitrites. Antibiotics are commenced and a urological opinion is sought for further management. What inflammatory process is this patient likely to have?\nA. Prostatitis\nB. Pyelonephritis\nC. Urethritis\nD. Epididymitis\nE. Cystitis",
            "options": [
                "A. Prostatitis",
                "B. Pyelonephritis",
                "C. Urethritis",
                "D. Epididymitis",
                "E. Cystitis"
            ],
            "answer": "A",
            "explanation": "Prostatitis is an acute or chronic inflammation of the prostate gland related to bladder outflow obstruction and instrumentation of the urethra and prostate, e.g. with catheterization, cystoscopy, TURP and urethral dilatation. It presents with frequency, urgency, dysuria and occasional haematuria (i.e. symptoms of a UTI) as well as fever, haemospermia and occasionally a tender prostate gland and pain on ejaculation. Organisms causing infection are: Escherichia coli (the most common), Klebsiella, Proteus, Pseudomonas and Serratia. Treatment is with antibiotics (as per local guidelines) and further investigations such as a transrectal ultra-sound may be used to rule out (and if necessary drain) any abscess that has formed as a result of the inflammatory process. Chronic prostatitis occurs more commonly in elderly men with BPH and recurrent UTIs."
        },
        {
            "id": 46,
            "question_type": "mcq",
            "question": "A 15-year-old girl known to have minimal change glomerulonephritis (MCGN) presents with a 2-day history of facial swelling and difficulty breathing. On examination, she is able to maintain her airway, but has some shortness of breath and a palpable liver edge. A chest radiograph confirms small bilateral pleural effusions and biochemical markers are suggestive of nephrotic syndrome. All of the following are consistent with this diagnosis, except\nA. Peripheral oedema\nB. Proteinuria\nC. Haematuria\nD. Hypoalbuminaemia\nE. Hyperlipidaemia",
            "options": [
                "A. Peripheral oedema",
                "B. Proteinuria",
                "C. Haematuria",
                "D. Hypoalbuminaemia",
                "E. Hyperlipidaemia"
            ],
            "answer": "C",
            "explanation": "Nephrotic syndrome is a clinical entity characterized by proteinuria of >3 g/24 h, hypoalbuminaemia and oedema. It results predominantly from inflammatory conditions that damage renal glomeruli and its fil-tration process, resulting in proteinuria, hypoalbuminaemia, reduced plasma oncotic pressure and the signs and symptoms associated with the condition.\nThe condition is the result of either intrinsic or extrinsic kidney dis-ease. Intrinsic kidney disease includes conditions such as minimal change glomerulonephritis (MCGN) and focal segmental glomerulo-sclerosis (FSGS), while systemic causes include amyloidosis, diabetes mellitus, Henoch-Schönlein purpura and systemic lupus erythemato-sus. Presenting features of the disease include the following:\n• Facial oedema\n• Peripheral pitting oedema\n• Pleural effusions and ascites\n• Xanthelasma and xanthomata (due to hyperlipidaemia)\n• Evidence of systemic illness\n• Signs of systemic infection\n• Acute renal failure/acute kidney injury\n• Thromboembolism\nTreatment is conservative and medical. Conservative measures include fluid restriction and regulation of dietary sodium, while medical inter-vention consists of diuretics, steroids to reduce inflammation, anti-hypertensives, e.g. angiotensin-converting enzyme (ACE) inhibitors, prophylactic anticoagulation in immobile patients and treatment of systemic illness as appropriate."
        },
        {
            "id": 47,
            "question_type": "mcq",
            "question": "A patient presents with altered sensation over the palmar aspects of the first three fingers of their left hand with associated thenar wasting. You think the patient needs a carpel tunnel release, but wish to confirm your diagnosis. What is your first line investigation?\nA. Anteroposterior and lateral cervical spine films\nB. Magnetic resonance imaging of the cervical spine\nC. Computed tomography of the cervical spine\nD. Nerve conduction studies\nE. Nerve biopsy",
            "options": [
                "A. Anteroposterior and lateral cervical spine films",
                "B. Magnetic resonance imaging of the cervical spine",
                "C. Computed tomography of the cervical spine",
                "D. Nerve conduction studies",
                "E. Nerve biopsy"
            ],
            "answer": "D",
            "explanation": "The only investigation indicated in the first instance when managing carpel tunnel syndrome is a nerve conduction study. This will confirm the site of nerve damage and localize it to the wrist. Only if this inves-tigation identifies more proximal neuropathy should one consider some of the other investigations mentioned above."
        },
        {
            "id": 48,
            "question_type": "mcq",
            "question": "A patient presents to the outpatient clinic with weakness in their hand. You perform a detailed neurological examination and find the following: generalized wasting sparing the thenar and hypothenar eminence, with normal sensation over the palmar aspect of the fifth finger and the medial aspect of the fourth fin-ger. Sensation to the medial aspect of the palm is spared. The hand is clawed and you elicit a positive Froment's test. The level of the ulnar nerve lesion is therefore\nA. Compression between the heads of flexor carpi ulnaris\nB. Ulnar tunnel\nC. Brachial plexus\nD. Medial epicondyle of the humerus\nE. Wrist",
            "options": [
                "A. Compression between the heads of flexor carpi ulnaris",
                "B. Ulnar tunnel",
                "C. Brachial plexus",
                "D. Medial epicondyle of the humerus",
                "E. Wrist"
            ],
            "answer": "B",
            "explanation": "All of the options are common sites of ulnar nerve damage. However, correct interpretation of the neurological findings and knowledge of the functional anatomy of the forearm will allow localization of the lesion. Note that the patient has a clawing deformity of the hand; this occurs in ulnar nerve palsies, which affect the intrinsic muscles of the hands but spare the flexor carpi ulnaris and flexor digitorum profundus. The so-called ulnar paradox refers to lesions of this type; proximal lesions do not spare the long flexors whereas distal injury spares the long flex-ors, but in doing so allows unopposed action to cause the ulnar clawing, which may be very disabling.\nThe ulnar nerve lesion is therefore a distal one, branching within the forearm, which therefore excludes options A, C and D. Also, the sensa-tion to the hand is spared. The ulnar nerve branches into various com-ponents: the dorsal, palmar and digital branches supply the hypothenar muscles and sensation; and the deep branch supplies the interossei and adductor pollicis and travels through the ulnar tunnel (this is a bony passage between the hook of the Hamate and pisiform bones). Compression at this point can occur following degenerative change (often secondary to a fracture of the carpel bones) or the formation of a ganglion. Suspicions are confirmed by the positive Froment's test (a test of adductor pollicis) and the absence of hypothenar wasting."
        },
        {
            "id": 49,
            "question_type": "mcq",
            "question": "A 7-year-old child is admitted with a supracondylar fracture. His hand is cold and pulseless, however perfusion is restored following fracture reduction. The integrity of which structure is of major concern?\nA. Musculocutaneous nerve\nB. Ulnar artery\nC. Radial artery\nD. Median nerve\nE. Radial nerve",
            "options": [
                "A. Musculocutaneous nerve",
                "B. Ulnar artery",
                "C. Radial artery",
                "D. Median nerve",
                "E. Radial nerve"
            ],
            "answer": "D",
            "explanation": "A fall onto an outstretched hand in childhood may result in a supra-condylar fracture; the fracture pattern is a transverse break just above the level of the epicondyles. The distal fragment is pulled dorsally by the action of the triceps muscle, kinking the brachial artery and inter-rupting the vascular supply to the forearm. Often this is complicated by vessel dissection, and early involvement of a vascular surgeon and urgent open exploration is commonly required. Management requires restoration of flow to prevent ischaemic injury to the muscle compart-ments and permanent disability (Volkmann's ischaemic contracture).\nDamage to other structures is common, although not the ulnar or radial arteries; these are distal to the fracture site and therefore cannot be considered valid answers. The musculocutaneous nerve branches from the brachial plexus and travels within the body of the biceps, and is therefore protected from injury. The radial nerve travels posteriorly and therefore does not become bowstringed over the fracture site when the distal segment is displaced by the action of the triceps. This puts it at less risk than the brachial artery, and the closely associated median nerve, which are stretched over the proximal fractured humerus when the distal end is displaced. Therefore, the most commonly damaged structures are the brachial artery and medial nerve, although the ulnar nerve, and less commonly the radial nerve, may also be compromised."
        },
        {
            "id": 50,
            "question_type": "mcq",
            "question": "Which one of the following is not a recognized feature of a Colles' fracture?\nA. Ulnar styloid fracture\nB. Impaction\nC. Volar displacement\nD. Radial tilt\nE. Radial displacement",
            "options": [
                "A. Ulnar styloid fracture",
                "B. Impaction",
                "C. Volar displacement",
                "D. Radial tilt",
                "E. Radial displacement"
            ],
            "answer": "C",
            "explanation": "Colles' fracture is a fracture of the distal radius and is the most com-monly seen fracture pattern in the United Kingdom. The most common mechanism is a fall onto an outstretched hand of an elderly/osteopo-rotic woman. The fracture is diagnosed on the basis of clinical appear-ance (‘dinner fork deformity') and radiographic appearance which classically comprises six deformities – dorsal displacement, dorsal tilt, radial displacement, radial tilt, impaction and rotation deformity. Ulnar styloid fracture is a common additional feature. Management is typi-cally with closed reduction under the local haematoma block and cast application. An indication for surgery is displacement of ulnar styloid, which implies serious disruption of the inferior radioulnar joint, or a dorsal tilt of more than 10%, which would severely impair function and predispose to tendon and nerve injury. Operative fixation is by dorsal buttress plating.\nVolar displacement is seen in Smith's fracture, which is a similar injury sometimes called a 'reverse Colles'."
        },
        {
            "id": 51,
            "question_type": "mcq",
            "question": "An otherwise fit 65-year-old patient is admitted following an assault during which he was pushed to the ground and sustained a fractured hip. Your specialist registrar reviews the film and says the fracture is a Garden 2 intracapsular neck of femur fracture. The appropriate management is\nA. Primary total hip replacement\nB. Cannulated screw fixation\nC. Dynamic hip screw fixation\nD. Hemiarthroplasty\nE. Proximal femoral nail",
            "options": [
                "A. Primary total hip replacement",
                "B. Cannulated screw fixation",
                "C. Dynamic hip screw fixation",
                "D. Hemiarthroplasty",
                "E. Proximal femoral nail"
            ],
            "answer": "B",
            "explanation": "The management of fractures of the femoral neck is a common exam topic, and may easily come up in vivas. The Garden classification is the only fracture classification undergraduates must know. The Garden classification divides intracapsular neck of femur fracture into four groups:\n• Garden 1 = Fracture of a single cortex\n• Garden 2 = Fracture of both cortices with no displacement\n• Garden 3 = Partially displaced\n• Garden 4 = Complete displacement\nIn Garden fractures 1 and 2, the fragments may retain their blood sup-ply and therefore should be managed with cannulated screw fixation in an attempt to save the joint. These patients require regular follow-up for 2 years and if avascular necrosis occurs, these patients should be offered a total hip replacement. Garden fractures 3 and 4 are at much greater risk of avascular necrosis, and therefore hemiarthroplasty is the treatment of choice. The exception is if the patient is very young or has a high level of pre-morbid functionality; in these patients hemiarthro-plasty should be avoided and cannulated screws or primary total hip replacements may be considered."
        },
        {
            "id": 52,
            "question_type": "mcq",
            "question": "A 75-year-old woman is admitted following a fall at home. Her leg is shortened and externally rotated. Radiographs show a fracture line running through both the greater and the lesser trochanters. The appropriate management is\nA. Traction for 8-12 weeks\nB. Cannulated screw fixation\nC. Hemiarthroplasty\nD. Proximal femoral nail\nE. Dynamic hip screw",
            "options": [
                "A. Traction for 8-12 weeks",
                "B. Cannulated screw fixation",
                "C. Hemiarthroplasty",
                "D. Proximal femoral nail",
                "E. Dynamic hip screw"
            ],
            "answer": "E",
            "explanation": "Undergraduates often get confused regarding the indications for the different management options in fractures of the proximal femur. Much of this confusion is attributable to incorrect use of the term 'neck of femur fracture' to include extracapsular fractures such as intertrochan-teric and subtrochanteric fractures. These fractures are not fractures of the neck of the femur; they do not compromise the vascular sup-ply of the femoral head and therefore they are managed differently. Intertrochanteric fractures are generally fixed using a dynamic hip screw. This device consists of a single screw head which is mobile (i.e. 'dynamic') on a plate attached to the lateral cortex of the femur. The screw is then drilled through the centre of the femoral neck and into the head. This stabilizes the femoral neck, allowing impaction of the frac-ture surfaces, but not displacement or angle deformity. Subtrochanteric fractures are less common, but typically fixed using a proximal intra-medullary nail."
        },
        {
            "id": 53,
            "question_type": "mcq",
            "question": "A 93-year-old woman is admitted with an intracapsular fractured neck of femur. The decision was taken to fix the fracture using a cemented hemiarthroplasty. Immediately postoperatively, the patient is short of breath in recovery. Her chest sounds clear. Saturations are 79% on room air, improving to 93% on 6 L of oxy-gen. The most likely cause is\nA. Pneumonia\nB. Haemorrhage\nC. Pulmonary oedema\nD. Fat emboli\nE. Myocardial infarction",
            "options": [
                "A. Pneumonia",
                "B. Haemorrhage",
                "C. Pulmonary oedema",
                "D. Fat emboli",
                "E. Myocardial infarction"
            ],
            "answer": "D",
            "explanation": "The scenario describes respiratory failure immediately following sur-gery. All diagnoses in the list are possible causes with the excep-tion of haemorrhage. Myocardial infarction may cause respiratory failure if complicated by acute left ventricular failure. Intraoperative fluid overload may also complicate immediate postoperative recovery but with both of these one would expect crepitations on listening to the chest, as you would in the presence of pneumonia. The probable cause is therefore a deficit in pulmonary perfusion, which may be due to thromboembolism or fat embolism. Thromboembolic disease is extremely common in hip fracture and surgery complicating up to 50% of cases. However, thromboemboli typically occur 2–3 days post-operatively. Immediately following an operation the cause that must be excluded is fat emboli, which occurs in up to 1% of cases, particu-larly where cement is used. The distinction is difficult but is impor-tant since thromboembolism requires management with anticoagulant therapy, with the obvious propensity for further complications in the postoperative patient."
        },
        {
            "id": 54,
            "question_type": "mcq",
            "question": "A 38-year-old man is admitted after falling and sustaining fractures of his tibia and fibula. He is taken to theatre and plate fixation of the fractures is performed. You are called to the ward by the nursing staff, who want you to prescribe mor-phine patient-controlled analgesia, as the patient's pain has not responded to a current rate of morphine analgesia. You examine the limb; it is in a cast with the forefoot exposed, the skin is warm, but sensation is reduced compared with the non-operative side. You attempt to move the toes, but the patient is in too much discomfort. Your first course of action should be\nA. Urgent postoperative films\nB. Increase analgesia\nC. Remove cast\nD. Arteriogram/computed tomography angiogram\nE. Fasciotomy",
            "options": [
                "A. Urgent postoperative films",
                "B. Increase analgesia",
                "C. Remove cast",
                "D. Arteriogram/computed tomography angiogram",
                "E. Fasciotomy"
            ],
            "answer": "C",
            "explanation": "This patient has postoperative compartment syndrome. This is a com-mon complication of operations or fractures in the lower leg or forearm, but may also occur elsewhere. The most obvious clinical sign is pain, which is out of all proportion with what one would expect. Paraesthesia and the sensation of tightness are additional symptoms patients will complain of. The most sensitive feature on examination is pain on pas-sive flexion of the affected compartment. If this is encountered on the ward, first remove all bandages and casts to try to relieve the pressure. Increasing analgesia is important, but secondary to saving the limb. Neither postoperative films nor an arteriogram will be helpful, and both will delay important definitive management. Once the cast is removed involve a senior surgeon, who will decide on whether a fasciotomy is indicated."
        },
        {
            "id": 55,
            "question_type": "mcq",
            "question": "An 89-year-old woman with multiple medical co-morbidities is admitted after sustaining a fracture of her humerus. The decision is taken not to operate, the arm is placed in a sling and the patient is discharged. The patient re-presents at 3 months after failing to recover normal function in her limb. Radiographs show an absence of callous over the fracture site. The complication is\nA. Malunion\nB. Atrophic non-union\nC. Hypertrophic non-union\nD. Avascular necrosis\nE. Delayed union",
            "options": [
                "A. Malunion",
                "B. Atrophic non-union",
                "C. Hypertrophic non-union",
                "D. Avascular necrosis",
                "E. Delayed union"
            ],
            "answer": "B",
            "explanation": "Various problems with fracture union can occur and candidates should be able to identify the main features of each to distinguish between them on radiographs. Avascular necrosis occurs when a fracture inter-rupts the blood supply to a part of a bone. This only occurs in a small number of sites because the bones typically receive a good supply from various sources and are therefore protected from this phenomenon. The ‘at risk' sites are the femoral neck and head, scaphoid and talus. Radiographically the appearance is of sclerosis with distortion of shape and structure. Malunion is when a fracture heals in an abnormal posi-tion. Delayed union is when a fracture heals normally but takes a pro-longed period of time. Non-union is when the fracture surfaces fail to unite; there are two types, hypertrophic and atrophic. In hypertrophic non-union there is an abundance of callus but no union; this may be due to excess movement across the fracture site or due to interposed tis-sues. Atrophic non-union occurs when the body makes no effort to heal and no callus forms. The bony ends often appear osteopenic, and this is more common in the elderly, the malnourished or generally debilitated."
        },
        {
            "id": 56,
            "question_type": "mcq",
            "question": "A 27-year-old primary school teacher presents with increasing weakness over the past 3 months. She has been well at the start of each day but feels weaker as the day progresses, with her voice becoming more difficult to understand after several minutes of conversation and an inability to see things clearly at the end of each day. Although the symptoms seem to subside after several hours of sleep they have become worse after a recent bout of flu. On examination, her upper arms are noted to have a reduced bulk and the eyelids appear to droop a few seconds after she is asked to look up or laterally. Her arm reflexes are initially brisk but seem to diminish after repeated testing. An autoimmune disease is suspected as the cause of her symptoms. Against which receptor is she likely to be producing antibodies?\nA. ẞ2-adrenergic receptor\nB. H2 histamine receptor\nC. Presynaptic acetylcholine receptor\nD. Postsynaptic y-aminobutyric acid receptor\nE. Postsynaptic acetylcholine receptor",
            "options": [
                "A. ẞ2-adrenergic receptor",
                "B. H2 histamine receptor",
                "C. Presynaptic acetylcholine receptor",
                "D. Postsynaptic y-aminobutyric acid receptor",
                "E. Postsynaptic acetylcholine receptor"
            ],
            "answer": "E",
            "explanation": "This is a two-stage question which requires a clinical diagnosis to be made, followed by knowledge about the disease, for the question to be answered.\nThe description is of myasthenia gravis, a rare autoimmune disease in which antibodies develop against the postsynaptic acetylcholine receptor, resulting in reduced receptor numbers at the neuromuscular junction. Young adults are most susceptible, presenting with increasing muscle fatigability that initially is worse with exertion and relieved by rest but can progress to a permanent weakness. Muscles of the eye (presenting with ptosis and diplopia), face, neck, trunk and distal limbs can be affected. Twenty per cent of individuals will have an associated tumour of the thymus (which is involved in T-lymphocyte production). Incidence is also increased in patients with other autoimmune condi-tions such as hyperthyroidism, RA and SLE. Treatment takes a variety of forms:\n• Symptomatic control is obtained by using anticholinesterase agents such as pyridostigmine, edrophonium (also a diagnos-tic agent) and neostigmine, which increases the amount of available acetylcholine, but can be associated with cholinergic toxicity.\n• Immunosuppression with prednisolone or azathioprine can be beneficial in some individuals.\n• Thymectomy in the presence of a thymoma can produce disease remission in around 33% of patients and symptom reduction in another 40%.\n• Plasmapheresis is used in emergency cases for short-term symp-tomatic relief.\nThe ẞ2-adrenergic receptor is found in many body cells and its ago-nists include adrenaline and noradrenaline (together with many phar-macological agents). Its effects include smooth muscle relaxation and dilatation of small blood vessels. The H₂ histamine receptor is located on gastric parietal (oxyntic) cells. Binding of histamine to this recep-tor results in the production of gastric acid and intrinsic factor. The presynaptic acetylcholine receptor may be affected in the myasthenic syndrome, a condition associated with bronchial small cell carci-noma (together known as Eaton-Lambert syndrome). Here, the muscle strength and reflexes are improved by repeated contractions, unlike true myasthenia gravis. y-amino butyric acid (GABA) is the chief inhibitory neurotransmitter in the human body and acts on the GABA receptor, of which three varieties (A, B, C) are known."
        },
        {
            "id": 57,
            "question_type": "mcq",
            "question": "A 19-year-old girl presents with a recent history of stumbling gait associated with frequent falls and increasing difficulty with her vision, requiring fre-quent prescription changes. She reports that her grandfather was approximately 40 years old when he died of heart failure, but she and the remainder of her fam-ily are otherwise well. Examination reveals bilateral clubbed feet, upward going plantar reflexes, scoliosis and a prominent fourth heart sound. A genetic test is performed, which shows that she is suffering from Friedrich's ataxia. This condi-tion is the result of a defective gene on which chromosome?\nA. Chromosome 4\nB. Chromosome 9\nC. Chromosome 3\nD. Chromosome 10\nE. X chromosome",
            "options": [
                "A. Chromosome 4",
                "B. Chromosome 9",
                "C. Chromosome 3",
                "D. Chromosome 10",
                "E. X chromosome"
            ],
            "answer": "B",
            "explanation": "Friedrich's ataxia is a hereditary ataxia inherited in an autosomal recessive fashion due to a gene defect on chromosome 9 coding the protein frataxin. This results in the loss of dorsal root ganglia cells and degeneration of peripheral sensory fibres, the lateral corticospinal tracts and dorsal columns. It usually presents in early adulthood with progressive difficulty walking due to muscle wasting, a broad based (ataxic) gait, reduced visual acuity, nystagmus, dysarthria, loss of fine touch and proprioception (due to effects on the dorsal columns), loss of deep tendon reflexes and an extensor plantar response (Babinski's reflex). Associated systemic features include diabetes, scoliosis, pes cavus (club foot) and hypertrophic cardiomyopathy. Treatment is symp-tomatic only and most patients die in their mid-thirties.\nGenetic defects on chromosome 4 are associated with Huntington's cho-rea, an autosomal dominant disease resulting in an expansion of the CAG trinucleotide repeat. The condition usually presents with depres-sion, cognitive impairment, poor memory and jerky, involuntary, dance-like movements. The accumulation of trinucleotide repeats increases with successive generations causing symptoms and death to occur at a younger age in children as compared to their parents. Von Hippel-Lindau disease is an autosomal dominant neurocutaneous syndrome associated with mutation in the raf-1 oncogene on chromosome 3. The disease results in the formation of haemangioblastomas in the cer-ebellum. The spinal canal and retina, which can cause hydrocepha-lus, ataxia, cord compression and subretinal haemorrhage (leading to blindness), respectively. The condition is also associated with systemic pathology such as renal cell carcinoma and phaeochromocytoma. Death is often the result of these many varied systemic pathologies."
        },
        {
            "id": 58,
            "question_type": "mcq",
            "question": "A 41-year-old housewife presents to the emergency department with a severe head-ache that came on suddenly while driving her son home from a football match. In addition, she reports neck stiffness and some difficulty focusing on objects. She reports that her grandfather died at the age of 50 from chronic renal failure. A subarachnoid haemorrhage is suspected and a head CT scan is requested some 8 hours after the onset of her symptoms, which shows no obvious indication of a haematoma or cerebral mass. A lumbar puncture is performed. Which of the fol-lowing findings would be diagnostic of a subarachnoid haemorrhage?\nA. Xanthochromia\nB. Bloody appearance in tube 2 of cerebrospinal fluid\nC. Glucose = 1.5 mmol/L\nD. Protein = 5 g/L\nE. Lymphocytosis",
            "options": [
                "A. Xanthochromia",
                "B. Bloody appearance in tube 2 of cerebrospinal fluid",
                "C. Glucose = 1.5 mmol/L",
                "D. Protein = 5 g/L",
                "E. Lymphocytosis"
            ],
            "answer": "A",
            "explanation": "The CSF is a clear, watery fluid that surrounds the spinal cord and brain, cushioning the latter from contact with the skull and reducing its weight. It is produced by the choroids plexus in the lateral, third and fourth ventricles and circulates there, in the central canal and in the subarachnoid space. It is absorbed by the arachnoid villi that project into the superior sagittal sinus. The CSF normally has a clear appear-ance, a white cell count of <5 cells/mm³ (predominantly mononuclear cells), a glucose of 2.8–4.2 mmol/L (about half to two-thirds of the blood glucose level) and a protein count of 0.15–0.45 g/L.\nSubarachnoid haemorrhage (SAH) is the accumulation of blood in the subarachnoid space. It is the result of either trauma or a spontaneous process. Most spontaneous bleeds are the result of rupture of intracranial berry aneurysms (~75%), which occur at the bifurcations of the circle of Willis in association with polycystic kidney disease/connective tis-sue disorders; a further minority result from arterio-venous malforma-tion, vasculitis, clotting disorders and an extending carotid dissection. In approximately 20% of cases, the cause is unknown. Subarachnoid haemorrhage most commonly presents with a sudden onset (thunder-clap) headache, often described as the worst headache ever experienced by the patient, signs of meningism (i.e. neck stiffness and photophobia), focal neurological deficit and a depressed consciousness level. The pres-ence of a greater number of these signs carries a higher mortality.\nThe investigation of choice is a head CT scan, which will detect approxi-mately 98% of bleeds. If there is no haematoma, mass lesion or hydro-cephalus, a lumbar puncture is performed 12 hours after the onset of symptoms. This will usually demonstrate equal numbers of blood cells (and a similar appearance) in tubes 1 and 3 on CSF collection. However, this may also occur in a traumatic tap, although the CSF should nor-mally be clear. A bloody tap is spun down and the supernatant decanted to test for xanthochromia (yellow colour), which is the result of the breakdown of the haemoglobin within red blood cells, and diagnos-tic of SAH. Treatment can be medical and/or surgical depending on the severity of the bleed. An urgent neurosurgical opinion is needed if there is reduced consciousness or focal neurology to consider haema-toma evacuation. Further surgical intervention is considered to reduce the risk of re-bleeding, which occurs in around 30% of patients and can be more severe and life-threatening than the initial bleed. Surgical methods include clipping of identifiable aneurysms or insertion of coils into their lumen to promote thrombosis."
        },
        {
            "id": 59,
            "question_type": "mcq",
            "question": "A 55-year-old man presents with a 24-hour history of right ear pain, facial weakness and dry tongue. He has previously suffered chickenpox as a child, but otherwise has no significant medical history. On examination, he is unable to close his right eye fully or furrow his brow. Otoscopy is difficult due to pain, but reveals vesicular lesions in the auditory meatus. A clinical diagnosis of type 2 Ramsay-Hunt syndrome is made. The organism causing this condition is a:\nA. Double-stranded RNA virus\nB. Single-stranded RNA virus\nC. Single-stranded DNA virus\nD. Double-stranded DNA virus\nE. Fungus",
            "options": [
                "A. Double-stranded RNA virus",
                "B. Single-stranded RNA virus",
                "C. Single-stranded DNA virus",
                "D. Double-stranded DNA virus",
                "E. Fungus"
            ],
            "answer": "D",
            "explanation": "Ramsay-Hunt syndrome is the eponymous name given to herpes zoster (or shingles) of the geniculate or facial ganglion. Infection is the result of the varicella zoster virus (VZV), a double-stranded (ds) DNA virus, responsible for chickenpox (varicella) and shingles. Following a bout of childhood chickenpox, the virus lies dormant in the dorsal root gan-glion of the spinal cord, trigeminal or geniculate ganglion. Reactivation of the virus can lead to shingles, Ramsay-Hunt syndrome or herpes zoster ophthalmicus (trigeminal herpes zoster). Classically, Ramsay-Hunt syndrome presents with a vesicular rash in the external auditory meatus (or over the pinna), sudden facial paralysis in a lower motor neurone distribution which can be preceded by severe pain, loss of taste sensation in the anterior two-thirds of the tongue and dry mouth and eyes. The symptoms are the result of loss of sensory, motor and para-sympathetic functions of the facial nerve. The vestibulocochlear nerve lies close to the geniculate ganglion, such that the zoster virus may also affect its function, resulting in deafness and tinnitus. Treatment is with systemic steroids, e.g. prednisolone, and antiviral agents, e.g. aciclo-vir, if symptoms are severe. Most patients make a complete recovery if treatment is started promptly."
        },
        {
            "id": 60,
            "question_type": "mcq",
            "question": "A 17-year-old man presents to the emergency department following a stab injury in the mid-portion of his back 1 hour previously. Following initial assessment and stabilization, a neurological examination is carried out, with signs and symptoms suggestive of Brown-Séquard syndrome. All of the following are clas-sical features of this eponymous syndrome except\nA. Ipsilateral motor weakness\nB. Ipsilateral extensor plantar reflex (Babinski's sign)\nC. Contralateral reduced pain sensation\nD. Contralateral loss of proprioception\nE. Ipsilateral loss of fine touch sensation",
            "options": [
                "A. Ipsilateral motor weakness",
                "B. Ipsilateral extensor plantar reflex (Babinski's sign)",
                "C. Contralateral reduced pain sensation",
                "D. Contralateral loss of proprioception",
                "E. Ipsilateral loss of fine touch sensation"
            ],
            "answer": "D",
            "explanation": "A Brown-Séquard syndrome is a clinical presentation resulting from lateral hemisection of the spinal cord particularly in the cervical and thoracic regions. Hemisection has many causes including: spinal cord trauma, tumour, disc herniation, cervical spondylosis, meningitis, syphilis and multiple sclerosis. Classically, cord hemisection affects the three major neural systems, that is:\n• Upper motor neurone pathway of the corticospinal tract\n• Ipsilateral motor weakness and spastic paralysis below the level of the lesion\n• Brisk reflexes\n• Clonus\n• Extensor plantar reflex (Babinski's sign)\n• Dorsal columns\n• Loss of ipsilateral fine touch, vibration and proprioception (lesion in fasciculus gracilis/cuneatus) below the level of the lesion\n• Spinothalamic tract\n• Loss of contralateral pain and temperature sensation one to two segments below the lesion\nAlthough the classical presentation is described here, this is a rare find-ing. Instead a mixed presentation with asymmetrical distribution of signs and symptoms is more common in clinical practice. The long-term prognosis is dependent on the ability to rapidly treat the causative fac-tor but overall recovery is poor."
        },
        {
            "id": 61,
            "question_type": "mcq",
            "question": "A 72-year-old Asian man presents to his general practitioner with a neck lump noticed when shaving. Of note, he is a smoker of 50 pack years. He denies any symptoms from his ear, nose or throat. He has noticed feeling more tired recently and has lost a few pounds in weight over the last couple of months. He has no previous history of dental abscess or infection. Which one of the following is the most appropriate next management option?\nA. Fine needle aspiration cytology\nB. Heaf test\nC. Referral for ENT assessment\nD. Ultrasound scan of the neck\nE. Incisional biopsy",
            "options": [
                "A. Fine needle aspiration cytology",
                "B. Heaf test",
                "C. Referral for ENT assessment",
                "D. Ultrasound scan of the neck",
                "E. Incisional biopsy"
            ],
            "answer": "C",
            "explanation": "This patient should be referred for full ENT assessment. This would include inspection, radiology and biopsy of any primary sites in the head and neck. If the primary sites are clear, then an ultrasound along with fine needle aspiration cytology may assist the diagnosis. Otherwise the lesion must be biopsied by excision, as incisional biopsy carries the risk of seeding malignant cells. If malignancy is confirmed in the absence of an obvious primary site, a radical neck dissection is usually recommended to remove all the lymph node bearing tissue in the anterior and posterior triangles of the neck between the pre-vertebral tissues and platysma. The Heaf test will help to establish the tuberculosis status but should be conducted following a comprehen-sive clinical assessment."
        },
        {
            "id": 62,
            "question_type": "mcq",
            "question": "A 14-year-old girl presents complaining of a non-painful midline neck swelling. She is otherwise fit and well. On physical examination, the lump moves with swallowing and with tongue protrusion. Clinically, she is euthyroid. Which of the following is the most likely diagnosis?\nA. Thyroglossal cyst\nB. Dermoid cyst\nC. Branchial cyst\nD. Cystic hygroma\nE. Chemodectoma",
            "options": [
                "A. Thyroglossal cyst",
                "B. Dermoid cyst",
                "C. Branchial cyst",
                "D. Cystic hygroma",
                "E. Chemodectoma"
            ],
            "answer": "A",
            "explanation": "Thyroglossal cysts are remnants of the thyroglossal duct, and can arise anywhere from the tongue (foramen caecum) to the thyroid gland itself. Most are asymptomatic, but secondary infection may cause pain. The most common site is under the hyoid and the cyst will move on swallowing and on tongue protrusion. Dermoid cysts do occur in the midline but tend not to move on swallowing or tongue protrusion. Branchial cysts and cystic hygromas are causes of lat-eral neck swelling in children. Chemodectomas are extremely rare benign tumours arising laterally in the carotid bulb in the region of the carotid bifurcation."
        },
        {
            "id": 63,
            "question_type": "mcq",
            "question": "A 40-year-old woman presents with a progressively enlarging midline swell-ing of her neck over many years. She complains about the cosmetic appear-ance and states that recently it feels like she is being ‘strangled at night' when she lies flat. She does not have dysphagia or dysphonia. Her appetite and weight are unchanged. Her periods are regular. On examination, she has a smoothly enlarged goitre. Which one of the following is the most appropriate management?\nA. Total thyroidectomy\nB. Subtotal thyroidectomy\nC. Radioactive iodine\nD. Oral carbimazole\nE. Oral thyroxine",
            "options": [
                "A. Total thyroidectomy",
                "B. Subtotal thyroidectomy",
                "C. Radioactive iodine",
                "D. Oral carbimazole",
                "E. Oral thyroxine"
            ],
            "answer": "B",
            "explanation": "This patient has goitre and is euthyroid clinically. Patients with goi-tres may require subtotal thyroidectomy if they are causing compres-sive symptoms. Total thyroidectomy is reserved for the management of thyroid carcinoma. Carbimazole and radioactive iodine is prescribed to treat hyperthyroidism."
        },
        {
            "id": 64,
            "question_type": "mcq",
            "question": "A 62-year-old Caucasian man presents to clinic complaining of a recent change in his voice. He has noticed that it is much more hoarse than normal. The symp-toms have persisted for more than 4 weeks. He also describes a history of per-sistent dry cough lasting several months. He is a smoker of 60 cigarettes per day. ENT evaluation reveals an irregular swelling of the left vocal cord which is biopsied. Which one of the following is the best statement regarding laryngeal carcinoma?\nA. Adenoid cystic carcinoma is the most common histological variant\nB. Glottic laryngeal carcinoma is less common than supraglottic carcinoma\nC. Surgical therapy is mandatory\nD. In the absence of cervical nodes, total laryngectomy and radical neck dissection is advocated\nE. None of the above",
            "options": [
                "A. Adenoid cystic carcinoma is the most common histological variant",
                "B. Glottic laryngeal carcinoma is less common than supraglottic carcinoma",
                "C. Surgical therapy is mandatory",
                "D. In the absence of cervical nodes, total laryngectomy and radical neck dissection is advocated",
                "E. None of the above"
            ],
            "answer": "E",
            "explanation": "None of the above. Squamous cell carcinoma is the most common histo-logical variant. Adenoid cystic carcinoma, sarcoma and lymphoma are rare. Sixty per cent occur in the glottis and present with dysphonia. Radiotherapy is advocated for virtually all glottic tumours. T1 lesions have over a 95% cure rate with this modality. Total laryngectomy and radical neck dissection is reserved for recurrent and metastatic disease."
        },
        {
            "id": 65,
            "question_type": "mcq",
            "question": "A 55-year-old Caucasian woman is referred to the clinic by her dentist. She noticed a painless white spot on her tongue a few months ago, which has failed to heal with topical therapy and is still present 3 weeks later. She smokes 30 cigarettes per day and drinks approximately 30 units of alcohol per week. On examination, she has a small ulcer on the tip of her tongue. Tongue movements are not affected. There is no palpable cervical lymphadenopathy. Which one of the following is the best statement regarding management/diagnosis?\nA. In the absence of tongue fixation, malignancy is unlikely\nB. Any ulcer that has persisted for more than 3 weeks should be biop-sied to exclude malignancy\nC. Partial glossectomy is never required\nD. Adenocarcinoma is most common\nE. None of the above",
            "options": [
                "A. In the absence of tongue fixation, malignancy is unlikely",
                "B. Any ulcer that has persisted for more than 3 weeks should be biop-sied to exclude malignancy",
                "C. Partial glossectomy is never required",
                "D. Adenocarcinoma is most common",
                "E. None of the above"
            ],
            "answer": "B",
            "explanation": "Any ulcer on the tongue that persists should be biopsied to exclude malignancy. The most common variant is squamous carcinoma. Tongue fixation and mandibular infiltration are late features. Partial glossec-tomy may be required for larger lesions. Small lesions may be treated with surgery or radiotherapy."
        },
        {
            "id": 66,
            "question_type": "mcq",
            "question": "A 55-year-old Afro-Caribbean man comes to your clinic because of a red right eye. His vision is blurred and he asks you to ‘turn down the bright light' as it is causing him pain. The symptoms have been getting progressively worse over the last 3 days. He was diagnosed with sarcoidosis a month ago. He denies fever or night sweats. Respiratory examination reveals bilateral wheeze. Chest radiograph shows hilar lymphadenopathy. Examination of his right eye reveals photophobia and conjunctival erythema. What is the most common eye disorder associated with sarcoidosis?\nA. Maculopathy\nB. Acute glaucoma\nC. Vitreous hemorrhage\nD. Anterior uveitis\nE. Conjunctivitis",
            "options": [
                "A. Maculopathy",
                "B. Acute glaucoma",
                "C. Vitreous hemorrhage",
                "D. Anterior uveitis",
                "E. Conjunctivitis"
            ],
            "answer": "D",
            "explanation": "Sarcoidosis is associated with a number of ocular problems. Acute uve-itis is the most common. This may progress to chronic uveitis and cata-ract formation, glaucoma and bands of calcium deposition in the cornea (band keratopathy). Lacrimal gland infiltration may lead to chronic dry eyes and the need for artificial tear replacement. Optic nerve infiltra-tion is also a recognized complication."
        },
        {
            "id": 67,
            "question_type": "mcq",
            "question": "A 62-year-old African man presents to his general practitioner in the well-man clinic for a routine check-up. His past medical history includes type 2 diabetes mellitus (diagnosed 20 years ago), hypercholesterolaemia and hypertension. He takes metformin 850 mg per day, but does not record his blood sugar regu-larly. He is additionally taking simvastatin and enalapril. Examination reveals no cardiovascular or respiratory abnormalities and a normal urine dipstick test. Fundoscopy reveals dot retinal haemorrhages, cotton wool spots and neo-vascularization. His visual acuity is not significantly impaired. Which one of the following best describes this patient's eye disease?\nA. Pre-proliferative retinopathy\nB. Background retinopathy\nC. Diabetic maculopathy\nD. Proliferative retinopathy\nE. No retinopathy",
            "options": [
                "A. Pre-proliferative retinopathy",
                "B. Background retinopathy",
                "C. Diabetic maculopathy",
                "D. Proliferative retinopathy",
                "E. No retinopathy"
            ],
            "answer": "D",
            "explanation": "This patient has proliferative retinopathy indexed by neo-vascular-ization. Background retinopathy is characterized by microaneurysms, dot haemorrhages and hard yellow exudates. These changes do not have much of an effect on vision when they occur in the peripheral retina. However, when they occur in the vicinity of the macula (‘dia-betic maculopathy') vision can be severely affected. Pre-proliferative retinopathy is characterized by tiny abnormal blood vessels and retinal haemorrhages. Visual acuity may be preserved until a large haemor-rhage occurs, so specialist referral is required."
        },
        {
            "id": 68,
            "question_type": "mcq",
            "question": "Regarding the same patient as in Question 67, which one of the following is the most appropriate management?\nA. Increased metformin dose and tight observation of glucose control\nB. Vitrectomy\nC. Early laser photocoagulation\nD. Retinoscopy and deferred laser photocoagulation\nE. Retinoscopy and deferred vitrectomy",
            "options": [
                "A. Increased metformin dose and tight observation of glucose control",
                "B. Vitrectomy",
                "C. Early laser photocoagulation",
                "D. Retinoscopy and deferred laser photocoagulation",
                "E. Retinoscopy and deferred vitrectomy"
            ],
            "answer": "C",
            "explanation": "The patient has proliferative retinopathy which should be managed with referral for early laser photocoagulation. Deferred laser photoco-agulation is an acceptable management strategy in patients with non-proliferative diabetic retinopathy. Tight regulation of glucose control may help prevent progression of retinopathy but further treatment is indicated. Vitrectomy is the surgical removal of the vitreous. It is used to treat the complications of diabetic retinopathy such as vitreous haemorrhage and retinal detachment."
        },
        {
            "id": 69,
            "question_type": "mcq",
            "question": "A 45-year-old Caucasian woman presents to the outpatient clinic complain-ing of a central neck swelling. She describes being restless and anxious and is always hot. On examination of the neck you detect goitre. She appears also to have clubbing of her nails. Examination of her eyes reveals injected conjunc-tiva, proptosis, and swelling of the eyelids. Her visual acuity is normal, but there is some restriction of her eye movements. What is the most likely diagnosis?\nA. Hashimoto's thyroiditis\nB. Autoimmune thyroiditis\nC. Graves' disease\nD. Toxic multinodular goitre\nE. Toxic adenoma",
            "options": [
                "A. Hashimoto's thyroiditis",
                "B. Autoimmune thyroiditis",
                "C. Graves' disease",
                "D. Toxic multinodular goitre",
                "E. Toxic adenoma"
            ],
            "answer": "C",
            "explanation": "Graves' disease is an autoimmune condition causing goitre, hyperthyroid-ism and eye disease. The ocular features include swelling of eyelids, che-mosis, proptosis ophthalmoplegia and optic neuropathy. Hashimoto's and autoimmune thyroiditis are causes of hypothyroidism. Toxic multinodular goitre and toxic adenoma are not associated with thyroid eye disease."
        },
        {
            "id": 70,
            "question_type": "mcq",
            "question": "A 68-year-old woman presents to her general practitioner complaining of a con-stant dry mouth and eyes as well as a gritty sensation in both her eyes. She denies any recent trauma or foreign body injury. Examination reveals a normal visual acuity whilst fluorescein stain excludes abrasion and ulceration. What is the most likely diagnosis?\nA. Episcleritis\nB. Scleritis\nC. Sjögren's syndrome\nD. Uveitis\nE. None of the above",
            "options": [
                "A. Episcleritis",
                "B. Scleritis",
                "C. Sjögren's syndrome",
                "D. Uveitis",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Sjögren's syndrome is an autoimmune disorder affecting exocrine glands secreting saliva and tears. It is associated with rheumatoid arthritis. The Schirmer test measures the wetness of tear production and confirms the diagnosis. Treatment includes artificial tear drops and mucolytic agents."
        },
        {
            "id": 71,
            "question_type": "mcq",
            "question": "A 20-year-old male student attends the surgical outpatient clinic with a pulsatile ovoid swelling just behind the anterior edge of the sternocleidomastoid (SCM) muscle at the level of the hyoid bone. It is elastic in consistency and can be moved from side to side only. This is likely to be a\nA. Branchial cyst\nB. Chemodectoma\nC. Thyroglossal cyst\nD. Branchial sinus\nE. Cystic hygroma",
            "options": [
                "A. Branchial cyst",
                "B. Chemodectoma",
                "C. Thyroglossal cyst",
                "D. Branchial sinus",
                "E. Cystic hygroma"
            ],
            "answer": "B",
            "explanation": "The description is classical of a chemodectoma, a rare tumour of the che-moreceptor tissue in the carotid body. It is elastic in consistency, pulsatile and can be moved from side to side but not up and down. It is usually found behind the anterior border of the SCM at the level of the hyoid bone.\nA thyroglossal cyst is a remnant of the thyroglossal duct. It occurs as a smooth, midline swelling 2–3 cm in diameter at or below the level of the hyoid bone. It commonly presents between the ages of 15 and 30 years. It moves up on swallowing and on protrusion of the tongue. A branchial sinus is a tract leading from a focus of infection to the surface of the skin. It is formed from the second branchial cleft (as are branchial cysts) and is seen as a small dimple at the junction of the middle and lower third of the anterior edge of the SCM and can discharge a thick, clear mucus. Cystic hygroma is a congenital collection of lymphatic sacs (also known as lymph cyst or lymphocele). It usually presents within the first few years of life as a large lump behind the clavicle that transilluminates brightly."
        },
        {
            "id": 72,
            "question_type": "mcq",
            "question": "A 23-year-old female medical student presents with a 1 cm × 1 cm round swell-ing in the anterior triangle of the neck. It is smooth and fluctuant with no trans-illumination or movement on swallowing. The skin is freely mobile over the lump, which is also non-tender to touch. Aspiration of the lump reveals choles-terol crystals. The most likely diagnosis is\nA. Sebaceous cyst\nB. Dermoid cyst\nC. Thyroglossal cyst\nD. Cystic hygroma\nE. Branchial cyst",
            "options": [
                "A. Sebaceous cyst",
                "B. Dermoid cyst",
                "C. Thyroglossal cyst",
                "D. Cystic hygroma",
                "E. Branchial cyst"
            ],
            "answer": "E",
            "explanation": "All of the listed swellings are found in the anterior triangle of the neck, except cystic hygroma, which is a lymphatic cyst usually found in the posterior triangle behind the clavicle (most commonly in young babies) that transilluminates brightly. Thyroglossal cysts, although consistent with the above description, tend to occur in the midline, with move-ment on swallowing or tongue protrusion. Sebaceous cysts occur in hair bearing areas of the skin and classically (although not always) contain a central punctum through which a cheesy keratinous substance can be exuded. Dermoid cysts are large swellings in the midline of the neck and are rare beyond adolescence. Branchial cysts are squamous epithelium remnants of the second pharyngeal cleft, usually found in the anterior tri-angle of the neck behind the upper third of the SCM muscle. The cysts are usually fluctuant and opaque due to the presence of desquamated epithe-lial cells and definitively diagnosed by aspiration of cholesterol crystals."
        },
        {
            "id": 73,
            "question_type": "mcq",
            "question": "A 21-year-old female law student presents with a painless lump, 3 cm × 2 cm in size, in the upper part of the neck. The lump has been growing slowly for the past several months. On examination, it is soft and fluctuant, does not transil-luminate and appears to lie just behind the sternocleidomastoid (SCM) muscle. An aspirate is taken from this lump. The most likely contents are\nA. Uric acid crystals\nB. Cholesterol crystals\nC. Calcium pyrophosphate crystals\nD. All of the above\nE. None of the above",
            "options": [
                "A. Uric acid crystals",
                "B. Cholesterol crystals",
                "C. Calcium pyrophosphate crystals",
                "D. All of the above",
                "E. None of the above"
            ],
            "answer": "B",
            "explanation": "This question requires knowledge about two things: (i) the description is that of a branchial cyst, which is commonly associated with the presence of cholesterol crystals and (ii) uric acid and calcium pyrophosphate crystal aspirates are associated usually with gout and pseudogout respectively."
        },
        {
            "id": 74,
            "question_type": "mcq",
            "question": "A slim 60-year-old woman presents to the outpatient clinic with a small (2.5 cm × 1.5 cm), longstanding lump in the right groin, which is only present on standing and walking and usually disappears on lying flat. However, in recent weeks she found that she must reduce it herself when lying down. On examination, the lump is easily reduced with its origin lying below and lateral to the pubic tubercle. Which one of the following structures does not form the femoral canal?\nA. Inguinal ligament\nB. Lacunar ligament\nC. Femoral vein\nD. Pectineal ligament\nE. Cloquet's node",
            "options": [
                "A. Inguinal ligament",
                "B. Lacunar ligament",
                "C. Femoral vein",
                "D. Pectineal ligament",
                "E. Cloquet's node"
            ],
            "answer": "E",
            "explanation": "The description is of a femoral hernia. An inguinal hernia will reduce to lie above and medial to the pubic tubercle (the origin of the super-ficial ring). All of the listed structures form the femoral canal, except Cloquet's node. This is a lymph node transmitted within the femoral canal together with a plug of fat."
        },
        {
            "id": 75,
            "question_type": "mcq",
            "question": "A 73-year-old man attends as an outpatient 4 weeks after undergoing a right inguinal hernia repair. He reports good function and the surgical site has healed well. However, he volunteers that since the procedure, he has had a feeling of numbness over the right hemi-scrotum but no such change on the left side. Which one of the following nerves is most likely to be affected?\nA. Right ilio-inguinal nerve\nB. Left ilio-inguinal nerve\nC. Genital branch of genito-femoral nerve\nD. Sympathetic nerves\nE. Femoral nerve",
            "options": [
                "A. Right ilio-inguinal nerve",
                "B. Left ilio-inguinal nerve",
                "C. Genital branch of genito-femoral nerve",
                "D. Sympathetic nerves",
                "E. Femoral nerve"
            ],
            "answer": "A",
            "explanation": "The inguinal canal is an oblique, inferomedially directed passage between the deep (internal) and superficial (external) inguinal rings through the inferior part of the anterior abdominal wall. The canal lies superior and parallel to the medial half of the inguinal canal. Its contents are\n• Spermatic cord in men\n• Round ligament in women\n• The ilio-inguinal nerve\n• Blood vessels\n• Lymphatic vessels\nThe ilio-inguinal nerve arises from the first lumbar nerve and over-lies the spermatic cord/round ligament during its passage through the inguinal canal. On exiting the superficial inguinal ring it is distrib-uted to the skin of the upper and medial part of the thigh and to the following:\n• Males – Skin over the root of the penis and upper scrotum\n• Woman - Skin covering mons pubis and labium majus\nThe ilio-inguinal nerve supplies the ipsilateral hemi-scrotum and can become entrapped during the repair of the hernial defect at the time of surgery, resulting in long-term numbness ± pain over the hemi-scrotum. Other complications of hernia repair include wound infection, haematoma formation, mesh infection and ischaemic orchitis."
        },
        {
            "id": 76,
            "question_type": "mcq",
            "question": "While assisting in the repair of an inguinal hernia, you are asked to define the boundaries of the Hesselbach's triangle. This anatomical region is defined by\nA. Inguinal ligament, inferior epigastric vessels, external oblique muscle\nB. Inguinal ligament, inferior epigastric vessels, sartorius muscle\nC. Inguinal ligament, inferior epigastric vessels, rectus abdominis muscle\nD. Inguinal ligament, adductor longus muscle, sartorius muscle\nE. Transversalis fascia, inferior epigastric vessels, rectus abdominis muscle",
            "options": [
                "A. Inguinal ligament, inferior epigastric vessels, external oblique muscle",
                "B. Inguinal ligament, inferior epigastric vessels, sartorius muscle",
                "C. Inguinal ligament, inferior epigastric vessels, rectus abdominis muscle",
                "D. Inguinal ligament, adductor longus muscle, sartorius muscle",
                "E. Transversalis fascia, inferior epigastric vessels, rectus abdominis muscle"
            ],
            "answer": "C",
            "explanation": "Inguinal hernias are the most commonly occurring hernias. They are divided into direct (25%) and indirect (75%). Indirect hernias occur when a viscus (usually bowel) protrudes through the deep ring and tra-verses the inguinal canal and may eventually exit through the superfi-cial ring into the scrotum. Direct inguinal hernias occur as a result of abdominal wall weakness and protrusion of viscus directly through the posterior wall of the inguinal canal, medial to the deep (internal) ring. Clinically, the two may be indistinguishable and can only be defined at the time of repair with reference to Hesselbach's triangle. The borders of this anatomical landmark are:\n• Medial: Rectus abdominis muscle\n• Superior/lateral: Inferior epigastric vessels\n• Inferior: Inguinal ligament\nThe defect in an indirect hernia is in the internal ring, which is lateral to the inferior epigastric vessels, whereas the defect in direct hernias is through Hesselbach's triangle, which is medial to the inferior epigastric vessels."
        },
        {
            "id": 77,
            "question_type": "mcq",
            "question": "Which of the following structures is not found within the spermatic cord?\nA. Vas deferens\nB. Ilioinguinal nerve\nC. Genital branch of the genito-femoral nerve\nD. Pampiniform plexus\nE. Testicular artery",
            "options": [
                "A. Vas deferens",
                "B. Ilioinguinal nerve",
                "C. Genital branch of the genito-femoral nerve",
                "D. Pampiniform plexus",
                "E. Testicular artery"
            ],
            "answer": "B",
            "explanation": "The inguinal canal transmits the spermatic cord in males from the abdo-men to the testes, while in females it is replaced by the round (uterine) ligament that travels from the uterus to the labium majorum. While all the structures are within the inguinal canal, the ilio-inguinal nerve is transmitted on top of the spermatic cord, whereas the remaining struc-tures are found within the cord. The spermatic cord is covered in three fascial layers derived from the anterior abdominal wall, and contains the following structures:\n• Vas deferens\n• Testicular artery\n• Testicular veins (pampiniform plexus)\n• Testicular lymph vessels\n• Autonomic nerves\n• Remains of the processus vaginalis (tunica vaginalis)\n• Cremasteric artery\n• Artery of the vas deferens\n• Genital branch of the genito-femoral nerve (supplies cremas-teric muscle, which allows retraction of the testicle)"
        },
        {
            "id": 78,
            "question_type": "mcq",
            "question": "A young couple of Jamaican origin present to the paediatric outpatient clinic with their 3-month-old son, concerned about the presence of a large lump over-lying the umbilicus, which appears to enlarge when the child cries. The baby was born at term via an uncomplicated vaginal delivery. On examination, the lump is as described and the child appears otherwise healthy and developed as expected for his age. First-line management of this condition would be\nA. Fluid resuscitation\nB. Conservative with parental reassurance\nC. Antibiotics\nD. Digital rectal examination\nE. Surgical resection",
            "options": [
                "A. Fluid resuscitation",
                "B. Conservative with parental reassurance",
                "C. Antibiotics",
                "D. Digital rectal examination",
                "E. Surgical resection"
            ],
            "answer": "B",
            "explanation": "The description is of a congenital umbilical hernia, which is especially common in black and Afro-Caribbean children (as well as those with Down's syndrome and congenital hypothyroidism). In utero, the devel-oping gut grows more rapidly than the coelomic capacity, resulting in temporary herniation of the gut into the wide base of the umbilical cord. The abdominal cavity then continues to grow and by week 12 of development the herniated abdominal contents return to the abdominal cavity. The umbilical ring then constricts with a small defect for the umbilical vessels that nourish the developing fetus. After birth, the vessels thrombose and fibrous tissue plugs the defect. The failure of this process results in a congenital umbilical hernia.\nThe hernia can commonly enlarge when a child cries but rarely stran-gulates due to the presence of a wide base. They require no specific treatment and the defect usually closes by the age of 4. However, surgi-cal repair can be considered should the hernia persist after the age of 3."
        },
        {
            "id": 79,
            "question_type": "mcq",
            "question": "A 65-year-old woman of Mediterranean origin presents with a longstand-ing nodule on her left cheek, which has been present for many months but is becoming increasingly unsightly to look at. She is hopeful that it can be treated. On examination, there is a small 0.5 cm × 1 cm round, nodular lesion on the left cheek, the centre of which is collapsed and appears smooth and transparent. The edge of the lesion is rolled and appears ‘pearly'. This lesion is likely to be a\nA. Basal cell carcinoma\nB. Keratoacanthoma\nC. Squamous cell carcinoma\nD. Solar keratosis\nE. Papilloma",
            "options": [
                "A. Basal cell carcinoma",
                "B. Keratoacanthoma",
                "C. Squamous cell carcinoma",
                "D. Solar keratosis",
                "E. Papilloma"
            ],
            "answer": "A",
            "explanation": "Basal cell carcinoma (rodent ulcer) is a slow growing malignant tumour of the skin, predominantly affecting the central portion of the face and is directly related to sun exposure. It begins as a raised nodule with venules crossing its central portion, which can collapse and ulcerate and invade locally to form large lesions (the rodent ulcer). The classical presentation is with a rolled pearly edge. Treatment is dependent on the site and the size of the ulcer but most commonly consists of surgical excision, curettage and radiotherapy, if large.\nKeratoacanthoma (molluscum sebaceum) is a lesion occurring in mid-dle-aged individuals, most commonly in hair-bearing areas. It is related to sun exposure and consists of a lesion that grows over many months as a domed swelling with a central plug of keratin. The keratin plug can fall off, leaving a bleeding floor. If managed conservatively, it usu-ally regresses over many months to leave a small scar. Excision allows a definitive diagnosis between keratoacanthoma and malignancy.\nSquamous cell carcinoma occurs commonly on exposed areas of the body such as the head, neck, hands and trunk, which are repeatedly exposed to sunlight. It consists of an ulcer that has an everted edge (unlike the rolled edge of BCC) and is dark brown in colour. Squamous cell carcinoma commonly begins as a small nodule on the skin, becom-ing necrotic in its centre as it enlarges and forms an ulcer. Solar (senile) keratoses are scaly lesions occurring mainly in elderly individuals who have had chronic sun exposure. Malignant change can occur in 25% of lesions, necessitating excision. Papilloma are small epidermal tumours relating to human papilloma virus (HPV) infection. They are benign lesions that occur as sessile or pedunculated structures."
        },
        {
            "id": 80,
            "question_type": "mcq",
            "question": "A 35-year-old woman, who regularly uses tanning beds, presents with a dark, irregular lesion overlying her left shin. She first noticed it approximately 5 weeks ago. Since then the lesion has become larger and darker. On further examination, it is noted that the lesion is irregular in shape, but approximately 1 cm × 3 cm at its widest and longest points. It is not obviously raised and there appears to be greater pigmentation in the centre of the lesion than at its peripheries. The lesion is likely to be a\nA. Nodular melanoma\nB. Lentigo maligna melanoma\nC. Superficial spreading melanoma\nD. Acral melanoma\nE. Keratoacanthoma",
            "options": [
                "A. Nodular melanoma",
                "B. Lentigo maligna melanoma",
                "C. Superficial spreading melanoma",
                "D. Acral melanoma",
                "E. Keratoacanthoma"
            ],
            "answer": "C",
            "explanation": "Melanoma is a malignant tumour of the pigment producing cells of the body (melanocytes). Spread can be to lymph nodes, liver and other parts of the body. Incidence is increased in individuals with fairer skin tones and increased exposure to UV radiation. This presentation is of a superficial spreading melanoma, which makes up 70% of melanomas. It spreads superficially in the epidermis initially and becomes invasive after many months or years. The lesion margin and surface tend to be irregular and pigmented. It can be surrounded by an area of inflamma-tion and generally carries a poor prognosis.\nLentigo maligna melanoma is a slow growing, irregularly pigmented macule that can be present for many years and usually occurs in exposed areas in elderly individuals. Nodular melanoma consists of a dark nodule, commonly occurring in middle-aged men. It has a poor prognosis because of invasive growth from the start of its develop-ment. Acral melanoma occurs on the palms and soles and in the nail bed of affected individuals. Prognosis depends on the lesion thickness (i.e. depth) as measured from the granular layer to the deepest layer of invasion, using Clark's and/or Breslow classification. Overall 5-year survival is 75% in women and 60% in men."
        },
        {
            "id": 81,
            "question_type": "mcq",
            "question": "A biopsy of a suspected malignant melanoma shows invasion of the reticular dermis. According to Clark's classification, what level is this lesion?\nA. Level I\nB. Level II\nC. Level III\nD. Level IV\nE. Level V",
            "options": [
                "A. Level I",
                "B. Level II",
                "C. Level III",
                "D. Level IV",
                "E. Level V"
            ],
            "answer": "D",
            "explanation": "Clark's classification is one of two classification systems (the other being Breslow's depth) used to determine the prognosis of malignant melanoma. The level is determined by lesion depth measured in mil-limetres from the granular layer, i.e. base of epidermis to the deepest layer of invasion:\n• Level I – Within epidermis\n• Level II – Few melanoma cells within the dermal papillae\n• Level III – Many melanoma cells in the papillary dermis\n• Level IV – Invasion of the reticular dermis\n• Level V – Invasion of the subcutaneous tissue"
        },
        {
            "id": 82,
            "question_type": "mcq",
            "question": "A 45-year-old farmer presents with a lump on his wrist that has grown in the last 3 weeks. It has now changed colour and he is worried that it could be something sinister. The lesion is on the radial aspect of the wrist and approximately 2 cm in diameter. It is nodular in shape and firm but with a dark, hard central area. The nodule has a skin-coloured edge and moves freely over the wrist. It is excised and sent for histological analysis. The report confirms that the lesion is benign. This is likely to be what sort of lesion?\nA. Ganglion\nB. Squamous cell carcinoma\nC. Bursa\nD. Keratocanthoma\nE. Basal cell carcinoma",
            "options": [
                "A. Ganglion",
                "B. Squamous cell carcinoma",
                "C. Bursa",
                "D. Keratocanthoma",
                "E. Basal cell carcinoma"
            ],
            "answer": "D",
            "explanation": "A keratoacanthoma is a self-limiting overgrowth of hair follicle cells producing a central plug of keratin with subsequent spontaneous regres-sion. Keratoacanthomas grow rapidly over 2–4 weeks and then regress spontaneously over approximately 6 months. Keratoacanthomas can be found in any area containing sebaceous glands and are usually soli-tary, consisting of a skin-coloured conical lump that develops a necrotic centre. The lump is confined to the skin and freely mobile over the subcutaneous tissue. The central core eventually separates causing the lesion to collapse and leave an indrawn scar. They are usually excised to differentiate from a squamous cell carcinoma. The descriptions of the other lesions are discussed in earlier answers."
        },
        {
            "id": 83,
            "question_type": "mcq",
            "question": "Which one of the following is not a complication of ectopic testis?\nA. Increased incidence of torsion\nB. Infertility\nC. Increased risk of malignancy\nD. Delayed development of secondary sexual characteristics\nE. Increased incidence of testicular trauma",
            "options": [
                "A. Increased incidence of torsion",
                "B. Infertility",
                "C. Increased risk of malignancy",
                "D. Delayed development of secondary sexual characteristics",
                "E. Increased incidence of testicular trauma"
            ],
            "answer": "D",
            "explanation": "The testes develop intra-abdominally in the posterior abdominal wall from nephric tissue. They are guided by the gubernaculum into the scro-tum, usually entering this structure at between 28 and 34 weeks gesta-tion. Ectopic testis refers to the deviation of a descending testicle from its normal line of descent into an abnormal position. As a result, the testicle may lie at the base of the penis, in the superficial inguinal pouch, within the perineum or in the femoral triangle of the thigh. Individuals may present with an absent testis or pain, if the ectopic testis (a smooth, sensi-tive, ovoid swelling) is on a site that is likely to be rubbed or pressed in the course of normal daily activity.\nWhen a testis follows the correct anatomical path of descent but does not reach its final position in the scrotum, it is referred to as a truly undescended testis. Undescended testes are more commonly found in premature babies, 30% of whom may have undescended testes. In term infants, the incidence decreases to 3%, while in children of 1 year of age, this is further reduced to 1%. Spontaneous descent after that age is very rare. The line of testicular descent crosses the external inguinal ring and neck of the scrotum, where 80% of undescended testes are typ-ically found and can be palpable on examination. Presence in either of these areas is an indication for orchidopexy, whereby the testis is fixed in the scrotum between the dartos muscle and skin, by the age of 18 months, to prevent testicular damage. After age 2 years, the testis can become damaged and incapable of spermatogenesis. Truly undescended and ectopic testes are potentially complicated by:\n• Infertility – A near inevitability in individuals with bilateral undescended (and common in those with unilateral unde-scended) testes\n• Torsion\n• Trauma\n• Inguinal hernia\n• Malignant disease\nAlthough failure of descent/ectopic testes are associated with abnormal spermatogenesis and infertility, hormone-producing cells of the testes function normally, resulting in puberty and the development of second-ary sexual characteristics."
        },
        {
            "id": 84,
            "question_type": "mcq",
            "question": "A 6-month-old boy presents with his parents to the paediatric outpatient clinic. The infant's parents have recently become aware that his scrotum appears to be small and underfilled. He was born prematurely at 30 weeks gestation. On examination, the scrotum appears small and hypoplastic, but there is no pal-pable abnormality within the inguinal regions. An ultrasound scan reports that two ovoid objects lie in the posterior abdominal wall and are consistent with the appearance of bilateral truly undescended testes. The infant's parents are advised that an orchidopexy is indicated to fix the testes in the scrotum. In which age range should this procedure ideally be undertaken to prevent irrepa-rable testicular damage?\nA. Within the first year of life\nB. 1-2 years of age\nC. 2-3 years of age\nD. 3-5 years of age\nE. After the age of 5 years",
            "options": [
                "A. Within the first year of life",
                "B. 1-2 years of age",
                "C. 2-3 years of age",
                "D. 3-5 years of age",
                "E. After the age of 5 years"
            ],
            "answer": "B",
            "explanation": "When a testis follows the correct anatomical path of descent but does not reach its final position in the scrotum, it is referred to as a truly undescended testis.\nPatients usually present in early childhood with an absence of one or both testes from the scrotum and an underdeveloped, flat scrotum is a common clinical finding. The testicle itself may be small and accom-panied by a patent processus vaginalis, presenting as a congenital her-nia. Occasionally, patients can present as adults with infertility and are found to have undescended testicles.\nThe line of testicular descent crosses the external inguinal ring and neck of the scrotum, where 80% of undescended testes are typically found and can be palpable on examination. Presence in either of these areas is an indication for orchidopexy, whereby the testis is fixed in the scrotum between the dartos muscle and skin, by the age of 18 months, to prevent testicular damage. After age 2 years, the testis can become damaged and incapable of spermatogenesis. Impalpable testes can be investigated using ultrasound scanning, CT and laparoscopy to deter-mine whether a testicle is present or absent and also determine its exact location. See also the answer to Question 83."
        },
        {
            "id": 85,
            "question_type": "mcq",
            "question": "A 15-year-old boy presents to the surgical assessment unit (SAU) with a 4-hour history of testicular pain that began after he returned home from a school rugby match. The pain began initially in the lower abdomen, but quickly progressed to involve the testicles, particularly the right. He has vomited twice prior to arrival and remains nauseous. He is unable to recall any recent injury to the groin. On examination the right testicle appears to lie higher in the scrotum than the left. The scrotal skin is warm and the testis extremely tender to touch. This is likely to be:\nA. Testicular torsion\nB. Torted hydatid of Morgagni\nC. Epididymo-orchitis\nD. Inguinal hernia\nE. Epididymal cyst",
            "options": [
                "A. Testicular torsion",
                "B. Torted hydatid of Morgagni",
                "C. Epididymo-orchitis",
                "D. Inguinal hernia",
                "E. Epididymal cyst"
            ],
            "answer": "A",
            "explanation": "The tunica vaginalis normally covers the anterior and lateral testis and part of the epididymis, thereby fixing it in the scrotum and prevent-ing twist. Normal variations in the extent that the tunica vaginalis covers the body of the testis means that the testicle is liable to twist on its attachment. Testicular torsion is most common in males aged 10–25 years. It is a surgical emergency, preceded by a trivial exertion or trauma, presenting initially as poorly localized pain in the abdomen and loin (the testicle is supplied by the T10 dermatomal level). Severe testicular pain and tenderness follows, usually affecting a single tes-ticle. The pain can be accompanied by severe nausea and vomiting. On examination, the testicle can be hot, swollen, extremely tender to touch and is classically high riding with a horizontal lie. Symptoms progress rapidly over hours and, as the twisting of the testis within the tunica vaginalis compromises the testicular blood supply, leave only a short window in which the testicle is salvageable. A scrotal exploration should be performed as soon as possible in suspected cases of torsion with derotation of the testis and three point fixation of both the affected and unaffected testicle within the scrotum.\nTorted hydatid of Morgagni (also known as torsion of the testicular appendage) is the commonest lesion presenting in a similar manner to testicular torsion (however, it does not result in compromise of the tes-ticular blood supply). The appendix testis (or hydatid of Morgagni) is a vestigial remnant of the Müllerian duct, present on the upper pole of the testis in 90% of men and attached to the tunica vaginalis. The testicular appendage can become torted, causing acute one-sided testicular pain and requiring surgical excision to achieve relief. A third of patients present with a palpable 'blue dot' discoloration on the scrotum, which is diagnostic of the condition.\nEpididymo-orchitis is an inflammation of the testis and epididymis sec-ondary to infection, e.g. mumps in the young and bacterial infections such as Escherichia coli, Chlamydia and gonorrhoea in adults and the elderly. Patients can present with acute onset testicular pain, fever, malaise, urethral discharge and symptoms of UTI. The testis itself can be tender, red and warm to touch. The epididymis will be swollen and is palpable separate to the testis. Treatment is supportive with bed rest, antibiotic cover, and analgesia. Pain can also be relieved by elevation of the testis, which is not possible in cases of torsion.\nAn epididymal cyst is a fluid-filled swelling arising from the collecting tubules of the epididymis. Patients tend to be middle-aged and present with a normally painless swelling (although occasionally painful in younger adults) in the scrotum that has grown larger over many years. The cyst occurs supero-posteriorly to the testis and can be palpated separately, while the spermatic cord can be felt superior to the swelling. The cyst may be loculated and fluctuant to palpation and is irreduc-ible. The presentation of inguinal hernia is discussed elsewhere in this section."
        },
        {
            "id": 86,
            "question_type": "mcq",
            "question": "A 39-year-old man who has previously undergone right-sided orchidopexy as a teenager for an undescended testis presents with a painless swelling in the right hemi-scrotum, which can occasionally cause a dull ache in the groin and heaviness in the testicle. An ultrasound scan of the affected testis reports the appearance as inhomogeneous and cystic. Furthermore, tumour markers confirm the presence of a seminoma. Elevation of which tumour markers is indicative of a seminoma?\nA. ẞ-human chorionic gonadotrophin, a-fetoprotein, lactate dehydrogenase\nB. ẞ-human chorionic gonadotrophin, a-fetoprotein, CA125\nC. ẞ-human chorionic gonadotrophin, placental alkaline phosphatase, lactate dehydrogenase\nD. CA19-9, placental alkaline phosphatase, lactate dehydrogenase\nE. CA19-9, placental alkaline phosphatase, carcinoembryonic antigen",
            "options": [
                "A. ẞ-human chorionic gonadotrophin, a-fetoprotein, lactate dehydrogenase",
                "B. ẞ-human chorionic gonadotrophin, a-fetoprotein, CA125",
                "C. ẞ-human chorionic gonadotrophin, placental alkaline phosphatase, lactate dehydrogenase",
                "D. CA19-9, placental alkaline phosphatase, lactate dehydrogenase",
                "E. CA19-9, placental alkaline phosphatase, carcinoembryonic antigen"
            ],
            "answer": "C",
            "explanation": "Testicular tumours are broadly divided into seminomas (carcinoma of the seminiferous tubules accounting for 42% of testicular tumours) and non-seminomatous germ cell tumours (these account for 58% of tes-ticular tumours), of which teratomas are the most common. Teratomas present in patients aged 15–35 and can be solid or cystic, arising from primitive totipotent cells. AFP, β-hCG and LDH are elevated in 70% of patients affected by this cancer. Seminomas tend to affect an older population, in the age range of 20–40. They arise from germinal cells in the testes and are usually solid and slow growing. These tumours are associated with an elevation primarily of placental alkaline phospha-tase but approximately 15% of patients will have a raised β-hCG level.\nTesticular tumours occur more commonly in individuals with unde-scended testicles, infertile parents and in the presence of a contralat-eral testicular malignancy. Patients typically present with a painless testicular mass that is irregular, firm, fixed and does not ransilluminate. These tumours are staged according to the Royal Marsden Classification:\n• Stage 1 - Tumour confined to testis\n• Stage 2 - Abdominal nodal spread\n• Stage 3 Nodal disease outside the abdomen\n• Stage 4 - Extralymphatic spread\nFive-year survival for metastatic disease is 75% and 45% for semino-mas and teratomas, respectively. CA125 is associated with ovarian carcinomas and upper gastrointestinal carcinomas. CA19-9 is most commonly elevated in cases of pancreatic carcinoma. Carcinoembryonic antigen (CEA) is raised primarily in individuals with colorectal car-cinoma and also those with gastric, pancreatic, lung and breast carcinoma."
        },
        {
            "id": 87,
            "question_type": "mcq",
            "question": "A 27-year-old office worker presents to his general practitioner with a dull ache in the testes that has been present for the past several weeks and causing a drag-ging sensation in the scrotum. On examination, the patient reports that the ache is more in the left scrotum than the right. In addition, when the patient stands up, a swelling is present within the left hemi-scrotum that feels like a bag of worms. This is likely to be\nA. Haematocele\nB. Non-seminomatous germ cell tumour\nC. Epididymal cyst\nD. Varicocele\nE. Epididymo-orchitis",
            "options": [
                "A. Haematocele",
                "B. Non-seminomatous germ cell tumour",
                "C. Epididymal cyst",
                "D. Varicocele",
                "E. Epididymo-orchitis"
            ],
            "answer": "D",
            "explanation": "A varicocele is a bunch of dilated and tortuous veins of the pampini-form plexus (the venous supply of the testis). These are akin to varicose veins of the spermatic cord. They are more common on the left hemi-scrotum, resulting in a vague, dragging sensation and dull ache in the scrotum/groin. Varicoceles may be primary or secondary to a left-sided renal tumour (testicular artery branches off the left renal artery). The patient with suspected varicocele must be examined standing up as the veins empty on lying flat. The veins are often visible and palpable and classically have the feel of a ‘bag of worms'. Varicoceles are managed either conservatively with a scrotal support, via embolization of the testicular vein under radiological guidance (the preferred method) or surgically by clipping the testicular vein.\nA haematocele is a collection of blood in the tunica vaginalis, with bleeding usually secondary to trauma or underlying malignant disease. In the acute phase, patients will present with a large scrotal sac and a firm, painless swelling which the examiner can reach above (as a hydrocele). The testis will not be felt separately. When the blood clots, a small, hard mass is formed that can be mistaken for a malignant mass. Patients with a testicular tumour typically present with a painless tes-ticular mass that is irregular, firm, fixed and does not transilluminate. For discussion of epididymal cysts and epididymo-orchitis, see the answer to Question 85."
        },
        {
            "id": 88,
            "question_type": "mcq",
            "question": "An 18-year-old student presents with a 6-month history of a painless lump in her right breast. She is currently mid cycle and does not report any cyclical change in the lump. On examination a 3 cm × 2 cm lump is found in the inner lower quadrant of the right breast as well as a 1 cm × 0.5 cm lump in the upper outer quadrant of the same breast. Both are smooth on palpation and have sharp edges. They slip easily between the examining fingers of the physician. The primary problem is likely to be a\nA. Phylloides tumour\nB. Fibroadenoma\nC. Breast cyst\nD. Fibroadenosis\nE. Mammary duct ectasia",
            "options": [
                "A. Phylloides tumour",
                "B. Fibroadenoma",
                "C. Breast cyst",
                "D. Fibroadenosis",
                "E. Mammary duct ectasia"
            ],
            "answer": "B",
            "explanation": "Fibroadenoma is a benign breast neoplasm primarily affecting young women aged 15–35. It results from a dominant fibromatous element in breast tissue with a cut surface revealing lobules of whorled, white fibrous tissue that bulge out of their capsule. Two histological vari-ants are documented: pericanalicular in which fibrous tissue dominates and intracanalicular where glandular tissue is more prominent. The two types are clinically indistinguishable. Presentation is as a painless, slow-growing and well-defined lump of rubbery consistency. The lumps can be hypermobile and are also known as ‘breast mice'. Reassurance is usually sufficient as most lesions regress spontaneously. However, lesions >4 cm in size or occurring in older women should be excised to exclude malignancy.\nPhylloides (Brodie's) tumour is a variant of fibroadenoma found in older women. These slow-growing tumours can grow extremely large but remain as a smooth swelling. They are usually excised to exclude malignancy and for cosmesis. They can also result in skin necrosis in advanced cases. Breast cysts are fluid-filled cavities in the breast with-out a demonstrable endothelial lining or capsule. Their presentation is similar to that of fibroadenoma, but they occur more commonly in women in their forties to early fifties as a result of a changing hormonal environment in preparation of the menopause. Women may present with a history of a sudden large swelling that may or may not be associated with pain and tenderness. Solitary cysts are smooth, spherical and of a variable consistency from soft/cystic to hard. Large cysts can be visible through the skin. An immediate aspiration of a cyst will reveal a yellow to dark green coloured fluid, which will confirm the clinical diagnosis and relieve patient symptoms.\nFibroadenosis is a condition that occurs as part of the normal spec-trum of breast changes associated with the menstrual cycle. It occurs in young women, usually between the ages of 15–35 years, and is asso-ciated with lumpiness, especially in the upper outer quadrant of the breast, with or without cyclical pain. Physical examination can reveal single or multiple tender lumps. Investigation is with triple assessment: clinical examination, fine needle aspiration cytology and mammog-raphy (or ultrasound scan if the patient is younger than 35 years). If the assessment is normal, the patient can be reassured as to the benign nature of the condition. Medical treatment may include anti-inflamma-tory agents, contraceptive pill and evening primrose oil.\nMammary duct ectasia is dilatation of the mammary ducts, which become filled with macrophages and chronic inflammatory debris. Patients can present with lumpiness in the breast and chronic inflam-mation, which results in nipple retraction and an eventual slit-like appearance of the nipple that can be confused with DCIS (ductal carci-noma in situ). Acute inflammation can cause abscess formation which discharges at the areolar margin and eventually forms a sinus, acting as a focus for further inflammatory attacks."
        },
        {
            "id": 89,
            "question_type": "mcq",
            "question": "A 25-year-old woman presents to her general practitioner with redness overlying her left nipple and the skin surrounding it. She has been feeling generally unwell for the past several days and has 6 weeks previously given birth to a healthy girl, whom she is breastfeeding. On examination, the redness is confined to the left breast and painful to touch. There is no evidence of the nipple being cracked. The patient's general practitioner suspects that she has developed a lactational breast abscess. The most appropriate action would be to\nA. Prescribe an antibacterial agent, e.g. flucloxacillin\nB. Advise the patient to stop breastfeeding and review in 2-3 weeks\nC. Breast aspiration under local anaesthesia\nD. Prescribe an antifungal agent, e.g. ketoconazole\nE. Refer to hospital's general surgical team for formal drainage under general anaesthesia",
            "options": [
                "A. Prescribe an antibacterial agent, e.g. flucloxacillin",
                "B. Advise the patient to stop breastfeeding and review in 2-3 weeks",
                "C. Breast aspiration under local anaesthesia",
                "D. Prescribe an antifungal agent, e.g. ketoconazole",
                "E. Refer to hospital's general surgical team for formal drainage under general anaesthesia"
            ],
            "answer": "A",
            "explanation": "Lactational breast abscess formation is most commonly the result of infection with Staphylococcus aureus (a cluster forming Gram-positive organism) during breastfeeding. The organism can enter the breast through a cracked nipple, resulting in increasingly severe pain, mal-aise, fever and lost sleep. Examination will reveal a tender, warm, red segment and occasionally a cracked nipple. Fluctuation occurs only when the abscess is advanced and can cause skin necrosis.\nThe case described is that of acute mastitis, which is initially treated with anti-staphylococcal antibiotics such as flucloxacillin. Breastfeeding does not need to be stopped unless there is obvious damage to the nip-ple, in which case the mother would be advised to express milk from healthy segments on the opposite breast. Continuing pain and loss of sleep, despite treatment with antibiotics, would be an indication of abscess formation that can be aspirated using a wide-bore needle under local anaesthesia. Skin changes such as thinning and areas of necrosis requires drainage of the abscess under general anaesthesia with loculi broken down to prevent recurrence."
        },
        {
            "id": 90,
            "question_type": "mcq",
            "question": "A 59-year-old woman is undergoing triple assessment for a suspicious lump in the upper outer quadrant of the breast. Which one of the following correctly describes the components of this clinical investigation?\nA. Physical examination, lump excision, ultrasonography, computed tomography\nB. Physical examination, fine needle aspiration cytology, core biopsy, ultrasonography\nC. Physical examination, fine needle aspiration cytology, core biopsy and mammography\nD. Physical examination, lump excision, mammography, core biopsy\nE. Ultrasonography, fine needle aspiration cytology, mammography",
            "options": [
                "A. Physical examination, lump excision, ultrasonography, computed tomography",
                "B. Physical examination, fine needle aspiration cytology, core biopsy, ultrasonography",
                "C. Physical examination, fine needle aspiration cytology, core biopsy and mammography",
                "D. Physical examination, lump excision, mammography, core biopsy",
                "E. Ultrasonography, fine needle aspiration cytology, mammography"
            ],
            "answer": "C",
            "explanation": "Triple assessment is the mainstay of investigation of breast lumps. It comprises the following:\n• Physical examination\n• Imaging - Ultrasound (women below 35) or mammography (women over 35)\n• Pathology - Fine needle aspiration cytology and/or core biopsy\nThis patient is over the age of 35 and therefore physical examina-tion followed by mammography and fine needle aspiration and core biopsy would have been conducted as part of the triple assessment. Ultrasonography is preferred as an investigation tool in women younger than 35 years as the breast tissue is usually too dense for small lesions to be seen on mammography. In addition, ultrasound is useful for eval-uating palpable lumps."
        },
        {
            "id": 91,
            "question_type": "mcq",
            "question": "A 54-year-old male presents to the emergency department with intense left loin to groin pain. Following clinical assessment, he is suspected to have a left-sided renal calculus. This is his second presentation. You are able to look at a previous intravenous urogram of the same patient performed 5 years previous to this presen-tation. This study is normal, however you notice that the ureters have constrictions along their course to the urinary bladder. From the list below, which one of the following is not considered a physiological site of constriction of the ureters?\nA. At the pelvic-ureteric junction\nB. As the ureter crosses the pelvic brim\nC. As the gonadal artery crosses the ureter\nD. As the ureter passes anteriorly to the psoas muscle\nE. At the vesiculo-ureteric junction",
            "options": [
                "A. At the pelvic-ureteric junction",
                "B. As the ureter crosses the pelvic brim",
                "C. As the gonadal artery crosses the ureter",
                "D. As the ureter passes anteriorly to the psoas muscle",
                "E. At the vesiculo-ureteric junction"
            ],
            "answer": "D",
            "explanation": "During the course of the ureters from the kidneys to the urinary bladder, there are four main sites at which the ureters constrict or are narrowed. Physiologically, this usually does not pose a problem but renal calculi (>4 mm in size) can become lodged at these constrictions causing pain, hydronephrosis and subsequent acute kidney injury on the affected side.\nThe four main sites where the ureters are constricted are (1) the pelvic-ureteric junction, (2) as the ureter crosses the pelvic brim, (3) as the gonadal artery crosses the ureter and (4) as the ureter enters the bladder obliquely at the vesiculo-ureteric junction.\nThere is no constriction of the ureters as they pass anterior to the psoas muscle and therefore Answer D is the correct option here."
        },
        {
            "id": 92,
            "question_type": "mcq",
            "question": "You are in the anaesthetic room observing a 34-year-old lady being prepared for induction of anaesthesia. The consultant asks you to discuss complications associated with mechanical ventilation. From the list below, select the answer which is not a complication of mechanical ventilation.\nA. Increased cardiac output\nB. Volutrauma\nC. Nosocomial pneumonia\nD. Barotrauma\nE. Parenchymal lung damage",
            "options": [
                "A. Increased cardiac output",
                "B. Volutrauma",
                "C. Nosocomial pneumonia",
                "D. Barotrauma",
                "E. Parenchymal lung damage"
            ],
            "answer": "A",
            "explanation": "The complications of ventilation include parenchymal lung damage, hospital acquired (nosocomial) pneumonia, volutrauma (damage to the lungs caused by overdistention secondary to high mechanical tidal vol-umes) and barotrauma (physical damage to the lung/mediastinal tissues caused by differences in pressure during ventilation, which can cause pneumothorax, pneumomediastinum, pneumopericardium, surgical emphysema and acute lung injury).\nPositive alveolar pressure caused by mechanical ventilation increases lung volume and intrathoracic pressure which causes compression of the heart by the inflated lungs. Venous return is reduced due to increased intramural pressure of the heart cavity. This ultimately decreases car-diac output and hence Answer A is the correct option here."
        },
        {
            "id": 93,
            "question_type": "mcq",
            "question": "A 67-year-old female is taken to theatre for suspected bowel perforation. The on-call anaesthetist is inserting a central venous catheter through the subclavian vein. From the list below which structure is at less risk of damage during this procedure?\nA. Subclavian artery\nB. Apex of the lung\nC. Thoracic aorta\nD. Thoracic duct on the left side\nE. Phrenic nerve",
            "options": [
                "A. Subclavian artery",
                "B. Apex of the lung",
                "C. Thoracic aorta",
                "D. Thoracic duct on the left side",
                "E. Phrenic nerve"
            ],
            "answer": "C",
            "explanation": "The thoracic aorta is usually not at risk of damage during subclavian vein cannulation due to the fact that it is positioned within the poste-rior aspect of the mediastinum. However, the subclavian artery, apex of the lung, phrenic nerve and thoracic duct (on the left side) lie in close proximity, or on route, to the subclavian vein and hence are at higher risk of damage during subclavian vein cannulation."
        },
        {
            "id": 94,
            "question_type": "mcq",
            "question": "A 45-year-old male who sustained haemorrhagic shock secondary to polytrauma is being fluid resuscitated. A central venous catheter is being inserted. From the list below, choose the answer which correctly describes where the central venous pressure is being measured from.\nA. Left ventricle\nB. Left atrium\nC. Pulmonary veins\nD. Aortic arch\nE. Right atrium",
            "options": [
                "A. Left ventricle",
                "B. Left atrium",
                "C. Pulmonary veins",
                "D. Aortic arch",
                "E. Right atrium"
            ],
            "answer": "E",
            "explanation": "Central venous pressure is the pressure, measured in either mmHg or cmH2O, in the right atrium. It is also referred to as right atrial filling pressure. The normal value of CVP ranges from 0 to 10 mmHg or 0 to 8 cmH2O. It is worthwhile noting that the absolute value of CVP is not as helpful as measuring the change in CVP in response to a fluid challenge. It is also worth noting that CVP is not accurate in critically ill patients, especially those who suffer from cardiac and pulmonary diseases, and in these patients readings must be inter-preted cautiously."
        },
        {
            "id": 95,
            "question_type": "mcq",
            "question": "You are observing an elective right hip replacement. The lead surgeon is access-ing the hip joint via the posterior approach. From the list below, choose the cor-rect order (from superficial to deep) and correct structures that are cut through during the posterior approach to the hip.\nA. Skin, subcutaneous fat, gluteal fascia, gluteus maximus, short external rotator muscles and the hip joint capsule\nB. Skin, gluteus maximus, subcutaneous fat, gluteal fascia, short external rotator muscles and the hip joint capsule\nC. Skin, subcutaneous fat, gluteal fascia, short external rotator muscles, gluteus maximus and the hip joint capsule\nD. Skin, subcutaneous fat, short external rotator muscles, gluteal fas-cia, gluteus maximus and the hip joint capsule\nE. Skin, gluteal fascia, subcutaneous fat, short external rotator muscles, gluteus maximus and the hip joint capsule",
            "options": [
                "A. Skin, subcutaneous fat, gluteal fascia, gluteus maximus, short external rotator muscles and the hip joint capsule",
                "B. Skin, gluteus maximus, subcutaneous fat, gluteal fascia, short external rotator muscles and the hip joint capsule",
                "C. Skin, subcutaneous fat, gluteal fascia, short external rotator muscles, gluteus maximus and the hip joint capsule",
                "D. Skin, subcutaneous fat, short external rotator muscles, gluteal fas-cia, gluteus maximus and the hip joint capsule",
                "E. Skin, gluteal fascia, subcutaneous fat, short external rotator muscles, gluteus maximus and the hip joint capsule"
            ],
            "answer": "A",
            "explanation": ""
        },
        {
            "id": 96,
            "question_type": "mcq",
            "question": "A 67-year-old female has been moved to the intensive care unit after undergoing a laparotomy and elective right hemicolectomy for a caecal tumour. The patient is placed on epidural analgesia. From the list below, choose the most likely asso-ciated systemic effect of epidural analgesia.\nA. Increased functional residual capacity\nB. An increased surgical stress response\nC. Hypotension\nD. Increased cardiac output\nE. None of the above",
            "options": [
                "A. Increased functional residual capacity",
                "B. An increased surgical stress response",
                "C. Hypotension",
                "D. Increased cardiac output",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Epidural analgesia carries many systemic effects of which the main ones include decreased surgical stress response, reduced cardiac output, hypotension and reduction in functional residual capacity. Reduction in postoperative deep venous thrombosis rates also occurs, mainly owing to the use of intravenous fluids to maintain arterial pressure."
        },
        {
            "id": 97,
            "question_type": "mcq",
            "question": "A 48-year-old female patient is one day post left axillary lymph node clear-ance for a left-sided primary breast cancer, which had spread to the left axilla, as confirmed by axillary sentinel lymph node biopsy. She tells you that her left shoulder 'feels funny'. On examination you notice that this patient has winging of the left scapula. From the list below choose the most likely structure which has been injured causing winging of the left scapula.\nA. The left long thoracic nerve\nB. The left thoracodorsal nerve\nC. The right long thoracic nerve\nD. The left intercostal brachial nerves\nE. None of the above",
            "options": [
                "A. The left long thoracic nerve",
                "B. The left thoracodorsal nerve",
                "C. The right long thoracic nerve",
                "D. The left intercostal brachial nerves",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "The long thoracic nerve (of Bell) supplies the serratus anterior muscle which is responsible for pulling the scapula anteriorly to the posterior upper chest wall. Injury to this nerve leads to posterior protrusion of the scapula and deformity of the upper extremity. Damage to this nerve causes ipsilateral deformity of the shoulder. The intercostal brachial nerves may be sacrificed/injured during axillary lymph node clearance and this leads to ipsilateral numbness to the medial aspect of the arm. The thoracodorsal nerve innervates the latissimus dorsi muscle."
        },
        {
            "id": 98,
            "question_type": "mcq",
            "question": "You are asked to see a patient on the ward who has low urine output and blood pressure. She is two days post emergency laparotomy and Hartmann's procedure for faecal peritonitis The patient has a heart rate of 100, blood pressure of 100/60 (mmHg), respiratory rate of 15 and oxygen saturation of 98% on room air. An arterial blood gas performed during your assessment reveals that the patient has a metabolic acidosis. From the list below choose the most likely cause for the patient's acid-base disturbance\nA. Acute renal failure\nB. Pulmonary oedema\nC. Pneumonia\nD. Vomiting\nE. Hyperaldosteronism",
            "options": [
                "A. Acute renal failure",
                "B. Pulmonary oedema",
                "C. Pneumonia",
                "D. Vomiting",
                "E. Hyperaldosteronism"
            ],
            "answer": "A",
            "explanation": "From the patient's clinical history and initial assessment, a pulmonary problem is least likely of all the possible answers. Furthermore, pulmo-nary oedema will tend to cause a respiratory alkalosis whereas pneumo-nia will lead to a respiratory acidosis. Vomiting and hyperldosteronism lead to loss of hydrogen ions and hence result in a metabolic alkalo-sis. Therefore, the most likely option is Answer A. This is very likely due to hypovolaemia and this patient requires fluid balance assess-ment. Please refer to Chapter 1 for more information on fluid balance management."
        },
        {
            "id": 99,
            "question_type": "mcq",
            "question": "As the external carotid artery courses infero-superiorly from the common carotid bifurcation, it gives off the first of seven arterial branches just below the greater cornu of the hyoid bone. From the list below, select the name of the first branch of the external carotid artery.\nA. Ascending pharyngeal artery\nB. Facial artery\nC. Lingual artery\nD. Maxillary artery\nE. Superior thyroid artery",
            "options": [
                "A. Ascending pharyngeal artery",
                "B. Facial artery",
                "C. Lingual artery",
                "D. Maxillary artery",
                "E. Superior thyroid artery"
            ],
            "answer": "E",
            "explanation": "The external carotid artery has seven main arterial branches. From first to last branch these are\n• Superior thyroid artery\n• Ascending pharyngeal artery\n• Lingual artery\n• Facial artery\n• Occipital artery\n• Posterior auricular artery\n• Maxillary artery\n• Superficial temporal artery.\nThe mnemonic ‘Some Anatomists Like Freaking Out Poor Medical Students', among others, is useful in helping to remember the divisions of the external carotid artery."
        },
        {
            "id": 100,
            "question_type": "mcq",
            "question": "A 57-year-old male is day 1 post femoral-femoral (left to right) bypass graft insertion for left external iliac stenosis. You are asked to see him because he is complaining of chest pain and difficulty breathing. You alert your seniors and the on-call Intensive Care Registrar who suspects that the patient may be in cardiogenic shock. You are asked to review the patient's chest radiograph. Which one of the following chest radiograph signs is not a characteristic change seen in cardiogenic shock?\nA. Hilar shadowing\nB. Increased cardiothoracic ratio\nC. Right atrial enlargement\nD. 'Kerly B' lines\nE. Prominent upper lobe pulmonary vessels",
            "options": [
                "A. Hilar shadowing",
                "B. Increased cardiothoracic ratio",
                "C. Right atrial enlargement",
                "D. 'Kerly B' lines",
                "E. Prominent upper lobe pulmonary vessels"
            ],
            "answer": "C",
            "explanation": "On a postero-anterior chest radiograph the following changes can be seen in patients with cardiogenic shock: (1) an increase in cardiotho-racic ratio (this is due to a dilated left ventricle secondary to volume overload); (2) ‘Kerly B' lines which are small line shadows seen above the costophrenic angle representing interstitial oedema; (3) intersti-tial shadowing of the lung fields secondary to pulmonary oedema; (4) hilar 'bat's wing' shadowing which is further evidence of oedema; and (5) prominent upper lobe pulmonary vasculature indicating venous congestion and left atrial enlargement owing to enlargement of the left atrial appendage."
        }
    ]
}
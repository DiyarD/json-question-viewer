{
  "chapter_name": "Vascular-Venous",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 44-year-old male presents to the emergency department (ED) with a temperature of 103°F. He is hypotensive despite a 2-L fluid bolus. He is prepped for a right internal jugular 9-French central venous line to start pressors while being worked up for an underlying cause. Following placement of the catheter, pulsatile bleeding is noted from the catheter. What is the best next step?",
      "options": [
        "A. Downsize to a smaller catheter in the ED, transfer the patient to the intensive care unit (ICU), and remove it in several hours.",
        "B. Immediately remove the catheter, and hold pressure for 10 to 15 minutes.",
        "C. Immediately remove the catheter, and then get a duplex ultrasound study of the neck.",
        "D. Remove the catheter under direct surgical exposure.",
        "E. Transfer patient to the ICU, then remove, hold pressure, and place a suture in the skin."
      ],
      "answer": "D",
      "explanation": "- The right internal jugular vein is preferred for central line placement due to its accessibility and lower risk of pneumothorax compared to a subclavian line.\n- In 70% of individuals, the internal jugular vein lies anterolateral to the carotid artery, but in some cases, it may lie directly anterior or posterior, increasing the risk of carotid artery cannulation.\n- If the carotid artery is entered with a probe needle (evidenced by pulsatile bleeding), the needle should be immediately removed, and pressure held for 10 minutes.\n- If the artery is cannulated with a dilator or catheter, it should not be removed blindly, as this could lead to a potential airway-threatening hemorrhage.\n- It is safer to remove the catheter in the operating room via direct surgical exposure, followed by suture repair of the artery (A–C, E)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 45-year-old woman presents with a nonhealing ulcer at the medial malleolus associated with leg edema and hyperpigmentation but no signs of infection. First-line management consists of:",
      "options": [
        "A. Wet-to-dry dressings",
        "B. Split-thickness skin grafting",
        "C. Subfascial perforator ligation",
        "D. Local wound debridement followed by intravenous antibiotics",
        "E. Compression dressings"
      ],
      "answer": "E",
      "explanation": "- This patient exhibits classic signs of chronic venous insufficiency, with venous stasis ulcers typically located at the medial malleolus.\n- The precise cause of venous stasis ulcers is multifactorial, involving increased venous pressure from incompetent valves leading to impedance of capillary flow, leukocyte trapping, release of oxygen free radicals and proteolytic enzymes, and protein leakage (fibrinogen) forming a barrier to wound healing.\n- First-line therapy for venous stasis ulcers is compression therapy (A-D).\n- Workup should include a duplex ultrasound scan of the venous system to assess for valvular incompetence of the deep, superficial, and perforating veins.\n- A common and effective compression bandage is the Unna boot, containing zinc oxide, glycerin, gelatin, and calamine lotion, wrapped from the foot up to just below the knee, and can remain in place for up to a week.\n- The Unna boot should not be used in the presence of an active ulcer infection; in such cases, debridement and antibiotics are required first."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 50-year-old male presents with a venous stasis medial malleolar ulcer that has failed to heal with conservative management. He has large varicose veins in the lower leg, edema, and hyperpigmentation. There is no deep vein thrombosis (DVT) identified on duplex ultrasound. However, there is incompetence of the superficial, deep, and perforator systems. Which of the following is the best next step?",
      "options": [
        "A. Vein stripping of the greater saphenous vein and ultrasound-guided sclerotherapy of perforators",
        "B. Radiofrequency ablation (RFA) of the greater saphenous vein and ultrasound-guided perforator sclerotherapy",
        "C. RFA of the greater saphenous vein and compression stockings",
        "D. Stab avulsion of varicose veins",
        "E. Ultrasound-guided perforator vein sclerotherapy"
      ],
      "answer": "C",
      "explanation": "- Chronic venous disorders, ranging from varicose veins to venous stasis ulcers, affect 20% to 25% of the population, primarily due to incompetence of venous valves in the deep, superficial (saphenous), or perforator veins.\n- Patients are classified and treated based on disease severity using the CEAP (clinical, etiologic, anatomic, and pathophysiologic) classification.\n- Patients should understand that chronic venous disease is incurable, and intervention aims to minimize symptoms and prevent recurrence.\n- Superficial incompetence is generally addressed first. For a nonhealing wound with incompetence in all three venous systems unresponsive to compression therapy, superficial venous incompetence is initially treated by obliterating the saphenous vein alongside compression therapy.\n- Methods include saphenous vein stripping, foam sclerotherapy, or RFA; RFA is generally preferred and recommended by the American Venous Forum due to its less invasive nature (A, B-E).\n- RFA has shown 93% freedom from reflux at 2 years post-ablation.\n- Primary venous insufficiency is a recognized risk factor for DVT, so it's crucial to rule out DVT before intervention.\n- If superficial system treatment is unsuccessful, the next step is to treat perforator incompetence via ultrasound-guided sclerotherapy.\n- There is no consistently effective surgical treatment for deep system incompetence.\n- Stab avulsions of varicose veins alone are insufficient as they do not address valvular incompetence (D)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 35-year-old female presents with left leg swelling. There are no precipitating factors. Ultrasound confirms a left iliofemoral DVT, and the patient is started on heparin. Workup reveals no evidence of risk factors for DVT, such as recent surgery, prolonged immobilization, nor any evidence of malignancy. Which of the following is most likely to be of long-term benefit?",
      "options": [
        "A. Low-molecular-weight heparin (LMWH)",
        "B. Long-term (>12 months) anticoagulation",
        "C. Lifelong compression stocking",
        "D. Right-to-left femoral vein bypass",
        "E. Venous thrombectomy"
      ],
      "answer": "B",
      "explanation": "- DVT and pulmonary embolism (PE) affect up to 900,000 people annually in the US, with incidence increasing with age.\n- When a patient presents with DVT, it's important to identify the Virchow triad component (stasis, vascular injury, hypercoagulability) to guide risk factor assessment.\n- The cause is often multifactorial. Anticoagulation duration and type depend on whether the DVT is provoked (e.g., malignancy, recent surgery, prolonged immobilization) or unprovoked, the specific provoking factor, and the DVT location (proximal vs. distal leg).\n- Proximal (iliofemoral) DVTs are more likely to cause massive swelling and long-term postphlebitic syndrome, requiring more consideration for anticoagulant type, duration, thrombolytics, and mechanical thromboembolectomy compared to distal DVTs.\n- LMWH is not as efficacious for proximal DVT (A).\n- For unprovoked proximal (iliofemoral) DVT, long-term (>12 months) anticoagulation is recommended.\n- The benefit of compression stockings for preventing postphlebitic syndrome is controversial (C). Most authors recommend 2 years of compression; lifelong compression offers no additional benefit, has poor patient compliance, and is costly.\n- Right-to-left femoral vein bypass (D) is rarely performed and considered a last resort for chronic venous stasis unresponsive to endovascular options.\n- Thrombolytic therapy is an option for select patients with severe iliofemoral DVT, especially if phlegmasia is present.\n- Venous thrombectomy (E) is reserved for patients with phlegmasia who have failed thrombolytic therapy."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the management of DVT?",
      "options": [
        "A. For patients with proximal DVT of the leg and no cancer history, direct Xa inhibitor is recommended over warfarin.",
        "B. For a leg DVT in association with malignancy, warfarin is preferred over LMWH.",
        "C. For incidentally discovered DVT, anticoagulation is unnecessary.",
        "D. In patients with isolated distal (calf) DVT of the leg, anticoagulation therapy is superior to serial imaging.",
        "E. In patients with a second episode of DVT, lifelong anticoagulation is indicated."
      ],
      "answer": "A",
      "explanation": "- The 2016 American College of Chest Physicians guidelines recommend direct Xa inhibitors (dabigatran, rivaroxaban, apixaban, or edoxaban) over warfarin for patients with proximal DVT of the leg and no cancer history.\n- Initial parenteral anticoagulation with a heparin drip is not required when using rivaroxaban and apixaban. However, a heparin drip should be started before dabigatran or edoxaban and overlapped with warfarin.\n- Novel oral anticoagulants (NOACs) have shown superiority, and with the recent approval of idarucizumab (dabigatran reversal agent), they are likely to become standard of care for non-cancer DVT patients.\n- For patients with a cancer history and proximal DVT of the leg, LMWH is recommended over warfarin and direct Xa inhibitors (B), which is consistent with prior guidelines.\n- For proximal DVT of the leg provoked by surgery, 3 months of anticoagulation therapy is recommended, regardless of bleeding risk.\n- Management of isolated calf DVT is controversial. Anticoagulation is recommended for severe leg symptoms or risk factors for propagation.\n- For isolated distal DVT without severe symptoms or risk factors for extension, serial imaging of deep veins for 2 weeks is recommended over anticoagulation therapy (D).\n- There is no consensus on the duration of therapy for a second DVT episode, as it depends on reversible risk factors, underlying cause, malignancy, life expectancy, and burden of therapy. Most surgeons recommend at least 1 year of anticoagulation for a second DVT episode, and lifelong anticoagulation for more than two episodes (E).\n- Incidentally discovered DVT should be treated with anticoagulation (C)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 58-year-old male with newly diagnosed metastatic colon cancer presents to the ED with a massively swollen right leg and severe pain that started 1 day earlier. On exam, he has massive edema of the right leg and is tender to palpation. His foot appears blue. Duplex scan confirms a DVT. Which of the following is true about this condition?",
      "options": [
        "A. The risk of limb loss is low.",
        "B. This occurs more commonly on the right side.",
        "C. A pale, white foot carries a worse prognosis than a blue foot.",
        "D. Associated hypotension is usually the result of sepsis.",
        "E. Catheter-directed thrombolysis should be performed."
      ],
      "answer": "E",
      "explanation": "- Massive iliofemoral DVT can severely impair arterial blood flow, leading to massive swelling.\n- Early on, the limb may appear pale (phlegmasia alba dolens, or \"milk-leg\").\n- In some patients, this can progress to impending gangrene, known as phlegmasia cerulea dolens (blue extremity), as described in the patient, which carries a high risk of limb loss (C).\n- DVT and its extension to phlegmasia occur more commonly on the left side, often due to May-Thurner syndrome (compression of the left iliac vein by the right iliac artery) (B).\n- The most common risk factor for phlegmasia is underlying malignancy.\n- Diagnosis is best confirmed with duplex ultrasound; CT angiography is not typically required unless findings are equivocal.\n- Initial treatment is similar to acute DVT, with emphasis on leg elevation.\n- Due to fluid sequestration, patients may present with hypovolemic shock, potentially requiring massive volume resuscitation (D).\n- The risk of limb loss, pulmonary embolism, postphlebitic syndrome, and mortality are all high (A).\n- Given these high risks, thrombolytic therapy has emerged as the treatment of choice."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding starting a heparin drip in a 100-kg patient with a newly diagnosed DVT?",
      "options": [
        "A. A bolus of 10,000 units of heparin should be given before starting the drip.",
        "B. The drip should be started at 18 units/kg per hour.",
        "C. The international normalized ratio (INR) needs to be checked daily.",
        "D. Activated partial thromboplastin time (aPTT) should be titrated to 100 to 120 seconds after starting the drip.",
        "E. Heparin should be stopped if the platelet count increases by more than 50%."
      ],
      "answer": "B",
      "explanation": "- When initiating a heparin drip, an 80 units/kg bolus (8,000 units for a 100-kg patient) should be administered first, followed by a continuous infusion of heparin at 18 units/kg per hour (A).\n- For DVT patients, the aPTT should be drawn every 6 to 12 hours, with a goal range of 60 to 90 seconds (D).\n- INR is checked for patients on warfarin (C).\n- Heparin can potentially cause heparin-induced thrombocytopenia (HIT), which typically occurs 5 or more days after initiation and presents as a 50% drop in platelet count (E)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding venous circulation?",
      "options": [
        "A. The perforating veins in the leg direct blood flow from deep to the superficial system.",
        "B. The common iliac veins have valves.",
        "C. In a healthy person, venous pressure increases with walking.",
        "D. The greater saphenous vein joins the femoral vein to become the common femoral vein.",
        "E. Muscle contraction plays no role in venous return."
      ],
      "answer": "D",
      "explanation": "- The lower extremity veins are categorized into superficial, perforating, and deep systems.\n- The superficial venous system includes the greater and lesser saphenous veins.\n- Deep veins follow major arteries. Paired tibial and peroneal veins merge to form the popliteal vein, which becomes the femoral vein after passing through the adductor hiatus.\n- In the proximal thigh, the greater saphenous vein joins the femoral vein to form the common femoral vein.\n- Multiple perforating veins connect the superficial and deep venous systems by traversing the deep fascia.\n- Key perforators include Cockett perforators (draining the medial lower leg) and Boyd perforators (connecting the greater saphenous vein to the deep vein approximately 10 cm below the knee).\n- Blood flows from the superficial to the deep venous system (A).\n- Incompetence of these perforators significantly contributes to venous stasis and ulceration.\n- There are no valves in the portal vein, superior vena cava, inferior vena cava (IVC), or common iliac vein (B).\n- Calf muscles are crucial for augmenting venous return by acting as a pump to return blood to the heart (E). This is why bedridden patients are prone to venous stasis.\n- Venous pressure significantly drops with walking due to calf muscle action but increases in patients with venous obstruction, leading to persistent stasis that muscle contraction cannot overcome (C). This necessitates compression stockings as an adjunct to normal venous return."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is the most common risk factor for spontaneous venous thromboembolism?",
      "options": [
        "A. Antithrombin III deficiency",
        "B. Factor V Leiden",
        "C. Protein C deficiency",
        "D. Protein S deficiency",
        "E. Antiphospholipid syndrome"
      ],
      "answer": "B",
      "explanation": "- Virchow's triad (stasis, endothelial injury, hypercoagulability) describes the primary risk factors for venous thromboembolism (VTE).\n- For spontaneous VTE, hypercoagulability is the most significant factor.\n- Hypercoagulability can be caused by Factor V Leiden, prothrombin gene mutation, deficiencies in protein C, protein S, or antithrombin III, elevated homocysteine levels, and antiphospholipid syndrome.\n- Non-acquired VTE causes include smoking (most common), obesity, pregnancy, malignancy, and oral contraceptive use.\n- In surgical patients, VTE is multifactorial, stemming from postoperative stasis due to prolonged bed rest and endothelial injury from trauma or recent surgery.\n- Among trauma patients, spinal cord injury carries the highest VTE risk.\n- Other VTE risk factors include a history of VTE, advanced age, and varicose veins.\n- Factor V Leiden is the most common genetic defect associated with thrombophilia (A, C-E).\n- Factor V Leiden is a single-point mutation in the coagulation factor V gene, rendering factor V resistant to inactivation by activated protein C, a natural anticoagulant.\n- This autosomal dominant mutation accounts for 92% of anticoagulant protein resistance cases.\n- It is present in 4% to 6% of the general population, increasing VTE risk sixfold in heterozygotes and 80-fold in homozygotes.\n- Factor V Leiden is found in 15% to 20% of patients with their first VTE.\n- There is no standard guideline for anticoagulation duration in acquired hypercoagulable states; an individualized approach is preferred, balancing recurrent VTE risk against bleeding risk.\n- One study noted similar recurrent VTE risk in Factor V Leiden carriers and non-carriers, suggesting no need for longer anticoagulation than standard recommendations for a first-time event."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 40-year-old woman presents with pain and tenderness at the site of a long-standing varicose vein in her calf. There is a palpable cord with surrounding erythema. Management consists of:",
      "options": [
        "A. Intravenous (IV) heparin sodium",
        "B. Subcutaneous low-molecular-weight heparin",
        "C. Warm compresses and nonsteroidal anti-inflammatory drugs",
        "D. Ligation of saphenous vein at saphenofemoral junction",
        "E. IV antibiotics"
      ],
      "answer": "C",
      "explanation": "- The patient's symptoms (pain, tenderness, palpable cord, erythema) are indicative of superficial venous thrombosis (SVT) or thrombophlebitis, which is essentially a clotted surface vein.\n- A key diagnostic pitfall is that SVT patients may have a concomitant deep vein thrombosis (DVT) in 5–40% of cases, making a duplex ultrasound scan of the venous system essential.\n- SVT can be misdiagnosed as cellulitis, leading to inappropriate antibiotic prescription without a duplex ultrasound.\n- SVT is generally best managed with warm compresses and NSAIDs.\n- IV antibiotics are reserved for septic thrombophlebitis, typically associated with an intravenous line (E).\n- Systemic anticoagulation is reserved for SVT that is near the deep system (A, B).\n- If anticoagulation is contraindicated, ligation of the saphenous vein at the saphenofemoral junction is indicated for saphenous vein SVT (D).\n- Varicose veins contribute to stasis, predisposing to SVT."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 60-year-old male presents with pain, tenderness, and redness over his left mid, medial thigh. He had a similar event in his other thigh a month earlier. He has noted a decreased appetite. On exam he has no varicose veins, nor evidence of hyperpigmentation or leg swelling. Duplex scan shows an 8-cm segment of thrombosis of the mid saphenous vein but no DVT. Which of the following is recommended?",
      "options": [
        "A. Systemic anticoagulation",
        "B. Warm compresses and a CT of the abdomen",
        "C. Ligation and stripping of the left saphenous vein",
        "D. Systemic anticoagulation and a CT of the abdomen",
        "E. Warm compresses and nonsteroidal antiinflammatory drugs (NSAIDs)"
      ],
      "answer": "D",
      "explanation": "- Unlike the previous case of provoked SVT (stasis in a varicose vein), this patient presents with unprovoked, recurrent SVT in different limbs, specifically superficial migratory thrombophlebitis.\n- Such a presentation should raise concern for hypercoagulability and, particularly, malignancy.\n- Superficial migratory thrombophlebitis is strongly associated with pancreatic cancer (Trousseau's sign) and, to a lesser extent, stomach and lung cancer.\n- Therefore, treatment should include a targeted workup for malignancy, tailored to findings from history, review of systems, and physical exam (B, C-E).\n- SVT within the saphenous vein in the upper thigh, within 3 cm of the saphenofemoral junction, or with long segments (>5 cm) carries an increased risk of propagating into the deep system and thus benefits from anticoagulation (A).\n- A recent study showed that fondaparinux decreased DVT, recurrent thrombophlebitis, and clot progression compared to placebo.\n- If the SVT is not close to the femoral vein, a follow-up duplex ultrasound scan should be performed in 5 to 7 days to assess for more proximal propagation."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is the best indication for placement of an inferior vena cava (IVC) filter?",
      "options": [
        "A. For a pregnant patient in the third trimester diagnosed with a new DVT",
        "B. In a patient with severe pelvic fractures",
        "C. For a patient with a large free-floating vena cava thrombus",
        "D. For a recurrent DVT in a patient who is already therapeutic on warfarin",
        "E. Before planned thrombolysis of a new DVT"
      ],
      "answer": "D",
      "explanation": "- The aggressive use of IVC filters is balanced by the understanding that filters left in place long-term can lead to complications such as migration, leg fracture, vena cava perforation, and an increased risk of recurrent DVT.\n- While filters reduce PE risk, they increase DVT risk.\n- A prospective randomized study on DVT patients found that routine IVC filter addition did not improve mortality compared to heparin and warfarin alone.\n- The PREPIC 2 trial also showed an increased number of recurrent PEs in the filter group (3%) compared to the anticoagulation-only group (1.5%).\n- IVC filters can be permanent or retrievable. Retrievable filters should ideally be removed within 9 to 12 weeks, making them suitable for short-term PE protection.\n- Absolute indications for permanent IVC filter placement include a venous thromboembolic event (DVT or PE) in a patient with a contraindication to anticoagulation (e.g., active gastrointestinal bleeding), a new VTE that develops while already on therapeutic anticoagulation, or a VTE with a major hemorrhage (B, C-E).\n- Relative indications for a retrievable filter include planned thrombolysis of a new DVT (due to potential thrombus fragmentation towards the lungs), recent DVT with planned major surgery, and prophylaxis in severe head, pelvic, or spinal cord trauma.\n- Relative indications for a permanent IVC filter include poor compliance with anticoagulant therapy, recurrent VTE episodes, and the presence of a large free-floating thrombus in the IVC.\n- Eight permanent and three retrievable filters are available in the US.\n- Pregnant patients diagnosed with a new DVT should receive low-molecular-weight heparin for the remainder of pregnancy and up to 6 weeks postpartum (A). Warfarin is teratogenic and should be avoided."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "A 25-year-old male college swimmer presents with sudden onset of right arm swelling and pain. A duplex ultrasound scan demonstrates thrombosis of the axillary-subclavian vein. The patient is started on IV heparin. The most important additional adjunctive therapy for this patient is:",
      "options": [
        "A. First rib resection",
        "B. Catheter-guided thrombolysis",
        "C. Lifelong anticoagulation",
        "D. Venous stenting",
        "E. Physical therapy"
      ],
      "answer": "A",
      "explanation": "- Paget-Schroetter syndrome, also known as effort-induced thrombosis, is a spontaneous thrombosis of the axillary-subclavian vein.\n- It is primarily a manifestation of thoracic outlet syndrome, where a hypertrophied or aberrant muscle compresses the axillary-subclavian vein between the first rib and the clavicle.\n- It commonly affects young, active individuals engaged in vigorous arm activity (e.g., swimming, pitching, weightlifting), but can also occur spontaneously. It is more prevalent in men.\n- Secondary axillary/subclavian vein thrombosis can also be associated with mediastinal tumors, congestive heart failure (CHF), and nephrotic syndrome.\n- Diagnosis is best confirmed by duplex ultrasonography.\n- The patient should be promptly started on IV heparin.\n- The most crucial adjunctive measure to prevent recurrence and long-term swelling is thoracic outlet decompression via first rib resection. The timing is controversial but not time-sensitive.\n- Many authors also recommend catheter-directed thrombolysis (B), but it is associated with increased bleeding risk and costs, and its benefit is unclear as many patients recanalize spontaneously with anticoagulation.\n- A follow-up venogram is often obtained to identify correctable anatomic abnormalities.\n- Stenting a residual stenosis in this area without decompressing the thoracic outlet is contraindicated because ongoing compression will crush the stent and cause further venous damage.\n- Residual venous stenoses can be treated with angioplasty, sometimes after first rib resection.\n- A recent meta-analysis showed significant symptom improvement with first rib resection; over 40% of control group patients eventually required rib resection for recurrent symptoms.\n- For active athletes performing repetitive overhead arm movements, first rib resection is the best option (C-E)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "The most common electrocardiographic change after pulmonary embolism (PE) is:",
      "options": [
        "A. Atrial fibrillation",
        "B. Right bundle branch block",
        "C. Nonspecific ST and T wave changes",
        "D. S1, Q3, T3 pattern",
        "E. Sinus tachycardia"
      ],
      "answer": "E",
      "explanation": "- The most common electrocardiographic finding after a PE is sinus tachycardia, present in almost half of patients (A-D).\n- A heart rate greater than 100 beats per minute combined with tachypnea in suspected PE should raise further concern.\n- The classic electrocardiographic finding is the S1, Q3, T3 pattern (prominent S wave in lead I, Q wave and inverted T wave in lead III), which indicates right ventricular strain from a large PE, but it is not commonly observed.\n- A large PE can lead to right ventricular enlargement, causing the interventricular septum to deviate to the left and resulting in a right bundle branch block."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Trauma patients sustaining what type of injury are at highest risk of venous thromboembolism?",
      "options": [
        "A. Head trauma",
        "B. Femur fracture",
        "C. Pelvic fracture",
        "D. Splenectomy",
        "E. Spinal cord injury"
      ],
      "answer": "E",
      "explanation": "- The increased risk of venous thromboembolism (VTE) in surgical patients is multifactorial, involving activated coagulation, transient depression of fibrinolysis, and temporary immobilization.\n- Additional factors increasing VTE risk include central venous catheter placement, concomitant cardiac disease, malignancy, or intrinsic hypercoagulable states.\n- Trauma patients, in particular, face a high risk of VTE.\n- In trauma patients, spinal cord injury (odds ratio 8.33) and fracture of the femur or tibia (odds ratio 4.82) are the injuries associated with the greatest VTE risk (A-D).\n- A large prospective study identified other risk factors in trauma patients through multivariate analysis, including older age, blood transfusion, and the need for surgery."
    }
  ]
}
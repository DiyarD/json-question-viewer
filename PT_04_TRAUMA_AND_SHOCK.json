{
    "chapter_name": "TRAUMA AND SHOCK",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "132. A teenage boy falls from his bicycle and is run over by a truck. On arrival in the emergency room, he is awake and alert and appears frightened but in no distress. The chest radiograph suggests an air-fluid level in the left lower lung field and the nasogastric tube seems to coil upward into the left chest. The next best step in management is",
            "options": [
                "a. Placement of a left chest tube",
                "b. Immediate thoracotomy",
                "c. Immediate celiotomy",
                "d. Esophagogastroscopy",
                "e. Removal and replacement of the nasogastric tube; diagnostic peritoneal lavage"
            ],
            "answer": "C",
            "explanation": "*   The finding of an air-fluid level in the left lower chest with a nasogastric tube entering it after blunt trauma to the abdomen is diagnostic of diaphragmatic rupture with gastric herniation into the chest.\n*   This lesion needs to be fixed immediately.\n*   Continuing negative pressure in the chest sucks more abdominal contents into the chest and increases the likelihood of vascular compromise of the herniated viscera.\n*   While the diaphragm is easily fixed from the left chest, this injury should be approached from the abdomen.\n*   The possibility of injury below the diaphragm after sufficient blunt injury to rupture the diaphragm mandates examination of the intraabdominal solid and hollow viscera.\n*   Adequate exposure of the diaphragm to allow secure repair is possible from this approach."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "133. Which of the following conditions is most likely to follow a compression-type abdominal injury?",
            "options": [
                "a. Renal vascular injury",
                "b. Superior mesenteric thrombosis",
                "c. Mesenteric vascular injury",
                "d. Avulsion of the splenic pedicle",
                "e. Diaphragmatic hernia"
            ],
            "answer": "E",
            "explanation": "*   In rapid-deceleration injuries associated with automobile crashes, abdominal viscera tend to continue moving anteriorly after the body wall has been stopped.\n*   These organs exert great stress upon the structures anchoring them to the retroperitoneum.\n*   Intestinal loops stretch and may tear their mesenteric attachments, injuring and thrombosing the superior mesenteric artery; kidneys and spleen may similarly shear their vascular pedicles.\n*   In these injuries, however, ordinarily the intraabdominal pressure does not rise excessively and diaphragmatic hernia is not likely.\n*   Diaphragmatic hernia is primarily associated with compression-type abdominal or thoracic injuries that increase intraabdominal or intrathoracic pressure sufficiently to tear the central portion of the diaphragm."
        },
        {
            "id": "3",
            "question_type": "mcq",
            "question": "134. A 65-year-old man who smokes cigarettes and has chronic obstructive pulmonary disease falls and fractures the 7th, 8th, and 9th ribs in the left anterolateral chest. Chest x-ray is otherwise normal. Appropriate treatment might include",
            "options": [
                "a. Strapping the chest with adhesive tape",
                "b. Immobilization with sandbags",
                "c. Tube thoracostomy",
                "d. Peritoneal lavage",
                "e. Surgical fixation of the fractured ribs"
            ],
            "answer": "D",
            "explanation": "*   The preeminent concern in treatment of rib fractures is the prevention of pulmonary complications (atelectasis and pneumonia), particularly for patients with preexisting pulmonary disease, who are in danger of progressing to respiratory failure.\n*   Attempts to relieve pain by immobilization or splinting, such as strapping the chest, merely compound the problem of inadequate ventilation.\n*   Tube thoracostomy is indicated only if pneumothorax is diagnosed.\n*   Mild pain may be controlled with oral analgesics, and patients with minor fracture injuries, if they can be closely monitored, may be managed at home with appropriate instructions for coughing and deep breathing.\n*   Patients with significant fractures or severe pain should be hospitalized.\n*   Rib fractures in the elderly are particularly treacherous.\n*   Intercostal nerve blocks often provide prolonged periods of pain relief and, together with appropriate pulmonary physiotherapy, will inhibit development of respiratory complications.\n*   Rib fractures are often associated with either intrathoracic or intraabdominal injuries.\n*   In particular, fractures of the left chest wall should arouse suspicion of splenic trauma.\n*   In equivocal cases, peritoneal lavage will often be diagnostic.\n*   Rib fractures heal spontaneously, without need for surgical fixation."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "135. Blunt trauma to the abdomen most commonly injures which of the following organs?",
            "options": [
                "a. Liver",
                "b. Kidney",
                "c. Spleen",
                "d. Intestine",
                "e. Pancreas"
            ],
            "answer": "C",
            "explanation": "*   The diagnosis of injuries resulting from blunt abdominal trauma is difficult; injuries are often masked by associated injuries.\n*   Thus, trauma to the head or chest, together with fractures, frequently conceals intraabdominal injury.\n*   Apparently trivial injuries may rupture abdominal viscera in spite of the protection offered by the rib cage.\n*   The structures most likely to be damaged in blunt abdominal trauma are, in order of frequency, the spleen, kidney, intestine, liver, abdominal wall, mesentery, pancreas, and diaphragm.\n*   Abdominal paracentesis is a rapid, sensitive diagnostic test for patients with suspected intraabdominal injury and may be extremely helpful in the management of patients with associated head, thoracic, or pelvic trauma in whom signs and symptoms of the abdominal injuries may be masked or overlooked.\n*   Abdominal CT scans, which should be done promptly and rapidly, are being used more frequently to evaluate these injuries."
        },
        {
            "id": "5",
            "question_type": "mcq",
            "question": "136. Ligation of injured major peripheral veins is rarely preferable to repair, but may be justified for which reason?",
            "options": [
                "a. In severe popliteal vascular injuries, venous ligation leads to a decreased amputation rate following successful arterial reconstruction when compared with combined arterial and venous repair",
                "b. Venous ligation leads to a decreased incidence of chronic venous insufficiency when compared with venous repair",
                "c. Venous ligation leads to a decreased operative time in patients with multiple injuries or severe trauma when compared with venous repair",
                "d. In the presence of extensive associated soft tissue injury, venous return is already sufficiently impaired to render venous repair pointless",
                "e. Even though ligated veins thrombose, they often recanalize"
            ],
            "answer": "C",
            "explanation": "*   In the past, ligation rather than repair of large veins in the extremities has been advocated in patients with multiple injuries or severe trauma.\n*   Venous repair adds to the operative time, often results in thrombosis and occlusion, and was thought to lead to an increased incidence of pulmonary embolization.\n*   Recent studies, including reviews of the Viet Nam Vascular Registry, indicate that the risk of pulmonary embolization is not increased with repair and that vein repair, in conjunction with arterial repair, increases limb salvage, particularly in popliteal injuries.\n*   Venous repair may also be necessary in the presence of extensive soft tissue trauma and an already severely compromised venous return.\n*   Long-term follow-up reveals that the sequelae of chronic venous insufficiency develop with increasing frequency in those patients who have had ligations of lower-extremity veins.\n*   Morbidity from chronic deep venous occlusion may be diminished even in those patients who develop thrombosis following repair, because recanalization often occurs.\n*   Ligated veins do not recanalize.\n*   For these reasons, it is currently recommended that large veins be repaired whenever clinically feasible."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "137. A 27-year-old man sustains a single gunshot wound to the left thigh. In the emergency room he is noted to have a large hematoma of his medial thigh. He complains of paresthesias in his foot. On examination there are weak pulses palpable distal to the injury and the patient is unable to move his foot. The appropriate initial management of this patient would be",
            "options": [
                "a. Angiography",
                "b. Immediate exploration and repair",
                "c. Fasciotomy of anterior compartment",
                "d. Observation for resolution of spasm",
                "e. Local wound exploration"
            ],
            "answer": "B",
            "explanation": "*   The five P's of arterial injury include Pain, Paresthesias, Pallor, Pulselessness, and Paralysis.\n*   In the extremities the tissues most sensitive to anoxia are the peripheral nerves and striated muscle.\n*   The early developments of paresthesias and paralysis are signals that there is significant ischemia present and immediate exploration and repair are warranted.\n*   The presence of palpable pulses does not exclude an arterial injury because this presence may represent a transmitted pulsation through a blood clot.\n*   When severe ischemia is present, the repair must be completed within 6–8 h to prevent irreversible muscle ischemia and loss of limb function.\n*   Delay to obtain an angiogram or to observe for change needlessly prolongs the ischemic time.\n*   Fasciotomy may be required but should be done in conjunction with and after reestablishment of arterial flow.\n*   Local wound exploration is not recommended because brisk hemorrhage may be encountered without the securing of prior vascular control."
        },
        {
            "id": "7",
            "question_type": "clinical_scenario",
            "question": "A 25-year-old woman arrives in the emergency room following an automobile accident. She is acutely dyspneic with a respiratory rate of 60 breaths/min. Breath sounds are markedly diminished on the right side.\n\n138. The first step in managing the patient should be to",
            "options": [
                "a. Take a chest x-ray",
                "b. Draw arterial blood for blood gas determination",
                "c. Decompress the right pleural space",
                "d. Perform pericardiocentesis",
                "e. Administer intravenous fluids"
            ],
            "answer": "C",
            "explanation": "*   Tension pneumothorax is a life-threatening problem requiring immediate treatment.\n*   A lung wound that behaves as a ball or flap valve allows escaped air to build up pressure in the intrapleural space.\n*   This causes collapse of the ipsilateral lung and shifting of the mediastinum and trachea to the contralateral side, in addition to compression of the vena cava and contralateral lung.\n*   Sudden death may ensue because of a decrease in cardiac output; hypoxemia; and ventricular arrhythmias.\n*   To accomplish rapid decompression of the pleural space, a large-gauge needle should be passed into the intrapleural cavity through the second intercostal space at the midclavicular line.\n*   This may be attached temporarily to an underwater seal with subsequent insertion of a chest tube after the life-threatening urgency has been relieved."
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "139. A chest x-ray of this woman before therapy would probably reveal",
            "options": [
                "a. Air in the right pleural space",
                "b. Shifting of the mediastinum toward the right",
                "c. Shifting of the trachea toward the right",
                "d. Dilation of the intrathoracic vena cava",
                "e. Hyperinflation of the left lung"
            ],
            "answer": "A",
            "explanation": "*   Tension pneumothorax produces characteristic x-ray findings of ipsilateral lung collapse, mediastinal and tracheal shift, and compression of the contralateral lung.\n*   Occasionally, adhesions prevent complete lung collapse, but the tension pneumothorax is evident because of the mediastinal displacement.\n*   A pleural effusion would not be expected acutely in the absence of associated intrapleural blood."
        },
        {
            "id": "9",
            "question_type": "mcq",
            "question": "140. Among the physiologic responses to acute injury is",
            "options": [
                "a. Increased secretion of insulin",
                "b. Increased secretion of thyroxine",
                "c. Decreased secretion of vasopressin (ADH)",
                "d. Decreased secretion of glucagon",
                "e. Decreased secretion of aldosterone"
            ],
            "answer": "A",
            "explanation": "*   Though the immediate release of catecholamines causes a transient drop in the insulin levels, shortly thereafter there is a significant rise in plasma insulin levels in injured humans.\n*   Since injured patients are highly hypermetabolic, it might be expected that the activity of the thyroid hormones would be increased following injury. This is not the case, however, and increased levels of the thyroid hormones are not seen.\n*   Vasopressin (ADH) is regulated by the serum osmolality. In the postinjury period many factors are at play that provoke the excretion of vasopressin.\n*   Glucagon secretion is normal or increased after injury; not only are aldosterone levels elevated, but the diurnal fluctuations ordinarily seen are lost."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "141. In a stable patient, the management of a complete transection of the common bile duct distal to the insertion of the cystic duct would be optimally performed with a",
            "options": [
                "a. Choledochoduodenostomy",
                "b. Loop choledochojejunostomy",
                "c. Primary end-to-end anastomosis of the transected bile duct",
                "d. Roux-en-Y choledochojejunostomy",
                "e. Bridging of the injury with a T tube"
            ],
            "answer": "D",
            "explanation": "*   Traumatic injury to the common bile duct must be considered in two separate categories.\n*   Complete transection of the common bile duct can be handled in many ways.\n*   If the patient is unstable and time is limited, simply placing a T tube in either end of the open common bile duct and staging the repair is the treatment of choice.\n*   In a stable patient a biliary enteric bypass is preferred.\n*   This can be accomplished by Roux-en-Y choledochojejunostomy or cholecystojejunostomy.\n*   The jejunum is favored over the duodenum because if the anastomosis leaks, a lateral duodenal fistula is avoided.\n*   For similar reasons the defunctionalizing of the jejunal limb is also preferable.\n*   This can be accomplished by creating a Roux-en-Y limb of jejunum.\n*   Primary end-to-end repair of a completely transected common bile duct is not recommended because of the high incidence of stricture and need for reoperation and creation of a biliary enteric bypass.\n*   However, primary repair is the procedure of choice if the common bile duct is lacerated or only partially transected."
        },
        {
            "id": "11",
            "question_type": "mcq",
            "question": "142. Nonoperative management of penetrating neck injuries has been advocated as an alternative to mandatory exploration in asymptomatic patients. Which of the following findings would constitute a relative, rather than an absolute, indication for formal neck exploration?",
            "options": [
                "a. Expanding hematoma",
                "b. Dysphagia",
                "c. Dysphonia",
                "d. Pneumothorax",
                "e. Hemoptysis"
            ],
            "answer": "D",
            "explanation": "*   Reports of a more than 50% incidence of negative explorations of the neck, iatrogenic complications, and serious injuries overlooked at operation have caused a reassessment of the dictum that all penetrating neck wounds that violate the platysma must be explored.\n*   Stable patients with zone III (between the angle of the mandible and the skull) or zone I (inferior to the cricoid cartilage) injuries, or multiple neck wounds, should undergo initial angiography irrespective of the ultimate treatment plan.\n*   Algorithms exist for nonoperative management of asymptomatic patients that employ observation alone or combinations of vascular and aerodigestive contrast studies and endoscopy.\n*   Nevertheless, recognition of acute signs of airway distress (stridor, hoarseness, dysphonia), visceral injury (subcutaneous air, hemoptysis, dysphagia), hemorrhage (expanding hematoma, unchecked external bleeding), or neurologic symptoms referable to carotid injury (stroke or altered mental status) or lower cranial nerve or brachial plexus injury requires formal neck exploration.\n*   Pneumothorax would mandate a chest tube; the necessity for exploration would depend on clinical judgment and institutional policy."
        },
        {
            "id": "12",
            "question_type": "mcq",
            "question": "143. Following blunt abdominal trauma, a 12-year-old girl develops upper abdominal pain, nausea, and vomiting. An upper gastrointestinal series reveals a total obstruction of the duodenum with a \"coiled spring\" appearance in the second and third portions. Appropriate management is",
            "options": [
                "a. Gastrojejunostomy",
                "b. Nasogastric suction and observation",
                "c. Duodenal resection",
                "d. TPN to increase the size of the retroperitoneal fat pad",
                "e. Duodenojejunostomy"
            ],
            "answer": "B",
            "explanation": "*   Duodenal hematomas result from blunt abdominal trauma.\n*   They present as a high bowel obstruction with abdominal pain and occasionally a palpable right upper quadrant mass.\n*   An upper gastrointestinal series is almost always diagnostic with the classic coiled spring appearance of the second and third portions of the duodenum secondary to the crowding of the valvulae conniventes (circular folds) by the hematoma.\n*   Nonsurgical management is the mainstay of therapy because the vast majority of duodenal hematomas resolve spontaneously.\n*   Simple evacuation of the hematoma is the operative procedure of choice.\n*   However, bypass procedures and duodenal resection have been performed for this problem.\n*   In patients with duodenal obstruction from the superior mesenteric artery syndrome, the obstruction is usually the result of a marked weight loss and, in conjunction with this, loss of the retroperitoneal fat pad that elevates the superior mesenteric artery from the third and fourth portions of the duodenum.\n*   Nutritional repletion and replenishment of this fat pad will elevate the artery off the duodenum and relieve the obstruction."
        },
        {
            "id": "13",
            "question_type": "mcq",
            "question": "144. Following traumatic peripheral nerve transection, regrowth usually occurs at which of the following rates?",
            "options": [
                "a. 0.1 mm per day",
                "b. 1 mm per day",
                "c. 5 mm per day",
                "d. 1 cm per day",
                "e. None of the above"
            ],
            "answer": "B",
            "explanation": "*   Transection of a peripheral nerve results in hemorrhage and in retraction of the severed nerve ends.\n*   Almost immediately, degeneration of the axon distal to the injury begins.\n*   Degeneration also occurs in the proximal fragment back to the fist node of Ranvier.\n*   Phagocytosis of the degenerated axonal fragments leaves a neurilemmal sheath with empty cylindrical spaces where the axons were.\n*   Several days following the injury, axons from the proximal fragment begin to regrow.\n*   If they make contact with the distal neurilemmal sheath, regrowth occurs at about the rate of 1 mm per day.\n*   However, if associated trauma, fracture, infection, or separation of neurilemmal sheath ends precludes contact between axons, growth is haphazard and a traumatic neuroma is formed.\n*   When neural transection is associated with widespread soft tissue damage and hemorrhage (with increased probability of infection), many surgeons choose to delay reapproximation of the severed nerve end for 3-4 wk."
        },
        {
            "id": "14",
            "question_type": "clinical_scenario",
            "question": "A 28-year-old man is brought to the emergency room for a severe head injury after a fall. Initially lethargic, he becomes comatose and does not move his right side. His left pupil is dilated and responds only sluggishly.\n\n145. The most common initial manifestation of increasing intracranial pressure in the victim of head trauma is",
            "options": [
                "a. Change in level of consciousness",
                "b. Ipsilateral (side of hemorrhage) pupillary dilation",
                "c. Contralateral pupillary dilation",
                "d. Hemiparesis",
                "e. Hypertension"
            ],
            "answer": "A",
            "explanation": "*   Closed head injuries may result in cerebral concussion from depression of the reticular formation of the brainstem.\n*   This type of injury is usually reversible.\n*   Local bleeding and swelling (intracranial or extracranial) produce an increase in the intracranial pressure.\n*   A characteristic symptom pattern occurs initiated by progressive depression of mental status.\n*   Increasing intracranial pressure tends to displace brain tissue away from the source of the pressure; if the pressure is sufficient, herniation of the uncal process through the tentorium cerebri occurs."
        },
        {
            "id": "15",
            "question_type": "mcq",
            "question": "146. Initial emergency reduction of intracranial pressure is most rapidly accomplished by",
            "options": [
                "a. Saline-furosemide (Lasix) infusion",
                "b. Urea infusion",
                "c. Mannitol infusion",
                "d. Intravenous dexamethasone (Decadron)",
                "e. Hyperventilation"
            ],
            "answer": "E",
            "explanation": "*   Emergency measures to reduce intracranial pressure while preparing for localization of the clot or for a craniotomy or both include hyperventilation, dexamethasone (Decadron), and mannitol infusion.\n*   Of these, hyperventilation produces the most rapid decrease in brain swelling."
        },
        {
            "id": "16",
            "question_type": "mcq",
            "question": "147. In the patient described, compression of the affected nerve is produced by",
            "options": [
                "a. Infection within the cavernous sinus",
                "b. Herniation of the uncal process of the temporal lobe",
                "c. Laceration of the corpus callosum by the falx cerebri",
                "d. Occult damage to the superior cervical ganglion",
                "e. Cerebellar hypoxia"
            ],
            "answer": "B",
            "explanation": "*   Pupillary dilation is caused by compression of the ipsilateral oculomotor nerve and its parasympathetic fibers.\n*   If the pressure is not relieved, the contralateral oculomotor nerve will become involved and, ultimately, the brainstem will herniate through the foramen magnum and cause death.\n*   Hypertension and bradycardia are preterminal events."
        },
        {
            "id": "17",
            "question_type": "mcq",
            "question": "148. A 31-year-old man is brought to the emergency room following an automobile accident in which his chest struck the steering wheel. Examination reveals stable vital signs, but the patient exhibits multiple palpable rib fractures and paradoxical movement of the right side of the chest. Chest x-ray shows no evidence of pneumothorax or hemothorax, but a large pulmonary contusion is developing. Proper treatment would consist of which of the following?",
            "options": [
                "a. Tracheostomy, mechanical ventilation, and positive end-expiratory pressure",
                "b. Stabilization of the chest wall with sandbags",
                "c. Stabilization with towel clips",
                "d. Immediate operative stabilization",
                "e. No treatment unless signs of respiratory distress develop"
            ],
            "answer": "A",
            "explanation": "*   Flail chest is diagnosed in the presence of paradoxical respiratory movement in a portion of the chest wall.\n*   At least two fractures in each of three adjacent rib or costal cartilages are required to produce this condition.\n*   Complications of flail chest include segmental pulmonary hypoventilation with subsequent infection and ultimately respiratory failure.\n*   Management of flail chest should be individualized.\n*   If adequate pain control and pulmonary toilet can be provided, patients may be managed without stabilization of the flail.\n*   Often, intercostal nerve blocks and tracheostomy aid in this form of management.\n*   If stabilization is required, external methods such as sandbags or towel clips are no longer used.\n*   Surgical stabilization with wires is used if thoracotomy is to be performed for another indication.\n*   If this is not the case, \"internal\" stabilization is performed by placing the patient on mechanical ventilation with positive end-expiratory pressure.\n*   Tracheostomy is recommended because these patients usually require 10–14 days to stabilize their flail segment and postventilation pulmonary toilet is simplified by tracheostomy.\n*   Indications for mechanical ventilation include significant impedance to ventilation by the flail segment, large pulmonary contusion, an uncooperative patient (e.g., owing to head injury), general anesthesia for another indication, more than five ribs fractured, and the development of respiratory failure."
        },
        {
            "id": "18",
            "question_type": "mcq",
            "question": "149. A 30-year-old man is stabbed in the arm. There is no evidence of vascular injury, but he cannot flex his three radial digits. He has injured the",
            "options": [
                "a. Flexor pollicis longus and flexor digitus medius tendons",
                "b. Radial nerve",
                "c. Median nerve",
                "d. Thenar and digital nerves at the wrist",
                "e. Ulnar nerve"
            ],
            "answer": "C",
            "explanation": "*   The motor components of the median nerve maintain the muscular function of most of the long flexors of the hand as well as the pronators of the forearm and the thenar muscles.\n*   The median nerve is also an extremely important sensory innervator of the hand and is commonly described as the “eye of the hand\" because the palm, the thumb, and the index and middle fingers all receive their sensation via the median nerve."
        },
        {
            "id": "19",
            "question_type": "mcq",
            "question": "150. Following a 2-h fire-fighting episode, a 36-year-old fireman begins complaining of a throbbing headache, nausea, dizziness, and visual disturbances. He is taken to the emergency room where his carboxyhemoglobin (COHb) level is found to be 31%. Appropriate treatment would be to",
            "options": [
                "a. Begin an immediate exchange transfusion",
                "b. Transfer the patient to a hyperbaric oxygen chamber",
                "c. Begin bicarbonate infusion and give 250 mg acetazolamide (Diamox) intravenously",
                "d. Administer 100% oxygen by mask",
                "e. Perform flexible bronchoscopy with further therapy determined by findings"
            ],
            "answer": "D",
            "explanation": "*   Carbon monoxide (CO) is the leading cause of toxin-related death in the United States.\n*   It is produced by the incomplete combustion of fossil fuels and is emitted by virtually all gas-powered engines and appliances that burn fossil fuel, e.g., home furnaces, water heaters, stoves, pool heaters, kerosene heaters, and charcoal fires.\n*   Tobacco smoke—particularly smoke released from the tip of the cigarette, which has 2.5 times more CO than inhaled smoke—produces a significant amount of the gas; nonsmokers working in closed quarters with smokers may have carboxyhemoglobin (COHb) levels as high as 15%, easily enough to cause headache and some impairment of judgment.\n*   Fire fighters are at particularly high risk for CO intoxication.\n*   The pathophysiology of CO poisoning is unclear.\n*   It is known to cause an adverse shift in the oxygen-hemoglobin dissociation curve, to cause direct cardiovascular depression, and to inhibit cytochrome A3. Tissue hypoxia is the result.\n*   Treatment is directed toward increasing the partial pressures of O2 to which the transalveolar hemoglobin is exposed.\n*   In most cases, administering 100% oxygen through a tightly fitted face mask will result in a serum elimination half-life of COHb of 80 min (compared with 520 min when one breathes room air).\n*   In severe cases, where coma, seizures, or respiratory failure are present, the partial pressure of O2 is increased by administering it in a hyperbaric chamber with an atmospheric pressure of 2.8.\n*   In this situation the serum elimination half-life is reduced to 23 min.\n*   In any case, the oxygen therapy should continue until the COHb levels reach 10%."
        },
        {
            "id": "20",
            "question_type": "mcq",
            "question": "151. An elderly pedestrian collides with a bicycle-riding pizza delivery man and suffers a unilateral fracture of his pelvis through the obturator foramen. You would manage this injury by",
            "options": [
                "a. External pelvic fixation",
                "b. Angiographic visualization of the obturator artery with surgical exploration if the artery is injured or constricted",
                "c. Direct surgical approach with internal fixation of the ischial ramus",
                "d. Short-term bed rest with gradual ambulation as pain allows after 3 days",
                "e. Hip spica"
            ],
            "answer": "D",
            "explanation": "*   Most pelvic fractures are the result of automobile-pedestrian accidents and these fractures are a frequent cause of death.\n*   The pelvis is extremely vascular with a diffuse blood supply that makes hemorrhage common and surgical control of bleeding difficult.\n*   This patient has a type II fracture (single break in pelvic ring) through a non-weight-bearing portion of the pelvis.\n*   These fractures are best treated by bed rest until hemodynamic stability is assured and thereafter by gentle ambulation as pain permits.\n*   The clinician must watch carefully for associated injuries to bladder, urethra, and colon and be alert to the many other possible concurrent injuries to an elderly patient who has suffered a collision, even a low-velocity attack from a pizza man."
        },
        {
            "id": "21",
            "question_type": "mcq",
            "question": "152. Regarding high-voltage electrical burns to an extremity",
            "options": [
                "a. Injuries are generally more superficial than those of thermal burns",
                "b. Intravenous fluid replacement is based on the percentage of body surface area burned",
                "c. Antibiotic prophylaxis is not required",
                "d. Evaluation for fracture of the other extremities and visceral injury is indicated",
                "e. Cardiac conduction abnormalities are unlikely"
            ],
            "answer": "D",
            "explanation": "*   The treatment of electrical injury should be modified from that of thermal burns because tissue damage is much deeper than is apparent at first inspection.\n*   The heat generated is proportional to the resistance to the flow of current.\n*   Bone, fat, and tendons offer the greatest resistance.\n*   Therefore, the tissue deep within the center of an extremity may be injured while more superficial tissues are spared.\n*   For this reason, the quantification of fluid requirements cannot be based on the percentage of body surface area involved, as in the Parkland, Brooke, or Baxter formulas, which are used to calculate fluid replacement after thermal burns.\n*   Massive fluid replacement is usually essential.\n*   A brisk urine output is desirable because of the likelihood of myonecrosis with consequent myoglobinuria and renal damage.\n*   As with deep thermal burns, debridement, skin grafting, and amputation of extremities may be required following electrical injury.\n*   However, fasciotomy is more frequently required than escharotomy with electrical injury because deep myonecrosis results in increased intracompartmental pressures and compromised limb perfusion.\n*   In addition, distant fractures may result owing to vigorous muscle contraction during the accident or if subsequent falls occur.\n*   Cardiac or respiratory arrest may occur if the pathway of the current includes the heart or brain.\n*   An electrical current can also damage the pulmonary alveoli and capillaries and lead to respiratory infections, a major cause of death in these victims.\n*   Owing to the deep myonecrosis that often accompanies high-voltage injury, prophylaxis for clostridia with high-dose penicillin may be considered.\n*   Mafenide acetate is preferred over other topical antimicrobials because of its deeper penetration of eschar."
        },
        {
            "id": "22",
            "question_type": "mcq",
            "question": "153. Which of the following fractures or dislocations of the extremities induced by blunt trauma is associated with significant vascular injuries?",
            "options": [
                "a. Knee dislocation",
                "b. Closed posterior elbow dislocation",
                "c. Midclavicular fracture",
                "d. Supracondylar femur fracture",
                "e. Tibial plateau fracture"
            ],
            "answer": "A",
            "explanation": "*   In a 4-year retrospective study of 569 at-risk parajoint fractures or dislocations resulting from blunt trauma, there was only a 1.5% incidence of associated vascular injury.\n*   Angiograms and vascular surgical consultations were obtained when vascular compromise was suspected owing to clinical examination or Doppler confirmation of flow abnormalities.\n*   While vascular injuries due to fractures on either side of a joint (e.g., supracondylar femur fracture or tibial plateau fracture) were uncommon, major joint dislocations were more commonly associated with vascular injury.\n*   An exception to this rule is the type III supracondylar humerus fracture, where displacement of bone may injure or entrap the tethered brachial artery.\n*   Clavicular fractures are rarely associated with significant vascular injury.\n*   The highest rate of vascular injury occurs with knee dislocations because of the extreme force required to dislocate the joint.\n*   In open elbow dislocations, the brachial artery is often disrupted by forcible hyperextension of the joint; closed elbow dislocations are rarely associated with vascular injury unless the dislocation is anterior."
        },
        {
            "id": "23",
            "question_type": "mcq",
            "question": "154. A 23-year-old previously healthy man presents to the emergency room after sustaining a single gunshot wound to the left chest. The entrance wound is 3 cm inferior to the nipple and the exit wound is just below the scapula. A chest tube is placed that drains 400 mL of blood and continues to drain 50-75 mL/h during the initial resuscitation. Initial blood pressure of 70/0 mm Hg responds to 2 L crystalloid and is now 100/70 mm Hg. Abdominal examination is unremarkable. Chest x-ray reveals a reexpanded lung and no free air under the diaphragm. The next management step should be",
            "options": [
                "a. Admission and observation",
                "b. Peritoneal lavage",
                "c. Exploratory thoracotomy",
                "d. Exploratory celiotomy",
                "e. Local wound exploration"
            ],
            "answer": "D",
            "explanation": "*   Gunshot wounds to the lower chest are often associated with intraabdominal injuries.\n*   The diaphragm can rise to the level of T4 during maximal expiration.\n*   Therefore, any patient with a gunshot wound below the level of T4 should be subjected to abdominal exploration.\n*   Exploratory thoracotomy is not indicated because most parenchymal lung injuries will stop bleeding and heal spontaneously with the use of tube thoracostomy alone.\n*   Indication for thoracic exploration for bleeding is usually in the range of 100–150 mL/h over several hours.\n*   Peritoneal lavage is not indicated even though the abdominal examination is unremarkable.\n*   As many as 25% of patients with negative physical findings and negative peritoneal lavage will have significant intraabdominal injuries in this setting.\n*   These injuries include damage to the colon, kidney, pancreas, aorta, and diaphragm.\n*   Local wound exploration is not recommended because the determination of diaphragmatic injury with this technique is unreliable."
        },
        {
            "id": "24",
            "question_type": "mcq",
            "question": "155. A patient is brought to the emergency room after a motor vehicle accident. He is unconscious and has a deep scalp laceration and one dilated pupil. His heart rate is 120 beats/min, blood pressure is 80/40 mm Hg, and respiratory rate is 35 breaths/min. Despite rapid administration of 2 L normal saline, the patient's vital signs do not change significantly. The injury likely to explain this patient's hypotension is",
            "options": [
                "a. Epidural hematoma",
                "b. Subdural hematoma",
                "c. Intraparenchymal brain hemorrhage",
                "d. Basilar skull fracture",
                "e. None of the above"
            ],
            "answer": "E",
            "explanation": "*   Loss of consciousness following head trauma should be assumed to be due to intracranial hemorrhage until proved otherwise.\n*   However, a thorough evaluation of the head-injured patient includes assessment for other potentially life-threatening injuries.\n*   Rarely, a patient may have sufficient hemorrhage from a scalp laceration to cause hypotension.\n*   In the patient described, hypotension and tachycardia should not be uncritically attributed to the head injury, since these findings in the setting of blunt trauma are suggestive of serious thoracic, abdominal, or pelvic hemorrhage.\n*   When cardiovascular collapse occurs as a result of rising intracranial pressure, it is generally accompanied by hypertension, bradycardia, and respiratory depression."
        },
        {
            "id": "25",
            "question_type": "mcq",
            "question": "156. When operating to repair civilian colon injuries",
            "options": [
                "a. A colostomy should be performed for colonic injury in the presence of gross fecal contamination",
                "b. The presence of shock on admission or more than two associated intraabdominal injuries is an absolute contraindication to primary colonic repair",
                "c. Distal sigmoidal injuries should not be repaired primarily",
                "d. Right-sided colonic wounds should not be repaired primarily",
                "e. Administration of intravenous antibiotics with aerobic and anaerobic coverage has not been shown to decrease the incidence of wound infections after repair of colonic injuries"
            ],
            "answer": "B",
            "explanation": "*   Because of the colon's poor blood supply and its fecal content, colon injuries are more difficult to manage than small-bowel injuries.\n*   Recently the necessity of mandatory colostomy for civilian colon injuries has been questioned.\n*   About 85% of civilian colon injuries are small wounds from low- or medium-velocity gunshots or stab wounds, which are less likely to produce gross fecal spillage.\n*   These injuries can be repaired primarily in the absence of gross contamination, regardless of the right- or left-sided location of injury.\n*   Shock on admission and multiple associated injuries are not universally viewed as absolute contraindications to primary repair in such cases.\n*   Gross contamination or large amounts of hard intraluminal feces remain generally accepted contraindications to primary repair.\n*   Alternatives include end colostomy with mucous fistula or Hartmann's pouch, exteriorization of a primary repair, and protection of a primary repair in the distal colon by formation of a proximal colostomy.\n*   In all cases in which traumatic colon injury is suspected, the early administration of broad-spectrum intravenous antibiotics seems to reduce the incidence of postoperative infectious complications."
        },
        {
            "id": "26",
            "question_type": "interpretation",
            "question": "157. A 34-year-old prostitute with a history of long-term intravenous drug use is admitted with a 48-h history of pain in her left arm. Physical examination is remarkable for crepitus surrounding needle track marks in the antecubital space with a serous exudate. The plain x-ray of the arm is shown below. Which of the following organisms is most likely to be responsible for this condition?",
            "options": [
                "a. Anaerobic streptococcus",
                "b. Staphylococcus aureus",
                "c. Pseudomonas aeruginosa",
                "d. Clostridium perfringens",
                "e. Escherichia coli"
            ],
            "answer": "D",
            "explanation": "*   Because they are so often malnourished and at high risk for other conditions that alter their immunocompetence, drug addicts have an extraordinary susceptibility to infections of the type that can quickly progress to threaten life and limb.\n*   Among the most virulent are those that give rise to anaerobic cellulitis.\n*   Terms sometimes used for these infections are gas abscess, gangrenous cellulitis, localized gas gangrene, and epifascial gangrene.\n*   Suppuration and extensive gas formation are common and usually localized, unlike the infections associated with myonecrosis.\n*   These lesions may be clostridial or non-clostridial.\n*   *Clostridium perfringens* is the most common culprit, but anaerobic cellulitis and gas formation have been associated with a variety of obligate anaerobes including *Bacteroides* species, *Peptostreptococcus*, and *Peptococcus*, and the gram-negative enteric bacilli (*E. coli*, *Klebsiella*), staphylococci, and streptococci.\n*   *Pseudomonas aeruginosa* is not implicated in these aggressive infections.\n*   Since the progressive injury results from liberation of bacterial exotoxins, antitoxin administration at this stage is futile.\n*   Treatment is determined by immediate inspection of a Gram stain of the thin, dark, malodorous wound drainage or a needle aspirate of the crepitant area: if large, “boxcar-shaped” gram-positive bacilli are present, it is a clostridial infection and high doses of parenteral penicillin G (20 million U/day) are indicated; if a polymicrobial Gram stain is seen, clindamycin-aminoglycoside should be added until specific sensitivities are known.\n*   Aggressive debridement is always indicated."
        },
        {
            "id": "27",
            "question_type": "mcq",
            "question": "158. Regarding myocardial contusion from blunt chest trauma, which of the following statements is correct?",
            "options": [
                "a. Elevated cardiac isoenzyme levels sensitively identify patients at risk for life-threatening arrhythmias",
                "b. The majority of patients have abnormalities on the initial ECG post injury",
                "c. First-pass radionuclide angiography (RNA) and echocardiography are considered the \"gold standard\" for diagnosis",
                "d. RNA and echocardiography are good predictors of subsequent cardiac complications such as arrhythmias and pump failure",
                "e. All patients diagnosed with myocardial contusion should be monitored in an intensive care unit setting for 72 h"
            ],
            "answer": "C",
            "explanation": "*   The spectrum of blunt cardiac injuries includes myocardial contusion, rupture, and internal (chamber and septal) disruptions such as traumatic septal defects, papillary muscle tears, and valvular tears.\n*   Myocardial contusions are by far the most common of these injuries.\n*   They usually occur in persons who sustain a direct blow to the sternum, as seen in a driver whose sternum is forcibly compressed by the steering column in a deceleration injury.\n*   Over 50% of patients with myocardial contusion demonstrate external signs of thoracic trauma, including sternal tenderness, abrasions, ecchymosis, palpable crepitus, rib fractures, or flail segments.\n*   Overall, fewer than 10% of patients have conduction abnormalities, dysrhythmias, or ischemic patterns on initial ECG.\n*   Elevated cardiac isoenzyme levels are specific for myocardial injury, but they lack clinical significance in patients without ECG abnormalities or hemodynamic instability.\n*   First-pass radionuclide angiography (RNA) and echocardiography provide sensitive assessment of ventricular wall motion and ejection fraction after blunt chest trauma and are currently viewed as the “gold standard\" for the diagnosis of myocardial contusion.\n*   But while RNA and echocardiography sensitively detect small abnormalities in myocardial function, they are poor predictors of the significant cardiac complications of pump failure and arrhythmia.\n*   Traditionally, management of patients with myocardial contusion has included continuous ECG monitoring in an intensive care unit for 48–72 h, even in hemodynamically stable patients without other injuries.\n*   Because of the large number of patients with blunt chest trauma from automobile accidents, however, this policy has been scrutinized.\n*   Virtually all patients who develop cardiac complications display ECG abnormalities on arrival in the emergency room or within the first 24 h.\n*   Since an abnormal ECG is a good predictor of subsequent complications, stable patients with possible myocardial contusions but with a normal ECG tracing may be placed on telemetry for 24 h, rather than monitored in an ICU."
        },
        {
            "id": "28",
            "question_type": "mcq",
            "question": "159. Protein metabolism after trauma is characterized by",
            "options": [
                "a. Decreased liver gluconeogenesis",
                "b. Inhibition of skeletal muscle breakdown by interleukin 1 and tumor necrosis factor (TNF, cachectin)",
                "c. Decreased urinary nitrogen loss",
                "d. Hepatic synthesis of acute-phase reactants",
                "e. Decreased glutamine consumption by fibroblasts, lymphocytes, and intestinal epithelial cells"
            ],
            "answer": "D",
            "explanation": "*   Injury and sepsis result in accelerated protein breakdown with increased urinary nitrogen loss and increased peripheral release of amino acids.\n*   The negative nitrogen balance represents the net result of breakdown and synthesis (with breakdown increased and synthesis increased or diminished).\n*   Amino acids such as alanine are released by muscle and transported to the liver for incorporation into acute-phase proteins including fibrinogen, complement, haptoglobin, and ferritin.\n*   The amino acids also undergo gluconeogenesis to glucose, which is utilized primarily by the brain and other glycolytic tissues such as peripheral nerves, erythrocytes, and bone marrow.\n*   Other tissues receive energy from fat in the form of fatty acids or ketone bodies during starvation following major trauma; this helps to conserve body protein.\n*   Glutamine is the most abundant amino acid in the blood, and its levels in muscle and blood decrease following injury and sepsis as it is consumed rapidly by replicating fibroblasts, lymphocytes, and intestinal epithelial cells.\n*   The use of glutamine may decrease protein catabolism in the intestine and may help prevent atrophy of the gastrointestinal tract in starved and parenterally nourished patients.\n*   Along with the counterregulatory hormones (glucagon, epinephrine, cortisol), interleukin 1 appears to mediate muscle breakdown.\n*   Recent studies have indicated that TNF (also called cachectin because of the role it plays in muscle wasting in septic or oncologic patients) also may be a principal catabolic cytokine in the traumatized patient.\n*   This protein is secreted by macrophages and further affects metabolism by inducing secretion of interleukin 1 and inhibiting synthesis and activity of lipogenic enzymes."
        },
        {
            "id": "29",
            "question_type": "mcq",
            "question": "160. A 36-year-old man sustains a gunshot wound to the left buttock. He is hemodynamically stable. There is no exit wound, and an x-ray of the abdomen shows the bullet to be located in the right lower quadrant. Correct management of a suspected rectal injury would include",
            "options": [
                "a. Barium studies of the colon and rectum",
                "b. Barium studies of the bullet track",
                "c. Endoscopy of the bullet track",
                "d. Angiography",
                "e. Sigmoidoscopy in the emergency room"
            ],
            "answer": "E",
            "explanation": "*   Penetrating injury to the intraperitoneal or extraperitoneal rectum should be diagnosed by immediate sigmoidoscopy.\n*   Contrast studies of the rectum, when sigmoidoscopy is inconclusive, should use a water-soluble radiopaque medium such as Gastrografin.\n*   The use of barium is contraindicated because its spillage in the peritoneal cavity mixed with feces would increase the likelihood of subsequent intraabdominal abscesses.\n*   Instrumentation of the bullet track is also contraindicated because of the risk of injury to adjacent structures (e.g., bladder, ureters, iliac vessels).\n*   Angiography is not a sensitive method for demonstrating injury of the intestinal wall."
        },
        {
            "id": "30",
            "question_type": "mcq",
            "question": "161. Correct statements regarding blunt trauma to the liver include which of the following?",
            "options": [
                "a. Hepatic artery ligation for control of bleeding is associated with decreased morbidity and mortality",
                "b. The incidence of intraabdominal infections is significantly lower in patients with abdominal drains",
                "c. Intracaval shunting has dramatically improved survival among patients with hepatic vein injuries",
                "d. Nonanatomic hepatic debridement, with removal of the injured fragments only, is preferable to resection along anatomic planes",
                "e. Major hepatic lacerations that are sutured closed will result in intrahepatic hematomas, hemobilia, and bile fistulas"
            ],
            "answer": "D",
            "explanation": "*   The overwhelming majority of patients explored for blunt trauma to the liver sustain their injuries in motor vehicle accidents.\n*   In a large consecutive series of 323 patients with blunt hepatic trauma who were explored for the finding of hemoperitoneum on peritoneal lavage, the mortality was 31%.\n*   Forty-two percent of the deaths, due primarily to liver injury, occurred intraoperatively during the initial operation following admission.\n*   All operations were performed at a regional trauma center by staff trauma surgeons.\n*   Their findings included the following observations:\n    *   (1) intraoperative deaths were due to uncontrolled hemorrhage;\n    *   (2) patients with major hepatic injuries who survived operation but nevertheless died appeared to succumb either to sepsis or to associated injuries, usually involving the head or chest;\n    *   (3) hepatic artery ligation for control of bleeding yielded dismal results of the 3 surviving patients who underwent hepatic artery ligation (an additional 11 died), 2 required reoperation for continued bleeding;\n    *   (4) the use of drains (passive and active) was associated with a significantly greater incidence of intraabdominal infectious complications;\n    *   (5) intracaval shunting was used in 7 severely injured patients without a survivor;\n    *   (6) while minor hepatic injuries required little or no treatment, major lacerations could usually be controlled with simple absorbable sutures placed 2–3 cm from the fracture edge, without occurrence of subsequent intrahepatic hematoma, hemobilia, or bile fistulae;\n    *   (7) hepatic fragmentation may be treated by nonanatomic debridement, with suture ligation of individual bleeding points—of nine attempts at formal anatomic resection in stable patients, all ended in uncontrollable hemorrhage and death."
        },
        {
            "id": "31",
            "question_type": "mcq",
            "question": "162. If injury to a major artery in an extremity is suspected, surgical exploration should be carried out regardless of the presence of palpable pulses distal to the injury. The rationale is that the presence of palpable distal pulses does not reliably exclude",
            "options": [
                "a. Significant arterial injury",
                "b. Significant injury to adjacent motor nerve trunks",
                "c. Significant injury to adjacent long bones",
                "d. Significant injury to adjacent veins",
                "e. Subsequent development of a compartment syndrome and the need for fasciotomy"
            ],
            "answer": "A",
            "explanation": "*   The presence of ischemic changes following vascular trauma is an indication for emergency exploration and repair.\n*   Nonsurgical management of arterial trauma when distal pulses are palpable may lead to delayed sequelae of embolization, occlusion, secondary hemorrhage, false aneurysm, and traumatic arteriovenous fistula.\n*   The presence of palpable pulses does not reliably exclude significant arterial injury.\n*   Injuries that may be missed if exploration is not performed include lacerations and partial transections containing hematomas, intramural or intraluminal thromboses, and intimal disruptions or tears.\n*   Injury to motor nerves would be apparent on neurologic examination.\n*   Injury to bone would be diagnosed by x-ray.\n*   Adjacent venous injury, in the absence of an expanding hematoma, would not by itself mandate exploration because there are numerous collateral venous channels in the extremities.\n*   Prophylactic fasciotomy is not routinely performed for all arterial injuries but is indicated in the presence of an ischemic period exceeding 4-6 h, combined arterial and major venous injury, prolonged periods of hypotension, massive associated soft tissue trauma, and massive edema."
        },
        {
            "id": "32",
            "question_type": "mcq",
            "question": "163. The response to shock includes which of the following metabolic effects?",
            "options": [
                "a. Increase in sodium and water excretion",
                "b. Increase in renal perfusion",
                "c. Decrease in cortisol levels",
                "d. Hyperkalemia",
                "e. Hypoglycemia"
            ],
            "answer": "D",
            "explanation": "*   The biochemical changes associated with shock result from tissue hypoperfusion, endocrine response to stress, and specific organ system failure.\n*   During shock, the sympathetic nervous system and adrenal medulla are stimulated to release catecholamines.\n*   Renin, angiotensin, antidiuretic hormone, adrenocorticotropin, and cortisol levels increase.\n*   Resultant changes include sodium and water retention and an increase in potassium excretion, protein catabolism, and gluconeogenesis.\n*   Potassium levels rise as a result of increased tissue release, anaerobic metabolism, and decreased renal perfusion.\n*   If renal function is maintained, potassium excretion is high and normal plasma potassium levels are restored."
        },
        {
            "id": "33",
            "question_type": "mcq",
            "question": "164. Appropriate treatment for an acute stable hematoma of the pinna of the ear includes which of the following measures?",
            "options": [
                "a. Ice packs and prophylactic antibiotics",
                "b. Excision of the hematoma",
                "c. Needle aspiration",
                "d. Incision, drainage, and pressure bandage",
                "e. Observation alone"
            ],
            "answer": "D",
            "explanation": "*   A subperichondrial hematoma in the pinna of the ear may lead to avascular necrosis of the cartilage with shriveling of the pinna and fibrosis and calcification of the hematoma.\n*   The result is the deformity known as “cauliflower ear.\"\n*   Appropriate treatment consists of evacuation of the hematoma by incision and tight packing of the skin and perichondrium onto the cartilage with a pressure dressing.\n*   Needle aspiration does not effect adequate drainage.\n*   Ice packs may be helpful early, but are not sufficient to prevent the deformity; antibiotics are not indicated for this lesion.\n*   Since the hematoma is subperichondrial, excision of the hematoma would remove the perichondrium and lead to cartilage deformities."
        },
        {
            "id": "34",
            "question_type": "mcq",
            "question": "165. Animal and clinical studies have shown that administration of lactated Ringer's solution to patients with hypovolemic shock may",
            "options": [
                "a. Increase serum lactate concentration",
                "b. Impair liver function",
                "c. Improve hemodynamics by alleviating the deficit in the interstitial fluid compartment",
                "d. Increase metabolic acidosis",
                "e. Increase the need for blood transfusion"
            ],
            "answer": "C",
            "explanation": "*   Infusion of lactated Ringer's solution is an effective immediate step, both clinically and experimentally, in managing hypovolemic shock.\n*   Use of this balanced salt solution helps correct the fluid deficit (in the extracellular, extravascular compartment) resulting from hypovolemic shock.\n*   This procedure may decrease requirements for whole blood in patients with hemorrhagic shock.\n*   If blood loss has been minimal and is controlled, whole blood transfusion may be avoided entirely.\n*   The theoretical objection to infusion of lactated Ringer's solution is that it will increase lactate levels and compound the problem of lactic acidosis.\n*   This has not been borne out in animal or clinical studies.\n*   Along with the hemodynamic improvement that follows volume restitution, liver function improves, lactate metabolism is improved, excess lactate levels drop, and metabolic acidosis improves."
        },
        {
            "id": "35",
            "question_type": "clinical_scenario",
            "question": "An 18-year-old high school football player is kicked in the left flank. Three hours later he develops hematuria. His vital signs are stable.\n\n166. The diagnostic tests performed reveal extravasation of contrast into the renal parenchyma. Treatment should consist of",
            "options": [
                "a. Resumption of normal daily activity excluding sports",
                "b. Exploration and suture of the laceration",
                "c. Exploration and wedge resection of the left kidney",
                "d. Nephrostomy",
                "e. Antibiotics and serial monitoring of blood count and vital signs"
            ],
            "answer": "E",
            "explanation": "*   In stable patients with suspected genitourinary tract injury, the first urologic study other than urinalysis should be the intravenous urogram.\n*   The technique of high-dose drip infusion is desirable because the high concentration of contrast achieved greatly facilitates interpretation in an unprepared patient.\n*   Intravenous pyelography should be performed before retrograde cystography to avoid obscuring visualization of the lower ureteral tract.\n*   The study also may preclude the need for retrograde urethrography in cases where, unlike the case presented, there is a suspicion of urethral injury.\n*   Renal arteriography is not indicated routinely but should be performed to rule out renal pedicle injury when no kidney function is demonstrated by drip infusion urography.\n*   Peritoneal lavage is not useful in the diagnosis of genitourinary injuries because the structures are retroperitoneal.\n*   Seventy to eighty percent of patients with blunt renal trauma are successfully treated nonsurgically.\n*   Bed rest may reduce the likelihood of secondary hemorrhage; antibiotics may reduce the chance of infection's developing in a perirenal hematoma.\n*   Failure of conservative treatment is indicated by rising fever, increasing leukocytosis, evidence of secondary hemorrhage, and persistent or increasing pain and tenderness in the region of the kidney."
        },
        {
            "id": "36",
            "question_type": "mcq",
            "question": "167. Initial diagnostic tests in the emergency room should include which of the following?",
            "options": [
                "a. Retrograde urethrography",
                "b. Retrograde cystography",
                "c. Arteriography",
                "d. Intravenous pyelogram",
                "e. Diagnostic peritoneal lavage"
            ],
            "answer": "D",
            "explanation": "*   In stable patients with suspected genitourinary tract injury, the first urologic study other than urinalysis should be the intravenous urogram.\n*   The technique of high-dose drip infusion is desirable because the high concentration of contrast achieved greatly facilitates interpretation in an unprepared patient.\n*   Intravenous pyelography should be performed before retrograde cystography to avoid obscuring visualization of the lower ureteral tract.\n*   The study also may preclude the need for retrograde urethrography in cases where, unlike the case presented, there is a suspicion of urethral injury.\n*   Renal arteriography is not indicated routinely but should be performed to rule out renal pedicle injury when no kidney function is demonstrated by drip infusion urography.\n*   Peritoneal lavage is not useful in the diagnosis of genitourinary injuries because the structures are retroperitoneal.\n*   Seventy to eighty percent of patients with blunt renal trauma are successfully treated nonsurgically.\n*   Bed rest may reduce the likelihood of secondary hemorrhage; antibiotics may reduce the chance of infection's developing in a perirenal hematoma.\n*   Failure of conservative treatment is indicated by rising fever, increasing leukocytosis, evidence of secondary hemorrhage, and persistent or increasing pain and tenderness in the region of the kidney."
        },
        {
            "id": "37",
            "question_type": "mcq",
            "question": "168. True statements concerning penetrating pancreatic trauma include",
            "options": [
                "a. Most injuries do not involve adjacent organs",
                "b. Management of a ductal injury to the left of the mesenteric vessels is Roux-en-Y pancreaticojejunostomy",
                "c. Management of a ductal injury in the head of the pancreas is pancreaticoduodenectomy",
                "d. Small peripancreatic hematomas need not be explored to search for pancreatic injury",
                "e. The major cause of death is exsanguination from associated vascular injuries"
            ],
            "answer": "E",
            "explanation": "*   The majority of penetrating pancreatic injuries can be managed with simple drainage.\n*   Injury to the major pancreatic duct to the left of the mesenteric vessels is effectively treated with a distal pancreatectomy.\n*   The high morbidity and mortality of a pancreaticoduodenectomy for trauma limit its use to extensive blunt injuries to both pancreatic head and duodenum.\n*   For ductal injury in the region of the head of the pancreas, a Roux-en-Y limb of jejunum should be brought up and used to drain the transected duct.\n*   The proximity of the pancreas to many other major structures makes combined injuries frequent (90%).\n*   Complications of pancreatic injury include fistula, pseudocyst, and abscess, but the cause of death in patients with pancreatic injury is most frequently exsanguination from associated injury to major vascular structures such as the splenic vessels, mesenteric vessels, aorta, or inferior vena cava.\n*   Finally, however small, all peripancreatic hematomas should be explored to search for pancreatic injury.\n*   Simple drainage is usually adequate treatment in such cases, but failure to recognize a pancreatic injury can have catastrophic sequelae."
        },
        {
            "id": "38",
            "question_type": "mcq",
            "question": "169. Rapid fluid resuscitation of the hypovolemic patient after abdominal trauma is significantly enhanced by which of the following?",
            "options": [
                "a. Placement of long 18-gauge subclavian vein catheters",
                "b. Placement of percutaneous femoral vein catheters",
                "c. Bilateral saphenous vein cutdowns",
                "d. Placement of short, large-bore percutaneous peripheral intravenous catheters",
                "e. Infusion of cold whole blood"
            ],
            "answer": "D",
            "explanation": "*   Rapid fluid administration is often the key to successful trauma resuscitation.\n*   Some of the important factors affecting the rate of fluid resuscitation include the diameter of the intravenous tubing, the size and length of the venous cannulae, the fluid viscosity, and the site of administration.\n*   According to Poiseuille's law, flow is proportional to the fourth power of the radius of a catheter and inversely proportional to its length.\n*   Therefore, the shorter a catheter and the larger its diameter, the faster one can infuse a solution through it.\n*   Central venous placement alone does not assure rapid flow.\n*   Importantly, the diameter of the intravenous tubing employed may be the rate-determining factor in fluid delivery: blood-infusion tubing allows twice the flow of standard intravenous tubing and should be used when rapid fluid resuscitation is needed.\n*   Any patient who is suspected of having a major abdominal injury should immediately have at least two short, large-bore (16-gauge or larger) intravenous cannulae placed in peripheral veins.\n*   Longer, smaller catheters, such as standard 18-gauge central venous catheters, may take more time to place and will have lower flow rates.\n*   Once fluid resuscitation is under way, one may elect to place an 8- or 9-French pulmonary artery catheter-introducer via a central venous approach for further volume administration, as well as for measurement of central venous pressure or for Swan-Ganz catheter insertion.\n*   Lower-extremity venous cannulae, placed by saphenous vein cutdown or percutaneously into the femoral veins, are no longer advised as primary access for patients with abdominal trauma, since possible disruption of iliac veins or the inferior vena cava will render volume infusion ineffective.\n*   Studies have demonstrated that the flow rate of cold whole blood is roughly two-thirds that of whole blood at room temperature.\n*   Diluting and warming the blood by \"piggybacking\" it into infusion lines that are delivering crystalloid will decrease the blood's viscosity, enhance flow, and minimize hypothermia."
        },
        {
            "id": "39",
            "question_type": "mcq",
            "question": "170. Use of the pneumatic anti-shock garment (PASG)",
            "options": [
                "a. Elevates blood pressure by an \"autotransfusion\" effect, with augmentation of venous return and cardiac output",
                "b. Is not recommended for control of persistent bleeding in the setting of severe pelvic fracture",
                "c. Increases peripheral vascular resistance",
                "d. Expedites assessment of lower body injuries in the trauma patient",
                "e. Should be terminated by means of prompt deflation as soon as the trauma patient reaches the emergency department"
            ],
            "answer": "C",
            "explanation": "*   The pneumatic antishock garment (PASG) is composed of inflatable overalls with three compartments, two for the legs and one for the abdomen.\n*   It has now been convincingly demonstrated that the PASG elevates blood pressure by increasing peripheral vascular resistance rather than by an “autotransfusion\" effect on venous return and increased cardiac output.\n*   The PASG is beneficial for controlling bleeding from pelvic fractures by reduction of pelvic volume and immobilization to restrict fracture movement.\n*   The suit pressure must be released very slowly because rapid deflation can lead to sudden, irreversible hypotension.\n*   This is probably due to a sudden decrease in peripheral vascular resistance and to the effects of vasodilation and wash-out of accumulated metabolites of capillary beds under the suit.\n*   Upon reperfusion of the lower body, a systemic metabolic acidemia with hyperkalemia may result and must be closely monitored.\n*   For these reasons satisfactory intravenous volume must be attained prior to decompression of the PASG, a delay that may prevent adequate early evaluation of concealed injuries to the lower body."
        },
        {
            "id": "40",
            "question_type": "mcq",
            "question": "171. Which of the following situations would be an indication for performance of a thoracotomy in the emergency room?",
            "options": [
                "a. Massive hemothorax following blunt trauma to the chest",
                "b. Blunt trauma to multiple organ systems with obtainable vital signs in the field but none on arrival in the emergency room",
                "c. Rapidly deteriorating patient with cardiac tamponade from penetrating thoracic trauma",
                "d. Penetrating thoracic trauma and no signs of life in the field",
                "e. Penetrating abdominal trauma and no signs of life in the field"
            ],
            "answer": "C",
            "explanation": "*   Although indications for thoracotomy in the emergency room are controversial, the procedure appears to be most beneficial when it is employed to:\n    *   (1) release cardiac tamponade in patients with penetrating thoracic trauma who are deteriorating too rapidly for a subxiphoid pericardial window to be created;\n    *   (2) allow cross-clamping of the descending aorta in patients with intraabdominal bleeding for whom other measures are not effective in maintaining blood pressure; and\n    *   (3) allow effective internal cardiac massage in patients who arrive in the emergency room with faint or absent pulses and distant heart sounds, and for whom other resuscitative efforts are unsuccessful.\n*   By contrast, existing evidence suggests that patients who are unsalvageable and do not benefit from emergency room thoracotomy include:\n    *   (1) those with no vital signs (pulse, pupillary reaction, spontaneous respiration) in the field and\n    *   (2) those with blunt trauma to multiple organ systems and absent vital signs upon arrival in the emergency room."
        },
        {
            "id": "41",
            "question_type": "mcq",
            "question": "172. A 22-year-old man sustains a gunshot wound to the abdomen. At exploration, an apparently solitary distal small-bowel injury is treated with resection and primary anastomosis. On postoperative day 7, small-bowel fluid drains through the operative incision. The fascia remains intact. The fistula output is 300 mL/day and there is no evidence of intraabdominal sepsis. Correct treatment includes",
            "options": [
                "a. Early reoperation to close the fistula tract",
                "b. Broad-spectrum antibiotics",
                "c. Total parenteral nutrition",
                "d. Somatostatin to lower fistula output",
                "e. Loperamide to inhibit gut motility"
            ],
            "answer": "C",
            "explanation": "*   Most enterocutaneous fistulas result from trauma sustained during surgical procedures.\n*   Irradiated, obstructed, and inflamed intestine is prone to fistulization.\n*   Complications of fistulas include fluid and electrolyte depletion, skin necrosis, and malnutrition.\n*   Fistulas are classified according to their location and the volume of output, because these factors influence prognosis and treatment.\n*   When the patient is stable, a barium swallow is obtained to determine (1) the location of the fistula, (2) the relation of the fistula to other hollow intraabdominal organs, and (3) whether there is distal obstruction.\n*   Proximal small-bowel fistulas tend to produce a high output of intestinal fluid and are less likely to close with conservative management than are distal, low-output fistulas.\n*   Small-bowel fistulas that communicate with other organs, particularly the ureter and bladder, may need aggressive surgical repair because of the risk of associated infections.\n*   The presence of obstruction distal to the fistula (e.g., an anastomotic stricture) can be diagnosed by barium contrast study and mandates correction of the obstruction.\n*   When these poor prognostic factors for stabilization and spontaneous closure are observed, early surgical intervention must be undertaken.\n*   The patient in the question, however, appears to have a low-output, distal enterocutaneous fistula.\n*   Control of the fistulous drainage should be provided by percutaneous intubation of the tract with a soft catheter.\n*   This is usually accomplished under fluoroscopic guidance.\n*   Antispasmodic drugs have not been proved effective; somatostatin has been used with mixed success in the setting of high-output (greater than 500 mL/day) fistulas.\n*   There is no indication for antibiotics in the absence of sepsis.\n*   Total parenteral nutrition (TPN) is given to maintain or restore the patient's nutritional balance while minimizing the quantity of dietary fluids and endogenous secretions in the gastrointestinal tract.\n*   A period of 4–6 wk of TPN therapy is warranted to allow for spontaneous closure of a low-output, distal fistula.\n*   Should conservative management fail, surgical closure of the fistula is performed."
        },
        {
            "id": "42",
            "question_type": "mcq",
            "question": "173. A 26-year-old man sustains a gunshot wound to the left thigh. Exploration reveals that a 5-cm portion of superficial femoral artery is destroyed. Appropriate management includes",
            "options": [
                "a. Debridement and end-to-end anastomosis",
                "b. Debridement and repair with an interposition prosthetic graft",
                "c. Debridement and repair with an interposition arterial graft",
                "d. Debridement and repair with an interposition vein graft",
                "e. Ligation and observation"
            ],
            "answer": "D",
            "explanation": "*   Traumatic arterial injuries can be handled with several techniques.\n*   The basic principles of debridement of injured tissue and reestablishment of flow should be observed.\n*   Primary end-to-end anastomosis is preferable if this can be accomplished without tension.\n*   When 5 cm of artery has been destroyed, it is impossible to perform a tension-free primary anastomosis, and a reversed saphenous vein graft is the repair of choice.\n*   Ligation of the artery is to be avoided in order to prevent gangrene and limb loss.\n*   The use of prosthetic material (Gore-Tex) in a potentially infected field is also to be avoided as infection at the suture line often leads to delayed hemorrhage.\n*   Harvesting an arterial graft of similar diameter from elsewhere in the body is hazardous and unnecessary when vein is available."
        },
        {
            "id": "43",
            "question_type": "interpretation",
            "question": "174. The patient illustrated on the chest x-ray film and contrast study on the following page was hospitalized after a car collision in which he suffered blunt trauma to the abdomen. He sustained several left rib fractures, but was hemodynamically stable. True statements about the injury demonstrated in the films include",
            "options": [
                "a. The injury depicted is the most frequent organ injury in the setting of blunt trauma to the abdomen",
                "b. Delayed operative repair is indicated after the patient's rib fractures are allowed to stabilize",
                "c. Surgical treatment of this injury is indicated during this hospitalization",
                "d. Early repair of this injury is preferably accomplished through a left posterolateral thoracotomy",
                "e. If this injury is incidentally discovered during a surgical exploration, it should not be repaired"
            ],
            "answer": "C",
            "explanation": "*   Traumatic injuries to the diaphragm are associated with both blunt and penetrating trauma.\n*   The spleen, kidneys, intestines, and liver are the most frequently injured abdominal organs in blunt trauma; the diaphragm is the least.\n*   Missed injuries lead to problems with herniation and bowel strangulation with sufficient frequency that repair should not be delayed.\n*   All such injuries require repair once the diagnosis is made and the patient has been stabilized.\n*   Most acute defects in the diaphragm can be repaired via an abdominal approach, which allows exploration for coexisting injuries."
        },
        {
            "id": "44",
            "question_type": "msq",
            "question": "175. Diagnostic peritoneal lavage (SELECT 2 INJURIES)",
            "options": [
                "a. Significant intraperitoneal bleeding",
                "b. Injury of a retroperitoneal organ",
                "c. Retroperitoneal (pelvic and visceral) vascular extravasation",
                "d. Minor lacerations of liver and spleen",
                "e. Subcapsular hematomas of liver and spleen",
                "f. Injury of the small intestine",
                "g. Diaphragmatic injury"
            ],
            "answer": [
                "A",
                "D"
            ],
            "explanation": "*   Peritoneal lavage is a diagnostic technique used to identify occult intraperitoneal injury in patients with abdominal trauma.\n*   An abnormal lavage is obtained when the lavage effluent exceeds allowable levels of blood, bile, or amylase; the presence of vegetable matter also constitutes an abnormal result.\n*   Lavage has been used most widely in the triage of hemodynamically stable victims of abdominal trauma who are suspected of having significant injuries but who manifest equivocal physical findings.\n*   Further indications for lavage are the suspicion of abdominal injury in patients with altered sensoria, patients with unexplained blood loss, and patients who require general anesthesia to treat other injuries.\n*   The technique is exquisitely sensitive to intraabdominal bleeding and will detect as little as 20 mL of free blood in the peritoneal cavity.\n*   Because stable retroperitoneal hematomas and minor lacerations of the liver and spleen often shed sufficient blood to produce a positive lavage, some authors have advocated abdominal CT as the preferred method of identifying occult operable injuries of the abdomen.\n*   Also, CT with oral and intravenous contrast can provide accurate images of the injured retroperitoneum and the solid intraabdominal viscera (as lavage cannot).\n*   Neither CT nor lavage has been a reliable indicator of small intestinal and diaphragmatic injuries, and neither has been useful in obtaining hemostasis nonoperatively.\n*   Angiography, however, may be employed to demonstrate visceral or pelvic arterial extravasation and to control hemorrhage by selective embolization."
        },
        {
            "id": "45",
            "question_type": "msq",
            "question": "176. Abdominal computed tomography (SELECT 3 INJURIES)",
            "options": [
                "a. Significant intraperitoneal bleeding",
                "b. Injury of a retroperitoneal organ",
                "c. Retroperitoneal (pelvic and visceral) vascular extravasation",
                "d. Minor lacerations of liver and spleen",
                "e. Subcapsular hematomas of liver and spleen",
                "f. Injury of the small intestine",
                "g. Diaphragmatic injury"
            ],
            "answer": [
                "A",
                "B",
                "E"
            ],
            "explanation": "*   Peritoneal lavage is a diagnostic technique used to identify occult intraperitoneal injury in patients with abdominal trauma.\n*   An abnormal lavage is obtained when the lavage effluent exceeds allowable levels of blood, bile, or amylase; the presence of vegetable matter also constitutes an abnormal result.\n*   Lavage has been used most widely in the triage of hemodynamically stable victims of abdominal trauma who are suspected of having significant injuries but who manifest equivocal physical findings.\n*   Further indications for lavage are the suspicion of abdominal injury in patients with altered sensoria, patients with unexplained blood loss, and patients who require general anesthesia to treat other injuries.\n*   The technique is exquisitely sensitive to intraabdominal bleeding and will detect as little as 20 mL of free blood in the peritoneal cavity.\n*   Because stable retroperitoneal hematomas and minor lacerations of the liver and spleen often shed sufficient blood to produce a positive lavage, some authors have advocated abdominal CT as the preferred method of identifying occult operable injuries of the abdomen.\n*   Also, CT with oral and intravenous contrast can provide accurate images of the injured retroperitoneum and the solid intraabdominal viscera (as lavage cannot).\n*   Neither CT nor lavage has been a reliable indicator of small intestinal and diaphragmatic injuries, and neither has been useful in obtaining hemostasis nonoperatively.\n*   Angiography, however, may be employed to demonstrate visceral or pelvic arterial extravasation and to control hemorrhage by selective embolization."
        },
        {
            "id": "46",
            "question_type": "msq",
            "question": "177. Visceral angiography (SELECT 1 INJURY)",
            "options": [
                "a. Significant intraperitoneal bleeding",
                "b. Injury of a retroperitoneal organ",
                "c. Retroperitoneal (pelvic and visceral) vascular extravasation",
                "d. Minor lacerations of liver and spleen",
                "e. Subcapsular hematomas of liver and spleen",
                "f. Injury of the small intestine",
                "g. Diaphragmatic injury"
            ],
            "answer": [
                "C"
            ],
            "explanation": "*   Peritoneal lavage is a diagnostic technique used to identify occult intraperitoneal injury in patients with abdominal trauma.\n*   An abnormal lavage is obtained when the lavage effluent exceeds allowable levels of blood, bile, or amylase; the presence of vegetable matter also constitutes an abnormal result.\n*   Lavage has been used most widely in the triage of hemodynamically stable victims of abdominal trauma who are suspected of having significant injuries but who manifest equivocal physical findings.\n*   Further indications for lavage are the suspicion of abdominal injury in patients with altered sensoria, patients with unexplained blood loss, and patients who require general anesthesia to treat other injuries.\n*   The technique is exquisitely sensitive to intraabdominal bleeding and will detect as little as 20 mL of free blood in the peritoneal cavity.\n*   Because stable retroperitoneal hematomas and minor lacerations of the liver and spleen often shed sufficient blood to produce a positive lavage, some authors have advocated abdominal CT as the preferred method of identifying occult operable injuries of the abdomen.\n*   Also, CT with oral and intravenous contrast can provide accurate images of the injured retroperitoneum and the solid intraabdominal viscera (as lavage cannot).\n*   Neither CT nor lavage has been a reliable indicator of small intestinal and diaphragmatic injuries, and neither has been useful in obtaining hemostasis nonoperatively.\n*   Angiography, however, may be employed to demonstrate visceral or pelvic arterial extravasation and to control hemorrhage by selective embolization."
        },
        {
            "id": "47",
            "question_type": "msq",
            "question": "178. A motorist decelerates rapidly after striking a stalled vehicle. He is traveling at 55 mi/h at the time of impact. He is wearing a seat belt and his car is equipped with an air bag. (SELECT 3 ORGANS)",
            "options": [
                "a. Diaphragm",
                "b. Liver",
                "c. Spleen",
                "d. Small intestine",
                "e. Large intestine",
                "f. Kidneys",
                "g. Stomach",
                "h. Pancreas",
                "i. Bladder",
                "j. Great vessels (aorta/vena cava)"
            ],
            "answer": [
                "D",
                "E",
                "F"
            ],
            "explanation": "*   Deceleration injuries commonly result from high-speed motor vehicle accidents and falls from considerable heights.\n*   The mechanism of injury is the shearing of pedicled organs from their points of attachment to the retroperitoneum.\n*   Because these pedicles are usually vascular, the injury results in bleeding and ischemia of the affected organ.\n*   Pedicled organs in the abdomen include the intestines (small and large) and the kidneys.\n*   Deceleration injuries to the aorta occur in the mediastinum and are usually fatal."
        },
        {
            "id": "48",
            "question_type": "msq",
            "question": "179. A man is shot with a high-velocity bullet that traverses his mid-abdomen at the level of the umbilicus. (SELECT 3 ORGANS)",
            "options": [
                "a. Diaphragm",
                "b. Liver",
                "c. Spleen",
                "d. Small intestine",
                "e. Large intestine",
                "f. Kidneys",
                "g. Stomach",
                "h. Pancreas",
                "i. Bladder",
                "j. Great vessels (aorta/vena cava)"
            ],
            "answer": [
                "D",
                "E",
                "J"
            ],
            "explanation": "*   The small intestine and its mesentery is by far the most commonly injured abdominal organ in penetrating trauma because of its sheer mass and central location.\n*   A midline bullet at the level of the umbilicus is most likely to strike small intestine, the transverse colon, and perhaps the aorta or vena cava.\n*   The great vessels bifurcate just at the level of the umbilicus.\n*   The diaphragm, stomach, and pancreas would be superior to this injury; the bladder below; and the liver, spleen, and kidneys lateral."
        },
        {
            "id": "49",
            "question_type": "msq",
            "question": "180. An unsuspecting victim is struck forcefully in the upper abdomen by a mugger with a baseball bat. (SELECT 4 ORGANS)",
            "options": [
                "a. Diaphragm",
                "b. Liver",
                "c. Spleen",
                "d. Small intestine",
                "e. Large intestine",
                "f. Kidneys",
                "g. Stomach",
                "h. Pancreas",
                "i. Bladder",
                "j. Great vessels (aorta/vena cava)"
            ],
            "answer": [
                "B",
                "C",
                "F",
                "H"
            ],
            "explanation": "*   The relative incidence of organ injury in blunt trauma is highest for solid organs (spleen, liver, and kidneys).\n*   Although hollow viscera are less likely to be injured by blunt trauma, this rule does not apply when the hollow viscus is full; for example, rupture of a full urinary bladder is frequently described when blunt force is applied to the lower abdomen.\n*   In addition to the spleen, liver, and kidneys, extreme blunt force to the upper abdomen may fracture the pancreas, which is susceptible to injury because of its position overlying the rigid spinal column."
        },
        {
            "id": "50",
            "question_type": "msq",
            "question": "181. Laryngeal obstruction (SELECT 1 INTERVENTION)",
            "options": [
                "a. Endotracheal intubation",
                "b. Cricothyroidotomy",
                "c. Subxiphoid window",
                "d. Tube thoracostomy",
                "e. Occlusive dressing"
            ],
            "answer": [
                "B"
            ],
            "explanation": "*   Airway obstruction denotes partial or complete occlusion of the tracheobronchial tree by foreign bodies, secretions, or crush injuries of the upper respiratory tract.\n*   Patients may present with symptoms ranging from cough and mild dyspnea to stridor and hypoxic cardiac arrest.\n*   An initial effort should be made to digitally clear the airway and to suction visible secretions; in selected, stable patients, fiberoptic endoscopy may be employed to determine the cause of obstruction and to retrieve foreign objects.\n*   Unstable patients whose airways cannot be quickly reestablished by clearing the oropharynx must be intubated.\n*   An endotracheal intubation may be attempted, but cricothyroidotomy is indicated in the presence of proximal obstruction or severe maxillofacial trauma."
        },
        {
            "id": "51",
            "question_type": "msq",
            "question": "182. Open pneumothorax (SELECT 1 INTERVENTION)",
            "options": [
                "a. Endotracheal intubation",
                "b. Cricothyroidotomy",
                "c. Subxiphoid window",
                "d. Tube thoracostomy",
                "e. Occlusive dressing"
            ],
            "answer": [
                "E"
            ],
            "explanation": "*   Open pneumothorax occurs when a traumatic defect in the chest wall permits free communication of the pleural space with atmospheric pressure.\n*   If the defect is larger than two-thirds of the tracheal diameter, respiratory efforts will move air in and out through the defect in the chest wall rather than through the trachea.\n*   The immediate treatment is placement of an occlusive dressing over the defect; subsequent interventions include placement of a thoracostomy tube (preferably through a separate incision), formal closure of the chest wall, and ventilatory assistance if needed."
        },
        {
            "id": "52",
            "question_type": "msq",
            "question": "183. Flail chest (SELECT 1 INTERVENTION)",
            "options": [
                "a. Endotracheal intubation",
                "b. Cricothyroidotomy",
                "c. Subxiphoid window",
                "d. Tube thoracostomy",
                "e. Occlusive dressing"
            ],
            "answer": [
                "A"
            ],
            "explanation": "*   Flail chest describes the paradoxical motion of the chest wall that occurs when consecutive ribs are broken in more than one place, usually following blunt trauma to the thorax.\n*   Respiratory distress may ensue when the noncompliant flail segment interferes with generation of adequate positive and negative intrathoracic pressure needed to move air through the trachea.\n*   In addition, a blow sufficiently violent to cause a flail chest may also contuse the underlying pulmonary parenchyma, which compounds the respiratory distress.\n*   Treatment consists of stabilizing the chest wall.\n*   Although some temporary benefit may be gained by external buttressing of the chest (e.g., with sandbags, or by turning the patient onto the affected side), endotracheal intubation provides rapid and safe control of the airway, as well as stabilization of the chest internally by positive pressure ventilation."
        },
        {
            "id": "53",
            "question_type": "msq",
            "question": "184. Tension pneumothorax (SELECT 1 INTERVENTION)",
            "options": [
                "a. Endotracheal intubation",
                "b. Cricothyroidotomy",
                "c. Subxiphoid window",
                "d. Tube thoracostomy",
                "e. Occlusive dressing"
            ],
            "answer": [
                "D"
            ],
            "explanation": "*   Tension pneumothorax occurs when a laceration of the visceral pulmonary pleura acts as a one-way valve that allows air to enter the pleural space from an underlying parenchymal injury but not to escape.\n*   Increasing intrapleural pressure causes collapse of the ipsilateral lung, compression of the contralateral lung due to mediastinal shift toward the opposite hemithorax, and diminished venous return.\n*   Treatment consists of relieving the pneumothorax.\n*   This is best accomplished by tube thoracostomy."
        },
        {
            "id": "54",
            "question_type": "msq",
            "question": "185. Pericardial tamponade (SELECT 1 INTERVENTION)",
            "options": [
                "a. Endotracheal intubation",
                "b. Cricothyroidotomy",
                "c. Subxiphoid window",
                "d. Tube thoracostomy",
                "e. Occlusive dressing"
            ],
            "answer": [
                "C"
            ],
            "explanation": "*   Blunt or penetrating trauma to the pericardium and heart will result in pericardial tamponade when fluid pressure in the pericardial space exceeds central venous pressure and thus prevents venous return to the heart.\n*   The result is shock, despite adequate volume and myocardial function.\n*   The treatment is pericardial decompression.\n*   A subxiphoid, supradiaphragmatic incision and creation of a pericardial “window,” ideally performed in the operating room, provides a rapid, safe means of confirming the diagnosis of tamponade and of relieving venous obstruction.\n*   If heavy bleeding is encountered on opening the pericardial window, a sternotomy may be performed."
        }
    ]
}
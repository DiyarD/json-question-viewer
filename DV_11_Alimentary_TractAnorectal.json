{
  "chapter_name": "Alimentary Tract-Anorectal",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding anorectal anatomy?",
      "options": [
        "A. The levator ani marks the transition point between the rectum and sigmoid colon.",
        "B. The presacral fascia separates the rectum from the presacral venous plexus and the pelvic nerves.",
        "C. Waldeyer fascia is anterior to Denonvilliers fascia.",
        "D. In men, Denonvilliers fascia separates the rectum from the sacrum.",
        "E. The surgical anal canal is longer in women than in men."
      ],
      "answer": "B",
      "explanation": "- The presacral fascia is synonymous with Waldeyer fascia and separates the rectum from the presacral venous plexus and the pelvic nerves.\n- It is posterior to Denonvilliers fascia.\n- In men, Denonvilliers fascia separates the rectum from the bladder and prostate.\n- In women, Denonvilliers fascia separates the rectum from the vagina.\n- Levator ani marks the transition point between the rectum and anal canal.\n- The surgical anal canal is 2 to 4 cm in length and is longer in men.\n- It spans the area from the anorectal junction to the anal verge.\n- The anal transition zone is just proximal to the dentate line and has features of columnar and squamous epithelium as well as cuboidal epithelium.\n- Cancers above this area are usually adenocarcinomas, whereas those distal to this line are squamous or cloacogenic, approximately 1 to 2 cm in length."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 56-year-old male patient is found to have rectal adenocarcinoma just proximal to the dentate line. Which of the following is true about wide local excision (WLE) of such a lesion?",
      "options": [
        "A. WLE is an option provided the tumor is 4 cm or less.",
        "B. Staging should include careful assessment for inguinal lymphadenopathy.",
        "C. The presence of lymphatic invasion precludes WLE.",
        "D. WLE is reasonable provided the invasion remains within the serosa.",
        "E. WLE is not a recommended option."
      ],
      "answer": "C",
      "explanation": "- The upper and middle rectum drain only into the inferior mesenteric nodes, whereas the lower rectum drains into both the inferior mesenteric nodes and internal iliac nodes.\n- Distal to the dentate line, lymph drains into the inguinal lymph nodes but can also empty into the inferior mesenteric and internal iliac lymph nodes.\n- An important part of the physical examination in a patient with anal cancer is examining the inguinal region for lymphadenopathy.\n- Since the patient's cancer is proximal to the dentate line, it typically would not spread to the inguinal lymph nodes.\n- WLE is an option in a limited number of cases for anorectal adenocarcinoma.\n- Indications for WLE in anorectal adenocarcinoma include size < 3 cm, T1 status (invades only submucosa), less than 30% involvement of bowel wall, proximity of 8 cm from anal verge, mobile and nonfixed lesion, and no lymphatic, neural, or venous invasion on imaging.\n- WLE needs about a 2 mm margin.\n- If WLE is contraindicated, abdominoperineal resection or low anterior resection is appropriate."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "The recommended initial treatment of anal canal melanoma is:",
      "options": [
        "A. Abdominal perineal resection (APR)",
        "B. Wide local excision (WLE)",
        "C. WLE with regional lymph node dissection",
        "D. Radiation therapy",
        "E. Radiation therapy and chemotherapy"
      ],
      "answer": "B",
      "explanation": "- Melanoma of the anal canal is extremely rare, and the overall prognosis is poor.\n- Established management protocols are lacking due to its rarity.\n- Radiation therapy and chemotherapy can be considered as adjuvant therapy depending on melanoma depth and staging.\n- Surgical resection is the initial treatment.\n- A recent meta-analysis showed no stage-specific survival advantage of APR over WLE.\n- WLE is the recommended management.\n- Lymph node dissection has not been shown to improve survival but may incur significant morbidities."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is true regarding epidermoid cancers of the anal canal?",
      "options": [
        "A. They are associated with Epstein-Barr virus.",
        "B. They tend to behave similarly regardless of cell type.",
        "C. Small tumors can generally be excised locally.",
        "D. They are often times asymptomatic.",
        "E. Chemotherapy alone is an appropriate treatment option."
      ],
      "answer": "B",
      "explanation": "- Cancers in the anal canal include squamous, basaloid, cloacogenic, and transitional carcinomas, yet despite the variation in cell type, they tend to behave similarly.\n- They can present with pruritus, bleeding, and/or a palpable mass.\n- They are thought to be associated with human papillomavirus (HPV).\n- The currently accepted standard approach is to treat them using a combination of chemotherapy and radiation therapy, initially espoused by Nigro.\n- The protocol includes 5-flurouracil (5-FU) and mitomycin C as well as pelvic radiation.\n- Anal canal cancers should be distinguished from anal margin tumors (perianal skin around anal verge).\n- Anal margin tumors are generally treated by WLE.\n- Abdominoperineal resection is appropriate for Nigro failures or recurrent cancer."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 30-year-old male presents with redness, pain, and fluctuance in the intergluteal cleft, about 4 cm posterior to the anus. There is considerable hair adjacent to the lesion. Which of the following is the most appropriate management?",
      "options": [
        "A. Incision and drainage in the intergluteal cleft",
        "B. Incision and drainage lateral to the intergluteal cleft",
        "C. En bloc excision of the sinus tract with flap reconstruction",
        "D. Excision with primary closure",
        "E. Unroofing the tract and marsupializing"
      ],
      "answer": "B",
      "explanation": "- Pilonidal disease is theorized to exist because the intergluteal cleft creates a suction that draws hair into the midline pits when sitting, leading to ingrown hairs becoming infected and presenting as an abscess in the sacrococcygeal region.\n- Acute pilonidal disease is best treated with incision and drainage of the abscess lateral to the intergluteal cleft, as opposed to directly in the cleft, because the latter creates constant friction in the wound and heals poorly.\n- The remaining answer choices are used for chronic disease.\n- Although there is not a \"gold standard\" for chronic pilonidal cyst management, the preferred treatment option depends on if the pilonidal cyst is simple or complex.\n- Excision with primary closure off the midline for a simple, noninfected pilonidal cyst is the most appropriate treatment option.\n- Complex pilonidal cysts will require an en bloc excision of the sinus tract with a flap reconstruction.\n- A rhomboid flap is the favored approach."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 35-year-old man with leukemia and severe neutropenia presents with severe anal pain. Physical examination at the bedside demonstrates induration but no obvious mass in the perianal region. Which of the following is the best management?",
      "options": [
        "A. Intravenous (IV) antibiotics only",
        "B. Bedside anoscopy with bedside incision and drainage only if a fluctuant mass is detected",
        "C. Bedside anoscopy with operative incision and drainage only if a fluctuant mass is detected",
        "D. Examination with patient under anesthesia with wide debridement of perianal area",
        "E. Examination with patient under anesthesia with biopsy of indurated areas and incision and drainage even if no pus is detected"
      ],
      "answer": "E",
      "explanation": "- Perianal pain may develop in neutropenic patients, but the diagnosis of a perianal abscess may be difficult due to the lack of inflammatory response to infection.\n- Although broad-spectrum antibiotics may cure some of these patients, an examination with the patient under anesthesia should be performed to rule out an abscess that requires drainage.\n- Even if a discrete abscess is not seen, any areas of induration should be incised and drained.\n- A biopsy specimen should be obtained to exclude a leukemia infiltrate and cultured to aid in the selection of antimicrobial agents.\n- Wide debridement of the perianal area would not be indicated for a perianal abscess."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the blood supply to the rectum?",
      "options": [
        "A. The superior and middle rectal arteries arise from the inferior mesenteric artery.",
        "B. The middle rectal veins drain into the internal iliac veins.",
        "C. The inferior rectal veins drain into the inferior mesenteric vein.",
        "D. The superior rectal veins drain into the inferior vena cava.",
        "E. There is excellent collateralization between the superior and middle rectal arteries."
      ],
      "answer": "B",
      "explanation": "- The superior rectal arteries arise from the inferior mesenteric artery, providing blood to the upper rectum.\n- The middle rectal artery arises from the internal iliac artery, and the inferior rectal artery arises from the pudendal artery (branch of the internal iliac artery), which provide blood to the rest of the rectum and the anal canal.\n- Rich collaterals exist between the rectal arteries such that they are relatively resistant to ischemia.\n- Sudak's point marks the superior rectal and middle rectal junction and is considered a watershed area with poor blood supply.\n- The middle rectal arteries are the least consistent and are absent in as many as three fourths of patients.\n- Venous drainage follows the arterial supply.\n- The superior rectal veins drain into the inferior mesenteric vein and then to the portal vein.\n- The middle and inferior rectal veins drain into branches of the internal iliac veins and into the inferior vena cava."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding hidradenitis suppurativa?",
      "options": [
        "A. It may mimic a complex anal fistula.",
        "B. It is due to an infection of the eccrine sweat glands.",
        "C. Radical excision and skin grafting are typically necessary.",
        "D. It may progress beyond the anal verge into the anal canal.",
        "E. It is not associated with keloid formation."
      ],
      "answer": "A",
      "explanation": "- Hidradenitis suppurativa is a disease of the follicular epithelium, involving areas containing cutaneous apocrine sweat glands.\n- It occurs in the armpits, groin, under the breasts, and between the buttocks.\n- The typical appearance is multiple open comedones with sinus tracts and small abscesses.\n- Scarring can lead to keloid formation.\n- It can mimic complex anal fistula disease but stops at the anal verge because there are no apocrine sweat glands in the anal canal.\n- It can also mimic perianal Crohn disease.\n- Initial treatment includes warm compresses, lifestyle changes (weight loss, wearing loose fitting clothes, cessation of smoking, local hygiene).\n- If initial treatment fails, antibiotics and surgery may be needed to incise and drain acute abscesses and unroof fistulas with debridement of granulation tissue.\n- Radical excision and skin grafting are almost never necessary."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Rectal bleeding due to chronic radiation proctitis that is unresponsive to sucralfate enemas is best managed by:",
      "options": [
        "A. Argon plasma coagulation",
        "B. Proximal diverting colostomy",
        "C. Steroid enemas",
        "D. Formalin",
        "E. Proctectomy"
      ],
      "answer": "A",
      "explanation": "- Sucralfate enemas are currently considered the first line of treatment for chronic radiation proctitis, thought to work by forming a physical barrier around the rectum.\n- Steroid and 5-aminosalicylic acid enemas have not been shown to be effective in the long term for treating radiation proctitis; thus, if sucralfate enemas have failed, steroid enemas are unlikely to help.\n- For patients with recurrent symptoms, two effective therapies have evolved: endoscopic therapy and topical formulas.\n- Argon plasma coagulation is the currently favored endoscopic technique due to its limited depth of penetration, with a 90% success rate for improving bleeding symptoms, though multiple treatments are necessary.\n- The main drawback of argon plasma coagulation is its lack of uniform availability.\n- Formalin therapy has a 90% success rate; it is inexpensive and effective with a single treatment.\n- A report linked formalin use with anal canal stricturing.\n- The need for surgical therapy is uncommon.\n- For refractory bleeding, a colostomy may be offered, but diversion of the fecal stream is often unsuccessful in stopping the hemorrhage.\n- For incapacitating symptoms from bleeding, strictures, and nonhealing ulcers, proctectomy with a coloanal anastomosis or end colostomy may be offered."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Twelve hours after hemorrhoidal banding, a 45-year-old man presents to the emergency department reporting rectal and abdominal pain and an inability to urinate. His temperature is 102°F and heart rate is 110 beats per minute. Management consists of:",
      "options": [
        "A. Placement of a Foley catheter",
        "B. Broad-spectrum IV antibiotics",
        "C. Broad-spectrum antibiotics and rectal examination with the patient under anesthesia",
        "D. Stool softeners and oral antibiotics",
        "E. In-and-out catheterization of bladder and stool softeners"
      ],
      "answer": "C",
      "explanation": "- Sepsis after hemorrhoid treatment (banding, sclerotherapy, stapled hemorrhoidectomy) is rare but life-threatening, most common in immunocompromised patients.\n- Patients usually present within the first 12 hours after the procedure, but can present in a delayed fashion.\n- Common symptoms are severe perineal pain, fevers, and urinary retention.\n- Appropriate management of sepsis after hemorrhoidectomy includes hospital admission, fluid resuscitation, and IV antibiotics with coverage of gram-negative rods and anaerobes.\n- Examination with the patient under anesthesia is recommended to rule out a necrotizing infection that may require debridement.\n- Conservative management is not appropriate for a patient suspected of having sepsis."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "The most common cause of a rectovaginal fistula is:",
      "options": [
        "A. Carcinoma of the rectum",
        "B. Crohn disease",
        "C. Obstetric injury",
        "D. Ulcerative colitis",
        "E. Radiation"
      ],
      "answer": "C",
      "explanation": "- A rectovaginal fistula is most often due to an obstetric injury after a vaginal delivery, typically in primigravidas, associated with episiotomy.\n- Other causes include inflammatory bowel disease (Crohn disease more than ulcerative colitis), carcinoma of the rectum, radiation therapy for pelvic malignancies, and rarely perianal abscesses and diverticulitis.\n- It can also be iatrogenic during low anterior resections, particularly in women who have had a hysterectomy.\n- Treatment for low fistulas is with an endorectal advancement flap.\n- For high fistulas (more likely due to neoplasm, Crohn disease, radiation), management is via a transabdominal approach with resection of the affected rectal segment."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Approximately 3 hours after a hemorrhoidectomy a patient continues to have bleeding from the anus. The nurse has changed the pad multiple times and has attempted to pack the rectum with gauze. What is the next best step in management?",
      "options": [
        "A. Rubber banding the bleeding site",
        "B. Rectal packing with epinephrine gauze",
        "C. Suture ligation",
        "D. Ice packs",
        "E. Foley catheter balloon compression"
      ],
      "answer": "C",
      "explanation": "- Bleeding can occur immediately or, in the case of hemorrhoidal banding, after 7 to 10 days when the necrotic stump sloughs off.\n- Options for bleeding management include rectal packing with epinephrine gauze, ice packs, and Foley catheter balloon compression.\n- The majority of bleeding is mild and resolves with simple measures.\n- If bleeding is copious, the patient should be taken back to the operating/procedure room where visualization is better, anesthesia is adequate, cautery can be used, and suture ligation can be performed."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "A 60-year-old woman presents with severe perianal itching that is constant throughout the day. Examination reveals minimal erythema and excoriations. Which of the following is the best initial treatment?",
      "options": [
        "A. Exam under anesthesia",
        "B. Biopsy and/or culture",
        "C. Oral antibiotics",
        "D. Improve perianal hygiene",
        "E. Intravenous steroids"
      ],
      "answer": "D",
      "explanation": "- Pruritus ani is a common problem with multiple etiologies, including perianal infection, surgically correctable causes (prolapsing hemorrhoids, fissure, neoplasm, fistula), antibiotic use, noninfectious dermatologic causes (seborrhea, psoriasis, contact dermatitis), and systemic diseases (jaundice, diabetes).\n- The majority of pruritus ani is idiopathic and probably related to local hygiene, neurogenic, or psychogenic causes.\n- Treatment focuses on removal of irritant, improving perianal hygiene, dietary adjustments, and avoiding scratching.\n- Biopsy and/or culture of the region may be necessary if symptoms persist despite treatment.\n- Hydrocortisone ointment can provide symptomatic relief but should not be used for prolonged periods due to the risk of dermal atrophy leading to more pruritus."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "The chemotherapeutic agents commonly used and favored for anal canal carcinoma are:",
      "options": [
        "A. 5-Fluorouracil (5-FU) and mitomycin C",
        "B. 5-FU and carmustine",
        "C. Floxuridine and bleomycin",
        "D. Vincristine and 5-FU",
        "E. Cyclophosphamide and prednisone"
      ],
      "answer": "A",
      "explanation": "- The Nigro protocol, established in 1972, revolutionized the management of squamous cell carcinomas of the anus.\n- This regimen consists of 5-FU and mitomycin C combined with radiation therapy, curing nearly 80% of cases.\n- Recurrent cases require an abdominoperineal resection.\n- Carmustine is a nitrosurea used in brain cancer.\n- Floxuridine and bleomycin are infrequently used for colon cancer with liver metastasis.\n- Vincristine is used in testicular cancer.\n- Cyclophosphamide and prednisone have been used in various cancers, including non-Hodgkin lymphoma."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 65-year-old woman presents to the emergency department with severe perianal pain for 12 hours that came on after straining during a bowel movement. Physical examination reveals an exquisitely tender perianal mass with bluish discoloration under the perianal skin. Management consists of:",
      "options": [
        "A. Stool softeners and sitz baths",
        "B. Rubber band ligation",
        "C. Stab incision and drainage with the patient under local anesthesia in the emergency department",
        "D. Elliptical excision of skin and drainage with the patient under local anesthesia in the emergency department",
        "E. Rectal examination with the patient under general anesthesia with incision and drainage"
      ],
      "answer": "D",
      "explanation": "- Hemorrhoids are distinguished as internal (above dentate line, insensate, cause painless bleeding, prolapse, or strangulation) or external (below dentate line, covered with anoderm, cause discomfort/itching, severe pain if thrombosed).\n- Treatment of thrombosed external hemorrhoids involves incision and drainage with the patient under local anesthesia.\n- To prevent recurrence or inadequate drainage, it is important to excise an ellipse of skin, not just perform a stab avulsion.\n- Rubber banding thrombosed external hemorrhoids is not well tolerated due to severe pain.\n- Nonoperative management is acceptable if symptoms have been present for greater than 72 hours and pain is subsiding.\n- Local anesthesia is well tolerated for these procedures."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is true regarding anogenital warts?",
      "options": [
        "A. Human papillomavirus (HPV) types 6 and 11 predispose to malignancy.",
        "B. No association exists with squamous intraepithelial lesions.",
        "C. Treatment depends on location and extent of disease.",
        "D. Immunomodulator therapy is ineffective when used topically.",
        "E. Vaccine against HPV does not prevent anogenital warts."
      ],
      "answer": "C",
      "explanation": "- Condyloma acuminata (anogenital warts) is caused by HPV, with at least 66 types.\n- HPV types 6 and 11 are found in benign anogenital warts.\n- HPV types 16 and 18 behave more aggressively and are more frequently associated with dysplasia and malignant transformation.\n- There is an association with squamous intraepithelial lesions and squamous cell carcinoma.\n- Condylomas occur in the perianal region, the squamous epithelium of the anal canal, and occasionally the mucosa of the distal rectum.\n- Treatment depends on location and extent of disease.\n- Options include caustic agents (podophyllin, trichloroacetic acid, nitric acid), cryotherapy, fulguration, surgical excisions, antineoplastic preparations (5-FU), laser therapy, interferon, immunomodulator therapy (imiquimod), cidofovir, and surgical excision.\n- There are vaccines against HPV that potentially prevent anogenital warts."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Which of the following medical therapies results in the greatest healing rates for chronic anal fissures?",
      "options": [
        "A. Bulk agents and stool softeners",
        "B. Topical nitroglycerin",
        "C. Topical diltiazem",
        "D. Topical bethanechol",
        "E. Botulinum toxin injection"
      ],
      "answer": "E",
      "explanation": "- Anal fissures develop from hard stools causing trauma to the anoderm distal to the dentate line, typically in the posterior location due to poorer blood supply.\n- They cause exquisite pain with defecation, often accompanied by blood.\n- To effect healing, stool softening (fiber and stool softeners) and sphincter relaxation are essential.\n- Numerous topical agents have been used with varying degrees of success, including 2% lidocaine jelly, nitroglycerin ointment (0.2%), topical diltiazem, topical arginine (a nitric oxide donor), and topical bethanechol (a muscarinic agonist).\n- The best rate of healing with nonoperative treatment is via injection of botulinum toxin, which causes temporary paralysis of the sphincter muscle.\n- Recent studies suggest that healing rates with botulinum toxin approach those of surgery, although surgery remains the gold standard for refractory cases.\n- Surgical management, generally reserved for medical management failures, involves a lateral internal sphincterotomy.\n- The right side of the internal sphincter should be divided, and only the length of the fissure, to ensure the lowest rate of incontinence."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is true regarding perianal disease in patients with human immunodeficiency virus (HIV)?",
      "options": [
        "A. It is uncommon to find concomitant infection with other sexually transmitted infections.",
        "B. The incidence of dysplasia is equal to those without HIV.",
        "C. The incidence of anal condyloma is low in the HIV-infected population.",
        "D. Exam under anesthesia is needed to determine etiology of many perianal problems.",
        "E. Highly active antiretroviral therapy (HAART) has decreased the incidence of perianal disease."
      ],
      "answer": "D",
      "explanation": "- Perianal disease is very common in patients infected with HIV.\n- It is common to find concomitant infection with other sexually transmitted infections (Chlamydia, herpes simplex virus, HPV).\n- Anal condyloma in particular is common, and the incidence of dysplasia is high in the HIV-infected population.\n- Many perianal problems require examination under anesthesia with biopsy and cultures to determine their etiology.\n- Highly active antiretroviral therapy (HAART) has changed the natural history of HIV infection, but its effect on the incidence of perianal disease remains to be seen."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "An 80-year-old woman presents with rectal prolapse. She has a history of chronic constipation. Colonoscopy findings are negative. Treatment would be best achieved via:",
      "options": [
        "A. Fixation of the rectum with prosthetic sling (Ripstein repair)",
        "B. Anterior resection with rectopexy",
        "C. Thiersch anal encirclement",
        "D. Resection of perineal hernia and closure of the cul-de-sac (Moschcowitz procedure)",
        "E. Perineal rectosigmoidectomy (Altemeier procedure)"
      ],
      "answer": "E",
      "explanation": "- Procidentia (rectal prolapse) is much more common in women, especially elderly women.\n- In young men, it is more often associated with psychiatric disease.\n- It involves all layers of the rectum and starts 6 to 7 cm from the anal verge.\n- Adults with rectal prolapse generally require surgery, whereas children can often be managed nonoperatively.\n- Procedures are divided into abdominal and perineal procedures.\n- Abdominal procedures are associated with a lower recurrence rate but a higher complication rate than perineal procedures.\n- Abdominal procedures are used for younger, lower-risk patients, and perineal procedures for older, higher-risk patients.\n- Recent studies show favorable results with perineal rectosigmoidectomy in elderly high-risk patients, with a 15% recurrence rate, making it a good option.\n- Another well-accepted perineal operation is the Delorme procedure, involving reefing the rectal mucosa.\n- The Thiersch anal encirclement is no longer used.\n- Moschcowitz procedure is more often performed for the management of vaginal prolapse."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following statements are true regarding perianal disease in association with Crohn disease?",
      "options": [
        "A. Anal fistulas tend to have a single tract.",
        "B. Magnetic resonance imaging (MRI) is not particularly helpful.",
        "C. The liberal use of multiple setons is helpful.",
        "D. Infliximab is ineffective in healing these fistulas.",
        "E. Aggressive use of fistulotomy provides the best chance of cure."
      ],
      "answer": "C",
      "explanation": "- Anal fistulas in association with Crohn disease tend to be complex and have multiple fistulous tracts.\n- MRI is particularly helpful to detect the extent of the fistula tract, identify abscesses, and visualize the anal sphincter and pelvic floor muscle.\n- Patients should also undergo sigmoidoscopy, colonoscopy, and small bowel follow-through to determine the extent of disease.\n- Antibiotics (metronidazole, ciprofloxacin) are used to control symptoms and sepsis, but fistulas tend to recur when antibiotics are discontinued.\n- Immunomodulators (cyclosporine, tacrolimus, mercaptopurine, azathioprine, and infliximab) have been used with varying degrees of success, with infliximab appearing to be the most effective.\n- The liberal use of setons is recommended.\n- Aggressive use of fistulotomy should be avoided for low intersphincteric, suprasphincteric, or extrasphincteric fistulae because it is associated with delayed healing and an increased risk of incontinence."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "The most common bacterial cause of proctitis is:",
      "options": [
        "A. Chlamydia trachomatis",
        "B. Neisseria gonorrhoeae",
        "C. Treponema pallidum",
        "D. Haemophilus ducreyi",
        "E. Shigella species"
      ],
      "answer": "B",
      "explanation": "- Proctitis typically presents with pain, tenesmus, rectal bleeding, diarrhea, and mucous discharge.\n- It can be due to bacterial infection, viral infection, trauma, radiation, and inflammatory bowel disease.\n- Bacterial proctitis is often due to sexually transmitted diseases and is associated with anal intercourse.\n- *Neisseria gonorrhoeae* is the most common bacterial cause, followed by *Chlamydia*, which tends to produce fewer symptoms.\n- *Treponema pallidum*, *Haemophilus ducreyi*, and *Shigella* species are uncommon causes of proctitis.\n- Bacterial proctitis can also be due to non-sexually transmitted diseases, primarily in association with inflammatory bowel disease.\n- Treatment of bacterial proctitis is with antibiotics, whereas for proctitis associated with inflammatory bowel disease, treatment includes steroid and 5-aminosalicylic acid enemas."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "Which of the following is true regarding fistula-in-ano?",
      "options": [
        "A. Drainage of an anorectal abscess rarely results in a persistent fistula-in-ano.",
        "B. The internal opening is generally easily identifiable.",
        "C. Fistulas are categorized based on their relationship to the anal mucosa.",
        "D. Surgical treatment is determined by the internal and external opening of the fistula.",
        "E. Injecting hydrogen peroxide or methylene blue into the external opening is contraindicated."
      ],
      "answer": "D",
      "explanation": "- Drainage of an anorectal abscess provides a cure in about half of patients, with the remaining developing a persistent fistula-in-ano.\n- Most fistulas are cryptoglandular in origin.\n- Other less common causes include trauma, Crohn disease, malignancy, radiation, and infections (tuberculosis, actinomycosis, chlamydia).\n- The external opening of the fistula is usually obvious, whereas the internal one is often hard to identify.\n- Fistulas are categorized based on their relationship to the anal sphincter complex (intersphincteric, transsphincteric, suprasphincteric).\n- Surgical treatment is determined by the location of the internal and external openings and the course of the fistula tract.\n- Treatment may include simple fistulotomy, draining or cutting seton, fibrin glue injection, fibrin plug, ligation of intersphincteric fistula tract (LIFT) procedure, or anorectal advancement flap.\n- Gently injecting hydrogen peroxide or methylene blue into the external opening may help identify the internal opening.\n- The main goal of treatment is to treat and eliminate sepsis while maintaining continence."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "Hirschsprung disease presenting in an adult:",
      "options": [
        "A. Does not occur",
        "B. Is not associated with the RET mutation",
        "C. Is best diagnosed by a barium enema",
        "D. Requires a pull-through procedure for definitive management",
        "E. Can be treated with anorectal myomectomy"
      ],
      "answer": "E",
      "explanation": "- Hirschsprung disease rarely presents in adults.\n- In adults, it typically involves a lifelong history of constipation and fecal impaction, with symptoms often dating back to infancy.\n- In most adult cases, it consists of a short segment of aganglionosis.\n- Although a barium enema can be diagnostic if an extremely dilated proximal colon, transitional zone, and contracted distal colon and rectum are seen, it may miss short-segment Hirschsprung disease if the rectal tube is introduced too far past the anal canal, bypassing the contracted segment.\n- Diagnosis is established by a rectal mucosal biopsy specimen demonstrating aganglionosis.\n- As in children, Hirschsprung disease is associated with the RET mutation in a percentage of patients.\n- While pull-through procedures (Soave or Duhamel) are performed in children and those with long segments of aganglionosis, in adults with short-segment aganglionosis, an anorectal myomectomy can be performed."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "A 50-year-old woman presents with rectal pain, incomplete rectal voiding, and bright red blood and mucus per rectum. Colonoscopy reveals a solitary rectal ulcer in the distal rectum on the anterior wall. A biopsy specimen of the ulcer shows chronic inflammation. Management consists of:",
      "options": [
        "A. Transanal excision of the ulcer",
        "B. Perineal rectosigmoidectomy",
        "C. Abdominal rectopexy",
        "D. High-fiber diet and defecation training",
        "E. Rectal fixation with prosthetic sling"
      ],
      "answer": "D",
      "explanation": "- Solitary rectal ulcer syndrome is an uncommon disorder that can be confused with malignancy, as patients present with rectal bleeding, pain, and straining during bowel movements.\n- It is a benign process caused by internal intussusception from chronic straining, leading to repetitive trauma to the mucosa.\n- On proctoscopy, nodules or a mass may be found, termed colitis cystica profunda.\n- Biopsy should be performed to exclude malignancy.\n- Diagnosis of an internal intussusception can be confirmed with anorectal manometry and defecography.\n- Treatment is nonoperative and includes a high-fiber diet, defecation training to avoid straining, and laxatives or enemas.\n- Abdominal or perineal repair (as for rectal prolapse) is recommended for medical management failure.\n- Transanal excision of a rectal ulcer is considered in the management of rectal cancer after determining tumor invasion extent and evaluating adjacent lymph nodes.\n- Rectal fixation with prosthetic sling can be considered for rectal procidentia."
    }
  ]
}
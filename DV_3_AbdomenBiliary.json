{
  "chapter_name": "Abdomen-Biliary",
  "questions": [
    {
      "id": "1",
      "question_type": "mcq",
      "question": "Hemobilia is most frequently accompanied by what other finding?\nA. Arterioportal vein fistula\nB. Arteriohepatic vein fistula\nC. Arterial pseudoaneurysm\nD. Portal venous pseudoaneurysm\nE. Cavernous hemangioma",
      "options": [
        "A. Arterioportal vein fistula",
        "B. Arteriohepatic vein fistula",
        "C. Arterial pseudoaneurysm",
        "D. Portal venous pseudoaneurysm",
        "E. Cavernous hemangioma"
      ],
      "answer": "C",
      "explanation": "*   Hemobilia is a rare condition that presents with Quinke's triad: upper gastrointestinal bleeding (hematemesis), jaundice, and right-sided upper abdominal pain.\n*   It is most often a result of iatrogenic injury to the right hepatic artery, typically an arterial pseudoaneurysm that has a connection with the biliary tree.\n*   It can also occur in association with gallstones, tumors, inflammatory disorders, and vascular disorders.\n*   Treatment in most instances involves angiographic embolization of the artery.\n*   Endoscopy may show blood coming from the ampulla of Vater but is not typically therapeutic.\n*   The remaining answer choices (A, B, D, E) are not thought to play a role in hemobilia."
    },
    {
      "id": "2",
      "question_type": "mcq",
      "question": "Choledochal cyst disease is thought to be caused by an abnormality of the:\nA. Bile duct smooth muscle\nB. Bile composition\nC. Bile duct adventitia\nD. Pancreaticobiliary duct junction\nE. Bile duct mucosa",
      "options": [
        "A. Bile duct smooth muscle",
        "B. Bile composition",
        "C. Bile duct adventitia",
        "D. Pancreaticobiliary duct junction",
        "E. Bile duct mucosa"
      ],
      "answer": "D",
      "explanation": "*   The exact etiology of choledochal cysts is unclear, but the most likely explanation is an anomalous pancreaticobiliary duct junction.\n*   Specifically, the pancreatic duct joins the common bile duct more than 1 cm proximal to the ampulla, resulting in a long common channel.\n*   This long channel leads to free reflux of pancreatic secretions into the biliary tract, resulting in increased biliary pressures and inflammatory changes in the biliary epithelium, which eventually lead to dilation and cyst formation.\n*   Choledochal cysts are more common in females and Asians, classically presenting in childhood with jaundice, an abdominal mass, and abdominal pain.\n*   Diagnosis is typically made by ultrasonography.\n*   There are five types; Type I is the most common (90%) and consists of fusiform dilation of the bile duct.\n*   Type V (Caroli disease) is characterized by multiple intrahepatic dilations.\n*   Due to the risk of malignant degeneration, treatment involves excising the cyst with a biliary enteric bypass (typically hepaticojejunostomy).\n*   Biliary smooth muscle (A), mucosa (E), ductal adventitia (C), and bile (B) are not thought to play a role in choledochal cyst disease."
    },
    {
      "id": "3",
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding the use of intraoperative cholangiography (IOC) during laparoscopic cholecystectomy?\nA. It helps prevent inadvertent incision of the common bile duct (CBD).\nB. It is the best way to identify clinically significant unsuspected common duct stones.\nC. Routine use is justified because of its ability to identify anatomic anomalies of the hepatic ducts.\nD. Routine use is helpful to ensure complete removal of the gallbladder and cystic duct.\nE. Routine use is unnecessary.",
      "options": [
        "A. It helps prevent inadvertent incision of the common bile duct (CBD).",
        "B. It is the best way to identify clinically significant unsuspected common duct stones.",
        "C. Routine use is justified because of its ability to identify anatomic anomalies of the hepatic ducts.",
        "D. Routine use is helpful to ensure complete removal of the gallbladder and cystic duct.",
        "E. Routine use is unnecessary."
      ],
      "answer": "E",
      "explanation": "*   The routine use of IOC to prevent bile duct injury is controversial, with most surgeons considering routine use unnecessary.\n*   Due to the small overall risk of bile duct injury, there are no sufficiently large-scale randomized studies to definitively answer this question.\n*   IOC seems to allow earlier recognition of a CBD injury and prevent complete transection, but it is unlikely to prevent the injury itself (A).\n*   While routine IOC can identify unsuspected CBD stones, these are often suspected preoperatively based on abnormal liver function tests, dilated CBD, or a history of gallstone pancreatitis (B).\n*   In a nationwide retrospective analysis, the risk of injury was increased when IOC was not used.\n*   Some surgeons prefer selective use of IOC and emphasize obtaining the \"critical view\" by completely dissecting the Calot triangle to skeletonize the cystic duct and artery."
    },
    {
      "id": "4",
      "question_type": "mcq",
      "question": "During a laparoscopic cholecystectomy for symptomatic cholelithiasis, the surgical resident inadvertently transects the CBD. The best choice for operative repair is:\nA. End-to-end CBD anastomosis\nB. Choledochoduodenostomy\nC. Choledochojejunostomy\nD. Hepaticoduodenostomy\nE. Hepaticojejunostomy",
      "options": [
        "A. End-to-end CBD anastomosis",
        "B. Choledochoduodenostomy",
        "C. Choledochojejunostomy",
        "D. Hepaticoduodenostomy",
        "E. Hepaticojejunostomy"
      ],
      "answer": "E",
      "explanation": "*   The majority of common bile duct injuries occur iatrogenically during laparoscopic cholecystectomy for relatively benign gallbladder disease.\n*   Management depends on the type of injury and clinical setting.\n*   If a small lateral CBD injury is created, it can be repaired by closing the ductotomy over a T tube.\n*   If the common bile duct is transected, primary repair (A) will likely lead to stricture formation and recurrent cholangitis due to interruption of blood supply.\n*   The best option for a transected CBD recognized intraoperatively is immediate repair with a biliary enteric bypass.\n*   Hepaticoenterostomy (B, C) is the appropriate choice for common bile duct injuries.\n*   Hepaticoduodenostomy (D) has largely been abandoned for benign liver disease due to ongoing enteric reflux and is technically more challenging.\n*   Hepaticojejunostomy (E) is generally preferred due to its technical feasibility and lower risk of reflux.\n*   A critical element of the repair is a tension-free, mucosa-to-mucosa duct enteric anastomosis.\n*   If the injury is discovered postoperatively or with a long delay, transhepatic drainage and delayed primary repair (6-8 weeks) may be considered after inflammation subsides."
    },
    {
      "id": "5",
      "question_type": "mcq",
      "question": "Which of the following is true regarding the gallbladder?\nA. It passively absorbs sodium and chloride.\nB. In the setting of cholelithiasis, cholecystokinin (CCK) can cause gallbladder pain that waxes and wanes.\nC. It harbors an alkaline environment.\nD. Glucagon can help empty the gallbladder.\nE. Its contraction is inhibited by vagal stimulation.",
      "options": [
        "A. It passively absorbs sodium and chloride.",
        "B. In the setting of cholelithiasis, cholecystokinin (CCK) can cause gallbladder pain that waxes and wanes.",
        "C. It harbors an alkaline environment.",
        "D. Glucagon can help empty the gallbladder.",
        "E. Its contraction is inhibited by vagal stimulation."
      ],
      "answer": "D",
      "explanation": "*   The gallbladder concentrates and stores bile by rapidly absorbing sodium and chloride against a concentration gradient via active transport and passive water absorption (A - it actively absorbs, not passively).\n*   The epithelial cells of the gallbladder secrete mucous glycoproteins and hydrogen ions, which acidifies the bile and prevents calcium salt precipitation (C - it acidifies, not harbors an alkaline environment).\n*   Inflammation of the gallbladder mucosa can affect its ability to secrete hydrogen ions, making the bile more lithogenic.\n*   Vagal innervation stimulates contraction of the gallbladder (E - it stimulates, not inhibits).\n*   CCK causes steady and tonic contraction of the gallbladder; the term biliary colic is a misnomer because postprandial gallbladder pain from cholelithiasis is constant for several hours, not waxing and waning (B).\n*   The gallbladder normally fills by contraction at the sphincter of Oddi.\n*   In contrast, glucagon relaxes the sphincter of Oddi, allowing the gallbladder to empty into the duodenum."
    },
    {
      "id": "6",
      "question_type": "mcq",
      "question": "A 65-year-old woman presents with symptoms and signs of acute cholecystitis and undergoes an uneventful laparoscopic cholecystectomy. On postoperative day 7, the pathology report indicates a superficial gallbladder carcinoma that invades the perimuscular connective tissue. There is no evidence of distant metastasis on subsequent imaging. Which of the following would be the best management?\nA. Radiation and chemotherapy\nB. Observation\nC. Reoperation with resection of liver segments IVB and V\nD. Reoperation with resection of liver segments IVB and V and regional lymph node dissection\nE. Reoperation with resection of liver segments IVB and V, regional lymph node dissection, and resection of all port sites",
      "options": [
        "A. Radiation and chemotherapy",
        "B. Observation",
        "C. Reoperation with resection of liver segments IVB and V",
        "D. Reoperation with resection of liver segments IVB and V and regional lymph node dissection",
        "E. Reoperation with resection of liver segments IVB and V, regional lymph node dissection, and resection of all port sites"
      ],
      "answer": "D",
      "explanation": "*   Gallbladder cancer is predominantly adenocarcinoma, often discovered in an advanced state with distant metastases, leading to a poor overall prognosis (5% 5-year survival).\n*   The best chance of cure is incidental discovery during cholecystectomy.\n*   Gallbladder cancer metastasizes first to the celiac axis lymph nodes.\n*   Superficial lesions (carcinoma in situ and T1, not extending into perimuscular connective tissue) with negative margins can be managed by cholecystectomy alone (B), with a 100% 5-year survival.\n*   More locally advanced lesions (T2-T4, invading perimuscular connective tissue or liver) are treated with a radical cholecystectomy.\n*   Radical cholecystectomy includes subsegmental resection of liver segments IVb and V, plus hepatoduodenal ligament lymphadenectomy (D), which results in prolonged survival if there is no evidence of distant metastases.\n*   Port sites are associated with peritoneal disease and decreased survival, but routine removal of all port sites (E) does not improve survival.\n*   Radiation therapy with fluorouracil radiosensitization is the most commonly used postoperative treatment (A)."
    },
    {
      "id": "7",
      "question_type": "mcq",
      "question": "A 24-year-old male presents with acholic stools and cola-colored urine. Alkaline phosphatase is 2000 IU/L, AST is 78 IU/L, ALT is 88 IU/L, and total bilirubin is 2.1 mg/dL. Liver biopsy demonstrates periductal concentric fibrosis around macroscopic bile ducts. He is positive for perinuclear antineutrophil cytoplasmic antibody (p-ANCA). Which of the following is true about this condition?\nA. It is more commonly associated with Crohn disease than it is with ulcerative colitis.\nB. Cancer antigen (CA) 19-9 levels should be determined.\nC. Endoscopic retrograde cholangiopancreatography (ERCP) will predominantly demonstrate irregular narrowing of the intrahepatic biliary tree.\nD. Symptoms are often well controlled with medical management.\nE. It is more common in females.",
      "options": [
        "A. It is more commonly associated with Crohn disease than it is with ulcerative colitis.",
        "B. Cancer antigen (CA) 19-9 levels should be determined.",
        "C. Endoscopic retrograde cholangiopancreatography (ERCP) will predominantly demonstrate irregular narrowing of the intrahepatic biliary tree.",
        "D. Symptoms are often well controlled with medical management.",
        "E. It is more common in females."
      ],
      "answer": "B",
      "explanation": "*   This patient's presentation is consistent with sclerosing cholangitis.\n*   Sclerosing cholangitis is characterized by multiple inflammatory fibrous thickenings resulting in irregular narrowing of the entire biliary tree (C - it affects the entire biliary tree, not predominantly intrahepatic).\n*   It is a progressive disease leading to biliary obstruction, recurrent biliary infection, cirrhosis, and liver failure.\n*   It carries a significantly increased risk of cholangiocarcinoma (10-20% of patients), thus CA 19-9 levels should be determined.\n*   Sclerosing cholangitis is twice as common in men (E - more common in men, not females).\n*   The strongest association is with ulcerative colitis (A - more commonly associated with ulcerative colitis, not Crohn disease).\n*   Alkaline phosphatase is characteristically elevated out of proportion to bilirubin.\n*   Initial management with steroids, methotrexate, and cyclosporine is often insufficient, and the majority of patients eventually require more invasive treatment like biliary stenting (D - symptoms are often not well controlled with medical management).\n*   Liver transplantation is the best option for patients who progress to liver failure."
    },
    {
      "id": "8",
      "question_type": "mcq",
      "question": "Which of the following is the best management of a localized Klatskin tumor?\nA. Pancreaticoduodenectomy (Whipple procedure)\nB. Resection of the entire extrahepatic biliary tree with hepatic resection if necessary\nC. Resection of the middle third of the biliary tree with hepaticojejunostomy\nD. Chemotherapy\nE. Radiation followed by chemotherapy",
      "options": [
        "A. Pancreaticoduodenectomy (Whipple procedure)",
        "B. Resection of the entire extrahepatic biliary tree with hepatic resection if necessary",
        "C. Resection of the middle third of the biliary tree with hepaticojejunostomy",
        "D. Chemotherapy",
        "E. Radiation followed by chemotherapy"
      ],
      "answer": "B",
      "explanation": "*   Perihilar cholangiocarcinomas are also known as Klatskin tumors.\n*   Surgery is the only treatment that has shown potential for long-term survival, provided the tumor has no evidence of distant spread (D, E - these are adjuvant therapies, not primary management).\n*   Type I and II tumors (involving the common hepatic duct or bifurcation) typically involve resection of the entire extrahepatic biliary tree with portal lymphadenectomy and bilateral Roux-en-Y hepaticojejunostomies (C - this option is too limited, as it misses the extent of resection).\n*   More recently, an even more aggressive approach, including hemihepatectomy, is used for Type I and II tumors to achieve negative margins and improve survival.\n*   For Type III lesions, lobectomy is advocated.\n*   A Whipple procedure (A) is appropriate for a distal CBD tumor, not a Klatskin tumor."
    },
    {
      "id": "9",
      "question_type": "mcq",
      "question": "An 80-year-old patient presents with nausea, fever, and right upper quadrant pain and tenderness. Ultrasonography reveals gallstones as well as air in the wall of the gallbladder. His temperature is 103.5°F and blood pressure is 70/40 mm Hg. Medical therapy is initiated, and pressors are needed to maintain blood pressure. Which of the following is true regarding this condition?\nA. Metronidazole is an important antibiotic choice.\nB. Emergent cholecystectomy is indicated.\nC. Urgent percutaneous drainage is preferred over cholecystectomy.\nD. The most common organism is an anaerobic gram-negative rod.\nE. Perforation of the gallbladder is rare.",
      "options": [
        "A. Metronidazole is an important antibiotic choice.",
        "B. Emergent cholecystectomy is indicated.",
        "C. Urgent percutaneous drainage is preferred over cholecystectomy.",
        "D. The most common organism is an anaerobic gram-negative rod.",
        "E. Perforation of the gallbladder is rare."
      ],
      "answer": "C",
      "explanation": "*   This patient's presentation (elderly, unstable vitals, air in gallbladder wall) is consistent with emphysematous cholecystitis.\n*   Emphysematous cholecystitis occurs in less than 1% of acute cholecystitis cases, predominantly in elderly diabetic men.\n*   The hallmark is gas within the gallbladder wall or lumen, visible on imaging.\n*   Gangrene is present in three-fourths of cases, and perforation occurs in more than 20% of cases (E - perforation is not rare).\n*   It carries a high mortality rate (25%) and morbidity rate (50%) despite aggressive treatment.\n*   For unstable patients (on pressors, multiple medical problems), percutaneous drainage with cholecystostomy should be performed first (C).\n*   If the patient is more stable, cholecystectomy is preferred (B - not emergent if unstable).\n*   Antimicrobial coverage should include Clostridia perfringens, an anaerobic gram-positive rod, which is considered the most common cause (D).\n*   High-dose penicillin should be started immediately (A - high-dose penicillin is the specific antibiotic, not metronidazole alone).\n*   Other common biliary pathogens include Clostridia welchii, Escherichia coli, Enterococcus, and Klebsiella."
    },
    {
      "id": "10",
      "question_type": "mcq",
      "question": "Which of the following is true regarding bile and gallstones?\nA. The primary bile acids are deoxycholic and lithocholic acid.\nB. The primary phospholipid in bile is lecithin.\nC. Cholecystectomy decreases bile salt secretion.\nD. Brown pigmented gallstones are more likely to be found in the gallbladder versus the CBD.\nE. Bile consists of an equal part bile salts, phospholipids, and cholesterol.",
      "options": [
        "A. The primary bile acids are deoxycholic and lithocholic acid.",
        "B. The primary phospholipid in bile is lecithin.",
        "C. Cholecystectomy decreases bile salt secretion.",
        "D. Brown pigmented gallstones are more likely to be found in the gallbladder versus the CBD.",
        "E. Bile consists of an equal part bile salts, phospholipids, and cholesterol."
      ],
      "answer": "B",
      "explanation": "*   Bile consists of bile salts (80%), phospholipids (15%), and cholesterol (5%) (E - not equal parts).\n*   The primary phospholipid in bile is lecithin.\n*   The primary bile acids are cholic acid and chenodeoxycholic acid; deoxycholic and lithocholic acids are secondary bile acids formed by bacterial deconjugation (A - these are secondary, not primary).\n*   Normally, more than 95% of bile salts are reabsorbed by the enterohepatic circulation.\n*   Cholecystectomy has minimal effect on bile acid secretion but increases enterohepatic circulation of bile salts (C - it increases, not decreases).\n*   Pigment stones get their characteristic color from calcium bilirubinate.\n*   Brown pigment gallstones occur more commonly in the setting of biliary stasis, such as cholangitis, and tend to form in the CBD (D - brown pigment stones are more likely in the CBD, not gallbladder).\n*   Black pigment stones are associated with hemolytic disorders and are more likely to be found within the gallbladder."
    },
    {
      "id": "11",
      "question_type": "mcq",
      "question": "A 75-year-old woman presents to the emergency department with a 2-day history of nausea, feculent vomiting, and obstipation. Her blood pressure on admission is 80/60 mm Hg, and her heart rate is 120 beats per minute. Plain films reveal distended loops of small bowel with air-fluid levels, as well as air in the biliary tree. After resuscitation, which of the following is the best management option?\nA. Small bowel enterotomy with removal of the gallstone plus cholecystectomy and takedown of the fistula\nB. Small bowel enterotomy with removal of the gallstone alone\nC. Cholecystectomy with CBD exploration\nD. Prolonged nasogastric tube decompression and intravenous (IV) antibiotics\nE. Lysis of adhesions plus resection of the small bowel",
      "options": [
        "A. Small bowel enterotomy with removal of the gallstone plus cholecystectomy and takedown of the fistula",
        "B. Small bowel enterotomy with removal of the gallstone alone",
        "C. Cholecystectomy with CBD exploration",
        "D. Prolonged nasogastric tube decompression and intravenous (IV) antibiotics",
        "E. Lysis of adhesions plus resection of the small bowel"
      ],
      "answer": "B",
      "explanation": "*   The patient's presentation (elderly, small bowel obstruction, air in the biliary tree) is consistent with gallstone ileus.\n*   Gallstone ileus is a type of mechanical small bowel obstruction, usually caused by a large gallstone (>2.5 cm) eroding through the gallbladder into the adjacent duodenum, creating a cholecystoduodenal fistula.\n*   The stone typically lodges in the narrowest portion of the gastrointestinal tract, often the distal ileum.\n*   Diagnosis of gallstone ileus is often delayed preoperatively.\n*   Initial surgical management should focus on relieving the obstruction, best accomplished by a transverse enterotomy proximal to the palpable stone and stone removal (B).\n*   It is important to run the small bowel to check for additional gallstones.\n*   Cholecystectomy with closure of the fistula (A) is generally reserved for young, low-risk, stable patients. While some surgeons recommend later fistula takedown, this decision is individualized.\n*   Cholecystectomy with CBD exploration (C) is not indicated as the obstruction is in the bowel.\n*   Prolonged nasogastric tube decompression and IV antibiotics (D) are insufficient for mechanical obstruction.\n*   Lysis of adhesions plus resection of the small bowel (E) is for adhesive small bowel obstruction, not gallstone ileus."
    },
    {
      "id": "12",
      "question_type": "mcq",
      "question": "Rokitansky-Aschoff sinuses are seen with:\nA. Acute cholecystitis\nB. Chronic cholecystitis\nC. Oriental cholangiohepatitis\nD. Sclerosing cholangitis\nE. Acalculous cholecystitis",
      "options": [
        "A. Acute cholecystitis",
        "B. Chronic cholecystitis",
        "C. Oriental cholangiohepatitis",
        "D. Sclerosing cholangitis",
        "E. Acalculous cholecystitis"
      ],
      "answer": "B",
      "explanation": "*   Rokitansky-Aschoff sinuses are associated with chronic cholecystitis.\n*   Chronic cholecystitis is the histopathologic result of multiple bouts of symptomatic cholelithiasis or biliary colic.\n*   On pathologic examination, these sinuses develop from atrophy of the mucosa, where the epithelium protrudes into the muscle coat.\n*   They are not considered a premalignant lesion.\n*   A hepatobiliary iminodiacetic acid (HIDA) scan showing visualization of the gallbladder after 2 to 3 hours is suggestive of chronic cholecystitis.\n*   Acute cholecystitis (A), Oriental cholangiohepatitis (C), Sclerosing cholangitis (D), and Acalculous cholecystitis (E) are not the conditions primarily associated with Rokitansky-Aschoff sinuses."
    },
    {
      "id": "13",
      "question_type": "mcq",
      "question": "Which of the following is the correct pairing of anatomic structure and direction for retraction during a laparoscopic cholecystectomy?\nA. Gallbladder fundus laterally\nB. Gallbladder infundibulum laterally\nC. Gallbladder body laterally\nD. Gallbladder infundibulum cephalad\nE. Gallbladder fundus medially",
      "options": [
        "A. Gallbladder fundus laterally",
        "B. Gallbladder infundibulum laterally",
        "C. Gallbladder body laterally",
        "D. Gallbladder infundibulum cephalad",
        "E. Gallbladder fundus medially"
      ],
      "answer": "B",
      "explanation": "*   During laparoscopic cholecystectomy, a total of four trocar sites are typically placed.\n*   Graspers are used to retract the gallbladder fundus superiorly (A, E - fundus is retracted superiorly, not laterally or medially) and the infundibulum (or neck) laterally.\n*   This positioning is ideal for achieving the \"critical view\" and preventing CBD injury, as it allows the cystic duct to remain perpendicular to the CBD.\n*   Excess cephalad retraction of the gallbladder infundibulum shifts the cystic duct in line with the CBD and is considered the most common cause of CBD injury (D).\n*   The gallbladder body should not be used as a retraction site (C)."
    },
    {
      "id": "14",
      "question_type": "mcq",
      "question": "Which of the following best describes the role of early (within 24 hours of admission) laparoscopic cholecystectomy for acute cholecystitis?\nA. It results in a shortened hospital stay.\nB. It increases the rate of conversion to open cholecystectomy.\nC. It should not be performed because the patient should be \"cooled off\" for 2 to 3 days with antibiotics.\nD. It is associated with a higher overall complication rate.\nE. It is associated with a higher mortality rate.",
      "options": [
        "A. It results in a shortened hospital stay.",
        "B. It increases the rate of conversion to open cholecystectomy.",
        "C. It should not be performed because the patient should be \"cooled off\" for 2 to 3 days with antibiotics.",
        "D. It is associated with a higher overall complication rate.",
        "E. It is associated with a higher mortality rate."
      ],
      "answer": "A",
      "explanation": "*   Several prospective, randomized trials have shown that early laparoscopic cholecystectomy (within 24 hours of admission) for acute cholecystitis is safe.\n*   The overall complication rate, conversion to open cholecystectomy (B - it does not increase conversion rate), bile duct injury rate, and mortality rate (D, E - it is not associated with higher complication or mortality rates) are similar to those with delayed cholecystectomy.\n*   Early cholecystectomy results in a shortened hospital stay.\n*   The practice of \"cooling off\" the patient for 2 to 3 days with antibiotics (C) is not supported as the best approach."
    },
    {
      "id": "15",
      "question_type": "mcq",
      "question": "Which of the following is a feature of gallbladder cancer?\nA. Speckled cholesterol deposits are found on the gallbladder wall.\nB. There are thickened nodules of mucosa and muscle.\nC. Gallbladder cancer is more common in males.\nD. It is more likely to be accompanied by large gallstones compared with smaller ones.\nE. Porcelain gallbladders have a higher risk of harboring malignancy and should be prophylactically removed.",
      "options": [
        "A. Speckled cholesterol deposits are found on the gallbladder wall.",
        "B. There are thickened nodules of mucosa and muscle.",
        "C. Gallbladder cancer is more common in males.",
        "D. It is more likely to be accompanied by large gallstones compared with smaller ones.",
        "E. Porcelain gallbladders have a higher risk of harboring malignancy and should be prophylactically removed."
      ],
      "answer": "D",
      "explanation": "*   Gallbladder cancer is two to three times more common in females (C - more common in females, not males) and in Native Americans.\n*   Approximately 90% of patients with carcinoma have gallstones.\n*   Large single stones have a much higher risk of cancer than multiple small stones, likely due to increased mucosal inflammation, and are more likely to lead to cholecystoenteric fistulas.\n*   Other risk factors include choledochal cysts, sclerosing cholangitis, gallbladder polyps, exposure to carcinogens, and obesity.\n*   The risk of gallbladder cancer in porcelain or calcified gallbladders has recently been re-examined, and a consistent association with carcinoma has not been demonstrated, so prophylactic removal (E) is no longer supported for asymptomatic patients.\n*   Speckled cholesterol deposits on the gallbladder wall are a feature of cholesterolosis (A).\n*   Thickened nodules of mucosa and muscle in the gallbladder are a feature of adenomyomatosis (B)."
    },
    {
      "id": "16",
      "question_type": "mcq",
      "question": "The most common cause of benign bile duct stricture is:\nA. Ischemia from operative injury\nB. Chronic pancreatitis\nC. Common duct stones\nD. Acute cholangitis\nE. Sclerosing cholangitis",
      "options": [
        "A. Ischemia from operative injury",
        "B. Chronic pancreatitis",
        "C. Common duct stones",
        "D. Acute cholangitis",
        "E. Sclerosing cholangitis"
      ],
      "answer": "A",
      "explanation": "*   Most benign bile duct strictures are iatrogenic, resulting from technical errors during cholecystectomy, such as excessive cautery, incorrect clip placement, or overly aggressive dissection near the CBD, often due to unclear anatomy (B, C, D, E are less common causes or consequences).\n*   The eventual response is fibrosis and stricture formation.\n*   Many injuries are not recognized at surgery, and some may occur years after the operation.\n*   Iatrogenic strictures are typically short and occur in the common bile duct, often presenting with cholangitis.\n*   Workup includes ultrasonography for dilated ducts, CT scan for masses, and ERCP with EUS for diagnosis and therapy (including cytology).\n*   Management of focal benign strictures by biliary enteric bypass or stenting is debatable due to lack of randomized trials and long-term follow-up data.\n*   Stenting is less invasive, but recurrent obstruction is a concern; bypass is performed if recurrent obstructive symptoms develop."
    },
    {
      "id": "17",
      "question_type": "mcq",
      "question": "On CT scan a type I choledochal cyst appears to be adherent to the posterior wall of the portal vein. Management consists of:\nA. Partial excision of the cyst, leaving posterior wall behind, and cholecystectomy with Roux-en-Y hepaticojejunostomy\nB. Complete excision of the cyst, cholecystectomy, and hepaticojejunostomy\nC. Partial excision of the cyst, fulguration of posterior cyst mucosa, and cholecystectomy with Roux-en-Y hepaticojejunostomy\nD. Observation\nE. Roux-en-Y cyst jejunostomy",
      "options": [
        "A. Partial excision of the cyst, leaving posterior wall behind, and cholecystectomy with Roux-en-Y hepaticojejunostomy",
        "B. Complete excision of the cyst, cholecystectomy, and hepaticojejunostomy",
        "C. Partial excision of the cyst, fulguration of posterior cyst mucosa, and cholecystectomy with Roux-en-Y hepaticojejunostomy",
        "D. Observation",
        "E. Roux-en-Y cyst jejunostomy"
      ],
      "answer": "C",
      "explanation": "*   Type I choledochal cysts are the most common type, involving dilations of the common hepatic duct and/or CBD.\n*   Management typically involves complete excision of the cyst and a biliary enteric bypass (e.g., hepaticojejunostomy).\n*   An exception is when the posterior wall of the cyst is adherent to the portal vein due to ongoing inflammation.\n*   In such cases, the posterior wall should be left in situ, and its mucosa fulgurated or curetted (Lilly procedure) to remove the risk of malignancy. Cholecystectomy is also performed.\n*   Roux-en-Y cyst jejunostomy alone (E) is insufficient.\n*   Observation (D) is not appropriate due to the risk of malignancy.\n*   Partial excision without fulguration (A) is incomplete."
    },
    {
      "id": "18",
      "question_type": "mcq",
      "question": "Strawberry gallbladder is a gross description given to:\nA. Cholesterolosis\nB. Adenomyomatosis\nC. Porcelain gallbladder\nD. Acalculous cholecystitis\nE. Gangrenous cholecystitis",
      "options": [
        "A. Cholesterolosis",
        "B. Adenomyomatosis",
        "C. Porcelain gallbladder",
        "D. Acalculous cholecystitis",
        "E. Gangrenous cholecystitis"
      ],
      "answer": "A",
      "explanation": "*   Strawberry gallbladder is a gross description given to cholesterolosis.\n*   Cholesterolosis is caused by the accumulation of cholesterol in macrophages in the gallbladder mucosa, leading to speckled cholesterol deposits on the mucosal surface.\n*   It is a benign condition.\n*   Adenomyomatosis (B) results from hypertrophic smooth muscle bundles and ingrowth of mucosal glands into the muscle layer; it is also a benign condition.\n*   Porcelain gallbladder (C) is suggestive of gallbladder cancer.\n*   Acalculous cholecystitis (D) typically occurs in critically ill, highly stressed patients due to ischemia, distention, and bile stasis.\n*   Gangrenous cholecystitis (E) can occur in diabetics and present with right upper quadrant pain and air in the gallbladder wall."
    },
    {
      "id": "19",
      "question_type": "mcq",
      "question": "Jaundice with absent urine urobilinogen is most consistent with:\nA. Hepatitis\nB. Cirrhosis\nC. Hemolysis\nD. Biliary obstruction\nE. Sepsis",
      "options": [
        "A. Hepatitis",
        "B. Cirrhosis",
        "C. Hemolysis",
        "D. Biliary obstruction",
        "E. Sepsis"
      ],
      "answer": "D",
      "explanation": "*   Bilirubin is a breakdown product of heme from old red blood cells.\n*   It is conjugated in the liver and eventually enters the gastrointestinal tract.\n*   In the gastrointestinal tract, bilirubin is deconjugated into urobilinogen by bacteria.\n*   Some urobilinogen is reabsorbed, returns to the liver, and is excreted in the urine (giving urine its yellow appearance).\n*   The remaining urobilin is oxidized to stercobilin in the intestines, giving stool its brown appearance.\n*   In the presence of biliary obstruction, less bilirubin enters the gut, less urobilinogen is made, and therefore less appears in the urine (absent urine urobilinogen) and stools turn pale.\n*   Hemolysis (C) would generate an increase in bilirubin and a corresponding increase in urobilinogen in the gut and urine.\n*   Hepatitis (A), Cirrhosis (B), and Sepsis (E) do not typically cause absent urine urobilinogen in the same manner as complete biliary obstruction."
    },
    {
      "id": "20",
      "question_type": "mcq",
      "question": "Which of the following best describes the role of preoperative biliary drainage before a Whipple procedure in a patient with obstructive jaundice?\nA. It has been shown to decrease the rate of cholangitis.\nB. It has been shown to increase the rate of wound infections.\nC. It should be performed routinely if the bilirubin level is greater than 8 mg/dL.\nD. It has been shown to shorten the hospital stay.\nE. It has been shown to decrease the mortality rate.",
      "options": [
        "A. It has been shown to decrease the rate of cholangitis.",
        "B. It has been shown to increase the rate of wound infections.",
        "C. It should be performed routinely if the bilirubin level is greater than 8 mg/dL.",
        "D. It has been shown to shorten the hospital stay.",
        "E. It has been shown to decrease the mortality rate."
      ],
      "answer": "B",
      "explanation": "*   The role of preoperative biliary drainage (via ERCP and stenting) before a Whipple procedure in patients with malignant obstructive jaundice is controversial.\n*   Theoretically, relief of jaundice might improve operative risk, but large meta-analyses and single-center studies have failed to show improved morbidity and mortality rates with preoperative biliary drainage.\n*   Routine use of preoperative biliary drainage seems to increase the risk of infectious complications, including wound infection (10% with drainage vs 4% without) and pancreatic fistula (10% with drainage vs 4% without).\n*   Thus, it should only be used selectively (e.g., in the presence of cholangitis or severe, intractable pruritus).\n*   It has not been demonstrated to decrease the risk of cholangitis (A), shorten hospital stay (D), or decrease the mortality rate (E).\n*   Obstructive jaundice can provide a dilated pancreatic duct, making pancreaticojejunostomy easier to perform during a Whipple procedure."
    },
    {
      "id": "21",
      "question_type": "mcq",
      "question": "Ultrasonography of the gallbladder reveals a polypoid lesion. This most likely represents:\nA. A cholesterol polyp\nB. Adenomyomatosis\nC. A benign adenoma\nD. Adenocarcinoma\nE. An inflammatory polyp",
      "options": [
        "A. A cholesterol polyp",
        "B. Adenomyomatosis",
        "C. A benign adenoma",
        "D. Adenocarcinoma",
        "E. An inflammatory polyp"
      ],
      "answer": "A",
      "explanation": "*   Most polypoid lesions of the gallbladder are benign, and of these, cholesterol polyps are the most common.\n*   Cholesterol polyps are usually small (<10 mm), pedunculated, and multiple, often seen with cholesterolosis.\n*   Ultrasound imaging often demonstrates hyperechoic foci with a comet tail artifact; unlike gallstones, these foci do not produce shadowing.\n*   Adenomyomatosis polyps (B) are the second most common, appearing as sessile polyps causing focal thickening of the wall.\n*   Inflammatory polyps (E) are the third most common.\n*   All three (cholesterol, adenomyomatosis, inflammatory) are benign pseudopolyps.\n*   Adenomas and adenocarcinomas (C, D) are generally larger than 10 mm.\n*   Distinguishing between benign and malignant polyps on ultrasonography is generally not reliable.\n*   General indications for cholecystectomy for polyps include: symptomatic polyp, polyp with gallstones, polyp larger than 6 mm, and age older than 50.\n*   For asymptomatic gallstone polyps not meeting these criteria, follow-up ultrasound in 6 months is recommended."
    },
    {
      "id": "22",
      "question_type": "mcq",
      "question": "A 45-year-old man has a 50% total body surface area third-degree burn. On hospital day 7, fever, marked leukocytosis, and right upper quadrant pain develop. His blood pressure is 130/80 mm Hg and his heart rate is 110 beats per minute. Ultrasonography shows a distended gallbladder, with gallbladder wall thickening and sludge. However, it is negative for gallstones. Antibiotics are initiated. The next step in management would consist of:\nA. Laparoscopic cholecystectomy\nB. Computed tomography\nC. Hepatobiliary iminodiacetic acid (HIDA) scan\nD. Percutaneous cholecystostomy\nE. Upper endoscopy",
      "options": [
        "A. Laparoscopic cholecystectomy",
        "B. Computed tomography",
        "C. Hepatobiliary iminodiacetic acid (HIDA) scan",
        "D. Percutaneous cholecystostomy",
        "E. Upper endoscopy"
      ],
      "answer": "D",
      "explanation": "*   The patient's presentation (critically ill with burns, distended gallbladder, wall thickening, sludge, but no gallstones) is consistent with acalculous cholecystitis.\n*   The initial study of choice for acalculous cholecystitis is ultrasonography, which can be performed at the bedside.\n*   Acalculous cholecystitis requires urgent intervention.\n*   If the patient is too ill for surgery (e.g., on pressors or with multiple medical problems), percutaneous cholecystostomy is the treatment option of choice (D).\n*   Laparoscopic cholecystectomy (A) is preferred if the patient is stable enough for surgery.\n*   A HIDA scan (C) is not recommended in critically ill patients where a delay in therapy could be fatal.\n*   Computed tomography (B) may be used for diagnosis but percutaneous cholecystostomy is the direct intervention.\n*   Upper endoscopy (E) is not indicated."
    },
    {
      "id": "23",
      "question_type": "mcq",
      "question": "A 35-year-old Chinese man presents with a fever of 103.5°F, right upper quadrant pain, and jaundice. Laboratory values are significant for a white blood cell count of 15,000 cells/L, an alkaline phosphatase level of 400 U/L, and a serum bilirubin level of 3.8 mg/dL. Magnetic resonance cholangiopancreatography (MRCP) demonstrates a markedly dilated CBD, markedly dilated intrahepatic ducts with several intrahepatic ductal strictures, and multiple stones throughout the ductal system. Which of the following is true regarding this condition?\nA. It is associated with close contact with dogs and sheep.\nB. It is more commonly associated with black pigment stones versus brown pigment stones.\nC. It more commonly affects males.\nD. Metronidazole is able to resolve the majority of cases.\nE. Initial treatment is with endoscopic retrograde cholangiopancreatography and transhepatic cholangiography.",
      "options": [
        "A. It is associated with close contact with dogs and sheep.",
        "B. It is more commonly associated with black pigment stones versus brown pigment stones.",
        "C. It more commonly affects males.",
        "D. Metronidazole is able to resolve the majority of cases.",
        "E. Initial treatment is with endoscopic retrograde cholangiopancreatography and transhepatic cholangiography."
      ],
      "answer": "E",
      "explanation": "*   This patient's presentation (fever, RUQ pain, jaundice, dilated CBD and intrahepatic ducts with strictures and stones, Chinese ethnicity) is consistent with cholangiohepatitis, also known as recurrent pyogenic cholangitis.\n*   It is endemic in Asia.\n*   The etiology appears to be a combination of bacterial and parasitic (e.g., Clonorchis sinensis, Opisthorchis viverrini, Ascaris lumbricoides) infections in the biliary tree.\n*   Bacteria deconjugate bilirubin, leading to its precipitation as bile sludge. Brown pigment stones (B - brown pigment stones, not black) form from sludge and dead bacterial cells, and may harbor parasite eggs.\n*   It affects both sexes equally (C - affects both sexes equally, not more commonly males).\n*   The condition leads to recurrent episodes of cholangitis, liver abscesses, stricture formation, liver failure, and an increased risk of cholangiocarcinoma.\n*   Recurrence is high.\n*   Initial treatment involves endoscopic retrograde cholangiopancreatography (ERCP) and transhepatic cholangiography (E).\n*   Patients often require multiple interventions to clear the biliary tree, and eventually may need a biliary enteric bypass.\n*   Metronidazole (D) is the treatment of choice for amebic liver abscess, not this condition.\n*   Hydatid liver disease (A) is associated with close contact with dogs and sheep, not cholangiohepatitis."
    },
    {
      "id": "24",
      "question_type": "mcq",
      "question": "Which of the following is true regarding biliary anatomy?\nA. The right hepatic duct tends to be longer than the left and more prone to dilation.\nB. Venous return from the gallbladder is most often via a cystic vein to the portal vein.\nC. Heister valves have an important role in the gallbladder's function as a bile reservoir.\nD. The CBD and pancreatic duct typically unite outside the duodenal wall.\nE. The arterial supply to the CBD derives primarily from the left hepatic and right gastric arteries.",
      "options": [
        "A. The right hepatic duct tends to be longer than the left and more prone to dilation.",
        "B. Venous return from the gallbladder is most often via a cystic vein to the portal vein.",
        "C. Heister valves have an important role in the gallbladder's function as a bile reservoir.",
        "D. The CBD and pancreatic duct typically unite outside the duodenal wall.",
        "E. The arterial supply to the CBD derives primarily from the left hepatic and right gastric arteries."
      ],
      "answer": "D",
      "explanation": "*   In approximately three-fourths of individuals, the common bile duct (CBD) and the main pancreatic duct unite outside the duodenal wall and traverse the duodenal wall as a single duct.\n*   The left hepatic duct is longer than the right and is more likely to be dilated in the presence of distal obstruction (A - left hepatic duct is longer, not right).\n*   Venous return from the gallbladder typically drains directly to the parenchyma of the liver, not most often via a cystic vein to the portal vein (B).\n*   The spiral Heister valves within the cystic duct do not have any true valvular function (C).\n*   The arterial supply to the CBD runs along its lateral and medial walls (at 3 and 9 o'clock positions) and comes from the right hepatic artery and retroduodenal artery (off the gastroduodenal artery) (E - not left hepatic and right gastric arteries).\n*   A transverse hemisection of the duct will likely interrupt its blood supply and render a repair prone to ischemia and stricture."
    },
    {
      "id": "25",
      "question_type": "mcq",
      "question": "During laparoscopic cholecystectomy, bile appears to be emanating near the junction of the CBD and cystic duct. Upon conversion to open cholecystectomy, the injury is noted to be a 3-mm longitudinal tear in the anterolateral distal common hepatic duct. The duct itself measures 7 mm in diameter. Management consists of:\nA. Primary repair of the injury without a T tube\nB. Primary repair of the injury over a T tube\nC. Primary repair of the injury with a T tube placed through a separate choledochotomy\nD. Hepaticojejunostomy\nE. Choledochoduodenostomy",
      "options": [
        "A. Primary repair of the injury without a T tube",
        "B. Primary repair of the injury over a T tube",
        "C. Primary repair of the injury with a T tube placed through a separate choledochotomy",
        "D. Hepaticojejunostomy",
        "E. Choledochoduodenostomy"
      ],
      "answer": "B",
      "explanation": "*   All provided options are potential repairs for a bile duct injury.\n*   Sharp, clean, and small injuries in a large CBD or common hepatic duct are more amenable to primary repair.\n*   Primary repair is generally performed over a T tube.\n*   The CBD is supplied by two main arteries at the right and left borders. Injuries less than 50% in circumference are less likely to have interrupted blood supply and develop ischemic stricture.\n*   If the duct is transected, nearly transected (>50% circumference), or very small, a Roux-en-Y hepaticojejunostomy (D) is recommended.\n*   Injuries to the proximal CBD can be treated with a hepaticojejunostomy (D), while injuries to the distal CBD can be treated with a choledochoduodenostomy (E).\n*   If the bile duct injury is the result of thermal injury, a primary repair with a T tube placed through a separate choledochotomy (C) is the preferred approach.\n*   Given the 3-mm longitudinal tear in a 7-mm duct, it represents less than 50% of the circumference, making primary repair over a T tube (B) the best choice."
    },
    {
      "id": "26",
      "question_type": "mcq",
      "question": "Hydrops of the gallbladder:\nA. Poses a significantly increased risk of malignancy\nB. Is due to a stone impacted in the cystic duct\nC. Typically starts with an enteric bacterial infection\nD. Is associated with marked right upper quadrant tenderness\nE. Results in the gallbladder getting filled with bile-stained fluid",
      "options": [
        "A. Poses a significantly increased risk of malignancy",
        "B. Is due to a stone impacted in the cystic duct",
        "C. Typically starts with an enteric bacterial infection",
        "D. Is associated with marked right upper quadrant tenderness",
        "E. Results in the gallbladder getting filled with bile-stained fluid"
      ],
      "answer": "B",
      "explanation": "*   Hydrops of the gallbladder occurs when a gallstone becomes impacted in the cystic duct, obstructing it.\n*   Less frequently, an acute infection does not develop despite obstruction.\n*   In this situation, bile within the gallbladder is absorbed, but the gallbladder epithelium continues to secrete glycoprotein (mucus).\n*   This results in the gallbladder becoming distended with mucinous material (E - it fills with mucinous material, not bile-stained fluid).\n*   The gallbladder may be palpable but does not create the Murphy sign (D - not associated with marked tenderness).\n*   Hydrops of the gallbladder can result in edema of the gallbladder wall and perforation.\n*   Hydrops does not significantly increase the risk for malignancy (A).\n*   Although it can become infected subsequently, it does not typically start with an enteric bacterial infection (C)."
    },
    {
      "id": "27",
      "question_type": "mcq",
      "question": "Which of the following patients has the best indication for a laparoscopic cholecystectomy?\nA. A 45-year-old asymptomatic male with type 2 diabetes mellitus incidentally discovered to have gallstones\nB. 25-year-old male trauma, who is now quadriplegic, incidentally discovered to have gallstones\nC. A 22-year-old female who is 11 weeks pregnant with symptomatic cholelithiasis\nD. A 4-year-old male with asymptomatic incidentally discovered gallstones\nE. A 38-year-old asymptomatic female with a 3-mm gallbladder polyp",
      "options": [
        "A. A 45-year-old asymptomatic male with type 2 diabetes mellitus incidentally discovered to have gallstones",
        "B. 25-year-old male trauma, who is now quadriplegic, incidentally discovered to have gallstones",
        "C. A 22-year-old female who is 11 weeks pregnant with symptomatic cholelithiasis",
        "D. A 4-year-old male with asymptomatic incidentally discovered gallstones",
        "E. A 38-year-old asymptomatic female with a 3-mm gallbladder polyp"
      ],
      "answer": "C",
      "explanation": "*   Asymptomatic patients with incidentally discovered gallstones are usually managed with observation due to a low lifetime risk of developing symptoms (<5%). This includes patients with comorbidities like diabetes (A).\n*   Spinal cord trauma (B) is a relative indication for cholecystectomy due to impaired pain sensation.\n*   Pregnant patients with symptomatic biliary disease are offered surgical intervention, but only during their second trimester (weeks 13–26) when the risk of injury to the fetus is lowest.\n*   The pediatric population (D) with asymptomatic incidentally discovered gallstones is an indication for cholecystectomy due to unreliable history and exam in children.\n*   Gallbladder polyps larger than 6 mm (E - a 3mm polyp is usually observed) are an indication for surgical intervention.\n*   Among the given options, a pregnant patient with symptomatic cholelithiasis (C) represents the most definitive and urgent indication for laparoscopic cholecystectomy, especially as she is in the second trimester."
    },
    {
      "id": "28",
      "question_type": "mcq",
      "question": "Which of the following is true regarding cholangiocarcinoma?\nA. The majority are intrahepatic.\nB. Bismuth-Corlette type I cholangiocarcinoma occurs above the confluence of the right and left hepatic ducts.\nC. Most patients benefit from adjuvant chemoradiation after surgical intervention.\nD. It arises from malignant transformation in hepatocytes.\nE. Resection with biliary-enteric bypass is considered appropriate management in patients with early disease.",
      "options": [
        "A. The majority are intrahepatic.",
        "B. Bismuth-Corlette type I cholangiocarcinoma occurs above the confluence of the right and left hepatic ducts.",
        "C. Most patients benefit from adjuvant chemoradiation after surgical intervention.",
        "D. It arises from malignant transformation in hepatocytes.",
        "E. Resection with biliary-enteric bypass is considered appropriate management in patients with early disease."
      ],
      "answer": "E",
      "explanation": "*   Cholangiocarcinoma arises from bile duct epithelium (D - it arises from bile duct epithelium, not hepatocytes).\n*   While it can occur anywhere along the biliary tree, the majority occurs extrahepatically, with only 20% being intrahepatic (A - majority are extrahepatic, not intrahepatic).\n*   It is a locally aggressive cancer that can spread directly to the liver and peritoneum.\n*   The Bismuth-Corlette classification system categorizes cholangiocarcinoma by location: Type I occurs below the confluence of the right and left hepatic ducts (B - Type I is below, not above, the confluence).\n*   MRCP is an appropriate initial imaging study to define anatomy and plan for surgical intervention; ERCP is a valuable diagnostic tool for biopsy.\n*   Intrahepatic disease can be managed with hepatic wedge resection.\n*   Extrahepatic disease requires resection with biliary-enteric bypass (E) in patients with early disease, without extensive local disease (e.g., portal vein trunk or hepatic artery involvement), nodal involvement, or distant metastases.\n*   National Comprehensive Cancer Network recommends considering chemoradiation for patients with positive margins or nodal disease, but it is not done routinely for most patients (C)."
    },
    {
      "id": "29",
      "question_type": "mcq",
      "question": "Which of the following is true regarding bile and gallbladder disease?\nA. Primary bile acids are formed by deconjugation.\nB. Bile acids are passively absorbed in the terminal ileum.\nC. Bile acids are responsible for the yellow color of bile.\nD. Bile duct stones occurring 1 year after cholecystectomy are considered primary common duct stones.\nE. In between meals, gallbladder emptying is stimulated by motilin.",
      "options": [
        "A. Primary bile acids are formed by deconjugation.",
        "B. Bile acids are passively absorbed in the terminal ileum.",
        "C. Bile acids are responsible for the yellow color of bile.",
        "D. Bile duct stones occurring 1 year after cholecystectomy are considered primary common duct stones.",
        "E. In between meals, gallbladder emptying is stimulated by motilin."
      ],
      "answer": "E",
      "explanation": "*   Primary bile acids (cholic and chenodeoxycholic acid) are formed by cholesterol conjugated with taurine or glycine. Secondary bile acids are a result of bacterial deconjugation in the gastrointestinal tract (A - primary bile acids are not formed by deconjugation).\n*   Bile acids are actively absorbed in the terminal ileum, not passively absorbed along the entirety of the small intestine (B).\n*   Bile acids are colorless; the yellow hue of bile is a result of pigmented biliverdin (a breakdown product of bilirubin) (C).\n*   Bile duct stones occurring more than 2 years after cholecystectomy are considered primary common duct stones (D - 1 year is too short, usually >2 years).\n*   During the fasting state (in between meals), gallbladder emptying is stimulated by motilin."
    },
    {
      "id": "30",
      "question_type": "mcq",
      "question": "A 42-year-old female underwent an uneventful laparoscopic cholecystectomy. Two weeks later she presents to the emergency department with vague abdominal pain. Her vitals are normal and stable. Total bilirubin is 1.1 mg/dL. CT scan demonstrates a large biloma. Which of the following is the best choice for definitive intervention?\nA. CT-guided drainage\nB. ERCP with biliary stent placement\nC. Operative drainage\nD. Hepaticojejunostomy\nE. Choledochojejunostomy",
      "options": [
        "A. CT-guided drainage",
        "B. ERCP with biliary stent placement",
        "C. Operative drainage",
        "D. Hepaticojejunostomy",
        "E. Choledochojejunostomy"
      ],
      "answer": "B",
      "explanation": "*   The incidence of clinically apparent postoperative bile leaks has increased with the shift from open to laparoscopic cholecystectomies.\n*   The most commonly identified culprit for a bile leak is a cystic duct stump leak, likely due to an improperly placed surgical clip.\n*   A biloma should be managed quickly due to the risk of severe morbidity and mortality from biliary sepsis.\n*   Ducts of Luschka are accessory ducts that can sometimes cause low-volume leaks post-operatively, but they typically do not create clinically evident bilomas.\n*   Management should begin with ERCP, biliary stent placement, and sphincterotomy to promote internal biliary drainage by decreasing resistance in the biliary tree.\n*   CT-guided drainage (A) may be considered as a first step for quick control of a septic source in critically ill patients, but it does not address the underlying cause.\n*   Inadvertent injury of the CBD more commonly presents with obstructive jaundice; biliary enteric bypass (D, E) is unlikely to be needed for a biloma.\n*   Operative drainage (C) is not typically needed as initial definitive intervention."
    }
  ]
}
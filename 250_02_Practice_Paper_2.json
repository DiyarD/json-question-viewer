{
    "chapter_name": "Practice Paper 2: Questions",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "A 45-year-old woman has been diagnosed with gallstones. She opts to have an open cholecystectomy.\nWhich of the following surgical incisions would be most appropriate?",
            "options": [
                "A. Gridiron",
                "B. Lanz",
                "C. Right Kocher's",
                "D. Right paramedian",
                "E. Rooftop"
            ],
            "answer": "C",
            "explanation": "A Kocher incision is made 3 cm below and parallel to the subcostal margin from the midline to the border of the rectus abdominus muscle. A right-sided Kocher incision is appropriate for an open cholecystectomy. Left-sided incisions are used for splenectomy. The incision cannot be extended medi-ally, and if it is extended too far laterally, many intercostal nerves can be damaged. A rooftop incision (or double Kocher incision) is made up of both a left and a right Kocher incision connected at the middle. It provides good access to the liver and spleen. It is also indicated for use in bilateral adrenal-ectomy, radical pancreatic and gastric surgery.\nThe gridiron and Lanz incisions are used when doing an appendicec-tomy. The gridiron incision is made one-third of the way along, and at right angles to, the line connecting the anterior superior iliac spine to the umbilicus in the right iliac fossa (i.e. McBurney point). A Lanz incision is more transverse in orientation and closer to the anterior superior iliac spine when compared to the gridiron incision, and is made in the skin crease. A Lanz incision is preferred in younger girls as it provides a better cosmetic result. However, these incisions tend to divide the iliohypogas-tric and ilioinguinal nerves resulting in denervation of the muscles of the inguinal canal, increasing the risk of an inguinal hernia.\nParamedian incisions are made 1.5 cm from the midline through the rectus sheath. They have been used as an approach to gross abdominal surgery, in particular to visualize the kidneys and spleen, but are now avoided due to a poor cosmetic outcome.\nEmil Theodore Kocher, Swiss surgeon (1841–1917).\nOtto Lanz, Swiss surgeon (1865–1935)."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "A 56-year-old woman is brought into the resuscitation room. Three days ago she suffered an insect bite to the abdomen which has now spread, causing redness across the whole of her abdomen. On examination, she is confused, with a temperature of 38.3°C, heart rate 106/min and blood pressure 100/56 mmHg.\nWhich of the following is specific to the treatment of this type of shock?",
            "options": [
                "A. Antibiotics",
                "B. Antihistamines",
                "C. Atropine",
                "D. Fluids",
                "E. Inotropes"
            ],
            "answer": "A",
            "explanation": "Shock is a life-threatening condition in which there is insufficient tis-sue perfusion, leading to inadequate oxygenation of organs. If left untreated, this will result in multi-organ failure and death. The causes of shock may be broadly classified according to their aetiology into hypovolaemic, cardiogenic, anaphylactic, septic and neurogenic. This patient has presented in septic shock, where tissue hypoperfusion occurs secondary to marked systemic vasodilatation, induced by the inflam-matory response. The most common cause of septic shock is endotoxin-producing Gram-negative bacilli. The mainstay of treatment, in addition to supportive measures, is systemic antibiotics. Antihistamines together with steroids and adrenaline are used in the treatment of anaphylac-tic shock, and atropine is used to treat the bradycardia of neurogenic shock. Inotropes increase myocardial contractility and can be used in the treatment of many types of shock including septic and cardiogenic. Intravenous fluids are used to treat the hypotension associated with most types of shock."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "A 21-year-old girl has been out drinking with her friends. She is escorted into hospital by the paramedics after vomiting up a large amount of fresh blood. She is normally fit and well.\nWhich of the following is the most likely cause?",
            "options": [
                "A. Boerhaave syndrome",
                "B. Epistaxis",
                "C. Haemoptysis",
                "D. Mallory-Weiss tear",
                "E. Oesophageal varices"
            ],
            "answer": "D",
            "explanation": "A Mallory-Weiss tear is a superficial mucosal tear. They occur most com-monly at either the gastro-oesophageal junction or gastric cardia. Tears are caused by sudden increases in gastric pressure as occur with retching, repeated vomiting and coughing. Bleeding settles spontaneously within 48 hours in around 90% of cases and the tear heals within a fortnight. Diagnosis is confirmed at endoscopy. The treatment is largely supportive (resuscitation and proton pump inhibitors), unless active bleeding is seen on endoscopy (rare).\nIn contrast to a Mallory-Weiss tear, Boerhaave syndrome is a translu-minal perforation of the oesophagus. Oesophageal varices are a cause of haematemesis in chronic alcohol abuse and develop secondary to portal hypertension caused by liver cirrhosis. Epistaxis is a nose bleed. If large amounts of blood are swallowed during a nose bleed, it may present as bloody vomiting or digested blood in the stools (melaena). Haemoptysis is the term given to blood which is coughed up, the origin of the blood being below the level of the larynx. Causes include pneumonia, pulmo-nary embolism and lung neoplasia.\nVarices can occur in several places in the body, at the points of porto-systemic anastomosis (where the portal venous circulation anastomoses with the systemic venous circulation). All varices have the potential to bleed. The sites of porto-systemic anastomosis are oesophageal, rectal, paraumbilical, retroperitoneal and intrahepatic.\nGeorge Kenneth Mallory, American pathologist (1900–1986).\nSoma Weiss, Hungarian physician (1898–1942)."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "A 15-year-old boy attends the emergency department with a 2-week history of pain in the left lower leg and fever. On examination, there is a tender, irregular swelling of the tibia. X-ray of the leg shows a lytic lesion with a laminated periosteal reaction.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Chondrosarcoma",
                "B. Enchondroma",
                "C. Ewing sarcoma",
                "D. Osteoid osteoma",
                "E. Osteosarcoma"
            ],
            "answer": "C",
            "explanation": "Ewing sarcoma is an extremely rare malignant tumour of bone that is most common in the 5-15-year age range. It is a small cell carcinoma that most commonly occurs in the legs or pelvis. Patients present with a painful swelling and fever. X-ray shows a lytic lesion with a laminated periosteal reaction, known as 'onion skinning'. Treatment is by neoad-juvant chemotherapy and/or radiotherapy with surgical excision.\nA chondrosarcoma is a slow-growing malignant tumour of the car-tilage that affects middle-aged patients. X-rays show localized bone destruction with areas of calcification within the tumour. Treatment is by chemotherapy with wide local excision. An osteoid osteoma is a benign, painful, self-limiting tumour of the bone that occurs in children and young adults. It presents with intense pain that is characteristically worse at night and is relieved by NSAIDs. Osteoid osteomas are caused by a nidus of osteoblasts that become trapped in the cortex of the bone. X-rays show a radiolucent nidus surrounded by a dense area of reactive bone. Enchondromas are common benign bone lesions of cartilaginous origin. They develop from aberrant cartilage left within a bone and are usually found in the metaphysis. Enchondromas are usually asymptom-atic and are found incidentally. X-rays show a well-demarcated calcifying lesion within the metaphysis. Enchondromas can be single or multiple (Oilier disease).\nJames Ewing, American pathologist (1866–1943).\nLouis Xavier Edouard Leopold Oilier, French surgeon (1830-1900)."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "A 72-year-old woman presents to the emergency department with a 5-hour history of abdominal pain, bloating and vomiting. On examination, the abdomen is distended and auscultation reveals intermittent high-pitched sounds. An abdominal X-ray shows air in the biliary tree.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Emphysematous cholecystitis",
                "B. Gallstone ileus",
                "C. Paralytic ileus",
                "D. Perforated gallbladder",
                "E. Pyogenic cholecystitis"
            ],
            "answer": "B",
            "explanation": "This patient has presented with the symptoms and signs of small bowel obstruction. Gallstone ileus is a rare cause of small bowel obstruction (5% of cases) but is most common in elderly women. It is not a true ileus in that the obstruction is not a result of bowel dysmotility but a mechanical obstruction caused by an impacted gallstone in the small bowel. Gallstone ileus occurs when a stone erodes through the gall-bladder into the duodenum, forming a cholecysto-duodenal fistula. The most common site of impaction of the stone is at the ileocae-cal junction. Gastric outlet obstruction caused by an impacted gall-stone is known as Bouveret syndrome. Gallstones only usually cause a mechanical obstruction if they are large (>2.5 cm) or multiple. The classical radiological findings of Rigler's triad – small bowel obstruc-tion + pneumobilia (air in the biliary tree, arising from the cholecysto-duodenal fistula) + ectopic gallstones as seen on abdominal X-ray, US or CT – make a definitive diagnosis. Treatment includes resuscitation and urgent surgical removal of the stone (laparotomy). There is a mor-tality rate of up to 20%.\nOther causes of pneumobilia include emphysematous cholecystitis (caused by gas-forming organisms), pyogenic cholecystitis, post-ERCP, postcholecystectomy, blunt abdominal trauma and an incompetent sphincter of Oddi. Pneumobilia is not caused by a perforated gallbladder, though free air under the diaphragm may be seen on the erect chest X-ray.\nLeon Bouveret, French physician (1850–1929).\nLeo George Rigler, American radiologist (1896–1979)."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "A 52-year-old man presents to the GP complaining of an enlarging lump on his face. On examination, he has a 1 cm pigmented, raised lesion on his left cheek that has a shiny rolled edge.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Basal cell carcinoma",
                "B. Bowen disease",
                "C. Keratoacanthoma",
                "D. Seborrhoeic keratosis",
                "E. Squamous cell carcinoma"
            ],
            "answer": "A",
            "explanation": "Basal cell carcinoma (rodent ulcer) is the most common form of skin can-cer and arises from the basal layer of the epidermis. It typically occurs on sun-exposed areas, although there is also a genetic predisposition to the condition. Various subtypes of basal cell carcinoma exist but the classic appearance is of a 'pearly' lesion with a rolled edge and telangiectasia. Basal cell carcinomas invade locally and rarely metastasize. The majority can be excised but, if too large, can be treated with radiotherapy, and if superfi-cial, by topical chemotherapy (fluorouracil). Overall prognosis is good.\nSeborrhoeic keratoses are common benign tumours also known as senile warts. They are flat pigmented lesions which grow to have a greasy 'stuck-on' appearance. Problems arise if they get stuck to clothes or become infected. The sign of Leser-Trélat is an acute eruption of multiple seborrhoeic keratoses that is associated with an underlying malignancy."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "A 43-year-old woman presents with bright red fresh rectal bleeding and intermittent rectal discomfort. She has recently noticed a mass in her rec-tum. On examination, a non-tender lump is seen emerging from the rec-tum. It cannot be reduced.\nWhich of the following would be the most appropriate treatment?",
            "options": [
                "A. Anal dilatation",
                "B. Banding",
                "C. Haemorrhoidectomy",
                "D. Injection sclerotherapy",
                "E. No intervention required"
            ],
            "answer": "C",
            "explanation": "Haemorrhoids are enlarged engorged vascular cushions within the rec-tum. They are common in Western populations and are associated with constipation, obesity and pregnancy. Haemorrhoids may be asymptom-atic or present with a range of symptoms including pruritus, bleeding, soiling, a dragging sensation and pain, particularly if strangulated. They can be seen clearly on proctoscopy and are found at the 3, 7 and 11 o'clock positions with the patient in the lithotomy position. Haemorrhoids are graded as follows:\n1. Do not prolapse\n2. Prolapse on defaecation but spontaneously reduce\n3. Reduce with manual reduction\n4. Cannot be reduced\nThe treatment of minimally symptomatic piles includes stool softeners and a high fibre diet to prevent constipation. Local anaesthetic oint-ments may provide symptomatic relief. Small haemorrhoids (grades 1 and 2) can be treated with sclerotherapy, where an irritant is injected into the submucosa of the piles causing fibrosis and atrophy, or band-ing, where a band applied around the stalk of the pile causes atro-phy and separation. Manual anal dilatation performed under general anaesthesia (Lord stretch) can be used as an adjunct to treatment but is now largely redundant due to the high risk of faecal incontinence. Haemorrhoidectomy is the excision of piles and is used in the treatment of higher grade piles, piles which persistently bleed and in patients with recurrent thrombosis.\nHaemorrhoids, from Greek haima = blood + rhoia = to flow; 'likely to bleed'.\nPiles, from Latin pila = balls."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "A 42-year-old woman presents to the emergency department with dif-ficulty breathing and facial flushing which began soon after having a few drinks at the pub. She tells you that she has had a few of these epi-sodes recently, always after having an alcoholic drink. Examination is unremarkable. Her observations include: heart rate 82/min and blood pressure 122/86 mmHg.\nWhich investigation will most likely confirm the underlying diagnosis?",
            "options": [
                "A. 17-hydroxyprogesterone levels",
                "B. 24-hour urinary vanillylmandelic acid",
                "C. 24-hour urinary 5-hydroxyindole acetic acid",
                "D. Serum calcitonin",
                "E. Short synacthen test"
            ],
            "answer": "C",
            "explanation": "Carcinoid tumours are tumours of enterochromaffin cells of the ileum that secrete serotonin (5-hydroxytryptamine, or 5-HT). The 5-HT that these tumours secrete is carried from the bowel, via the portal vein, to the liver where it is harmlessly broken down. However, when carcinoid tumours metastasize to the liver, they can secrete 5-HT directly into the bloodstream, bypassing liver metabolism and resulting in the symptoms described in this question. The presence of carcinoid metastases in the liver that result in symptoms is known as carcinoid syndrome. Features of the carcinoid syndrome include paroxysmal flushing, diarrhoea, bron-chospasm and abdominal pain precipitated by stress, alcohol and caf-feine. The diagnosis of carcinoid syndrome is made by measuring 24-hour urinary 5-hydroxyindole acetic acid (5-HIAA), a breakdown product of serotonin. Management is by resection or, in widespread disease, symp-tomatic treatment with octreotide (a somatostatin analogue that inhibits 5-HT release). Carcinoid tumours are slow-growing so, even if dissemi-nated disease is present, patients can live for many years."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "A 62-year-old man presents to the GP with a lump in the left groin which has been present for over 2 months. On examination, the lump is above the inguinal ligament. It is reducible and has a cough impulse, but does not extend into the scrotum.\nWhich of the following is the most likely diagnosis?",
            "options": [
                "A. Direct inguinal hernia",
                "B. Femoral hernia",
                "C. Gluteal hernia",
                "D. Indirect inguinal hernia",
                "E. Obturator hernia"
            ],
            "answer": "A",
            "explanation": "The inguinal canal is 4 cm long and passes downwards and medially from the deep inguinal ring (an inch above the midpoint of the inguinal liga-ment) to the superficial inguinal ring (an inch above the pubic tubercle).\nDirect inguinal hernias protrude straight out of the abdominal wall through a weakened area of the transversalis fascia without travelling down the inguinal canal. The anatomic distinction between direct and indirect inguinal hernias is by their position relative to the inferior epi-gastric arteries. Direct inguinal hernias are found medial to the infe-rior epigastric arteries and indirect inguinal hernias are lateral to them. Direct inguinal hernias pass through Hesselbach's triangle, a landmark bounded by the rectus muscle medially, inferior epigastric vessels later-ally and the inguinal ligament inferiorly. Their position in relation to the inferior epigastric arteries can only really be made at the time of surgery. Direct inguinal hernias are always acquired and are bilateral in 12% of cases. Risk factors include smoking (due to increased coughing caus-ing bouts of high intra-abdominal pressure), obesity, heavy lifting and damage to the ilioinguinal nerve (which contributes to the nerve supply of the anterior abdominal wall and can be damaged by incisions to the lower abdomen, such as those gaining access to the appendix). The neck of direct inguinal hernias is wide and thus rarely strangulates.\nAn indirect hernia is one that travels down the inguinal canal and into the scrotum. Indirect inguinal hernias are the most common type of her-nias and occur most often in young, active men and premature babies (as the processus vaginalis is more likely to be patent). Indirect inguinal hernias are also more common on the right side, because the right testicle descends later and there is a greater incidence of failed closure of the pro-cessus vaginalis. On examination, the hernia lies above and medial to the pubic tubercle and may be observed to descend into the scrotum on stand-ing or coughing. It does not transilluminate nor is the examiner able to palpate the upper border of the lump.\nThe femoral triangle is found on the upper thigh just below the ingui-nal ligament and contains, from lateral to medial, the femoral nerve, femoral artery and femoral vein (remember ‘NAVY': Nerve, Artery, Vein, Y-fronts). The femoral canal is a space just medial to the femoral vein that contains fat, lymph nodes and vessels. It is in this potential space that femoral hernias can protrude. Femoral hernias are the third most common spontaneous hernia, occurring most frequently in older, mul-tiparous women (this is because the femoral ring is bigger in females and pregnancy stretches the fascia over the femoral canal). They protrude through the narrow femoral ring and into the femoral canal where they expand considerably. On examination, femoral hernias are below and lat-eral to the pubic tubercle and the right side is affected twice as commonly as the left. Because the neck of the femoral ring is narrow there is a high risk of strangulation (50% at 1 month), thus all femoral hernias should be operated on urgently.\nFranz Hesselbach, German surgeon and anatomist (1759–1816)."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "A 44-year-old man presents to the GP having noticed a painless swelling in the right side of the scrotum. On examination, the scrotum is swollen and non-tender. The swelling transilluminates and the testis itself is not palpable.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Epididymo-orchitis",
                "B. Hydrocele",
                "C. Inguinal hernia",
                "D. Testicular torsion",
                "E. Varicocele"
            ],
            "answer": "B",
            "explanation": "A hydrocele is a collection of serous fluid in the tunica vaginalis, a mem-brane that covers the testis. They can be primary or secondary to an underlying cause. Primary hydroceles (as in this case) are tense, pain-less, fluctuant swellings which transilluminate. They are commoner in boys. Because the fluid surrounds the testicle, the underlying testis is not palpable, however the epididymis above can be felt as a separate struc-ture and you are able to feel the upper border of the swelling (this would not be the case with a hernia). Primary hydroceles are benign but can be surgically excised if desired. (Simple aspiration of the cyst will result in re-accumulation of fluid.) A secondary hydrocele can occur when the membranous sac around the testis becomes filled with exudates secondary to tumours or inflammation of the underlying testis or epididymis. Secondary hydroceles are usually small and lax.\nHydroceles in adults should be investigated with ultrasound to exclude underlying pathology. If no serious pathology is found, treatment can be with scrotal supports, aspiration of fluid or open surgery if there is a large or recurrent hydrocele. Testicular torsion and epididymo-orchitis both present with acute testicular pain and marked tenderness on examination.\nThe term varicocele describes varicosities in the pampiniform venous plexus, the network of veins that drains the testicle. It usually occurs on the left side and is present in 10% of males. Patients present with a scrotal swell-ing on standing that feels like a 'bag of worms' and may experience a heavy, dragging sensation. Varicoceles are usually harmless but have been asso-ciated with defective spermatogenesis rendering some patients subfertile (although this is a contentious issue). Varicoceles can be diagnosed by ultra-sound, which shows venous dilatation greater than 2 mm. Management is by reassurance and advising the wearing of supportive underwear. If a patient desires treatment then radiological embolization of the left testicu-lar vein, or ligation and division of the testicular veins, can be performed.\nIn some cases a left-sided varicocele can be indicative of left renal pathology due to impaired venous drainage secondary to a renal mass causing increased backpressure."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "A 27-year-old woman presents to the GP with a single lump in the left breast that has been present for 6 months. On examination, there is a 3 cm smooth lump in the upper outer quadrant of the breast that is mobile and not attached to the overlying skin.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Breast abscess",
                "B. Breast cyst",
                "C. Fibroadenoma",
                "D. Gynaecomastia",
                "E. Phyllodes tumour"
            ],
            "answer": "C",
            "explanation": "Fibroadenomas are common breast lumps that most frequently occur in women aged 15-25 years. They present as discrete, firm, freely mobile lumps, 2-3 cm in size, which classically 'slip' under the examining fin-gers. For this reason, they are also known as ‘breast mice'. Excision of the lesions is not required as there is no risk of malignancy and most resolve over a period of years.\nBreast cysts typically present as a sudden, painful swelling in the breast. They are most common in the forties. Diagnosis and treatment is by aspiration, which reveals a clear fluid. In 30% of cases breast cysts recur these require surgical excision. Occasionally breast cyst aspirate is blood-stained and this is suggestive of malignancy within the wall of the cyst. If this is the case, local excision of the lesion is required.\nBacterial mastitis describes infection of a lactiferous duct by Staphylococcus aureus, which is transmitted by an infant's nasophar-ynx during lactation. It presents with cellulitis around the infected area with pyrexia, tachycardia and a leukocytosis. A complication of bacterial mastitis is the formation of a breast abscess, resulting in a palpable lump. The mainstay of treatment of bacterial mastitis is antibiotics. However if an abscess is present it must be aspirated or drained.\nGynaecomastia is the benign proliferation of male breast tissue due to an imbalance of oestrogens and androgens. It is physiological (normal) in neonates, puberty and in the elderly. There are many other causes of gyn-aecomastia; these include drugs (cimetidine, spironolactone, cannabis, oes-trogen, steroids), renal failure, cirrhosis and testicular tumours. Obesity is not a cause of true gynaecomastia. Although most cases of gynaecomastia resolve spontaneously, excision can be offered if lesions do not settle or are symptomatic or embarrassing. Most commonly, male gynaecomastia can be painful in older men on hormone deprivation therapy for prostate cancer.\nPhyllodes tumours (a.k.a. cystosarcoma phyllodes) are rare tumours of the fibroepithelial stroma of the breast, accounting for <1% of all breast tumours. They are typically benign but fast-growing, and have a distinc-tive leaf-like appearance on histology.\nGynaecomastia, from Latin gynae = woman + mastia = breast.\nPhyllodes, from Greek phullon = leaf; these tumours have a leaf-like appearance on histology."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "A 6-month-old boy is brought into the emergency department by his par-ents. He appears to have been having paroxysms of intense pain since that morning, described by his parents as episodes of crying and drawing of his legs up to the abdomen. This evening he has passed some mucus-like blood from the back passage. His temperature is 36.8°C.\nWhich of the following would be the best treatment option in the first instance?",
            "options": [
                "A. Barium enema",
                "B. Continued observation",
                "C. Intravenous antibiotics",
                "D. Laparotomy",
                "E. Scrotal exploration"
            ],
            "answer": "A",
            "explanation": "This child has presented with features of intussusception. Intussusception is a condition in which one part of the bowel (the intussusceptum) invagi-nates into the adjacent distal segment of bowel (the intussuscipiens). Invagination leads to compression of the mesentery with venous engorge-ment leading to oedema and ischaemia which, if left untreated, will result in necrotic bowel, gastrointestinal haemorrhage, perforation, peritonitis, septicaemia and death. The most common site of intussusception is the junction between the terminal ileum and caecum. The cause is unknown in the majority of cases but an increased risk is observed with recent upper respiratory tract infections (believed to be secondary to enlarged lymph nodes), Henoch-Schönlein purpura (purpuric haemorrhages in the bowel provide the focus for an intussusception), Meckel diverticulum and intestinal polyps. Intussusception is most common between the ages of 6 and 9 months and is the leading cause of obstruction in children up to the age of 6 years. It is much more common in boys. Children typi-cally present with paroxysmal episodes of colicky abdominal pain, with drawing up of the legs towards the abdomen. Initially the child is well in between episodes. There may be associated vomiting and diarrhoea, and the passage of 'red-currant jelly' stools (bloody mucus) per rectum occurs late in the condition. A sausage-shaped mass may be palpable in the right upper quadrant. Fever is only present in the presence of necrosis and sep-sis. If the diagnosis of intussusception is suspected then a contrast enema must be performed as soon as possible following resuscitation. A barium enema not only establishes the diagnosis but may successfully reduce the intussusception (in 80%). Recurrence may occur in up to 10%. If there is any indication of perforation or peritonitis, or the enema is unsuccessful, a laparotomy must be performed."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "A 67-year-old woman presents to the emergency department with a 1-month history of malaise, weight loss, worsening cough and haemoptysis. You notice her saturations are 92% on air and perform a blood gas test with the follow-ing results: pH 7.37, pO2 6.7, pCO2 7.4, bicarbonate 35, saturations 91.7%.\nReference ranges: pO2 >11.0 kPa, pCO2 4.6–6.0 kPa, bicarbonate 22-28 mmol/L, pH 7.35-7.45.\nWhat blood gas picture does this represent?",
            "options": [
                "A. Fully compensated metabolic acidosis",
                "B. Fully compensated metabolic alkalosis",
                "C. Fully compensated respiratory acidosis",
                "D. Type I respiratory failure",
                "E. Venous sample"
            ],
            "answer": "C",
            "explanation": "This woman presents with features highly suggestive of bronchial malig-nancy, and is most probably a smoker. The blood gas shows a normal pH, but on the acidotic side, with a high pCO2 and high bicarbonate. She therefore has a fully compensated respiratory acidosis (as well as a type II respiratory failure, as the pO2 is less than 8). Note that this is not a venous sample because the saturations on the blood gas correspond to what was recorded on the monitor – in a venous sample the blood gas saturations would be well below that of the pulse oximeter.\nSee the question 'Arterial blood gases (1)' for further information on interpreting arterial blood gas results."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 40-year-old woman presents to the emergency department with a 4-hour history of right upper abdominal pain and fever. She tells you that she has previously been investigated for abdominal pain and was found to have gall-stones. She says that she has never felt this unwell with the pain before. On examination, she is markedly jaundiced with a temperature of 39°C and pulse rate of 130/min. There is localized peritonism in the right upper abdomen.\nWhich of the following complications of gallstones has this patient presented with?",
            "options": [
                "A. Acute cholecystitis",
                "B. Ascending cholangitis",
                "C. Biliary colic",
                "D. Carcinoma of the gallbladder",
                "E. Gallstone ileus"
            ],
            "answer": "B",
            "explanation": "Ascending cholangitis is caused by bacterial infection of the biliary tract, as a result of bile stasis secondary to obstruction. Typical offending organisms are E. coli and Klebsiella. Presentation is with severe colicky right upper quadrant pain, fevers and rigors, and jaundice (Charcot's triad). These three features, along with hypotension and confusion, make up Reynolds' pentad of symptoms. Resuscitation and administration of intravenous antibiotics must be prompt as septicaemia can occur rapidly. Biliary drain-age is also required. Ascending cholangitis has a mortality of at least 5%.\nBiliary colic presents as pain alone without systemic upset or change in blood markers. Treatment is symptomatic and pain usually resolves within 24 hours.\nAcute cholecystitis is inflammation of the gallbladder and there are no associated obstructive features. Gallstone ileus is caused by erosion of gall-stones into the duodenum and presents with features of bowel obstruction. It is more common in elderly patients. Carcinoma of the gallbladder is rare, but associated with gallstones in 80% of cases. Its presentation is more insidious and a palpable mass may be found in the right upper quadrant.\nJean-Marie Charcot, French neurologist (1825-1893)."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "A 56-year-old man presents to the pre-assessment clinic prior to an elec-tive knee operation. He tells you he smokes 20 cigarettes a day and suffers from occasional angina.\nWhich of the following best describes his preoperative morbidity?",
            "options": [
                "A. ASA grade I",
                "B. ASA grade II",
                "C. ASA grade III",
                "D. ASA grade IV",
                "E. ASA grade V"
            ],
            "answer": "B",
            "explanation": "For an explanation of ASA grading, please see the question 'Preoperative morbidity (1)'."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "A 41-year-old woman presents to the GP with a 1-week history of feeling tired, muscle aches, neck pain and restlessness. On examination, she has a smooth enlarged thyroid. Her heart rate is 120/min and blood pressure 128/88 mmHg, with a temperature of 37.3°C.\nWhat is the most likely diagnosis?",
            "options": [
                "A. De Quervain thyroiditis",
                "B. Hashimoto thyroiditis",
                "C. Pharyngitis",
                "D. Riedel thyroiditis",
                "E. Thyroglossal cyst"
            ],
            "answer": "A",
            "explanation": "De Quervain thyroiditis describes transient inflammation of the thyroid gland associated with viral infection. It is the most common cause of a painful thyroid gland and is typically seen in the younger, female patient. The clinical course of de Quervain thyroiditis is highly variable and in the initial stages there may be features of hyperthyroidism. This usually resolves spontaneously. Following this, there may be a period of hypo-thyroidism, which can become permanent in 10% of cases. Treatment is largely symptomatic, with anti-inflammatories, and thyroid dysfunction can be treated on a short-term basis.\nRiedel thyroiditis is a rare condition in which normal thyroid tissue is replaced by dense fibrous tissue which may extend beyond the gland, causing dysphagia and tracheal compression. Hypothyroidism develops in 30% of cases. Presentation is with a painless 'fixed' goitre and may mimic carcinoma of the thyroid. The diagnosis is confirmed histologically following biopsy. Surgical treatment is required if there are compressive symptoms. A third of patients develop fibrosis at other sites including the lacrimal gland and lung. Hashimoto thyroiditis is an autoimmune con-dition largely affecting women and caused by circulating autoantibod-ies to peroxidise thyroglobulin. It is a common cause of hypothyroidism although there may be an initial phase of hyperthyroidism. The thyroid gland is enlarged, firm and non-tender. Treatment is with levothyroxine. A thyroglossal cyst is a persistence of the thyroglossal duct from the descent of the thyroid at the base of the tongue. These cysts are found in the mid-line of the neck and characteristically move upwards on protrusion of the tongue. Symptoms arise if the cyst enlarges or becomes infected.\nHakari Hashimoto, Japanese surgeon (1881-1934).\nFritz de Quervain, Swiss surgeon (1868–1940).\nBernhard Moritz Riedel, German surgeon (1846–1916)."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "A 33-year-old man presents with a 2-hour history of upper abdominal pain that radiates to his back and shoulders. On examination, he is sweaty and his abdomen is rigid. His observations include heart rate 106/min and blood pressure 98/58 mmHg.\nWhich of the following is the most likely cause of his symptoms?",
            "options": [
                "A. Epigastric hernia incarceration",
                "B. Gastric carcinoma",
                "C. Gastritis",
                "D. Hiatus hernia",
                "E. Perforated peptic ulcer"
            ],
            "answer": "E",
            "explanation": "A perforated peptic ulcer is a life-threatening surgical emergency in which complete erosion of a pre-existing peptic ulcer leads to the spillage of stomach contents into the peritoneum. This causes a chemical peritoni-tis which, if untreated, becomes a bacterial peritonitis. Perforated ulcers are most common in middle-aged men but a larger number of cases are being seen in elderly women secondary to NSAID use. The majority of those who present with perforation would have had symptoms of peptic ulcer disease. Most perforations occur in the duodenum; perforation of stomach ulcers is associated with gastric carcinoma in a third of cases. Presentation is much less acute in a posterior gastric ulcer perforation, as spillage is into, and contained within, the lesser sac. Other features of a perforated peptic ulcer are haematemesis and melaena. Endoscopy is contraindicated in the presence of a perforation, however, due to the risk of exacerbating gastric leakage into the peritoneum. Free air is often seen under the diaphragm in an erect chest X-ray, although its absence does not exclude a perforation (free air is not seen in at least 10% of cases). Occasionally, free air not seen on an AP view may be detected on a lateral decubitus film. If perforation is suspected, urgent resuscita-tion of the patient is required, with the administration of intravenous fluids and intravenous proton pump inhibitors, prior to transfer to the-atre. Perforations may become sealed by overlying omentum; these cases may be treated conservatively. The mortality of perforated peptic ulcers increases with age and is up to 10%. Consider testing patients with peptic ulceration for H. pylori infection.\nOther causes of air under the diaphragm, other than the perforation of a hollow viscus, include post-abdominal surgery, lung pathology (e.g. fistulae) and penetrating trauma."
        },
        {
            "id": 18,
            "question_type": "numerical",
            "question": "A 43-year-old man is brought into the resuscitation room having been involved in a house fire. On arrival you estimate him to have 20% burns. The man is around 80 kg in weight.\nHow much fluid should the patient have over the next 12 hours?",
            "options": [],
            "answer": "2400",
            "explanation": "In any adult who is estimated to have 15% of burns or more, and in any child who has 10% or more, it is vital to initiate fluid replacement. Burns result in increased capillary permeability with fluid loss which, with extensive burn areas, can result in hypovolaemic shock. The majority of fluid loss with burns injury occurs in the first 12 hours, but continues for up to 36 hours. Various formulae are used to assess the amount of fluid required for resuscitation.\nOne of the widely used formulas is the Muir and Barclay (a.k.a. Mount Vernon Burns Unit) formula, which states that the amount of fluid to be given in any period (in mL) is calculated as follows:\nFluid per period (mL) = weight (kg) × % burn area/2\nThe periods are as follows:\nEvery 4 hours for the first 12 hours\nthen Every 6 hours for the next 12 hours\nthen Over 12 hours for the next 12 hours\nThus, six volumes are given over the first 36 hours. Note that this is in addition to the patient's normal fluid replacement.\nAs the fluid lost in burns is of a similar composition to plasma, a com-bination of colloid (e.g. Gelofusine) and crystalloid (e.g. Hartmann) would be appropriate. If burns are full thickness, 50% of the fluid should be blood, to replace the red cell destruction that occurs in the burn. Fluid replacement must start from the time the burn occurred, not the time of arrival of the patient – if the above patient arrived in hospital an hour fol-lowing burns injury, the first ration of fluid must be given over 3 hours. Haemodynamic markers and urine output can be used to monitor the response to fluid replacement.\nCalculation: For the first 12 hours (3 periods of 4 hours), the fluid required is (80 kg * 20%) / 2 = 800 mL per 4 hours. Total for 12 hours = 800 mL * 3 = 2400 mL."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "A 17-year-old boy is referred to the endocrinology clinic with a 1-month history of paroxysmal sweating, anxiety and palpitations. He has had a thyroid tumour in the past which was successfully resected. On examina-tion, you notice that he is tall and thin with long fingers.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Carcinoid syndrome",
                "B. Multiple endocrine neoplasia type I",
                "C. Multiple endocrine neoplasia type IIa",
                "D. Multiple endocrine neoplasia type IIb",
                "E. Nelson syndrome"
            ],
            "answer": "D",
            "explanation": "This young patient has features of a phaeochromocytoma. This, along with his history of thyroid cancer and a marfanoid phenotype (tall + arachnodactyly), suggests a diagnosis of multiple endocrine neoplasia (MEN) type IIb.\nThere are three types of MEN, all of which are autosomal dominant conditions. MEN type I (Wermer syndrome) includes the presence of para-thyroid adenomas, pancreatic islet-cell tumours and pituitary adenomas. MEN type IIa (Sipple syndrome) comprises parathyroid adenomas, med-ullary carcinoma of the thyroid and phaeochromocytoma. Finally MEN type IIb (more recently renamed as MEN type III) includes the presence of the tumours of MEN type IIa but with the addition of multiple mucosal neuromas of the gastrointestinal tract and a marfanoid phenotype.\nPaul Wermer, American physician (1898–1975).\nJohn Sipple, American physician (1930–present)."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "A 54-year-old woman has been having episodes of epigastric pain asso-ciated with food. She is referred for an endoscopy which shows gastric ulceration. A rapid urease test performed on a biopsy sample is positive.\nWhich of the following would you use to treat this patient?",
            "options": [
                "A. Augmentin and metronidazole",
                "B. Omeprazole, clarithromycin and metronidazole",
                "C. Omeprazole, prednisolone and augmentin",
                "D. Omeprazole and ibuprofen",
                "E. Ranitidine"
            ],
            "answer": "B",
            "explanation": "This patient has peptic ulcer disease associated with Helicobacter pylori infection, as determined by a positive urease test (Campylobacter-like organism [CLO] test). Eighty percent of peptic ulcers are associated with H. pylori infection. H. pylori is a Gram-negative, spiral-shaped rod that can colonize gastric-type mucosa, whether that be in the stomach itself or gastric-type metaplasia in the oesophagus or duodenum. Infection is found in 50% of the over-50s, but most people with it are asymptomatic. H. pylori produces urease, an enzyme that converts urea into ammonia. The ammonia it releases neutralizes the acidic pH around it, which is why this bacterium can live in the harsh acidic environment of the stomach. H. pylori damages gastric mucosa by releasing toxic ammonia and cyto-kines as well as by increasing stomach acid secretion by stimulating gas-trin production. The ability of H. pylori to convert urea into ammonia by action of the enzyme urease is the basis of the rapid urease test (or CLO test). Other ways of detecting the presence of H. pylori include the urease breath test and the stool antigen test. The combination of peptic ulceration with concurrent H. pylori infection is an indication for triple therapy: a proton pump inhibitor with clarithromycin and metronidazole. This is usually given for one week. Repeat testing can confirm the eradication of H. pylori. Biopsies can also be taken at the time of endoscopy if gastric ulceration as a consequence of H. pylori is suspected. Non-steroidal anti-inflammatory drugs are the second most common cause of peptic ulceration. They inhibit the synthesis of prostaglandins by inhibiting the action of cycle-oxygenase (COX) which is protective of the gastric mucosa. There are two forms of COX: type 1 and type 2. Type 2 has less effect on the gastric mucosa and therefore selective COX2 inhibitors, e.g. celecoxib, carry a smaller risk of peptic ulceration than non-selective COX inhibitors. Notably, however, they may confer an increased risk of myocardial infarction. There is also an association between long-term steroid use and peptic ulceration; therefore in those taking either of these drugs on a regular long-term basis it may be sensible to add a proton pump inhibitor to reduce the risk of ulceration. Ranitidine, a histamine-2 receptor antago-nist, is used for the symptomatic relief of peptic ulceration and gastro-oesophageal reflux. Peptic ulcers are four times more likely to develop in the duodenum than the stomach. All gastric ulcers must be biopsied due to their poten-tial for malignant change (unlike duodenal ulcers)."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "A 7-month-old boy is taken by his parents to the GP with a red lesion on his scalp which has been enlarging over the past 2 months. On examina-tion, the lesion is 1 cm in size, raised, bright red and well defined. The boy is otherwise well.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Cavernous haemangioma",
                "B. Deep capillary naevus",
                "C. Dercum disease",
                "D. Pyogenic granuloma",
                "E. Superficial capillary naevus"
            ],
            "answer": "A",
            "explanation": "A cavernous haemangioma (or strawberry naevus) is a condition that appears in the first months of life as a bright red lesion on the face or trunk that grows rapidly. Occasionally these lesions bleed or ulcerate. Cavernous haemangiomas eventually regress and disappear spontane-ously, so intervention is only required if lesions persist beyond a few years of age. Cavernous haemangiomas may rarely be associated with throm-bocytopenia and haemolytic anaemia secondary to trapping and destruc-tion of platelets and erythrocytes within the lesions. This is known as Kasabach-Merritt syndrome.\nA deep capillary naevus (or port-wine stain) is a malformation of the capillaries in the deep and superficial dermis. These are congenital mal-formations which can occur anywhere in the body but are most often found unilaterally on the face. Occasionally a port-wine stain is associ-ated with seizures, mental retardation and eye abnormalities (glaucoma, optic atrophy) due to underlying cranial malformations. This is known as Sturge-Weber syndrome and is usually associated with a port-wine stain in the distribution of the ophthalmic or maxillary division of the trigeminal nerve.\nA superficial capillary naevus (or salmon patch) is a small, flat, pink patch of skin with poorly defined borders. It is commonly found on the forehead (angel's kiss) or on the nape of the neck (stork mark). Most super-ficial naevi disappear in the first year of life. Trigeminal, from Latin tri = three + gemini = twins; which together means 'triplets'. The trigeminal nerve has three divisions. Haig Kasabach, American paediatrician (1898–1943). Katherine Merritt, American paediatrician (1886–1986). William Allen Sturge, English physician (1850–1919). Frederick Parkes Weber, English physician (1863-1962)."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "A 12-month-old girl is brought to the GP by her mother with a large mass in the right side of her neck which she has noticed for a few months. On examination, the mass is fleshy and compressible, and lies posterior to the right sternocleidomastoid.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Branchial cyst",
                "B. Cystic hygroma",
                "C. Pleomorphic adenoma",
                "D. Sternocleidomastoid tumour",
                "E. Thyroglossal cyst"
            ],
            "answer": "B",
            "explanation": "A cystic hygroma is a congenital benign proliferation of lymph vessels that is found in the posterior triangle of the neck. It is a multi-cystic swell-ing that is fleshy and compressible and contains clear fluid. Cystic hygro-mas characteristically transilluminate 'brightly'. Diagnosis is confirmed by CT or MRI and treatment is by excision of the mass.\nThe posterior triangle of the neck is bounded by the sternocleidomas-toid muscle in front, the anterior border of trapezius behind and the mid-dle third of the clavicle at its base. The apex of the triangle is the occiput.\nHygroma, from Greek hygros = wet + oma = tumour; so-called because it contains fluid."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "A 3-year-old boy is brought into the GP practice by his father. The child has had a yellowish discharge from his right nostril for the last 3 days. Examination of the nostril is difficult as the child is distressed, but you see what appears to be a small piece of plastic.\nWhich of the following would you do?",
            "options": [
                "A. Continue to try to remove the foreign body yourself",
                "B. Give oral antibiotics and see the child in a week",
                "C. Perform cauterization",
                "D. Perform nasal packing",
                "E. Refer to ENT on call to remove foreign body"
            ],
            "answer": "E",
            "explanation": "It is a common occurrence for children to insert foreign bodies into the nose and, after recovering from the initial trauma, forget that it is there! The foreign body is usually found anterior to the middle turbinate. A for-eign body in the nostril can result in chronic inflammation, presenting with a foul-smelling, blood-stained purulent discharge. Complications of intranasal foreign bodies include respiratory compromise, aspiration and localized infection which can potentially spread (e.g. meningitis). Rarely a foreign body may present with myiasis (infestation of tissue with fly larvae - maggots!). It is important therefore to remove intranasal foreign bodies; however this must be done by an experienced clinician as there is risk of causing further mucosal damage and pushing the object further into the nasal passage. Removal must be carried out under appropriate sedation (topical lidocaine) with the child appropriately restrained and with the foreign body under direct visualization. Phenylephrine is often administered intranasally to reduce oedema and bleeding. A variety of techniques may be used to remove objects, including forceps and suction. Attempts can be made to expel the object by pressing on the contralat-eral nostril and asking the child to blow through the nose forcefully.\nNasal packing is used in cases where epistaxis is not controlled by direct pressure and is contraindicated here as it would force the object further into the nose. Cauterization may be chemical (silver nitrate) or electrical and is a treatment option in severe epistaxis."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "A 24-year-old woman presents to the emergency department complaining of a 2-day history of lower abdominal pain with associated foul-smelling vaginal discharge. On examination, she is tender and guarding in both the suprapubic region and the right iliac fossa. A urine dipstick shows leukocytes and protein.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Appendicitis",
                "B. Ectopic pregnancy",
                "C. Mittelschmerz",
                "D. Pelvic inflammatory disease",
                "E. Urinary tract infection"
            ],
            "answer": "D",
            "explanation": "Acute pelvic inflammatory disease (PID) is caused by ascending infec-tion from the vagina or cervix causing inflammation of the upper repro-ductive tract. It commonly presents in young women and affects 2% of women in their lifetime. PID is usually caused by sexually transmitted infections, such as Chlamydia trachomatis and Neisseria gonorrhoeae (>80% of cases), but may also be caused iatrogenically, e.g. by insertion of intra-uterine devices and following termination of pregnancy. Presenting features include lower abdominal pain, deepdyspareunia, dysuria and vaginal discharge. Diagnosis is made by taking vaginal and cervical swabs, but treatment with appropriate antibiotics is commenced immedi-ately to reduce the risk of long-term damage. A typical antibiotic regimen includes 2 weeks of ofloxacin (anti-chlamydia and gonorrhoea) and met-ronidazole (anti-anaerobes and protozoa). If there is significant systemic upset, antibiotics are administered intravenously. Approximately 20% of women have recurrence of PID. Complications are largely secondary to adhesions and include ectopic pregnancy and infertility. Some women also develop Fitz-Hugh-Curtis syndrome – right upper quadrant pain caused by inflammation of the connective tissue around the liver by the pelvic infection.\nMittelschmerz is the name given to the lower abdominal pain that occurs during the middle of the menstrual cycle. It corresponds with ovu-lation. Mittelschmerz pains are benign and experienced by at least 20% of women. Treatment is with simple analgesia.\nRemember that in any woman of child-bearing age presenting with abdominal pain, a pregnancy test must be carried out, so as not to miss an ectopic pregnancy.\nChlamydia, from Greek chlamys = cloak (as chlamydia is often 'cloaked', i.e. asymptomatic).\nMittelschmerz, from German mittel = middle + schmerz = pain ('pain that occurs mid-cycle').\nThomas Fitz-Hugh Jr, American physician (1894–1963).\nArthur Curtis, American gynaecologist (1881–1955)."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "A 64-year-old woman who was conservatively treated in plaster for a Colles fracture re-presents to the fracture clinic 2 weeks after plaster removal complaining of a burning pain in the whole hand. On examina-tion, the hand is slightly swollen, red and shiny. There is a reduction in all hand and finger movements.\nWhich of the following is most likely to be the cause of her symptoms?",
            "options": [
                "A. Carpal tunnel syndrome",
                "B. Compartment syndrome",
                "C. Malunion of the fracture",
                "D. Rupture of the extensor pollicis longus",
                "E. Sudeck atrophy"
            ],
            "answer": "E",
            "explanation": "A Colles fracture is a fracture of the distal radius within 2.5 cm of the wrist, associated with dorsal displacement and angulation of the distal fragment. Sudeck atrophy is a reflex sympathetic dystrophy that can affect any limb after injury and can occur in up to 30% of people with Colles fracture. It presents with a persistent burning pain associated with red-ness, swelling and warmth of the affected limb, which in the later stages can become pale and atrophied. Due to sympathetic stimulation there may be excessive sweating over this area. Active treatment with physio-therapy is required in the first instance. Carpal tunnel syndrome is caused by compression of the median nerve at the wrist and causes pain and numbness over the medial three and a half fingers with no skin changes. Compartment syndrome would be a much earlier complication of a frac-ture, usually caused by swelling within a tight plaster cast. Extensor pol-licis longus rupture is caused by repetitive trauma over a bony fragment or by local ischaemia, and would result in the patient not able to lift the thumb when the hand is placed flat on a table. Malunion would result in persistent deformity of the wrist.\nPaul Herman Martin Sudeck, German surgeon (1866–1945).\nAbraham Colles, Irish surgeon (1773–1843)."
        },
        {
            "id": 26,
            "question_type": "mcq",
            "question": "A 26-year-old man has been referred to the fracture clinic with instabil-ity of the left knee. His symptoms followed a football injury in which he heard a 'pop' in his knee while being tackled. He tells you that he attended the emergency department immediately and a large amount of blood was drained from the knee.\nOn examination which of the following would you expect to find?",
            "options": [
                "A. Positive Lachman test",
                "B. Positive McMurray test",
                "C. Positive Simmonds test",
                "D. Positive patellar apprehension test",
                "E. Valgus instability of the knee joint"
            ],
            "answer": "A",
            "explanation": "Injury to the knee associated with an acute haemarthrosis is typical of a cruciate ligament injury. The knee contains two cruciate ligaments: the anterior, which prevents forward displacement of the tibia relative to the femur; and the posterior, which prevents backward displacement. Their integrity may be investigated using the Lachman test. Here the knee is kept flexed between 20 and 30 degrees and the tibia is pulled forward with the examiner sitting on the patient's foot. Increased movement in the anterior posterior direction (by more than 4 mm) is described as a positive test and is indicative of anterior cruciate ligament dam-age. A variation of this test with the knee flexed to 90 degrees is known as the 'anterior draw test'. The collateral ligaments are assessed with the knee flexed to 30 degrees; valgus and then varus stress is applied to the joint to assess the integrity of the lateral and medial collateral ligaments respectively. Excessive opening up of the joint is seen with collateral ligament injuries. The McMurray test is used to determine meniscal injuries. With the knee flexed to 90 degrees, lateral pressure is applied to the joint and the lower leg is externally rotated. Pain or palpable crepitus is indicative of a lateral meniscal injury. When medial pressure is applied to the joint and the lower leg is internally rotated, pain indicates a medial meniscal injury. The patellar apprehension test is used to assess the 'dislocatability' of the patella by applying pressure to it. The test is positive if the patient feels anxious that the knee cap is 'going to pop out'. The Simmonds (or Thompson) test is used to test the integrity of the Achilles tendon (the patient lies face down on the bed with the feet hanging off the edge – if there is no plantarflexion of the foot when squeezing the calf, then the test is positive for likely Achilles tendon rupture).\nFranklin Adin Simmonds, English orthopaedic surgeon (1911–1983)."
        },
        {
            "id": 27,
            "question_type": "mcq",
            "question": "A 32-year-old man is involved in a high speed car accident. On arrival at the resuscitation room he complains of chest pain and is short of breath and tachycardic. He has an area of paradoxical movement of the chest wall.\nWhich of the following would be the most appropriate management measure?",
            "options": [
                "A. Analgesia and respiratory support",
                "B. Chest drain insertion",
                "C. Needle thoracocentesis",
                "D. Pericardiocentesis",
                "E. Thoracotomy"
            ],
            "answer": "A",
            "explanation": "The cause of this patient's respiratory distress is a flail chest. A flail chest is a life-threatening injury caused by high impact trauma resulting in two or more consecutive ribs being broken in two or more places. That seg-ment of the chest wall then moves independently, moving in on inspira-tion and out on expiration – ‘paradoxical motion' (i.e. the opposite of what the remainder of the intact chest wall is doing). Flail chests are almost invariably associated with an underlying pulmonary contusion and there is a risk of pneumothorax from rupture of the pleura by bone ends. This injury is associated with a high mortality. It is important to make the patient comfortable, provide adequate analgesia such as intercostal nerve blocks (to encourage respiratory effort), and provide respiratory support. Depending on the degree of hypoxia, positive pressure ventilation may be required and its use has largely superseded rib fracture fixation. The mortality associated with a flail chest is largely dependent on the degree of the underlying pulmonary contusion.\nNeedle thoracocentesis is performed in the treatment of a tension pneumothorax."
        },
        {
            "id": 28,
            "question_type": "mcq",
            "question": "A 47-year-old man presents to the emergency department with a 2-day history of a painful, watery, red left eye. On examination, the cornea is injected and examination under cobalt-blue light after the instillation of fluorescein, reveals a branch-like corneal lesion.\nWhich of the following is the most likely diagnosis?",
            "options": [
                "A. Anterior uveitis",
                "B. Bacterial conjunctivitis",
                "C. Corneal abrasion",
                "D. Episcleritis",
                "E. Herpes simplex keratitis"
            ],
            "answer": "E",
            "explanation": "Herpes simplex keratitis is a common but serious infection of the cornea caused by the herpes simplex virus. It most commonly presents in adult men many years after primary infection with the herpes simplex virus, where the virus lays dormant in the trigeminal nerve. It presents with a painful, watering, light-sensitive red eye and there may be a 'scratchy' sen-sation. The detection of a branch-like lesion – the 'dendritic ulcer' which contains live virus – is pathognomonic of this condition. Herpes simplex keratitis is treated with topical aciclovir until the ulcer has healed. There is a risk of corneal scarring and blindness so this condition warrants urgent ophthalmological assessment. Steroids are contraindicated as immuno-suppression can lead to increased viral replication and the formation of a larger ulcer.\nA corneal abrasion is caused by trauma, e.g. a scratch from a contact lens or foreign body. It presents with pain, photophobia, watering and the sensation of a foreign body in the eye. They are seen clearly after fluores-cein staining. Corneal abrasions generally heal spontaneously within a few days. Topical antibiotics are generally prescribed to prevent concur-rent infection.\nAnterior uveitis (or iritis) presents with acute-onset eye pain, photo-phobia, blurred vision and lacrimation. On examination, there is likely to be circumcorneal redness, a small irregular pupil and decreased visual acuity. A layer of yellow exudate may be seen in the anterior chamber of the eye (hypopyon). In anterior uveitis the eye pain increases as the eyes converge and the pupils constrict. Anterior uveitis occurs in middle-aged and young adults and is associated with HLA-B27 joint problems (e.g. ankylosing spondylitis) and Behçet disease. Treatment is with topical ste-roids and atropine drops (to keep the pupils dilated and prevent adhesions from forming).\nEpiscleritis describes inflammation of the episclera, a thin membrane that covers the sclera. Episcleritis presents with painless reddening of the eye. It is common with autoimmune conditions, such as rheuma-toid arthritis. On examination, dilated blood vessels will be seen only in the superficial layer of the sclera. Steroid eye drops provide symptom-atic relief and aid recovery. Conjunctivitis presents with reddening and inflammation of the eye, along with lacrimation, itching and burning. Conjunctivitis can be allergic, viral or bacterial. Viral conjunctivitis often results in a watery discharge. Bacterial conjunctivitis is associated with a purulent discharge and is commonly caused by Staphylococcus or Streptococcus species. Many cases resolve spontaneously, but chloram-phenicol eye drops hasten the response. Sjögren syndrome is an autoimmune condition where antibodies act against secretory glands of the body resulting in 'dryness', including xerostomia (dry mouth) and keratoconjunctivitis sicca (ocular dryness), together known as the sicca symptoms."
        },
        {
            "id": 29,
            "question_type": "mcq",
            "question": "A 62-year-old smoker presents with a 2-week history of worsening short-ness of breath, haemoptysis and weight loss. On examination, he appears cachexic and his liver is enlarged with an irregular border.\nWhich of the following is the most likely cause of his hepatomegaly?",
            "options": [
                "A. Budd-Chiari syndrome",
                "B. Hepatocellular carcinoma",
                "C. Liver cirrhosis",
                "D. Metastatic liver disease",
                "E. Riedel lobe"
            ],
            "answer": "D",
            "explanation": "This patient has presented with symptoms suggestive of lung cancer. It is likely that the cause of his hepatomegaly is metastatic spread of the cancer. The majority of malignant tumours of the liver are metastatic (second-ary tumours), spreading from the lung, breast, gastrointestinal tract and prostate. Tumour deposits are often large and multiple giving a 'craggy' liver. Haematological malignancies such as leukaemia may also infiltrate the liver and present with hepatomegaly, although here the liver would be homogenously enlarged.\nHepatocellular carcinoma is the most common primary malignancy of the liver (90%). The majority of cases arise from a background of liver cir-rhosis (e.g. alcohol, hepatitis B). Other causes include exposure to aflatox-ins (toxins made by the fungus Aspergillus, which is found in soil and in grains) and schistosomiasis. Presentations include jaundice, ascites and nodular, painful hepatomegaly. Hepatocellular carcinoma is associated with the tumour marker alpha-fetoprotein. Diagnosis is easily confirmed with appropriate imaging (ultrasound or CT). The prognosis is poor (aver-age survival being less than 6 months). Curative options include resection of the tumour or a liver transplant.\nBudd-Chiari syndrome is characterized by the triad of abdominal pain, hepatomegaly and ascites caused by venous flow obstruction secondary to thrombosis of the hepatic vein (note: not the hepatic portal vein). Risk factors include thrombophilias, malignancy, trauma and the oral contra-ceptive pill. Diagnosis may be made on Doppler ultrasound scanning and venography. Treatment includes addressing the underlying cause, throm-bolysis and surgery. A Riedel lobe is a tongue-like projection extending from the inferior border of the right side of the liver. It is a normal ana-tomical variant which may be mistaken for a pathologically enlarged liver or renal mass.\nGeorge Budd, English physician (1808–1882).\nHans Chiari, Austrian pathologist (1851–1916).\nBernhard Moritz Carl Ludwig Riedel, German surgeon (1846–1916)."
        },
        {
            "id": 30,
            "question_type": "mcq",
            "question": "A 34-year-old woman presents to the GP with a 3-week history of left nipple discharge. She describes the discharge as thick and greenish. On examination, no mass is palpable within the breast. A beta-hCG urine test is negative.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Breast cancer",
                "B. Duct ectasia",
                "C. Intraductal papilloma",
                "D. Lactating breast",
                "E. Prolactinoma"
            ],
            "answer": "B",
            "explanation": "In duct ectasia, the mammary ducts dilate and fill with a stagnant greeny-brown 'cheesy' secretion. This fluid may discharge from the nipple and irritate the surrounding areola skin ('periductal mastitis'). Fibrosis of the duct eventually occurs, leading to nipple retraction. This condition is much commoner in smokers. On examination, a subareolar mass (the dilated, filled ducts) may be palpable. Management is by stopping smok-ing and surgical excision of the major ducts (Hadfield procedure)."
        },
        {
            "id": 31,
            "question_type": "mcq",
            "question": "A 1-day-old baby girl is having repeated bile-stained vomiting. Her mother was noted to have polyhydramnios during the pregnancy. An abdominal X-ray reveals gas in the stomach and first part of the duode-num, but nowhere else in the abdomen.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Choledochal cyst",
                "B. Duodenal atresia",
                "C. Oesophageal atresia",
                "D. Pyloric stenosis",
                "E. Renal agenesis"
            ],
            "answer": "B",
            "explanation": "Duodenal atresia describes a complete obliteration of the duodenal lumen which occurs during embryonic development. It presents within the first 24 hours of life with bile-stained vomiting. It has an incidence of 1/6000 and affects males and females alike. There is an association with trisomy 21 (Down syndrome). Due to intestinal obstruction, the fetus is not able to swallow amniotic fluid, resulting in polyhydramnios. Diagnosis is con-firmed by the presence of a double-bubble sign on the abdominal X-ray. This represents the presence of air in the stomach and proximal duode-num only, and not in the distal intestines. Definitive surgery in the neo-natal period is required (duodeno-duodenostomy).\nCholedochal cysts are a congenital abnormality of the bile ducts and may show a similar bubble appearance on imaging. However they do not result in polyhydramnios. Oesophageal atresia does cause polyhydramnios and presents in the neonatal period with excessive drooling and an inability to swallow. A chest X-ray is the first line of investigation. Renal agenesis (failure of development of the kidneys) results in oligohydramnios (deficiency of amniotic fluid) rather than polyhydramnios."
        },
        {
            "id": 32,
            "question_type": "mcq",
            "question": "A 73-year-old man presents to the emergency department with sudden-onset right-sided back pain radiating to the abdomen. He has a past medi-cal history of hypertension and angina and is known to have gallstones. On examination, he is afebrile, haemodynamically stable and tender in the right side of the abdomen. Blood tests show normal inflammatory markers. Urine dipstick shows a trace of blood.\nWhat investigation would you perform next?",
            "options": [
                "A. CT abdomen",
                "B. Intravenous urogram",
                "C. Laparotomy",
                "D. MRI spine",
                "E. Ultrasound abdomen"
            ],
            "answer": "A",
            "explanation": "Possible causes of this patient's pain include renal calculi, leaking abdom-inal aortic aneurysm, cholecystitis and a slipped intervertebral disc. His pain appears to be typical of renal colic, radiating from back to front; however, beware of making a first diagnosis of renal colic in the elderly, especially in a patient with known atherosclerotic disease. Rupturing abdominal aortic aneurysms can present in the same way. Therefore, as the patient is otherwise stable, it is safer to get a CT of the abdomen which would pick up either pathology instead of wasting time with an intrave-nous urogram. CT-KUB (kidney, ureter, bladder) is the gold standard investigation for diagnosing renal stones.\nAn ultrasound is not indicated as he is known to have gallstones; how-ever, the normal inflammatory markers would not suggest cholecystitis. If this patient was haemodynamically unstable, urgent resuscitation and laparotomy would be indicated."
        },
        {
            "id": 33,
            "question_type": "mcq",
            "question": "A 21-year-old man presents to the emergency department with a collapse that was preceded by dizziness and right arm pain. He was sanding a table at home when the event happened. On examination, he has a bony lump palpable in the right side of the neck. Neurological and vascular examina-tions are otherwise normal.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Cerebrovascular attack",
                "B. Deep venous thrombosis",
                "C. Embolus",
                "D. Subclavian steal syndrome",
                "E. Transient ischaemic attack"
            ],
            "answer": "D",
            "explanation": "This man has a cervical rib which is impinging on his right subclavian artery. When the arm is exerted it requires more blood but, because the subclavian artery is narrowed, the blood has to come from elsewhere. Instead it is 'stolen' from the vertebral artery which is meant to supply the brain. This is why, in cases of subclavian artery impingement, when the arm is over-used and blood is diverted away from the vertebral artery, a transient loss of consciousness occurs. This is known as the subclavian steal syndrome."
        },
        {
            "id": 34,
            "question_type": "mcq",
            "question": "A 42-year-old woman is taken to theatre after fracturing her left hip in a road traffic collision. Postoperatively, it is noticed that she is unable to flex or extend her left foot. There is no sensation present below the left knee except over the medial aspect of the leg.\nWhich nerve has most likely been affected?",
            "options": [
                "A. Common peroneal nerve",
                "B. Femoral nerve",
                "C. Sciatic nerve",
                "D. Sural nerve",
                "E. Saphenous nerve"
            ],
            "answer": "C",
            "explanation": "The sciatic nerve can be damaged with fracture dislocations of the hip or by misplaced gluteal injections. Sciatic nerve palsy results in paralysis of the hamstrings and all the muscles of the leg and foot. Sensation is lost below the knee except for the medial leg (supplied by the saphenous nerve, a branch of the femoral nerve) and the upper calf (supplied by the poste-rior femoral cutaneous nerve).\nSciatic, from Latin sciaticus = hip."
        },
        {
            "id": 35,
            "question_type": "mcq",
            "question": "A 33-year-old man comes to see you at the GP surgery complaining of increasing difficulty passing urine with poor flow. He has previously been treated for gonorrhoea on three separate occasions.\nWhich of the following investigations would be most useful in estab-lishing the cause of his symptoms?",
            "options": [
                "A. Intravenous urogram",
                "B. Ultrasound of the renal tract",
                "C. Urethral swabs",
                "D. Urethrography",
                "E. Urinary flow rates"
            ],
            "answer": "D",
            "explanation": "This patient has presented with obstructive urinary symptoms, the likely cause being a urethral stricture. Urethral strictures are most commonly caused iatrogenically, e.g. during catheterization and instrumentation, but can also be caused by inflammation secondary to infections such as gonorrhoea and nonspecific urethritis. Balanitis xerotica obliterans is a scarring disease of the glans and foreskin which can extend up the urethra and cause troublesome urethral strictures at its advanced stage. Some strictures may be congenital in origin. Urethrography – in which a dye is inserted through the distal end of the meatus – is most useful in diagnosing strictures, as well as determining their length and number. Urinary flow rates will show an obstructive picture but will not necessar-ily be specific to the diagnosis of a stricture. If the stricture has been caus-ing significant obstruction, renal ultrasound scan would show bilateral hydronephrosis, as would an intravenous urogram. The patient would also have a high post-void residual volume due to incomplete bladder emptying. Urethral strictures can be treated by dilatation, urethrotomy (incision made in the stricture), and in severe cases, urethroplasty (com-plete excision and repair of the narrowed urethra, with or without use of a tissue graft). Diversion surgery can also be performed, which would commonly take the form of a suprapubic catheter."
        },
        {
            "id": 36,
            "question_type": "mcq",
            "question": "A 76-year-old man presents to the emergency department after a fall. He now feels weak in his arms and legs. On examination, he has mild weak-ness in both arms, and a moderate weakness in the legs. He is unable to feel pain in his legs.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Anterior cord syndrome",
                "B. Brown-Séquard syndrome",
                "C. Central cord syndrome",
                "D. Posterior cord syndrome",
                "E. Syringomyelia"
            ],
            "answer": "A",
            "explanation": "In general, the spinal cord is made up of three tracts on either side. A use-ful, simplified model of the spinal cord is as follows: the spinothalamic tract makes up the anterior third of the spinal cord and provides pain and temperature fibres to the contralateral side. The corticospinal tract is the middle third of the spinal cord and provides motor fibres to the ipsilat-eral side. Finally, the dorsal columns are found along the posterior length of the spinal cord and provide vibration sense and proprioception to the ipsilateral side.\nThe anterior cord syndrome occurs secondary to a flexion-compression injury. There is loss of neurological function of the anterior two-thirds of the spinal cord, namely the spinothalamic (pain, temperature) and cor-ticospinal (motor) tracts. There is greater motor loss in the legs than the arms. The anterior cord syndrome has the worst prognosis of all spinal cord lesions.\nCentral cord syndrome is the most common spinal cord lesion. It occurs in older people with cervical spondylosis who sustain a hyperex-tension injury. There is a flaccid weakness of the arms, but motor and sensory fibres to the lower limb are comparatively preserved as these are located more peripherally in the spinal cord. Central cord lesions have a fair prognosis.\nHyperextension injuries can result in loss of dorsal column function (posterior cord syndrome). These injuries are very rare and the motor and sensory function is preserved. Gait is impaired due to impaired proprio-ception. The prognosis of posterior cord lesions is good."
        },
        {
            "id": 37,
            "question_type": "mcq",
            "question": "A 54-year-old man presents with a recent change in bowel habit associ-ated with a constant desire to defaecate. He has lost two stone in weight over the last month and feels lethargic.\nWhich of the following tumour markers would be associated with his condition?",
            "options": [
                "A. CA 125",
                "B. CA 15-3",
                "C. CA 19-9",
                "D. CEA",
                "E. PSA"
            ],
            "answer": "D",
            "explanation": "This man presents with a change in bowel habit, tenesmus and fatigue – symptoms typical of colorectal cancer. Carcinoembryonic antigen (CEA) is a tumour antigen which is associated with colorectal cancer. It is not specific or sensitive enough to be used by itself to make a diagnosis but can be used as a screening tool and to monitor relapse following treat-ment. CA 15-3, CA 125 and CA 19-9 are all monoclonal antibodies. CA 15-3 is associated with breast cancer, CA 125 with ovarian cancer and CA 19-9 with pancreatic and hepatobiliary cancers. Prostate specific antigen (PSA) is used in the screening and monitoring of prostate cancer.\nTenesmus, from Greek, tenein = to strain or stretch.\nFor a list of tumour markers, see the question ‘Tumour markers (1)'."
        },
        {
            "id": 38,
            "question_type": "mcq",
            "question": "An 8-year-old boy is brought into the emergency department with a 3-day his-tory of right-sided testicular pain. His mother tells you he was off school a week ago with complaints of feeling unwell and jaw pain on eating. On examina-tion, there is unilateral generalized swelling and tenderness of the right testis.\nWhich of the following treatment options is most appropriate?",
            "options": [
                "A. Analgesia and bed rest",
                "B. Antibiotics",
                "C. Hydrocelectomy",
                "D. Orchidectomy",
                "E. Reduction and fixation of testis"
            ],
            "answer": "A",
            "explanation": "The history in this scenario is suggestive of mumps orchitis. Mumps orchitis is most common in pre-pubescent boys and occurs in around 20%, 4-7 days after parotitis. Orchitis is unilateral in 70% of cases. Presentation is with testicular pain, scrotal oedema and general sys-temic symptoms, e.g. fever and malaise. The diagnosis can be made on the history and examination alone, although it is important to exclude torsion if the cause is unclear (even if the only means is by scrotal explo-ration). Treatment is supportive and comprises adequate analgesia, bed rest, local ice packs and scrotal support. An associated tense hydrocele (collection of fluid within the tunica vaginalis) may need to be drained. Mumps orchitis is complicated by testicular atrophy in at least 50% and bilateral involvement may result in infertility. There is controversy about the association of mumps orchitis with the development of testicular cancer. Other causes of viral orchitis include infectious mononucleosis and varicella. Bacterial orchitis is most common in older males. Causes include sexually transmitted infections (e.g. chlamydia) and urinary sta-sis (as occurs in benign prostatic hypertrophy). Bacterial orchitis usu-ally also involves the epididymis – epididymo-orchitis. Treatment is with appropriate antibiotics (a urine sample and urethral swabs must be taken as indicated)."
        },
        {
            "id": 39,
            "question_type": "mcq",
            "question": "A 31-year-old man presents with episodic perianal pain for more than a year. He has occasionally noticed some discharge. On examination, a pit is seen in the lower natal cleft. It is filled with hair and a mini-mal amount of discharge is produced when pressure is applied to the region.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Perianal abscess",
                "B. Perianal haematoma",
                "C. Pilonidal sinus",
                "D. Proctalgia fugax",
                "E. Rectal prolapse"
            ],
            "answer": "C",
            "explanation": "A pilonidal sinus is a sinus that contains a tuft of hair. It is typically found within the natal cleft and is associated with dark hair, hirsutism and obe-sity. Pilonidal sinuses are most common in men. They may also occur in the web spaces of the fingers of barbers and farmers. The sinuses can cause pain and inflammation, and can present acutely as an abscess. Small sinuses may only require antibiotics, whereas larger problematic sinuses can be drained or excised and laid open. If a superimposing abscess has formed this must be drained and left to heal by secondary intention.\nRectal prolapse presents with the sensation of something coming down the back passage on defaecation; in the initial stages it may reduce spon-taneously or with manual pressure. Proctalgia fugax is the name used to describe intermittent short-lasting spasms of rectal pain, which is unre-lated to defaecation and typically worse at night. Examination of the patient is normal. A perianal haematoma occurs acutely when straining at stool and is caused by the rupture of a vein beneath the anal skin. A blu-ish bulge will be seen on examination and evacuation of the haematoma may be required."
        },
        {
            "id": 40,
            "question_type": "mcq",
            "question": "A 68-year-old man attends the emergency department following two epi-sodes of weakness in the left side of his face, each lasting 2 hours. These resolve spontaneously and completely. Examination is unremarkable except for a left carotid bruit.\nWhich of the following steps would you take next?",
            "options": [
                "A. Start aspirin, advise smoking cessation and refer for outpatient CT head",
                "B. Start aspirin, advise smoking cessation and refer for outpatient carotid Doppler",
                "C. Start aspirin and refer for urgent inpatient assessment",
                "D. Start aspirin and refer to ophthalmology",
                "E. Start steroids, advise smoking cessation and refer for CT head"
            ],
            "answer": "C",
            "explanation": "This patient has presented with a history of transient ischaemic attacks (TIAs), a focal neurological deficit of vascular origin that resolves com-pletely within 24 hours. There is a risk of stroke of up to 15% a year following TIAs. Modifiable risk factors must be addressed (smoking, hypertension, diabetes) and low dose aspirin commenced. Carotid bruits are not a reliable indicator of the extent of internal carotid stenosis and so need to be formally investigated by Doppler studies. A stenosis of 70–99% is an indication for surgery in this case.\nAny patient presenting with a TIA should be risk stratified using the ABCD2 score as follows:\nA Age >65 (1 point)\nB Blood pressure >140 systolic or >90 diastolic (1 point)\nC Unilateral weakness (2 points), speech disturbance (1 point)\nD Duration >60 minutes (2 points), 10–59 minutes (1 point)\nE Diabetes (1 point)\nOf a total score of 7, patients with a score of 4 or more require admission for inpatient assessment regarding suitability for carotid endarterectomy. Similarly, patients with two or more episodes of TIA in quick succes-sion ('crescendo TIA') also require urgent assessment regardless of their ABCD2 score. The patient in this scenario has an ABCD2 score of 5, and has had two episodes in quick succession, so requires inpatient assess-ment and urgent carotid endarterectomy if suitable."
        },
        {
            "id": 41,
            "question_type": "mcq",
            "question": "A 65-year-old woman attends the GP practice. Yesterday, while garden-ing, she experienced sudden-onset pain in her right shoulder. On exami-nation, there is some bruising of the upper arm, and on flexion of the elbow a bulge is seen in the upper arm.\nWhich of the following is the most likely diagnosis?",
            "options": [
                "A. Distal rupture of biceps tendon",
                "B. Proximal rupture of biceps tendon",
                "C. Rotator cuff tear",
                "D. Rupture of triceps",
                "E. Supraspinatus tendonitis"
            ],
            "answer": "B",
            "explanation": "The biceps muscle has two sites of origin at the shoulder (the long and short head) and inserts into the tuberosity of the radius. Rupture of the biceps most commonly occurs proximally, at the site of origin of the long head, and presents with acute pain and the sensation of a 'snap'. After this, the retracted muscle is seen as a bulge in the upper arm, most obvious on flex-ion of the elbow (the 'Popeye muscle'). Proximal rupture of the biceps is most commonly seen after middle age in those with degenerative changes in the biceps tendon. In the young it is most often associated with weight lifting. Treatment is largely conservative, unless the patient is young and active, as shoulder function is maintained by the short head of the biceps. Distal rupture of the biceps tendon is much rarer (5% of cases) and occurs following flexion against resistance. It presents with acute pain, swelling and bruising of the elbow. The tendon may be palpable in the antecubital fossa. Again it is most common after middle age. Unlike proximal rup-tures, treatment is largely by surgical reattachment to prevent weakness in flexion and supination.\nRupture of the triceps tendon is rare, usually occurring where there is pre-existing weakening. Causes include a fall onto the outstretched arm and pushing weights. Pain is felt acutely at the tip of the elbow, espe-cially on trying to extend the arm, and there will be marked swelling posteriorly. Treatment is largely conservative. The rotator cuff is a ring of muscles and tendons that provide stability to the shoulder girdle. It is made up of four muscles: supraspinatus, infraspinatus, subscapularis and teres minor. Rotator cuff tears typically occur in older patients fol-lowing trauma and usually involve the supraspinatus tendon. The most common site of the tear is the 'critical zone' of the supraspinatus ten-don, a relatively avascular region near its insertion. Patients present with shoulder tip pain and an inability to abduct the arm. There is localized tenderness at the lateral margin of the acromion. If the arm is abducted to above 90 degrees with assistance then the patient can sustain the abduction by action of the deltoid muscle (the 'abduction paradox'). If the arm is lowered below 90 degrees it suddenly drops (the 'drop arm' sign). Acute calcific tendonitis of the supraspinatus tendon usually occurs in younger women. Deposition of calcium hydroxyapatite crystals on the medial insertion of the supraspinatus tendon results in acute onset severe shoulder pain. The pain is worst on abduction above 120 degrees – this is different to the range of maximal pain in the impingement syndrome (see below). The pain worsens over a few hours and gradually subsides over a few days. In the impingement syndrome (a.k.a. painful arc syndrome) there is pain on arm abduction between 60 and 120 degrees only. The pain is pro-duced by mechanical nipping of a tender structure between the greater tuberosity of the humerus and the acromion process. The primary lesions that give rise to the painful arc syndrome are: incomplete tear of supra-spinatus, chronic supraspinatus tendonitis, subacromial bursitis and a crack fracture of the greater tuberosity."
        },
        {
            "id": 42,
            "question_type": "mcq",
            "question": "A 27-year-old man presents to the emergency department with a 2-hour history of severe left-sided loin pain which woke him from sleep. The pain is constant but occasionally dulls. He has been feeling sick with the pain and vomited twice. On examination, the patient is writhing in agony and has mild tenderness in the left loin only. His temperature is 36.9°C. Urine dipstick shows 2+ of blood.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Biliary colic",
                "B. Dissecting aortic aneurysm",
                "C. Pyelonephritis",
                "D. Renal cell carcinoma",
                "E. Renal colic"
            ],
            "answer": "E",
            "explanation": "Renal colic is a common presenting condition in the emergency depart-ment. There is a lifetime risk of 10% in men (it is three times less common in women) and usually presents between the ages of 20 and 40. Renal colic that presents in the very young or older population is usually the result of a metabolic abnormality. Risk factors for renal colic include a family history (doubles the risk), dehydration, structural renal tract abnormalities and the use of diuretics (particularly thiazides). Particular metabolic abnormalities include increased excretion of calcium, oxalate and uric acid. The presenting symptoms include sudden-onset pain in the loin/lumbar region which radiates anteriorly to the groin and geni-talia, associated with irritative urinary symptoms (frequency, dysuria and haematuria). Nausea and vomiting often occur. Typically the patient moves around, unable to get comfortable. There may be no particular signs on examination. In uncomplicated renal colic the patient will be afebrile. Investigation must include a urine dipstick (85% have micro-scopic haematuria) and bloods for urea and electrolytes. Appropriate imaging includes a KUB (kidney, ureter, bladder) X-ray (up to 90% of calculi are visible), ultrasound scanning and an intravenous pyelogram (IVP). IVP used to be the investigation of choice, but due to the risk of anaphylaxis and contrast nephropathy, spiral CT scanning (CT-KUB) without contrast has now become the 'gold standard'. Treatment of renal colic depends on the size of the stone. Small calculi (<5 mm) pass sponta-neously in 90%, medium stones (5–9 mm) in 50% and those greater than 1 cm usually require intervention. Options for stone removal include extracorporeal shock wave lithotripsy, percutaneous nephrolithotomy and ureteroscopy +/- stent insertion. The most severe complications of renal calculi occur secondary to obstruction, and include renal failure and sepsis. If there is evidence of either an infected or obstructed kidney it is a urological emergency and a cystoscopically placed retrograde ure-teric stent or a percutaneous nephrostomy may be required. Renal cell carcinoma is the most common cancer affecting the kidneys (85%). It typically presents in the fifth decade, the classic triad being haematuria, flank pain and a mass (often late in the disease). The majority of cases are picked up incidentally or on 2-week wait referrals for haematuria. Risk factors include smoking, a family history and von Hippel-Lindau syndrome. Treatment of localized disease is with a nephrectomy. The survival in localized disease is 85% at 5 years, decreasing to 10% with metastatic disease. Pyelonephritis is inflammation of the kidney caused by an ascending bacterial urinary tract infection. It is most common in young women. It presents with urinary frequency, dysuria, fever and rig-ors. There is often marked tenderness in the renal angle. Treatment is with antibiotics."
        },
        {
            "id": 43,
            "question_type": "mcq",
            "question": "A 64-year-old woman presents to the GP complaining of pain and dif-ficulty in swallowing. It is becoming progressively worse and now she complains it is even hard to drink water. On examination, she appears cachexic.\nWhich of the following is the most likely diagnosis?",
            "options": [
                "A. Oesophageal candidiasis",
                "B. Oesophageal carcinoma",
                "C. Oesophageal spasm",
                "D. Oesophageal stricture",
                "E. Oesophageal web"
            ],
            "answer": "B",
            "explanation": "A history of rapidly progressive dysphagia with weight loss in a patient of this age (60-80 years) suggests a diagnosis of oesophageal carcinoma. Oesophageal carcinomas are mostly of the squamous cell type and risk factors for development include male sex, smoking, achalasia, alcohol use, gastro-oesophageal reflux disease, Barrett's oesophagus, coeliac dis-ease and Chinese ethnicity. Squamous cell carcinomas of the oesophagus occur most frequently in the mid-oesophagus and spread of tumours is to local structures, such as the trachea and recurrent laryngeal nerve (blood metastases occur late). Adenocarcinomas of the oesophagus are much rarer and arise in the lower third of the oesophagus. They are associated with long-standing gastrooesophageal reflux and the development of Barrett's oesophagus (gastric/intestinal metaplasia of the distal oesopha-gus). The diagnosis of oesophageal carcinoma is by endoscopy and biopsy, with a CT scan performed later to stage the disease. A barium swallow will show an irregular filling defect. Treatment is dependent on the size and spread of the tumour. A cura-tive option is oesophagectomy with re-anastomosis of the stomach to the upper oesophagus. Patients with unresectable tumours may be given palliative stenting or radiotherapy to improve dysphagia. Oesophageal tumours have a poor prognosis. Oesophageal candidiasis results from infection of the oesophagus by Candida albicans. It commonly arises in the setting of immunosup-pression (e.g. acquired immunodeficiency syndrome, diabetes or ste-roid use) or in those who have recently used antibiotics. Patients often complain of dysphagia, odynophagia and a hoarse voice. Raised white plaques which can be removed by the endoscope are seen on endoscopy. Treatment is with antifungals such as fluconazole. Oesophageal spasm is a disorder of oesophageal motility. It is subdivided into a diffuse type', where contractions are uncoordinated (causing dysphagia and regur-gitation), and a 'nutcracker type', where contractions are coordinated but occur at a higher than normal amplitude (causing odynophagia). Oesophageal spasm is most common in elderly women. Diagnosis is by barium swallow and manometry. Oesophageal webs are thin membranes of tissue which form within the oesophagus (some may be congenital) and cause dysphagia (worse with solids) and reflux. They are most com-mon in Caucasian women. The Plummer-Vinson (or Paterson-Brown-Kelly) syndrome describes the presence of an oesophageal web with chronic iron deficiency anaemia. It is a risk factor for the develop-ment of oesophageal carcinoma. Oesophageal strictures may be benign or malignant. Causes include intraluminal pathology (malignancy, fibrosis secondary to long-standing GORD), extra-luminal pathology (compressive tumours of the bronchus) and abnormalities in peristalsis (oesophageal spasm).\nNorman Rupert Barrett, British surgeon (1903–1979)."
        },
        {
            "id": 44,
            "question_type": "mcq",
            "question": "An 8-year-old boy is brought in to the GP practice by his mother. He has been complaining of pain in his right hip for a few weeks and has started walking with a limp. Examination reveals limited range of movement at the hip. An X-ray of the pelvis shows a collapsed femoral head on the right.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Femoral osteomyelitis",
                "B. Perthes disease",
                "C. Proximal femoral fracture",
                "D. Slipped upper femoral epiphysis",
                "E. Transient synovitis"
            ],
            "answer": "B",
            "explanation": "Perthes disease (or Legg-Calvé-Perthes disease) describes idiopathic avas-cular necrosis of the femoral head, which is followed by revascularization and reossification over a period of 2–3 years. It usually occurs between the ages of 5 and 10 and is five times more common in boys. In 10% of patients the condition is bilateral. Presentation is insidious with hip pain (which may be referred to the groin or knee) and a limp. Examination may reveal a reduced range of movements in all directions of the hip joint, secondary to irritation of the capsule, although internal rotation and abduction are usually more affected. There may be a fixed flexion deformity of the oppo-site leg (to compensate for shortening of the affected leg) and there may be some muscle wasting on the affected side. X-ray will show a collapsed, irregular, sclerotic femoral head (secondary to osteopenia of surround-ing bone) with an increased joint space. MRI may be more sensitive in detecting changes early on in the condition. Treatment depends upon the extent of disease and the amount of femoral head involved. Mild disease may be treated conservatively with bed rest, analgesia and repeat imag-ing to monitor progress. More severe disease may be treated by abduction bracing/splinting or by femoral osteotomy. The prognosis is worse the older the child, in girls and if more than half the femoral head is affected. Complications include early osteoarthritis and coxa magna (overgrowth of the femoral head).\nGeorg Clemens Perthes, German surgeon (1869–1927)."
        },
        {
            "id": 45,
            "question_type": "mcq",
            "question": "A 32-year-old man presents to the GP with pain in the right foot which is exacerbated by weight bearing. He tells you he jogs on a daily basis. On examination, he has a tender swelling over the second metatarsal. An X-ray of his foot shows a periosteal reaction over the neck of the second metatarsal.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Gout",
                "B. Hallux rigidus",
                "C. Jones fracture",
                "D. Lisfranc fracture",
                "E. March fracture"
            ],
            "answer": "E",
            "explanation": "March fractures are undisplaced hairline fractures caused by repetitive stress, e.g. marching or running. They commonly occur near the neck of the second or third metatarsal. X-ray may be normal in a majority of cases, although a periosteal reaction of callus formation may be seen. Treatment is with analgesia and the pain resolves after a few weeks when fracture union occurs. A Jones fracture is a fracture of the proximal end of the fifth metatar-sal. A Lisfranc fracture is a fracture dislocation of the midfoot, disrupting the joint between the second to fourth metatarsals and the underlying cuneiforms. Hallux rigidus is the name given to osteoarthritis of the first metatarsophalangeal joint. It presents with localized pain, which then radiates over the foot, and stiffness of the big toe. It is more common in active individuals."
        },
        {
            "id": 46,
            "question_type": "mcq",
            "question": "A 62-year-old woman presents with a large painless, ulcerated lesion over her lower leg. It has been developing gradually over an area of scarring where she sustained a burn several years ago.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Hypertrophic scars",
                "B. Infected ulcer",
                "C. Keloid scar",
                "D. Marjolin ulcer",
                "E. Perforated ulcer"
            ],
            "answer": "D",
            "explanation": "A Marjolin ulcer is an aggressive but slow-growing squamous cell car-cinoma that arises within an area of previously traumatized skin (e.g. burns, scars, chronic wounds). Lesions are typically raised, ulcerated and painless, and invade locally. Diagnosis is made on biopsy and treatment is by wide local excision.\nHypertrophic and keloid scars occur when there is an overgrowth of fibrous tissue within a healing scar. Hypertrophic scars present as raised lesions which occur within the boundary of the original scar whereas keloid scars extend beyond the original scar. Symptoms include pain and pruritus, and keloid scars in particular may cause significant cosmetic concern to the patient. If scarring occurs across joints, contractures may result in loss of joint function. Keloid and hypertrophic scarring is most common in those of Afro-Caribbean origin and occurs most commonly on the face, trunk and back. Hypertrophic scars have the ability to spon-taneously regress.\nAn ulcer may be defined as a breach in the skin or mucous membrane. Complications of ulcers in general include infection (as occurs in venous ulcers), perforation (as occurs in peptic ulcers) and malignant transfor-mation (as above).\nJean Nicholas Marjolin, French surgeon (1780–1850)."
        },
        {
            "id": 47,
            "question_type": "mcq",
            "question": "A 27-year-old woman presents to the GP with a 2-month history of wors-ening swelling in both legs. On examination, her lower legs and thighs are very oedematous and firm. The skin is thick, hard and grey in colour.\nWhat is the most likely diagnosis?",
            "options": [
                "A. Filariasis",
                "B. Hereditary angioedema",
                "C. Lymphoedema praecox",
                "D. Lymphoedema tarda",
                "E. Milroy disease"
            ],
            "answer": "A",
            "explanation": "Filariasis is a cause of secondary lymphoedema. Filariasis (a.k.a. elephan-tiasis) is characterized by thickening of the skin and subcutaneous tissues, often of the legs and genitals. It is caused by infection and obstruction of lymph vessels by the parasite Wuchereria bancrofti in tropical countries. The infection is transmitted by mosquito bites. Elephantiasis, from the Greek elephantas = elephant; describing the appearance of the limbs in the affected patient."
        },
        {
            "id": 48,
            "question_type": "mcq",
            "question": "A 56-year-old woman presents to the GP complaining of episodes of severe retrosternal chest pain after eating, associated with a bitter taste in her mouth. She has no difficulty or pain when swallowing. Examination is unremarkable.\nWhich of the following investigations would be most useful in estab-lishing the cause of her symptoms?",
            "options": [
                "A. 24-hour lower oesophageal pH",
                "B. Barium swallow",
                "C. Erect chest X-ray",
                "D. Manometry",
                "E. Upper gastrointestinal endoscopy"
            ],
            "answer": "A",
            "explanation": "This patient has presented with symptoms of gastro-oesophageal reflux disease (GORD). GORD arises because of an abnormally low resting tone of the lower oesophageal sphincter, allowing the reflux of gastric contents back into the oesophagus. Symptoms include retrosternal and epigastric burning pain, waterbrash and nocturnal cough. Symptoms are exacer-bated by eating, bending forwards and lying down. GORD is associated with hiatus hernias, smoking, pregnancy and being overweight. Long-standing GORD can lead to oesophagitis, stricture formation, iron defi-ciency anaemia and adenocarcinoma of the oesophagus. The diagnosis of reflux can be made by measuring the lower oesophageal pH. A pH probe is inserted into the lower oesophagus and left for 24 hours – if the pH is less than 4 for more than 4 hours then oesophageal reflux is confirmed. Management of reflux can be conservative (weight loss, diet changes, antacids), medical or surgical. Drugs used to manage GORD include proton pump inhibitors such as omeprazole. Surgical repair of medically resistant reflux is with Nissen's fundoplication, where the fun-dus of the stomach is wrapped around the lower oesophagus. A barium swallow provides images of the anatomy and function of the upper Gl tract, a chest X-ray may occasionally reveal a hiatus hernia (air-fluid level behind the heart), endoscopy allows direct visualization of the upper Gl tract, and manometry assesses the pressures within the oesophagus.\nRudolph Nissen, German surgeon (1896–1981)."
        },
        {
            "id": 49,
            "question_type": "mcq",
            "question": "The orthopaedic surgeon on call has been called down to the emergency department to see a patient who fractured his elbow 3 weeks ago and is suspected to have an ulnar nerve injury.\nWhat would she expect to find on examination?",
            "options": [
                "A. Complete paralysis of the forearm",
                "B. Wasting of the hand, except the thenar eminence, and clawing of the ring and little fingers",
                "C. Wasting of the thenar eminence and clawing of the index and middle fingers",
                "D. Wasting of the thenar eminence with inability to abduct the thumb",
                "E. Wrist drop and loss of sensation over the anatomical snuffbox"
            ],
            "answer": "B",
            "explanation": "The ulnar nerve is susceptible to damage in elbow fractures as it runs behind the medial epicondyle. An ulnar nerve lesion at the elbow would result in: wasting of the flexor carpi ulnaris and flexor digitorum, wast-ing of the small muscles of the hand except the thenar eminence and lat-eral two lumbricals (supplied by the median nerve), and clawing of the ring and little fingers. There will be an inability to abduct and adduct the fingers (caused by paralysis of the interossei), an inability to adduct the thumb (as suggested by Froment sign where one cannot hold a piece of paper in a pinching grip between thumb and index finger), an inability to abduct the little finger (paralysis of hypothenar muscles), and loss of sensation over the ulnar one and a half fingers. With more distal ulnar lesions, the clawing is more marked (the ulnar paradox). This is because the flexor digitorum profundus, which is supplied by the proximal ulnar nerve, is intact in distal lesions, resulting in more flexion of the interpha-langeal joints and an exacerbated flexion deformity. With ulnar lesions at the wrist, sensation is not affected due to sparing of the dorsal cutaneous branch. Wrist drop with lack of sensation over the anatomical snuff box is seen in radial nerve injuries, while wasting of the thenar eminence and inability to abduct the thumb occur in median nerve injuries."
        },
        {
            "id": 50,
            "question_type": "mcq",
            "question": "A 32-year-old woman who has been undergoing fertility treatment pres-ents with a 2-hour history of right-sided lower abdominal pain, associ-ated with nausea. On direct questioning she tells you she has had several similar, but less severe, episodes in the past. She has had no other genito-urinary symptoms. Her pregnancy test is negative.\nWhich of the following is the most likely diagnosis?",
            "options": [
                "A. Appendicitis",
                "B. Ectopic pregnancy",
                "C. Pelvic inflammatory disease",
                "D. Torsion of the ovary",
                "E. Urinary tract infection"
            ],
            "answer": "D",
            "explanation": "Torsion of the ovary is an unusual but important cause of an acute abdo-men in women. It commonly occurs in young women (70% are under the age of 30) and up to 20% occur during pregnancy. In the majority of cases torsion is associated with an abnormally enlarged ovary (which may be benign or malignant). Other associations include anatomical abnormali-ties, e.g. abnormally long fallopian tubes, and fertility treatment where excessive cyst stimulation causes generalized enlargement of the ovary. Ovarian torsion more frequently occurs on the right side and there may be a history of previous episodes of pain caused by intermittent twisting. Left untreated, a torted ovary will undergo necrosis causing peritonitis (with a risk of reduced future fertility). Diagnosis is largely one of exclu-sion (i.e. excluding appendicitis and ectopic pregnancy). Both ultrasound and CT scanning are useful imaging techniques; however laparoscopy will allow diagnosis and treatment in one procedure. If there are no signs of vascular compromise, peritonitis or malignancy within the ovary, the ovary may be 'untwisted' and fixed (oophoropexy). Otherwise a salpingo-oophorectomy is performed."
        }
    ]
}
{
    "chapter_name": "FLUID BALANCE AND NUTRITION",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "A 70 kg patient is 1 day following total hip replacement. He has not started eating and drinking. He is being rehydrated with dextrose/saline (4% dextrose and 0.18% saline). Which one of the following best describes this type of fluid therapy?",
            "options": [
                "A. It is an inappropriate fluid therapy for a postoperative patient",
                "B. It contains 120 mmol of Na+ ions",
                "C. Potassium supplementation is not required",
                "D. Its osmolality is almost isotonic with plasma (286 mOsm/kg)",
                "E. It has a pH of 7.35"
            ],
            "answer": "D",
            "explanation": "Its osmolality is almost isotonic with plasma (286 mOsm/kg)\nDextrose/saline is a useful fluid therapy in the early postoperative period because it does not cause salt and water overload and provides some energy to the patient. Dextrose/saline solution, otherwise known as one-fifth normal saline, has an osmolality that is nearly isotonic with plasma because of the 4% content of dextrose. It has a slightly alkaline pH and contains approximately 30 mmol of sodium and chloride ions. It does not contain K+ ions and so potassium supplementation is important if the patient is not yet established on oral intake. It predominantly replaces pure water losses that are common following surgery. It is less useful in hypovolaemic resuscitation as it is a less effective plasma expander than colloid or normal saline and in patients who are losing excess salts."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "A 22-year-old man is admitted following a stab injury to the right groin. He is bleeding profusely from the wound. His blood pressure is 80/40 mmHg and his pulse is 140 beats/min. He is agitated and mildly confused. His skin is cool and mottled. In this scenario, which is the best mode of fluid delivery?",
            "options": [
                "A. Left subclavian central line",
                "B. Long saphenous vein cut down",
                "C. Right internal jugular approach central line",
                "D. Left femoral long line",
                "E. Two wide-bore cannulae inserted bilaterally to the antecubital fossae"
            ],
            "answer": "E",
            "explanation": "Two wide-bore cannulae inserted bilaterally to the antecubital fossae\nOptimal fluid volume delivery is through large-bore access achieved with cannulae inserted into the antecubital fossae. Central lines (answers A and C) are generally long conduits with narrow lumens and are therefore less effective at delivering large volumes to hypotensive trauma patients. The same is true of long lines inserted through a femoral approach. It may be necessary to perform a long saphenous venous cut-down, but this approach should be reserved for patients where attempts to obtain standard peripheral venous access have failed."
        },
        {
            "id": "3",
            "question_type": "mcq",
            "question": "For the patient described in Question 2, which one of the following statements regarding fluid resuscitation is most correct?",
            "options": [
                "A. Hartmann's solution should not be used",
                "B. The best fluid replacement is cross-matched blood",
                "C. It is mandatory to use colloid over crystalloid",
                "D. Colloids are preferable to expand the intracellular volume",
                "E. Crystalloids should be avoided as they may cause anaphylaxis"
            ],
            "answer": "B",
            "explanation": "The best fluid replacement is cross-matched blood\nThis patient has sustained a significant vascular injury and is in class III shock. During resuscitation, the guiding principle is that the best form of fluid therapy is to replace ‘like with like'. Since he is continuing to lose blood, cross-matched blood would be the best form of fluid replacement. The transfusion should be started while arrangements are made for emergency exploration and repair of the injury.\nTwo litres of warmed Hartmann's is the ATLS standard initial resuscitation fluid given as first line therapy for trauma patients. Colloids are useful fluid therapy in hypotensive trauma patients when blood is not immediately available as they expand the intravascular compartment, but they are used following initial crystalloid therapy. Crystalloids rarely induce allergic reactions, although colloids have been known to."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "A 40-year-old man weighing approximately 70 kg is being kept nil by mouth due to small bowel obstruction. He is afebrile at 36.7 °C. Which of the following regimens best describe the patient's requirements over the first 24 hours?",
            "options": [
                "A. 1–2 mmol/kg of sodium is required",
                "B. 0.5–1 mmol/kg of potassium is required",
                "C. At least 100–1000 kcal/kg/day are required",
                "D. 2700 mL of water is required",
                "E. None of the above"
            ],
            "answer": "E",
            "explanation": "None of the above\nDespite the question stating that the patient has no overt fluid losses, this patient is likely to have significant covert losses. Patients with small bowel obstruction sequester huge volumes of fluid within their bowel (so called ‘third space losses'). In addition, the fluid lost into the bowel will be salt rich.\nTypical daily requirements for a normal, healthy adult are approximately 1–2.5 L of water, with 1–2 mmol/kg of sodium and 0.5–1 mmol/kg of potassium. The requirements of this patient are far likely to exceed this. In terms of energy requirements in this patient, in the absence of sepsis 30–40 kcal/kg/day should be sufficient. Therefore, none of the options are correct.\nIn patients such as this, the best fluid regimen would be 0.9% normal saline (150 mmol/L Na) with 20–40 mmol potassium chloride added to each litre bag. The rate of fluid therapy should be titrated to vital signs and findings on serial examinations. Additional electrolyte supplementation is often necessary, and this should be guided by serial blood tests."
        },
        {
            "id": "5",
            "question_type": "mcq",
            "question": "A 68-year-old man is 6 days following open anterior resection with defunctioning ileostomy. The patient is afebrile at 36.7 °C. He is eating and drinking normally. The nursing staff informs you the stoma output is 3 L/day. His mucous membranes are dry and the patient feels thirsty. Which one of the following statements regarding fluid therapy is most correct?",
            "options": [
                "A. Continue to push oral fluids",
                "B. 5% dextrose is most appropriate given nutritional content",
                "C. 0.9% normal saline with potassium supplementation is most appropriate",
                "D. Potassium supplementation is not required",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "0.9% normal saline with potassium supplementation is most appropriate\nThis patient is losing salt-rich fluid. Ileal fluid contains approximately 130 mmol/L Na+, 110 mmol/L Cl- and 10 mmol/L K+. The most appropriate therapy would be 0.9% normal saline with potassium supplementation. Continuing to push oral fluids is likely to exacerbate losses from a high output ileostomy, worsening dehydration. Five per cent dextrose does not contain the required composition of sodium and chloride ions, and is not preferred in this setting."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "A 59-year-old woman is admitted with central abdominal pain. Serum amylase is 1800 IU/L. Her initial Glasgow Coma Scale score is 4. You are asked to review her the next day as the nurses have noticed that her urine output has been just 15 mL in the past 3 hours. The rest of her observations are as follows:\n• Blood pressure = 105/45 mmHg\n• Pulse = 113 beats/min\n• Respiratory rate = 28 breaths/min\n• Saturation 93% on 8 L of oxygen\nOn auscultation of her chest you hear widespread crepitations. What is the most appropriate next course of action?",
            "options": [
                "A. Fluid restriction",
                "B. Colloid bolus",
                "C. Furosemide",
                "D. Transthoracic echocardiogram",
                "E. Central line insertion"
            ],
            "answer": "E",
            "explanation": "Central line insertion\nThis scenario describes a presentation of severe pancreatitis. Pancreatitis is a systemic inflammatory insult; this patient has a Glasgow Coma Scale score of 4 indicating her disease is severe. These patients often present appearing surprisingly well; however, this patient should be expected to deteriorate quickly in the subsequent 24–72 hours. The initial priority in managing acute pancreatitis is fluid resuscitation; losses in pancreatitis are considerable and can be divided into external (vomiting, reduced intake, sweating) and internal. Internal loss is often far greater, comprising pooling within the gastrointestinal tract following ileus and intercellular loss; the ‘cytokine storm' which results from pancreatitis increases the permeability of tissues, particularly in the retroperitoneum and lung parenchyma. This is problematic as these insensible losses cannot be measured or reliably estimated.\nThis patient has evidence of ALI, a complication of systemic inflammation broadly similar to acute respiratory distress syndrome. The injured lung is increasingly susceptible to fluid overload. In addition, without invasive monitoring, it is impossible to reliably differentiate between the effects of ALI and cardiac failure. This patient requires a central line to guide fluid management as a matter of urgency. A further bolus at this time may further compromise respiratory function and fluid restriction would exacerbate the acute renal injury. There is no evidence that furosemide in these circumstances improves outcome of renal failure; furosemide itself is toxic to the renal system and its administration would only deplete intravascular volume further. This patient needs an echocardiogram, but central monitoring and guided fluid resuscitation takes priority."
        },
        {
            "id": "7",
            "question_type": "mcq",
            "question": "The patient in Question 6 had a central line inserted and was transferred to the high-dependency unit. Her observations remained the same and in the last hour only 5 mL of urine is passed. Her saturations remain poor. Her central venous pressure initially is 11 cmH2O. You attempt a fluid bolus of 250 mL of colloid, following which her central venous pressure increases and remains at 15 cmH2O. Her urine output over the next hour is 10 mL. Which one of the following statements is the most correct?",
            "options": [
                "A. This patient is septic",
                "B. Noradrenaline is the next most appropriate step",
                "C. A further fluid bolus is warranted",
                "D. This patient has left ventricular failure",
                "E. This patient will require dialysis"
            ],
            "answer": "D",
            "explanation": "This patient has left ventricular failure\nThe placement of a central line was well conceived; a sustained rise in CVP following fluid bolus is indicative of a fluid overloaded system. This patient almost certainly has left ventricular failure and a cause of this should be sought. This scenario is unusual, however; the majority of low blood pressure and oliguria encountered in acute pancreatitis will be due to hypovolaemia; this question is purely designed to assess a candidate's understanding of CVP monitoring.\nThe CVP depends on the venous return to the great veins and the efficiency of the cardiac pump. Increased CVP indicates either an expanded circulating volume or cardiac failure. Causes of non-cardiac pulmonary oedema would not increase the CVP. There is no defined ‘normal range' for CVP and therefore a one-off reading is not useful. A reading before and after a fluid challenge is of more use; if the CVP remains unchanged, then the patient is hypovolaemic. A rise of 2–4 cmH2O which reverses after around 30 minutes indicates the patient is approximately euvolaemic. A sustained rise of >5 cmH2O is indicative of overload or cardiac failure."
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "A 22-year-old patient is brought to the emergency department in class III shock following multiple penetrating stab injuries to the torso, chest and abdomen. He undergoes an emergency thoracotomy and laparotomy. In theatre, he requires a total of 30 units of blood. Which of the following is the best statement regarding complications of massive blood transfusion?",
            "options": [
                "A. Thrombocytosis is inevitable",
                "B. Depletion of factor XI and X is a common problem",
                "C. Hypocalcaemia may ensue",
                "D. Hyperkalaemia is uncommon",
                "E. Hypothermia is rare"
            ],
            "answer": "C",
            "explanation": "Hypocalcaemia may ensue\nMassive blood transfusion is defined as the replacement of an individual's entire circulating volume (>10 units) within 24 hours. Such large transfusions are associated with specific complications, which occur in addition to standard transfusion reactions. These complications occur due to inherent differences between stored blood and blood in circulation.\nStored blood is deficient in platelets and clotting factors (V and VII), the function of which declines rapidly while the blood is in storage. Patients receiving large transfusions should therefore receive additional platelets and cryoprecipitate in order to avoid disseminated intravascular coagulation and transfusion-related haemorrhage. Most centres have their own established massive transfusion protocol. In addition, blood is stored below body temperature, and therefore people receiving large transfusions have commonly become hypothermic.\nElectrolyte disturbance is also common; stored blood has a high potassium content. Post-transfusion potassium overload is a common problem. Transfusion in dialysis dependant renal failure is particularly hazardous. Hypocalcaemia results from the use of the anticoagulant citrate in stored blood. Citrate binds calcium ions and in doing so prevents coagulation. Its anticoagulant effects are reversed when stored blood enters the circulation and the clotting factors are exposed to serum calcium. However, in massive transfusion the citrate load may overwhelm the body's circulating calcium, causing hypocalcaemia."
        },
        {
            "id": "9",
            "question_type": "mcq",
            "question": "A 70 kg, 56-year-old patient is 12 hours following a difficult colectomy for colorectal carcinoma. During the procedure, the patient experienced bleeding, which needed to be controlled with diathermy coagulation. You are asked to review the patient who has become increasingly unwell and is complaining of abdominal pain. Physical examination reveals marked left-sided tenderness. His pulse is 130/min and blood pressure is 80/40 mmHg. He is pale and clammy and the urine output is 15 mL for the last hour. His haemoglobin is 6.0 g/dL having been 13 g/dL preoperatively. You decide to start rehydration using Gelofusine colloid. Which one of the following is the most appropriate statement regarding fluid resuscitation in this patient?",
            "options": [
                "A. Colloid is a useful fluid therapy as it rapidly enters the intercellular compartment",
                "B. Colloid decreases the plasma oncotic pressure",
                "C. Colloid is less likely than crystalloid to induce allergic reactions",
                "D. Colloids are better than crystalloids as they are of low molecular weight",
                "E. Colloid should be changed for blood as soon as is possible"
            ],
            "answer": "E",
            "explanation": "Colloid should be changed for blood as soon as is possible\nThis patient is most likely experiencing reactionary haemorrhage. Therefore, colloid should be changed for blood as soon as is possible. Inevitably, there will be some delay obtaining cross-matched blood so O-negative blood should be obtained if possible. Colloids are often used as a bridge to transfusion while cross-matched blood is prepared. Cross-matched samples should be obtained prior to starting colloids since colloids can interfere with the cross-matching process.\nColloids have high molecular weights and do not readily diffuse across semipermeable membranes. Colloids are therefore thought to be more efficient at expanding the intravascular compartment when compared with crystalloid solutions. One disadvantage is that colloids are more likely to cause allergic/anaphylactic reactions."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "You are called to review a 70 kg, 60-year-old man who is 2 days following an emergency laparotomy for adhesion-related small bowel obstruction (adhesiolysis). He is currently being infused with Hartmann's solution (Ringer's lactate). Which one of the following statements regarding this type of fluid therapy is most appropriate?",
            "options": [
                "A. It contains more sodium than normal 0.9% saline solution",
                "B. It does not contain bicarbonate",
                "C. 3 L contains sufficient K+ ions for this patient",
                "D. It has a composition that is closer to plasma than dextrose saline",
                "E. None of the above"
            ],
            "answer": "D",
            "explanation": "It has a composition that is closer to the plasma than dextrose saline\nHartmann's solution contains:\n• Na+ = 131 mmol/L\n• Cl- = 111 mmol/L\n• HCO3¯ = 29 mmol/L\n• K+ = 5 mmol/L\n• Ca2+ = 2 mmol/L\n• Lactate = 29 mmol/L\nHartmann's solution is designed to more closely resemble the electrolyte composition of plasma than normal saline or dextrose/saline fluids. It is extremely useful in the replacement of pure plasma losses in trauma and acute haemorrhage and is the first-choice resuscitation fluid according to current ATLS guidance. It contains a lower level of sodium ions than 0.9% normal saline (150 mmol/L) and also a lower level of chloride ions. Its pH is close to that of plasma due to the lactate and bicarbonate ion content.\nHartmann's solution is less useful in the provision of maintenance fluids and electrolytes, particularly when the patient is experiencing excessive salt losses. Unlike normal saline, it is not possible to increase the potassium content of the fluids. Three litres of Hartmann's would only provide 15 mmol/L of potassium; the daily requirement of potassium for an average adult is 0.5–1 mmol/L/kg and therefore 15 mmol/L would not be an adequate maintenance dose for this patient, especially in the presence of small bowel obstruction."
        },
        {
            "id": "11",
            "question_type": "mcq",
            "question": "You have been asked to see a 72-year-old Caucasian woman who is 52 hours following uncomplicated laparoscopic cholecystectomy for gallstone disease. She was found unconscious on the ward with generalized tonic-clonic seizures, requiring 20 mg diazepam. Her sodium level is 112 mmol/L. During surgery she received 3 L of 5% dextrose with 20 mmol/L potassium chloride. Her potassium and urea and creatinine are within normal limits. There are no signs of heart failure. Her plasma osmolality is 265 mOsm/kg and her urinary osmolality is 566 mOsm/kg. Which of the following is the most likely cause for her low sodium?",
            "options": [
                "A. Excess 5% dextrose",
                "B. Addison's disease",
                "C. Syndrome of inappropriate antidiuretic hormone secretion",
                "D. Nephrotic syndrome",
                "E. Congestive cardiac failure"
            ],
            "answer": "C",
            "explanation": "Syndrome of inappropriate antidiuretic hormone secretion\nThe SIADH consists of hyponatraemia, inappropriately elevated urine osmolality (>200 mOsm/kg), excessive urine sodium excretion (urinary Na >30 mEq/L), and decreased serum osmolality. These findings occur in a euvolaemic patient without signs of oedema. The hyponatraemia is a result of excess water and not a sodium deficiency. Therefore, treatment is fluid restriction. Excess 5% dextrose can cause hyponatraemia, but will not result in inappropriately concentrated urine. The electrolyte changes that accompany Addison's disease include an elevated plasma K+ level. Nephrotic syndrome and congestive cardiac failure usually give rise to oedema."
        },
        {
            "id": "12",
            "question_type": "mcq",
            "question": "A 45-year-old patient is 1 week following an attack of severe acute pancreatitis. He has been unable to start eating as this precipitates severe pain. Physical examination reveals a soft abdomen with epigastric tenderness. Bowel sounds are scanty. He is afebrile. His amylase in normal and C-reactive protein is 200 mg/L. Which of the following statements regarding management of nutrition is correct?",
            "options": [
                "A. No supplementary nutrition is required",
                "B. Total parenteral nutrition should be commenced",
                "C. Nasogastric feeding should be commenced",
                "D. Nasojejunal feeding should be commenced",
                "E. None of the above"
            ],
            "answer": "D",
            "explanation": "Nasojejunal feeding should be commenced\nPublished studies have shown that over 30% of all hospital inpatients are malnourished and that a poor nutritional state protracts recovery, increases the incidence of complications and prolongs admission. As a general rule, enteral feeding is preferable to TPN in all patients; IV nutrition should be the reserve of patients in whom enteral feeding is impossible or has failed. This is because of the risk of sepsis, thrombus, metabolic imbalance and lipid overload (over 50% of calories in TPN are provided by lipids) as well as the negative effects of prolonged disuse of the alimentary tract.\nNasojejunal feeding has the greatest chance of successfully supplementing nutritional requirements as enteral feeding is delivered beyond the upper small bowel ileus. Nasogastric feeding is likely to result in high aspirate volumes. Total parenteral nutrition may be required if enteral feeding fails."
        },
        {
            "id": "13",
            "question_type": "mcq",
            "question": "After a multidisciplinary review, a 55-year-old patient is commenced on enteral feeding. After 24 hours, he complained of severe diarrhoea. What is the most appropriate step in managing this patient?",
            "options": [
                "A. Speed up enteral feed",
                "B. Stop the enteral feed",
                "C. Slow down the enteral feed",
                "D. Continue the enteral feeding at current rate and exclude other causes",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Slow down the enteral feed\nDiarrhoea is the commonest complication of enteral feeding, occurring in_2%–63% of patients depending on the definition. Diarrhoea may respond to slowing down the rate of enteral feeding. Concurrently concomitant causes (e.g. antibiotic therapy) should be identified and modified. Other strategies include switching to nutritional regimens that contain higher fibre content."
        },
        {
            "id": "14",
            "question_type": "mcq",
            "question": "A 75-year-old Caucasian man is on the intensive care unit following an emergency Hartmann's procedure for an obstructing sigmoid carcinoma. He is currently 6 days post-procedure. His past history includes chronic obstructive pulmonary disease. The nursing staff report high nasogastric aspirates despite slow enteral feeding at 10 mL/hour. On examination, his abdomen is mildly distended, and generally tender with no peritonism. His stoma looks healthy, but has not started to work yet. His bowel sounds are absent. What is the best way to manage this patient's nutrition?",
            "options": [
                "A. Continue nasogastric feeding",
                "B. Site nasojejunal tube and start feeding",
                "C. Commence total parenteral nutrition",
                "D. Site a percutaneous gastrostomy tube",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Commence total parenteral nutrition\nProlonged ileus is not uncommon following major abdominal surgery for obstruction. Continuing nasogastric feeding is unlikely to be successful. Nasojejunal feeding is a useful route for ensuring enteral nutrition in patients with upper small bowel ileus in conditions such as acute pancreatitis. However, this patient is an ideal candidate for short-term total parenteral nutrition, which should continue until the ileus resolves, whereupon the patient should be re-established on oral intake. Percutaneous endoscopic gastrostomy tubes are useful in patients who have a functioning gastrointestinal tract, but where oral feeding is considered unsafe or not possible (e.g. patients with swallowing insufficiency following cerebrovascular accident)."
        },
        {
            "id": "15",
            "question_type": "mcq",
            "question": "A patient is commenced on total parenteral nutrition. You are asked by the nutrition team to ensure that adequate monitoring takes place. Which one of the following statements regarding monitoring of total parenteral nutrition is most correct?",
            "options": [
                "A. Daily liver function tests",
                "B. Weekly blood capillary glucose",
                "C. Monthly full blood count",
                "D. There is no need to monitor phosphate",
                "E. None of the above"
            ],
            "answer": "E",
            "explanation": "None of the above\nBlood glucose should be monitored daily as hyper/hypoglycaemia is common on total parenteral nutrition regimens. Electrolyte disturbance is also common and therefore urea, creatinine, potassium, sodium, magnesium and phosphate levels must also be checked daily. Hypophosphataemia is a particular problem with TPN and additional supplementation is almost always required. There is significant risk of sepsis, therefore daily FBC is also required.\nDaily weights should be taken, along with meticulous fluid balance charting. Liver function tests should be performed twice weekly to monitor any sign of cholestatic jaundice and fatty infiltration."
        },
        {
            "id": "16",
            "question_type": "mcq",
            "question": "Which one of the following is the best statement regarding total parenteral nutrition?",
            "options": [
                "A. The nutritional content should be specifically tailored to the patient",
                "B. Feed usually hypo-osmolar",
                "C. Contains 14 g of nitrogen as D-amino acids",
                "D. Should be higher in glucose content versus lipid content",
                "E. None of the above"
            ],
            "answer": "E",
            "explanation": "None of the above\nTotal parenteral nutrition is rarely tailored to the specific individual. The feed is usually hyper-osmolar, which means that a dedicated large central feeding line is required. Usually, the feed contains 14g of nitrogen as L-amino acids. The lipid content is usually higher than the glucose content, as the latter is converted to CO₂ resulting in more respiratory work for an acutely ill surgical patient."
        },
        {
            "id": "17",
            "question_type": "mcq",
            "question": "You are called to see a 50-year-old Asian man who has been receiving total parenteral nutrition for 6 days via his central line. He is 15 days following sub-total colectomy and ileostomy. The nursing staff is concerned as he appeared to have a rigor. He is febrile at 38.0 °C. His pulse rate is 100 beats/min, and his blood pressure is 130/70 mmHg. His lung bases sound quiet and his notes document that a urinary catheter was removed day 6 postoperatively. His abdomen is mildly tender with no signs of peritonism. Which of the following is the most likely source of sepsis?",
            "options": [
                "A. Peritoneal collection",
                "B. Central line sepsis",
                "C. Respiratory tract infection",
                "D. Urinary sepsis",
                "E. Contaminated total parenteral nutrition"
            ],
            "answer": "B",
            "explanation": "Central line sepsis\nThis patient is at high risk of central line sepsis. This should be considered as a source in any patient who develops a sepsis with a central venous catheter in situ, especially if there are local signs and symptoms. This risk is far greater in individuals who are receiving TPN through their central line; TPN is the perfect media for bacterial growth. Ideally central lines should be changed every 5 days. If a line is being used for TPN, a dedicated port should be allocated solely for this purpose to minimize risk of colonization. In this case, blood cultures should be sent from both the line and a peripheral site, the line should be removed and the tip sent for microbiological culture.\nAnastomotic leakage should always be considered and excluded, but is less likely in patients who have a stoma and in the absence of peritonism. Basal atelectasis and lower respiratory tract infection commonly complicate major abdominal surgery, especially if abdominal pain limits tidal volume and expectoration, but are decreasingly likely 15 days postoperatively. Urinary tract infection should be excluded, but is unlikely to be the cause in this patient; catheter associated UTIs typically occur within 24–72 hours following removal."
        },
        {
            "id": "18",
            "question_type": "mcq",
            "question": "You are asked to see a 45-year-old African Caribbean female patient on the ward. She is approximately 30 minutes following the insertion of a left internal jugular vein catheter sited for total parenteral nutrition. A plain film chest radiograph has not yet been performed following the procedure. The nursing staff is concerned as the patient is breathless. On arrival, the patient's airway is patent, but she is breathless at rest. Her respiratory rate is 30 breaths/min. The trachea is central. Her pulse is 110 beats/min and blood pressure is 160/90 mmHg. There are reduced breath sounds on the left and the left chest is hyper-resonant to percussion. Select the most appropriate diagnosis and management strategy.",
            "options": [
                "A. Tension pneumothorax; tube thoracostomy 5th intercostal space, anterior to mid-axillary line",
                "B. Simple pneumothorax; tube thoracostomy 5th intercostal space, anterior to mid-axillary line",
                "C. Chylothorax; immediate insertion of large-bore cannula, 2nd inter-costal space, mid-clavicular line",
                "D. Tension pneumothorax; immediate needle thoracocentesis",
                "E. Haemothorax; tube thoracostomy 5th intercostal space, anterior to mid-axillary line"
            ],
            "answer": "B",
            "explanation": "Simple pneumothorax; tube thoracostomy 5th intercostal space, anterior to mid-axillary line\nThis patient has the features of a simple pneumothorax secondary to CVP line insertion. The appropriate management is to insert a tube thoracostomy in the 5th intercostal space, just anterior to the mid-axillary line. Tension pneumothorax should be suspected in the presence of trachea deviation and signs of impaired venous return, but these do not feature in this scenario. Haemothorax and chylothorax can also complicate CVP access, but are unlikely in the absence of a dull percussion note."
        },
        {
            "id": "19",
            "question_type": "mcq",
            "question": "A 30-year-old man is on the surgical ward following an assault resulting in severe head injury. The speech and language therapist is unhappy with the patient's swallow as he regurgitates fluid and is at risk of aspiration. Which of the following is the best long-term strategy for addressing this patient's nutritional requirements?",
            "options": [
                "A. Nasogastric feeding",
                "B. Nasojejunal feeding",
                "C. Percutaneous gastrostomy tube",
                "D. Total parenteral nutrition",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "Percutaneous gastrostomy tube\nThis patient's gastrointestinal tract is functioning normally, but the oral route is not an option. This is an ideal patient for a percutaneous gastrostomy tube. Nasogastric and nasojejunal feeding and total parenteral nutrition are not suitable long-term strategies."
        },
        {
            "id": "20",
            "question_type": "mcq",
            "question": "You are called to the ward to review a patient who is now 1 week into percutaneous endoscopic gastrostomy (PEG) feeding. The nursing staff is concerned because he grimaces when the feed is running, and has now developed a tachycardia. On examination, he is febrile at 38 °C, pulse is 110 beats/min, and blood pressure is 110/80 mmHg. The PEG site is clean and healthy. Physical examination reveals marked upper abdominal tenderness with guarding and rebound tenderness. Which of the following complications is most likely?",
            "options": [
                "A. Peritonitis from tube malplacement",
                "B. Perforation at time of insertion",
                "C. PEG tube infection",
                "D. Tube-related fistulation",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "Peritonitis from tube malplacement\nThis patient has signs of peritonitis secondary to misplacement of the feeding tube. The tachycardia, pyrexia and abdominal guarding with rebound tenderness are all suggestive of an infective peritonitis. In addition, marked abdominal tenderness while the feed is running indicates that the abdominal cavity is being irritated by the feed content which makes option (A) more likely than option (B)."
        }
    ]
}
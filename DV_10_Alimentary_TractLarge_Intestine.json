{
  "chapter_name": "Alimentary Tract-Large Intestine",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 50-year-old male is undergoing a screening colonoscopy under intravenous (IV) sedation. Near the end of the procedure he briefly becomes unresponsive requiring a sternal rub to arouse him. IV anesthetics are weaned off, and the procedure is completed. In the recovery room, a chest x-ray is performed to rule out an aspiration event before discharge. There is no consolidation in the lungs, but free air is seen under the diaphragm. The patient has no complaints, the abdomen is soft, he would like to eat, and he has normal vital signs. Which of the following is the best next step?",
      "options": [
        "A. Exploratory laparotomy",
        "B. Diagnostic laparoscopy",
        "C. Serial abdominal exam for 6 hours",
        "D. Admit to hospital, IV antibiotics, and bowel rest",
        "E. Discharge home"
      ],
      "answer": "D",
      "explanation": "*   Pneumoperitoneum in a symptomatic patient almost always necessitates emergency surgery and is often due to visceral perforation (A, B).\n*   Colonoscopy can lead to benign pneumoperitoneum due to microperforation and/or transmural passage of air secondary to insufflation.\n*   Patients with benign pneumoperitoneum, no abdominal pain, and no systemic signs of sepsis (fever, leukocytosis) can be treated with IV antibiotics and bowel rest.\n*   Serial abdominal exam should also be performed but in addition to admission, antibiotics, and bowel rest (C).\n*   The patient should not be discharged home if there is concern for a perforated viscus (E)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Ten years after an abdominoperineal resection for locally advanced rectal cancer, a patient presents with a hernia adjacent to his stoma that causes him discomfort and interferes with the placement of his colostomy bag. It has been increasing in size over the last several months. Which of the following is true regarding this condition?",
      "options": [
        "A. Chronic obstructive pulmonary disease (COPD) is the strongest risk factor.",
        "B. Treatment for this patient includes a support device such as a hernia belt and weight loss.",
        "C. Repair is best achieved by relocating the stoma.",
        "D. Prophylactic mesh placement at the initial operation decreases risk of this complication.",
        "E. This complication is more common with loop ileostomy than end colostomy."
      ],
      "answer": "D",
      "explanation": "*   Parastomal hernias are a common complication of stoma creation, with end colostomy having the highest risk and loop ileostomy having the lowest risk (E).\n*   Other risk factors include older age, wound infection, obesity, malnutrition, immunosuppression, inflammatory bowel disease (IBD), and COPD (A).\n*   Prophylactic mesh placement at the initial operation has been shown to reduce the parastomal hernia rate.\n*   Patients with asymptomatic parastomal hernia should be managed with a support device such as a hernia belt and weight loss. However, this patient's pain and difficulty applying his colostomy bag are indications for repair or relocation of the stoma (B).\n*   Prosthetic mesh repair is considered the preferred surgical approach because relocating the stoma is associated with the same high risk of hernia formation as the initial stoma (C)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 47-year-old morbidly obese male underwent emergent sigmoidectomy with end colostomy creation yesterday morning for perforated diverticulitis. Evaluation of the colostomy on morning rounds reveals diffusely dusky mucosa. On examination with a test tube and light, the dusky area appears to be superficial to the fascia. Management consists of:",
      "options": [
        "A. Re-exploration in the operating room (OR), resection of ischemic colon and stoma relocation",
        "B. Re-exploration in the OR, segmental colon resection, and placement of stoma at the same site",
        "C. Re-exploration in the OR, on-table bowel prep, and primary colonic anastomosis",
        "D. Observation and reevaluate the colostomy in 12 to 24 hours",
        "E. IV antibiotics"
      ],
      "answer": "D",
      "explanation": "*   Ischemia or necrosis of the stoma is a recognized complication of colostomy creation, more likely when the inferior mesenteric artery was ligated high.\n*   Evaluate the extent of ischemia before proceeding to the operating room by placing a clear test tube into the ostomy and using a penlight to evaluate the mucosa down to the fascia or via endoscopy.\n*   If ischemia is evident down to the fascia, re-exploration and revision are needed (A-C).\n*   If the ischemia is superficial, it can be observed, and a mucosa-cutaneous junction will form by secondary intention.\n*   In a morbidly obese patient, it may be technically difficult to gain additional length to refashion the stoma, so a return to the OR should be avoided if possible.\n*   There is no role for IV antibiotics (E)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 75-year-old male with chronic constipation presents with severe abdominal pain and fever. CT scan shows free air and stranding in the colon. The colon and rectum appear to be dilated and filled with large masses of stool. Intraoperatively, a round perforation about 1 cm in diameter is found in the colon, with thickened balls of stool protruding out. Which of the following is true regarding this patient?",
      "options": [
        "A. The perforation is most likely to occur at the splenic flexure.",
        "B. It is associated with nonsteroidal antiinflammatory (NSAID) use.",
        "C. It is best managed by primary closure and washout.",
        "D. Anticholinergic agents could have prevented this condition.",
        "E. The perforation is usually at the mesenteric border."
      ],
      "answer": "B",
      "explanation": "*   This patient has a stercoral ulceration complicated by perforation, a rare condition primarily in elderly patients with chronic constipation.\n*   Hard fecaloma leads to local ischemia, ulcer formation, and subsequent perforation.\n*   The antimesenteric border of the rectosigmoid colon is the most likely location (A, E).\n*   Diagnosis is suggested by: (1) round antimesenteric colonic perforation > 1 cm; (2) colon full of stool protruding through perforation site; (3) evidence of multiple pressure ulcers and acute inflammation; and (4) absence of external injury, diverticulitis, or obstruction due to neoplasms or adhesions.\n*   Since inflammation and ulceration extend beyond the immediate bowel surrounding the perforation, a simple closure or limited colonic resection should be avoided (C).\n*   Formal colon resection with proximal colostomy (Hartman's procedure) is recommended.\n*   Stercoral ulcer perforation has a high mortality rate.\n*   Several reports show an association of NSAID use with the development of stercoral perforation.\n*   Anticholinergic agents worsen chronic constipation and contribute to this complication (D)."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 71-year-old female with COPD is recovering from pneumonia in the intensive care unit (ICU). She is on a ventilator. Her abdomen is acutely distended, and she has not had a bowel movement in several days. Imaging demonstrates a cecum measuring 8 cm in diameter with gas pattern of distention extending to the rectum. There is no stool in the rectal vault. Her vital signs are stable. Her doctor would like to start neostigmine. Which of the following is true regarding the administration of neostigmine for this patient's condition?",
      "options": [
        "A. History of coronary artery disease is considered a contraindication.",
        "B. History of second degree heart block is considered a contraindication.",
        "C. Neostigmine should not be given as a continuous infusion.",
        "D. Neostigmine is effective in 20% of patients with this condition.",
        "E. If a bolus of neostigmine is not successful, repeat boluses should be avoided."
      ],
      "answer": "B",
      "explanation": "*   This patient has acute colonic pseudo-obstruction or Ogilvie's syndrome, common in critically ill patients without mechanical obstruction.\n*   Pathophysiology is likely multifactorial, secondary to bowel paralysis allowing for passive distention.\n*   Stable patients without systemic signs of compromised bowel should initially undergo conservative management.\n*   Neostigmine, a reversible cholinesterase inhibitor, has shown improved response over placebo.\n*   Up to 80% to 90% of patients respond to a single IV injection of 2 mg neostigmine (D).\n*   For non-responders, a second and third administration can be given (E).\n*   A continuous infusion of neostigmine (0.4 to 0.8 mg/hour over 24 hours) has also shown successful results (C).\n*   Contraindications to neostigmine include acute urinary retention, acute coronary artery syndrome, asthma, bronchospasm, and second or third degree heart block (A).\n*   All patients receiving neostigmine should be on cardiac monitoring with atropine prefilled at bedside."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "For the patient in question 5, neostigmine fails to improve her symptoms. Her lactic acid is elevated and she is taken to the OR. Her blood pressure is 108/68 mm Hg and heart rate is 88 beats per minute. Intraoperatively, her colon appears inflamed and dilated to 10 cm, but there are no signs of ischemic bowel identified. Which of the following is the most appropriate treatment option?",
      "options": [
        "A. Total abdominal colectomy with ileoanal anastomosis",
        "B. Proctocolectomy with ileal pouch anal anastomosis",
        "C. Placement of cecostomy tube at one or several locations in the distended colon",
        "D. Transanal retrograde colonic insertion of a long multiperforated Faucher tube",
        "E. Subtotal colectomy with end ileostomy"
      ],
      "answer": "C",
      "explanation": "*   If conservative therapy fails for Ogilvie's syndrome or there is concern for compromised bowel, surgery should be considered.\n*   Surgical options include tube colostomy, transanal insertion of a long multiperforated drainage tube, and total or subtotal colectomy with an ostomy.\n*   If no evidence of ischemic or perforated colon intraoperatively, colectomy can be avoided (E).\n*   In this scenario, a right transverse or left lower quadrant sigmoid colostomy tube is often used with a 95% success rate; this functions as a \"blow-hole\" colostomy and is more effective than a formal colostomy for pressure relief.\n*   Transanal insertion of a large multiperforated tube (Faucher tube) guided to the proximal edge of dilated colon is a less effective option (D).\n*   If compromised bowel is suspected, total or subtotal colectomy should be performed.\n*   Primary anastomosis should be avoided due to a high leak rate (A, B) and high mortality (up to 40%)."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 32-year-old male diagnosed with ulcerative colitis (UC) 1 year ago presents to the emergency department (ED) with jaundiced skin. He is admitted and workup is consistent with primary sclerosing cholangitis (PSC). Which of the following is additionally recommended?",
      "options": [
        "A. Immediate screening colonoscopy",
        "B. Immediate colonoscopy with random biopsies",
        "C. Colonoscopy with random biopsies at 8 to 10 years after his UC diagnosis",
        "D. Screening colonoscopy at age 50",
        "E. Symptom-driven colonoscopy as needed"
      ],
      "answer": "B",
      "explanation": "*   Primary sclerosing cholangitis (PSC) is a progressive, destructive disease of the biliary tree due to inflammation.\n*   Up to 80% of PSC patients have inflammatory bowel disease (IBD), most commonly ulcerative colitis (UC).\n*   PSC significantly increases the risk of colorectal cancer in these patients.\n*   UC patients typically undergo screening colonoscopy with random biopsies starting 8 years from their IBD diagnosis (C).\n*   However, patients diagnosed with PSC should receive a colonoscopy with random biopsies promptly at the time of PSC diagnosis and continue every 1 to 2 years thereafter.\n*   Patients without IBD or family history of colorectal cancer should begin screening at age 50 or after presenting with worrisome symptoms (D, E).\n*   Patients with a family history of colorectal cancer should begin screening 10 years before the age of diagnosis of any first-degree relative with colorectal cancer."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is least likely to contribute to an anastomotic leak following colorectal surgery for cancer?",
      "options": [
        "A. Prolonged operative time",
        "B. Low rectal tumors",
        "C. Postoperative ketorolac use",
        "D. Female gender",
        "E. Multiple firings of the linear stapler"
      ],
      "answer": "D",
      "explanation": "*   Anastomotic leakage following colorectal cancer surgery increases morbidity, mortality, local recurrence risk, and worsens cancer-specific survival.\n*   Risk factors for anastomotic leakage after low anterior resection for colorectal cancer include: lower rectal cancer (<7 cm from anal verge), tumor size > 5 cm, multiple linear stapler firings, lateral lymph node dissection, prolonged operative time (>5 hours) (A), high ASA score, male gender, and significant operative bleeding (B, E).\n*   The role of perioperative NSAIDs in anastomotic leaks is controversial, but some studies show an association with ketorolac (C), so such drugs should be avoided if possible.\n*   Routine diversion is not indicated but should be considered if the aforementioned factors are present."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 35-year-old patient with a history of UC undergoes an ileoanal anastomosis with J-pouch reconstruction. Four months later, he presents with a 3-day history of abdominal pain, diarrhea, hematochezia, and fever. Which of the following is true regarding this condition?",
      "options": [
        "A. Biopsy is typically not required in the management of this condition.",
        "B. This is an uncommon complication.",
        "C. Use of probiotics is not helpful.",
        "D. Urgent excision of the J-pouch is often necessary.",
        "E. Ciprofloxacin is more effective than metronidazole to treat this condition."
      ],
      "answer": "E",
      "explanation": "*   Pouchitis is a nonspecific inflammation of the ileal reservoir after ileoanal pouch creation or in a continent ileostomy reservoir.\n*   Symptoms include increased diarrhea, hematochezia, abdominal pain, fever, and malaise.\n*   Diagnosis is established via history, endoscopic findings, and histology from biopsy samples. Endoscopy with biopsy is important to rule out undiagnosed Crohn disease (A).\n*   Pouchitis is the most common long-term complication of this procedure, with an incidence as high as 30% to 55% (B).\n*   The cause is unknown, possibly due to fecal stasis.\n*   A recent Cochrane study showed that ciprofloxacin is more effective than metronidazole for inducing remission of acute pouchitis.\n*   Most patients respond rapidly to oral preparations or enemas.\n*   Probiotics have been shown to be useful in chronic cases (C).\n*   Rarely, the pouch requires excision, but not urgently (D)."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true about familial adenomatous polyposis (FAP)?",
      "options": [
        "A. Microsatellite instability is a major contributor to this disease.",
        "B. It is not associated with extraintestinal manifestations.",
        "C. Patients with the gene mutation should begin screening with flexible sigmoidoscopy at age 20.",
        "D. Patients with prophylactic proctocolectomy have a lower risk of developing periampullary carcinoma.",
        "E. Upper endoscopy should be performed every 1 to 3 years."
      ],
      "answer": "E",
      "explanation": "*   Familial adenomatous polyposis (FAP) is a rare autosomal dominant disease, accounting for ~1% of colon cancers, caused by a mutation in the APC tumor suppressor gene on chromosome 5q.\n*   Variants include attenuated FAP, Turcot syndrome, and Gardner syndrome.\n*   If untreated, cancer can develop in all patients by age 35-40, with polyps often beginning at puberty and eventually numbering in the thousands.\n*   First-degree relatives of APC-positive FAP patients should begin screening with flexible sigmoidoscopy at age 10-12 (C).\n*   Relatives who are APC mutation negative can wait until age 50 for screening.\n*   Adenomas can develop throughout the GI tract, especially in the duodenum, increasing risk of periampullary carcinoma.\n*   Upper endoscopy for surveillance every 1-3 years, starting at age 25-30, is recommended (E).\n*   Prophylactic proctocolectomy does not decrease the risk of periampullary carcinoma (D).\n*   FAP may be associated with extraintestinal manifestations like congenital hypertrophy of the retinal pigment epithelium, desmoid tumors, epidermoid cysts, mandibular osteomas, and central nervous system tumors (B).\n*   Microsatellite instability leads to impaired DNA mismatch repair in a small number of sporadic colon cancers, increasing cancer risk (A)."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 45-year-old woman with a 15-year history of pancolitis from UC undergoes surveillance colonoscopy. No polyps are detected. Random biopsy samples are taken, and final pathology findings reveal high-grade dysplasia from the sigmoid colon region. Recommended management would be:",
      "options": [
        "A. Repeat colonoscopy in 6 months with additional random biopsies",
        "B. Sigmoid colectomy",
        "C. Total colectomy with ileorectal anastomosis",
        "D. Total proctocolectomy with ileostomy",
        "E. Restorative proctocolectomy with ileal pouch-anal anastomosis"
      ],
      "answer": "E",
      "explanation": "*   The risk of colon cancer in UC patients increases with time; by 20 years, ~10% will develop cancer.\n*   Surveillance colonoscopy is recommended.\n*   Colon cancer can develop in UC without polyps, and dysplasia may not be apparent on standard colonoscopy.\n*   Colonoscopic surveillance is recommended annually after 8 years of UC.\n*   Random biopsies are recommended in addition to biopsies of suspicious areas, as flat dysplasia develops in these patients.\n*   High-grade dysplasia is an indication for surgery.\n*   Repeat colonoscopy is inappropriate (A).\n*   Some authors recommend surgery even for low-grade flat dysplasia due to significantly increased malignancy risk.\n*   Dysplasia in a flat (nonpolypoid) lesion is concerning and difficult to monitor.\n*   The curative operation is a restorative proctocolectomy with an ileal pouch-anal anastomosis (B-D).\n*   Indications for colectomy in UC include toxic megacolon, severe lower GI bleeding, and intractable disease not responding to medical management."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "The earliest manifestation of UC is:",
      "options": [
        "A. Mucosal ulcerations",
        "B. Mucosal edema",
        "C. Plasmacytosis",
        "D. Pseudopolyps",
        "E. Crypt abscesses"
      ],
      "answer": "B",
      "explanation": "*   Mucosal edema is the earliest endoscopic finding in Ulcerative Colitis (UC).\n*   As the disease advances, friable mucosa and ulcerations develop (A).\n*   A \"lead pipe\" colon (loss of haustral markings, shortening of colon) is a feature of long-standing UC on barium enema.\n*   Crypt abscesses are almost always seen with UC, but other inflammatory conditions of the colon can also present with them (E).\n*   Gross appearance in Crohn colitis (thickened mesentery, thickened bowel wall, segmental disease, \"creeping fat\") differs from UC.\n*   Microscopically, Crohn disease is transmural, while UC is limited to the mucosa and submucosa.\n*   Noncaseating granulomas are a hallmark of Crohn disease; crypt abscesses are characteristic of UC.\n*   Plasmacytosis (increase in plasma cells in lamina propria) can be found in both UC and Crohn disease (D).\n*   Pseudopolyps are seen in both UC and Crohn disease."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "With appendicitis during pregnancy, the factor most strongly associated with fetal mortality is:",
      "options": [
        "A. Fetal gestational age",
        "B. Open appendectomy instead of laparoscopy",
        "C. Maternal comorbidities",
        "D. Appendiceal rupture",
        "E. Delay in antibiotic administration"
      ],
      "answer": "D",
      "explanation": "*   Appendiceal perforation is the most important variable in determining fetal mortality during pregnancy; early diagnosis is imperative.\n*   A general anesthetic increases the risk of premature labor.\n*   A large study found a higher rate of negative appendectomy in pregnant women (23% vs 18%).\n*   Rates of fetal loss and early delivery were considerably higher in women with complex appendicitis (6% and 11%, respectively) compared with negative (4% and 10%, respectively) and simple (2% and 4%, respectively) appendicitis.\n*   Laparoscopy was associated with a higher rate of fetal loss compared with open appendectomy (odds ratio of 2.31) (B).\n*   Ultrasonography is useful for diagnosis; if equivocal, MRI should be performed.\n*   Avoid unnecessary appendectomies, but also avoid delays in operative care."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 56-year-old man presents with a 2-day history of fever, nausea, and left lower quadrant pain. His white blood cell (WBC) count is 14,000 cells/μL. CT shows a thickened sigmoid colon with fat stranding and a 5-cm pelvic abscess. Optimal management of this patient would be:",
      "options": [
        "A. Immediate sigmoid colectomy, end colostomy, and drainage of abscess",
        "B. CT-guided drainage followed in 6 weeks by a colonoscopy and sigmoid colectomy",
        "C. CT-guided drainage alone",
        "D. IV antibiotics followed in 6 weeks by a colonoscopy and sigmoid colectomy",
        "E. IV antibiotics alone"
      ],
      "answer": "B",
      "explanation": "*   Diverticulitis is divided into simple (pericolonic inflammation/phlegmon) and complicated (free perforation, abscess, fistula, obstruction, stricture).\n*   Hinchey staging system: Stage I (pericolonic inflammation with pericolonic abscess), Stage II (retroperitoneal or pelvic abscess), Stage III (purulent peritonitis), Stage IV (fecal peritonitis).\n*   Most surgeons consider Hinchey III-IV as complicated.\n*   Stage I is treated with IV antibiotics (E).\n*   Complicated diverticulitis is treated surgically.\n*   Patients with small abscesses (<4 cm) can be treated with antibiotics alone initially, followed by elective colectomy after colonoscopy to rule out other etiologies (D).\n*   If the abscess is larger than 4 cm, initial CT-guided drainage is recommended, followed by colonoscopy and elective sigmoid colectomy (C).\n*   Previously, Hinchey III-IV received urgent operation, but now nonoperative management is recommended to achieve a single-stage operation.\n*   Patients with diffuse peritonitis or overwhelming sepsis require urgent surgery; Hartmann procedure is often performed (A).\n*   A second stage take-down of the ostomy is performed 6–8 weeks later."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is true regarding familial juvenile polyposis?",
      "options": [
        "A. It is autosomal recessive.",
        "B. The polyps are hamartomas.",
        "C. The risk of colon cancer is 100% by age 50.",
        "D. Once a polyp is detected, total proctocolectomy is recommended.",
        "E. There is no association with upper GI malignancy."
      ],
      "answer": "B",
      "explanation": "*   Familial juvenile polyposis is an autosomal dominant (A) disorder, distinct from FAP.\n*   The polyps are hamartomas (juvenile polyps), not adenomas.\n*   Hamartomas are benign but can degenerate into adenomas and malignancy, carrying a risk of colon cancer (lifetime risk ~10% to 38%, not 100% like FAP) (C).\n*   Because of this risk and common right-sided polyps, colonoscopic surveillance is recommended, beginning at age 10-12.\n*   Unlike FAP, if a polyp is seen, it should be snared and sent to pathology (D).\n*   If adenomatous changes are seen, colectomy is performed; if the rectum is spared, ileorectal anastomosis can be done with close surveillance.\n*   Approximately 15-20% of Peutz-Jeghers syndrome patients develop stomach or duodenal cancers, so upper endoscopic surveillance is recommended by age 25 (E)."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is true regarding colonic polyps?",
      "options": [
        "A. Tubulovillous adenomas have a lower malignancy risk than tubular adenomas.",
        "B. Some hyperplastic polyps are premalignant.",
        "C. The polyps in Peutz-Jeghers syndrome are hyperplastic.",
        "D. Pseudopolyps are commonly found in FAP.",
        "E. In an adenomatous polyp, the risk of malignancy is related to its location in the GI tract."
      ],
      "answer": "B",
      "explanation": "*   Isolated hyperplastic polyps are widely prevalent and generally not considered premalignant.\n*   However, patients with hyperplastic polyposis syndrome can have >100 polyps in the colon, some of which are premalignant, increasing colon cancer risk.\n*   Adenomatous polyps are neoplastic and divided into: tubular (<5% malignancy risk), tubulovillous (20% malignancy risk), and villous (40% malignancy risk) (A).\n*   Polyp size is an important determinant; polyps <1 cm have extremely low malignancy risk, while polyps >2 cm have nearly 50% risk.\n*   Location of a polyp does not affect malignancy risk (E).\n*   Most colon cancers develop from adenomatous polyps.\n*   Peutz-Jeghers syndrome is characterized by hamartomatous polyps (C), which present with GI bleeding and intussusception.\n*   Hamartomatous polyps are not premalignant but can degenerate into adenomatous polyps, carrying a malignancy risk.\n*   Peutz-Jeghers polyps occur primarily in the small intestine but also in the colon and rectum.\n*   Inflammatory polyps or pseudopolyps are islands of regenerating mucosa, most often seen in IBD (D)."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 75-year-old woman presents with mild diffuse abdominal pain and diarrhea that is positive on fecal immunochemical test. Her medical history is negative. Her WBC count is normal, as is her hematocrit. A CT scan shows mild thickening of the colonic wall at the splenic flexure with some associated pericolic fat stranding. Which of the following is the best next step in management?",
      "options": [
        "A. Diagnostic laparoscopy",
        "B. Exploratory laparotomy",
        "C. IV antibiotics and fluid hydration",
        "D. Colonoscopy",
        "E. Mesenteric angiography"
      ],
      "answer": "C",
      "explanation": "*   Ischemic colitis primarily occurs in elderly patients (~70 years) and may present with lower GI bleeding.\n*   Fecal immunochemical test has replaced older fecal occult guaiac blood tests due to superior adherence, usability, accuracy, sensitivity, and better detection of occult bleeding.\n*   Unlike acute small bowel ischemia, colonic ischemia rarely results from major vascular occlusion; it usually occurs from a low-flow state (e.g., severe dehydration).\n*   Mesenteric angiography is typically not helpful (E).\n*   It tends to develop in watershed areas of blood supply (splenic flexure most common, Sudeck's critical point, ileocecal area).\n*   Risk factors include advanced age, cardiovascular disease, diabetes, vasculitis, and hypotension.\n*   Most cases are mild, with painless, bloody diarrhea.\n*   Severe cases can result in bacterial translocation with fever/leukocytosis or full-thickness necrosis/peritonitis.\n*   Diagnosis is by history, examination, plain films (mucosal edema/thumb printing), and CT scan (colonic wall edema/fat stranding).\n*   Differential diagnosis includes colon cancer and IBD; colonoscopy should eventually be performed, but not in acute phase (D), except for ischemic colitis after aortic surgery.\n*   Most patients are treated medically with bowel rest and broad-spectrum antibiotics.\n*   Surgery is reserved for patients who deteriorate or have diffuse peritonitis (A, B)."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 69-year-old woman is treated with oral metronidazole for an uncomplicated case of pseudomembranous colitis. She develops a recurrence 2 weeks later. Which of the following is true regarding this patient?",
      "options": [
        "A. Oral metronidazole is the treatment of choice.",
        "B. Oral vancomycin is the treatment of choice.",
        "C. IV vancomycin is the treatment of choice.",
        "D. Sigmoidoscopy is typically required before proceeding with any additional treatment.",
        "E. This condition only develops after antibiotic use."
      ],
      "answer": "A",
      "explanation": "*   Pseudomembranous colitis is predominantly caused by *Clostridium difficile*, thought to be due to antibiotic administration leading to elimination of healthy gut bacteria and subsequent overgrowth of *C. difficile*.\n*   Not all cases have a history of recent antibiotic use (E).\n*   Clindamycin is most commonly implicated, but it can occur with any antibiotic, even after one dose, and up to 4-5 weeks later.\n*   *C. difficile* produces toxins A and B, detectable in stool, which is usually sufficient for diagnosis.\n*   Most hospitals use PCR test for quicker, more accurate diagnosis.\n*   If lab studies are inconclusive but suspicion is high, sigmoidoscopy can confirm diagnosis by classic yellow plaques (D).\n*   Most clinicians presumptively treat patients.\n*   Pseudomembranous colitis can progress to life-threatening toxic megacolon, requiring emergent total colectomy.\n*   Treatment for uncomplicated *C. difficile* colitis (WBC < 15,000 cells/µL, serum creatinine < 1.5x premorbid levels) involves immediately discontinuing all antibiotics and instituting oral metronidazole for 10-14 days.\n*   First recurrence is treated with a repeat 10-14 day course of oral metronidazole.\n*   Oral vancomycin is the drug of choice for a second recurrence and all complicated cases (B).\n*   Oral vancomycin is not absorbed systemically and achieves high colon levels; IV vancomycin is not excreted appreciably into the colon and has no effect (C)."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "A 38-year-old woman presents with a 1-day history of nausea, vomiting, abdominal distention, and obstipation. She has no history of surgery and no medical problems. The physical examination is significant for distention with a tympanic mass in the left upper quadrant and mild abdominal tenderness. The WBC count is normal. A plain abdominal radiograph reveals a markedly dilated, kidney-shaped loop of bowel with haustral markings that project from the right lower quadrant to the left upper quadrant. Which of the following is likely to be the best treatment option?",
      "options": [
        "A. Cecostomy",
        "B. Operative detorsion with cecopexy",
        "C. Right hemicolectomy with an ileostomy and mucus fistula",
        "D. Initial endoscopic detorsion with a subsequent right hemicolectomy",
        "E. Right hemicolectomy with primary anastomosis."
      ],
      "answer": "E",
      "explanation": "*   Cecal or cecocolic volvulus is less common than sigmoid volvulus and occurs in younger patients.\n*   Two types: axial ileocolic volvulus (90%) and cecal bascule (10%).\n*   Axial ileocolic volvulus: cecum rotates up and over to the left upper quadrant.\n*   Cecal bascule: cecum flips upward and anterior in a horizontal plane.\n*   Thought to be due to congenital anomaly (lack of cecum fixation to retroperitoneum), causing terminal ileum, cecum, and ascending colon to twist and become ischemic.\n*   Diagnosis can be difficult radiographically due to dilated small bowel loops with air-fluid levels, mimicking small bowel obstruction.\n*   Unlike sigmoid volvulus, endoscopic decompression for cecal volvulus is very difficult (D).\n*   Treatment of choice is right hemicolectomy with primary anastomosis (despite no bowel preparation).\n*   High recurrence rate after operative detorsion and cecopexy (B).\n*   If the right colon is gangrenous (leukocytosis, acidosis, high fever, peritonitis), right hemicolectomy with ileostomy and mucus fistula is the treatment of choice (C); however, this presentation makes it unlikely."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding diverticular diseases of the lower GI tract?",
      "options": [
        "A. They occur most commonly in the descending colon.",
        "B. The rectum can be affected.",
        "C. Incidentally discovered cecal diverticula require surgical management because of high risk of complications.",
        "D. Sigmoid resection should be preceded by a mechanical bowel preperation with oral and IV perioperative antibiotics.",
        "E. They are associated with a long, redundant colon."
      ],
      "answer": "D",
      "explanation": "*   Sigmoid diverticular disease is thought to be caused by a low-fiber diet leading to constipation.\n*   A long, redundant colon, found in high-fiber diet populations, increases the risk of volvulus (E).\n*   Sigmoid diverticula are false diverticula, composed only of mucosa and submucosa.\n*   They occur at points of weakness between the taeniae coli where blood vessels penetrate the colonic wall.\n*   They occur most commonly in the sigmoid colon on the mesenteric side of the antimesenteric taenia (A).\n*   They occur due to increased intraluminal pressure, considered pulsion diverticula.\n*   Diverticula do not develop in the rectum because the taeniae splay out there (B).\n*   Asymptomatic diverticula (sigmoid or cecal) do not require surgical management (C).\n*   Patients surgical candidates for sigmoid resection benefit from mechanical bowel preparation with IV and oral perioperative antibiotics, which decreases surgical site infection rate by >50%."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 30-year-old man presents with symptoms and signs of acute appendicitis. At surgery, the appendix appears red and inflamed but without perforation. Approximately 200 mL of purulent fluid is seen in the right paracolic gutter. The patient undergoes appendectomy. Final pathology reveals periappendicitis. This most likely represents:",
      "options": [
        "A. Acute mesenteric adenitis",
        "B. Familial Mediterranean fever",
        "C. Perforated duodenal ulcer",
        "D. Tuberculosis",
        "E. Primary peritonitis"
      ],
      "answer": "C",
      "explanation": "*   Purulent fluid at appendectomy indicates peritonitis.\n*   Large amount of purulent fluid without appendix perforation should prompt search for another source of perforation.\n*   Periappendicitis signifies inflammation of the appendix serosa, not transmural inflammation.\n*   Serosa inflames in response to another infection, often acute salpingitis in women or other GI perforation (e.g., perforated ulcer).\n*   Clinical presentation of a perforated duodenal ulcer can mimic appendicitis, especially if perforation seals and contents gravitate to the cecal area.\n*   Acute mesenteric adenitis (A) is often preceded by upper respiratory infection, common in children, presenting with vague, diffuse tenderness without significant guarding.\n*   Familial Mediterranean fever (Armenian disease) (B) causes polyserositis but not periappendicitis.\n*   Tuberculosis (D) is unlikely to cause periappendicitis.\n*   Primary peritonitis (E) occurs most often in patients with nephrotic syndrome or cirrhosis with infected ascites, typically by gram-positive cocci."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "A 40-year-old man presents with a 5-day history of right lower quadrant abdominal pain, anorexia, and fever. On physical examination, he is focally tender in the right lower quadrant, and a mass is palpable. A CT scan shows a small (<1 cm) abscess surrounding an inflamed appendix. After fluid resuscitation and intravenous antibiotics, which of the following is the most appropriate management?",
      "options": [
        "A. CT-guided drainage followed by interval appendectomy",
        "B. Initial nonoperative management followed by interval appendectomy",
        "C. Laparoscopic appendectomy",
        "D. Open appendectomy",
        "E. Nonoperative management"
      ],
      "answer": "E",
      "explanation": "*   Patients with protracted history consistent with acute appendicitis and a palpable mass likely have a perforated and walled-off abscess.\n*   Best managed by nonoperative therapy (IV antibiotics, bowel rest).\n*   Large studies show a low recurrence rate with nonoperative management; therefore, interval appendectomy is no longer routinely performed for perforated appendicitis.\n*   Taking such a patient to the OR for open or laparoscopic appendectomy (C, D) is acceptable, but intense inflammation and scarring make the operation difficult and increase chances of ileocecectomy (E).\n*   Routine CT-guided drainage of abscesses is not recommended, especially for small abscesses (A)."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A 55-year-old man is undergoing a screening colonoscopy. A benign-appearing 1-cm pedunculated polyp is removed from the sigmoid colon. Four hours later, severe left lower quadrant pain develops in the patient. A CT scan reveals free intraperitoneal air, with minimal fat stranding around the sigmoid colon. The situation is best managed by:",
      "options": [
        "A. Diverting proximal colostomy",
        "B. Resection of sigmoid colon with an end colostomy and oversew of the rectum",
        "C. Resection of the sigmoid colon with primary anastomosis",
        "D. Primary closure of the perforation",
        "E. Broad-spectrum antibiotics and nasogastric decompression"
      ],
      "answer": "D",
      "explanation": "*   Management considers colonoscopy indications, timing of perforation, and intraoperative findings.\n*   Since the polyp is pedunculated and benign-appearing, it's presumed completely removed, and further colon resection is not needed.\n*   The majority of colonic injuries (iatrogenic or penetrating trauma) can be repaired primarily.\n*   This patient presumably had a bowel prep, so bacterial load is decreased.\n*   Resection with colostomy (A-C) is reserved for long-standing perforation and diffuse fecal contamination.\n*   Conservative management (E) is inappropriate for an iatrogenic, symptomatic colonic perforation."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "Five days after appendectomy, liquid stool is noted to be coming out of the right lower quadrant wound. Which of the following is true about this condition?",
      "options": [
        "A. The patient should have nothing by mouth and be placed on parenteral nutrition.",
        "B. Octreotide should be started.",
        "C. The patient should immediately undergo re-exploration and a cecostomy.",
        "D. The patient should immediately undergo re-exploration and a right colectomy.",
        "E. The condition resolves spontaneously in most instances."
      ],
      "answer": "E",
      "explanation": "*   The patient has a cecal fistula, commonly caused by suture slippage or necrosis of the appendiceal stump.\n*   Colocutaneous fistulas are low-output fistulas, not associated with large fluid/electrolyte/nutrient losses.\n*   Total parenteral nutrition is not necessary (A).\n*   Spontaneous closure is the rule in most patients.\n*   Surgery is not an appropriate initial management (C, D).\n*   Patients can be fed a low-residue diet as absorption is mostly complete by the time contents reach the cecum.\n*   Octreotide does not help in cecal fistula closure (B).\n*   If the fistula fails to close, suspect neoplasm in cecum, IBD, tuberculosis, or distal obstruction."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "Which of the following is true regarding chemotherapy for colon carcinoma?",
      "options": [
        "A. The combination of 5-fluorouracil and leucovorin prolongs survival in stage IV colon cancer.",
        "B. Radiation therapy is commonly used in combination with chemotherapy in the management of colon cancer.",
        "C. Bevacizumab (Avastin) has not been shown to prolong survival in stage IV colon cancer.",
        "D. 5-Fluorouracil and leucovorin prolong survival in patients with stage III colon cancer.",
        "E. Bevacizumab (Avastin ) is a monoclonal antibody against epidermal growth factor receptor."
      ],
      "answer": "D",
      "explanation": "*   Current guidelines: Stage I colon cancer (node negative, invades submucosa) does not need chemotherapy.\n*   Role of chemotherapy in Stage II (node negative, invades subserosa or direct invasion of adjacent organ) colon cancer is debatable.\n*   Combination of 5-fluorouracil and leucovorin prolongs survival in Stage III colon cancer (positive lymph nodes, no distant metastasis) but not Stage IV (A).\n*   Until recently, no effective chemotherapy for Stage IV cancers existed.\n*   Two recent drugs, Cetuximab (Erbitux) and Bevacizumab (Avastin), have been approved for Stage IV colon cancer, prolonging life but not curing it (C).\n*   Cetuximab targets epidermal growth factor receptor.\n*   Bevacizumab (Avastin) is a monoclonal antibody against vascular endothelial growth factor A (E).\n*   Radiation therapy is not commonly used for colon cancer but is common with chemotherapy for rectal cancer (B)."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "A 65-year-old man presents with a 2-day history of left lower quadrant abdominal pain, nausea, and low-grade fever. On physical examination, his temperature is 100.5°F and WBC count is 14,000 cells/µL. He has localized, moderate left lower quadrant pain without rebound. Antibiotics are administered. Which of the following is indicated as the next step in the patient's management?",
      "options": [
        "A. Plain x-rays of the abdomen",
        "B. CT scan",
        "C. Flexible sigmoidoscopy",
        "D. Barium enema",
        "E. Gastrografin enema"
      ],
      "answer": "B",
      "explanation": "*   This patient has uncomplicated diverticulitis.\n*   Diagnosis is suspected based on history of fever, leukocytosis, and left lower quadrant pain.\n*   After hydration, bowel rest, and broad-spectrum antibiotics, CT scanning is generally recommended to confirm diagnosis and rule out abscess.\n*   Plain abdominal x-rays are generally not helpful (A).\n*   Endoscopy in the acute setting is contraindicated due to perforation risk (C).\n*   Colonoscopy should be performed 6–8 weeks later to rule out cancer.\n*   Gastrografin enema is typically not necessary, and barium enema is contraindicated due to risk of barium peritonitis (D, E)."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "An important source of energy for colonocytes, particularly in the setting of diversion colitis, is:",
      "options": [
        "A. Ketone bodies",
        "B. Glucose",
        "C. Amino acids",
        "D. Propionate",
        "E. Glutamine"
      ],
      "answer": "D",
      "explanation": "*   Diversion colitis can occur after fecal diversion.\n*   When the fecal stream is diverted, colonocytes are not exposed to intraluminal nutrients, leading to deficiency and mucosal atrophy/inflammatory colitis.\n*   Short-chain fatty acids (SCFAs) (acetate, butyrate, and propionate) are produced by bacterial fermentation of dietary carbohydrates like lactulose.\n*   SCFAs are an important energy source for colonic mucosa and are considered first-line treatment (as rectal enema) for diversion colitis.\n*   Colonocytes use this energy for processes like active sodium transport.\n*   Ketone bodies, glucose, or amino acids (glutamine) are not used as energy sources for colonocytes (A-C, E)."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "A 15-year-old boy presents to a colorectal clinic with a family history of familial polyposis. APC gene testing is performed, and the result is positive. Flexible sigmoidoscopy reveals eight polyps in the sigmoid. Colonoscopy reveals no other polyps. Polyps are consistent with adenomatous polyps without evidence of malignancy. Which of the following is the recommended management?",
      "options": [
        "A. Repeat sigmoidoscopy in 6 months",
        "B. Cyclooxygenase-2 inhibitors, repeat sigmoidoscopy in 6 months",
        "C. Total colectomy with ileorectal anastomosis",
        "D. Total proctocolectomy with continent ileostomy",
        "E. Restorative proctocolectomy with ileal pouch-anal anastomosis"
      ],
      "answer": "E",
      "explanation": "*   For patients testing positive for the APC gene, screening via sigmoidoscopy starts at age 10-12.\n*   Once polyps are detected, the recommendation is to remove the entire colon and rectum (A).\n*   COX-2 inhibitors were shown to slow polyp growth in FAP in a randomized study, but recent studies indicate increased risk of cardiovascular death (B).\n*   The best option is a restorative proctocolectomy with an ileal pouch-anal anastomosis.\n*   Total abdominal colectomy with ileorectal anastomosis is another option, but requires careful lifelong surveillance of the rectal mucosa for polyps (C).\n*   Total proctocolectomy with continent ileostomy is another option, but avoiding an ostomy in a young patient is preferred (D)."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "Which of the following is the most reliable in confirming the diagnosis of acute appendicitis?",
      "options": [
        "A. Classic history of initial periumbilical pain shifting to the right lower quadrant",
        "B. Localized tenderness at McBurney's point",
        "C. Rebound tenderness",
        "D. Presence of obturator sign",
        "E. Presence of Rovsing's sign"
      ],
      "answer": "B",
      "explanation": "*   All choices are associated with acute appendicitis.\n*   Alvarado score (10 points) for acute appendicitis includes: classic migration of pain, anorexia, nausea/vomiting, right lower quadrant tenderness, rebound, fever, leukocytosis, left shift (A, C).\n*   Highest point assignments were for right lower quadrant tenderness and leukocytosis.\n*   Most reproducible and reliable finding is localized tenderness at McBurney's point.\n*   Early appendicitis may not present with marked leukocytosis/left shift.\n*   Obturator sign (D) is not constant and occurs primarily when inflamed appendix lies against obturator internus muscle in pelvis.\n*   Rovsing's sign (E) is pain elicited in right lower quadrant while palpating left lower quadrant, suggestive of peritoneal irritation."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "The most common perianal lesion in Crohn disease is:",
      "options": [
        "A. Fissures",
        "B. Skin tags",
        "C. Perianal abscess",
        "D. Perianal fistulas",
        "E. Hemorrhoids"
      ],
      "answer": "B",
      "explanation": "*   The most common perianal lesion in Crohn disease is a skin tag, followed by fissures (A).\n*   Fissures are tears in the anoderm, usually superficial and in the posterior midline (poorer blood supply).\n*   Deep or lateral fissures should raise concern for Crohn disease.\n*   Crohn disease increases the risk of hemorrhoids, perianal abscesses, and fistulas (C-E).\n*   Most patients with anal manifestations will have Crohn disease elsewhere.\n*   Perianal involvement is extremely rare with UC."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "Which of the following is true regarding acute appendicitis?",
      "options": [
        "A. The luminal capacity of the appendix is 1 mL.",
        "B. The initial periumbilical pain is due to stimulation of parietal afferent pain fibers.",
        "C. Ruptured appendicitis can drain dependently into the rectovesical pouch.",
        "D. Nausea often precedes abdominal pain.",
        "E. There is no difference in perforation rates based on age."
      ],
      "answer": "C",
      "explanation": "*   Distention of the appendix stretches visceral peritoneum, stimulating afferent fibers, leading to vague, dull periumbilical pain that later transitions to right lower quadrant pain as somatic fibers of parietal peritoneum inflame (B).\n*   Patients subsequently have peristalsis stimulation and reflex nausea/vomiting (D).\n*   Nausea preceding abdominal pain is more consistent with gastroenteritis.\n*   Appendix luminal capacity is only 0.1 mL, so small amounts of intraluminal secretion and bacterial overgrowth rapidly increase intraluminal pressure (A).\n*   Increasing pressure eventually occludes blood supply at capillary and venule levels.\n*   Some acute appendicitis episodes resolve spontaneously.\n*   Ruptured appendicitis can drain dependently into the rectovesical pouch, leading to a pelvis abscess.\n*   Both recurrent and chronic forms exist and can mislead clinicians.\n*   Recurrent episodes were reported in 6.5% of those with inflamed appendix.\n*   Children have a higher perforation rate, and underdeveloped omentum makes walling off perforation more difficult (E)."
    },
    {
      "id": 32,
      "question_type": "mcq",
      "question": "The most common cause of rectovaginal fistula is:",
      "options": [
        "A. Colon carcinoma",
        "B. Diverticulitis",
        "C. Crohn disease",
        "D. Obstetric injury",
        "E. Bladder carcinoma"
      ],
      "answer": "D",
      "explanation": "*   Obstetric injury accounts for nearly 80% of all rectovaginal fistulas, followed by Crohn disease (C).\n*   Diverticulitis is the leading cause of colovesical fistulas (B).\n*   Other causes of colovesicular fistula include Crohn disease, radiation therapy, and colon and bladder cancer (A, E).\n*   Key elements for management include establishing diagnosis and ruling out other causes.\n*   CT scanning is the best initial study, confirming fistula presence by demonstrating air in bladder and associated masses.\n*   Sigmoidoscopy is useful to rule out mucosal abnormalities.\n*   Contrast enema may define fistula course, but small fistulas may be missed.\n*   Surgical management depends on whether the fistula is benign or malignant.\n*   If secondary to diverticulitis, management is sigmoid colectomy with bladder repair.\n*   If due to malignancy, en bloc resection of part of the bladder wall is performed."
    },
    {
      "id": 33,
      "question_type": "mcq",
      "question": "A 75-year-old woman presents to clinic for follow-up after four episodes of uncomplicated diverticulitis in the past year, each of which required a 5-day hospitalization for IV antibiotics and bowel rest. The patient is a diabetic. Previous CT scans demonstrated inflammation in the sigmoid colon with fat stranding. Subsequent colonoscopy revealed diverticula throughout the majority of the transverse, descending, and sigmoid colon but was negative for other pathology. Which of the following is the most correct surgical intervention?",
      "options": [
        "A. Total colectomy with ileoproctostomy",
        "B. Sigmoid colectomy with proximal margin at an area without any hypertrophy of the muscularis propria and distal margin where the taenia splay out",
        "C. Left colectomy with proximal margin where there is cessation of diverticula and distal margin where the taenia splay out",
        "D. Sigmoid colectomy with proximal margin at an area without any hypertrophy of the muscularis propria and distal margin at the rectosigmoid junction",
        "E. Left colectomy with proximal margin where there is cessation of diverticula and distal margin at the rectosigmoid junction"
      ],
      "answer": "B",
      "explanation": "*   Previously, surgery was recommended after the second episode of uncomplicated diverticulitis; however, large studies have refuted this.\n*   Now, surgical intervention is offered case-by-case, considering number of episodes, age, comorbidities, severity, and quality of life.\n*   A lower threshold for surgery is recommended for diabetic and immunocompromised (steroid-taking) patients.\n*   All complicated diverticulitis cases should be offered definitive surgical intervention once acute condition resolves.\n*   One principle of diverticulitis surgery is to resect only inflamed, thickened colon, despite diffuse diverticula (A, C, E).\n*   Once distal colon is removed, intraluminal pressure decreases, and most proximal diverticula resolve.\n*   Recurrence is primarily due to inadequate distal resection, leaving sigmoid diverticula.\n*   Distal resection margin should be normal-appearing rectum (D), identifiable where taeniae splay out."
    },
    {
      "id": 34,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the immune function of the appendix?",
      "options": [
        "A. It secretes IgA.",
        "B. It secretes IgE.",
        "C. It secretes IgM.",
        "D. It secretes IgG.",
        "E. It has no immune function."
      ],
      "answer": "A",
      "explanation": "*   The appendix is part of the gut-associated lymphoid tissue and primarily secretes IgA.\n*   Removal of the appendix has no known adverse effect on immune function.\n*   A study from Duke University proposes the appendix serves as a safe haven/reservoir for healthy bacteria that repopulate the gut after illnesses.\n*   IgG (D) is the most abundant antibody in serum and predominant in secondary immune response.\n*   IgE (B) is the least abundant and mediates hypersensitivity reactions.\n*   IgM (C) is the largest immunoglobulin and earliest major immunoglobulin in primary immune response."
    },
    {
      "id": 35,
      "question_type": "mcq",
      "question": "A hernia containing an appendix is known as:",
      "options": [
        "A. Petit hernia",
        "B. Amyand hernia",
        "C. Littre hernia",
        "D. Spigelian hernia",
        "E. Grynfeltt hernia"
      ],
      "answer": "B",
      "explanation": "*   An Amyand hernia contains the appendix.\n*   Its importance is that it can be confused with a standard strangulated hernia.\n*   Management should consist of appendectomy without mesh.\n*   Named after Claudius Amyand, who performed the first appendectomy in London in 1746 on an 11-year-old boy with a scrotal hernia containing a pin-perforated appendix.\n*   Petit hernia (A) is a lumbar hernia in the inferior lumbar triangle.\n*   Littre hernia (C) contains a Meckel diverticulum.\n*   Spigelian hernia (D) is through the linea semilunaris, between two layers of abdominal wall, making it difficult to palpate.\n*   Grynfeltt hernia (E) is another lumbar hernia in the superior lumbar triangle."
    },
    {
      "id": 36,
      "question_type": "mcq",
      "question": "A 35-year-old man presents with a 1-day history of anorexia, right lower quadrant pain and tenderness, and low-grade fever. At surgery, the appendix appears normal. However, both the cecum and terminal ileum appear red and inflamed. Management would consist of:",
      "options": [
        "A. Right hemicolectomy",
        "B. Appendectomy",
        "C. Close wound without further intervention",
        "D. Biopsy of the cecal wall",
        "E. Biopsy of the terminal ileum"
      ],
      "answer": "C",
      "explanation": "*   Only a minority (10%) of patients with terminal ileitis progress to Crohn disease on long-term follow-up; however, this diagnosis should always be considered.\n*   Indications for resection include free perforation, fistula, or stricture.\n*   Diagnosis can be confused with appendicitis.\n*   If the cecum is not inflamed, the appendix should be removed to avoid future confusion due to recurrent abdominal pain.\n*   However, if active inflammation of the cecum is present, appendectomy should not be performed due to higher risk of enterocutaneous fistula formation (B).\n*   Similarly, biopsy should be avoided as it increases the risk for enterocutaneous fistula formation (D, E).\n*   Therefore, closing the wound without further intervention is the correct management.\n*   This patient should subsequently receive a colonoscopy with random biopsies for inflammatory bowel disease evidence."
    },
    {
      "id": 37,
      "question_type": "mcq",
      "question": "A 15-year-old boy presents with a 5-day history of right lower quadrant pain and a fever of 103°F. On examination, he has right lower and right upper quadrant tenderness. Total bilirubin is 3 mg/dL and alkaline phosphatase is 250 IU/L. CT with contrast demonstrates multiple densities in the right lobe of the liver, a phlegmon in the right lower quadrant, and stranding around the superior mesenteric vein with air bubbles within the vein. The clinical picture most likely represents:",
      "options": [
        "A. Amebic liver abscess",
        "B. Pylephlebitis",
        "C. Carcinoid syndrome",
        "D. Metastatic adenocarcinoma",
        "E. Inflammatory bowel disease (IBD)"
      ],
      "answer": "B",
      "explanation": "*   Pylephlebitis is infectious inflammation of the portal venous system, draining the gastrointestinal tract.\n*   Typically begins in small veins draining an abdominal infection, most often diverticulitis and appendicitis.\n*   Thrombophlebitis extension into larger veins can lead to septic thrombophlebitis of portal vein or its tributaries (superior mesenteric vein, splenic vein), and multiple small liver abscesses.\n*   Bacteria are more likely to lodge and form abscesses in the right lobe of the liver due to laminar flow patterns.\n*   Amebic liver abscesses (A) also form in the right lobe but are usually singular.\n*   Patients are usually not jaundiced but have elevated liver enzymes (particularly alkaline phosphatase).\n*   Pylephlebitis was more common pre-antibiotics, now rare.\n*   Air bubbles or thrombi in the portal venous system are key CT findings (D).\n*   Reported mortality is high (30-50%).\n*   Most prudent approach: rapid administration of broad-spectrum antibiotics, removal of infectious source (e.g., appendectomy), and anticoagulation (for suspected thrombosed superior mesenteric vein).\n*   Carcinoid syndrome (C) or IBD (E) are unlikely to present with elevated alkaline phosphatase and total bilirubin or fit the clinical history."
    },
    {
      "id": 38,
      "question_type": "mcq",
      "question": "Which of the following is true regarding appendicitis in HIV-infected patients?",
      "options": [
        "A. Appendicitis occurs more frequently than in the general population.",
        "B. HIV-infected patients usually do not manifest abdominal symptoms and signs.",
        "C. Low CD4 counts are associated with a decreased risk of rupture.",
        "D. Postoperative morbidity for nonperforated appendicitis is higher than in the general population.",
        "E. Absolute leukocyte counts are typically elevated."
      ],
      "answer": "A",
      "explanation": "*   Incidence of acute appendicitis in HIV-infected patients is 0.5%, higher than the general population.\n*   Overall presentation is often similar, but some patients may present with a nonspecific abdominal examination (B).\n*   Absolute leukocyte count is usually not elevated; patients may have relative leukocytosis (E).\n*   Rupture risk is higher in HIV-infected patients, possibly due to delayed presentation.\n*   Low CD4 count seems to increase rupture risk (C).\n*   Morbidity rates for nonperforated appendicitis are similar to the general population, but higher with perforation (D).\n*   Differential diagnosis includes cytomegalovirus (CMV) enteritis and typhlitis.\n*   CT of abdomen/pelvis can help distinguish etiologies."
    },
    {
      "id": 39,
      "question_type": "mcq",
      "question": "When comparing laparoscopic with open appendectomy, which of the following is true regarding laparoscopic appendectomy?",
      "options": [
        "A. It is at or below the cost of an open appendectomy owing to the shorter duration of surgery.",
        "B. It does not affect the length of hospital stay.",
        "C. It results in a decreased intra-abdominal abscess rate.",
        "D. It does not affect wound infection rate.",
        "E. It allows for decreased postoperative analgesic use."
      ],
      "answer": "E",
      "explanation": "*   Laparoscopic appendectomy is most advantageous in women of childbearing age (when diagnosis is in question) or obese patients.\n*   Cost and duration of surgery are higher for laparoscopic appendectomy (A).\n*   Length of hospital stay is slightly shorter (B).\n*   Wound infection rate (D), degree of postoperative pain, and time to return to work are decreased.\n*   One meta-analysis showed intra-abdominal abscess rate trended higher with laparoscopic appendectomy; another showed no difference (C)."
    },
    {
      "id": 40,
      "question_type": "mcq",
      "question": "The most common worldwide intestinal parasite causing appendicitis is:",
      "options": [
        "A. Enterobius vermicularis",
        "B. Strongyloides stercoralis",
        "C. Ascaris lumbricoides",
        "D. Echinococcus granulosus",
        "E. Clonorchis sinensis"
      ],
      "answer": "C",
      "explanation": "*   Association of parasites with appendicitis is controversial (incidental finding vs. actual cause).\n*   *Ascariasis* is the most common parasite worldwide (~1.4 billion infected), primarily in low/middle income countries, but appearing more in US due to international travel/emigration.\n*   *Enterobius vermicularis* (pinworm) is the second most common parasite (A).\n*   Intestinal parasites can cause appendicitis by obstructing the lumen.\n*   Always check final pathology; helminthicide therapy is necessary postoperatively.\n*   Mebendazole, pyrantel pamoate, and albendazole are drugs of choice.\n*   *Strongyloides stercoralis* (threadworm) can lead to pneumonitis, malabsorption, bleeding ulcers (B).\n*   *Echinococcus granulosus* can lead to hydatid cyst disease (D).\n*   *Clonorchis sinensis* (Chinese liver fluke) can increase risk of pigmented gallstones and cholangiocarcinoma (E)."
    },
    {
      "id": 41,
      "question_type": "mcq",
      "question": "Incidental appendectomy is BEST indicated in which of the following circumstances?",
      "options": [
        "A. During gastric bypass surgery in a 45-year-old man",
        "B. During hysterectomy in a 30-year-old woman",
        "C. During small bowel resection in a 30-year-old woman with Crohn disease",
        "D. During laparoscopic cholecystectomy in a 25-year-old woman",
        "E. During a Whipple procedure in a 50-year-old man"
      ],
      "answer": "C",
      "explanation": "*   When deciding on incidental appendectomy, factor in lifelong appendicitis risk vs. appendectomy risks and additional costs.\n*   Lifelong appendicitis risk is 8.6% in men and 6.7% in women; incidental appendectomy is rarely recommended.\n*   A large study showed low-risk patients undergoing incidental appendectomy during cholecystectomy had a significant increase in nonfatal complications (odds ratio of 1.53).\n*   Particular circumstances for incidental appendectomy: children about to undergo chemotherapy (risk of typhlitis), disabled patients (cannot react normally to abdominal pain), Crohn disease patients (significant risk of subsequent abdominal pain) whose cecum is free of macroscopic disease (minimize postoperative cecal fistula), and individuals traveling to remote places without medical/surgical access.\n*   Patients in other answer choices (A, B, D, E) would not benefit from incidental appendectomy."
    },
    {
      "id": 42,
      "question_type": "mcq",
      "question": "A 10-year-old boy presents with symptoms and signs of acute appendicitis. At surgery, the appendix appears normal. However, there is diffuse adenopathy within the small bowel mesentery. Which of the following is true about this condition?",
      "options": [
        "A. The normal appendix should be removed and a biopsy of the mesenteric lymph nodes performed.",
        "B. This condition usually causes more peritoneal irritation than appendicitis.",
        "C. The WBC count tends to be higher than with appendicitis.",
        "D. It occurs with equal frequency in adults and children.",
        "E. It is usually associated with an antecedent upper respiratory tract infection."
      ],
      "answer": "E",
      "explanation": "*   Presentation and findings are consistent with acute mesenteric adenitis (pseudoappendicitis).\n*   Associated with *Yersinia enterocolitica*, *Helicobacter jejuni*, *Campylobacter jejuni*, *Salmonella* or *Shigella* species, and streptococcal pharynx infections.\n*   More common in children and often preceded by an upper respiratory infection (D).\n*   Diagnosis of exclusion.\n*   Physical examination typically reveals more vague, diffuse tenderness, without significant guarding, unlike localized tenderness in appendicitis (B).\n*   Leukocytosis is usually present, with WBC counts between 10-15 × 10^3 cells/µL, similar to appendicitis (C).\n*   CT may show generalized lymphadenopathy in small bowel mesentery, but findings are nonspecific.\n*   Diagnosis is often made intraoperatively.\n*   No need for nodal biopsy (A)."
    },
    {
      "id": 43,
      "question_type": "mcq",
      "question": "A 50-year-old woman presents with symptoms and signs of acute appendicitis. At surgery, there is a large amount of gelatinous ascites with peritoneal implants. This most likely represents:",
      "options": [
        "A. Benign ovarian tumor",
        "B. Appendiceal mucinous adenoma",
        "C. Tuberculous appendicitis",
        "D. Salmonella enteritidis",
        "E. Yersinia enterocolitica"
      ],
      "answer": "B",
      "explanation": "*   Pseudomyxoma peritonei is a confusing term applied to various pathologies.\n*   Refers to progressive process where peritoneal cavity fills with thick gelatinous substance.\n*   Substance arises from mucus-secreting cells from a perforated, mucus-producing tumor (benign or malignant), originating from appendix, small bowel, or ovary.\n*   Even if benign, once spread throughout peritoneum, it's difficult to eradicate, leading to mechanical small bowel obstruction.\n*   If malignant, 5-year survival rate is significantly reduced.\n*   Most common source is benign mucinous cystadenoma of the appendix.\n*   New terminology: disseminated peritoneal adenomucinosis for patients with mucinous peritoneal implants from benign appendix adenoma (most common).\n*   More aggressive form: peritoneal mucinous carcinomatosis (extensive proliferative epithelium, cytologic atypia, high mitotic rate).\n*   Treatment: aggressive removal of all peritoneal implants + appendectomy.\n*   Intraperitoneal chemotherapy shows promising results.\n*   5-year survival rate is ~50%, highly variable by histology.\n*   Tuberculous peritonitis (C) presents as slowly progressive abdominal distention due to ascites, with fever, weight loss, abdominal pain.\n*   Surgical features: multiple whitish nodules scattered over visceral/parietal peritoneum.\n*   *Salmonella enteritidis* (D): diarrhea, nausea, vomiting with stool leukocytes; rarely leads to intestinal perforation, most commonly through ulcerated Peyer patch.\n*   *Yersinia* infections (E): mesenteric adenitis, colitis, ileitis, can cause appendicitis.\n*   Meigs syndrome (A): benign ovarian tumor with ascites and pleural effusion resolving after tumor resection."
    },
    {
      "id": 44,
      "question_type": "mcq",
      "question": "The most common presentation for appendiceal adenocarcinoma is:",
      "options": [
        "A. Palpable abdominal mass",
        "B. Acute appendicitis",
        "C. Ascites",
        "D. Incidental finding during unrelated abdominal surgery",
        "E. Chronic anemia"
      ],
      "answer": "B",
      "explanation": "*   Primary adenocarcinoma of the appendix most commonly presents as acute appendicitis.\n*   Always check final pathology of appendiceal specimen.\n*   Increased risk of synchronous neoplasms, especially in the colon; full colonoscopy should be done.\n*   Definitive treatment is right colectomy regardless of tumor size.\n*   If final pathology reveals appendiceal cancer, patient should undergo right colectomy.\n*   In one series, 5-year survival after curative resection was 61% and 31%.\n*   Other answer choices (A, C-E) are not typical presentations."
    },
    {
      "id": 45,
      "question_type": "mcq",
      "question": "A 40-year-old man undergoes an appendectomy for acute appendicitis. Final pathology reveals a 1.1-cm carcinoid at the base of the appendix. Lymph nodes are negative. Which of the following is true about this condition?",
      "options": [
        "A. No further treatment is necessary.",
        "B. There is a significant chance that carcinoid syndrome will develop in the patient.",
        "C. The patient should receive chemotherapy.",
        "D. The patient should undergo re-exploration and a right colectomy.",
        "E. Most appendiceal carcinoids are 2.5 cm or larger when discovered."
      ],
      "answer": "D",
      "explanation": "*   Most carcinoids are found at the appendix tip, often incidental findings rather than cause of appendicitis.\n*   Over 95% of appendix carcinoid tumors are <2 cm (E).\n*   Tumors <1 cm rarely extend outside appendix and are treated by simple appendectomy (A).\n*   Right colectomy is indicated for tumors >1 cm with mesoappendix or base extension, and for tumors >2 cm located at the tip.\n*   In contrast, adenocarcinoma of any size/location in appendix is treated with right hemicolectomy.\n*   Appendiceal carcinoids rarely cause carcinoid syndrome because widespread liver metastases are rare, and there's no relation to tumor size/carcinoid syndrome development (B).\n*   No role for radiation or chemotherapy (C).\n*   In one large series, overall 5-year survival for localized lesions was 94%, regional invasion 84.6%, and distant metastases 33.7%.\n*   ~15% of patients had noncarcinoid tumors at other sites."
    },
    {
      "id": 46,
      "question_type": "mcq",
      "question": "A 10-year-old boy with acute myelogenous leukemia presents with right lower quadrant abdominal pain and tenderness. He recently completed chemotherapy. His temperature is 102°F and WBC count is 900 cells/μL. A CТ scan reveals inflammation and thickening of the right colon and stranding in the adjacent fat. Management consists of:",
      "options": [
        "A. IV antibiotics, bowel rest, and IV fluids",
        "B. Right hemicolectomy with primary ileotransverse colostomy",
        "C. Right hemicolectomy with ileostomy and mucous fistula",
        "D. Cecostomy",
        "E. Appendectomy"
      ],
      "answer": "A",
      "explanation": "*   In neutropenic patients with leukemia and acute abdominal pain, suspect neutropenic enterocolitis (typhlitis).\n*   Typical presentation: abdominal pain/tenderness, fever, diarrhea with severe neutropenia (absolute neutrophil count <1000 cells/μL).\n*   CT scan helps rule out perforation and shows thickening of cecal wall with pericolic stranding.\n*   Ultrasonography can also help diagnose cecal thickening.\n*   Most patients respond to bowel rest and IV antibiotics.\n*   Mortality rate in children in contemporary series is 8-10%.\n*   Surgery is reserved for patients with perforation signs; need for surgical intervention is low (B-E)."
    },
    {
      "id": 47,
      "question_type": "mcq",
      "question": "A 65-year-old woman presents with a massive lower GI bleed. Her initial blood pressure in the ED is 80/60 mm Hg, with a heart rate of 120 beats per minute. After volume resuscitation, the blood pressure increases to 120/80 mm Hg. A nasogastric aspirate is negative for blood. The next step in her management is:",
      "options": [
        "A. Colonoscopy",
        "B. Mesenteric arteriography",
        "C. Tagged red cell scan",
        "D. Proctoscopy",
        "E. Exploratory laparotomy"
      ],
      "answer": "D",
      "explanation": "*   Most common cause of lower GI bleeding is diverticulosis, often from right-sided lesions.\n*   Massive lower GI bleeding can rarely be from an upper GI source.\n*   Placing a nasogastric tube and aspirating for blood are important first steps after ABCs.\n*   Hemorrhoids rarely cause massive bleeding.\n*   Next step is proctoscopy to rule out hemorrhoids, avoiding catastrophic total colectomy if bleeding is from a more distal source.\n*   After proctoscopy, management depends on patient's response to resuscitation.\n*   If patient stabilizes, colonoscopy after bowel prep (A).\n*   If patient continues to bleed, next step is mesenteric arteriography or tagged red blood cell scan (B, C).\n*   Arteriography can be diagnostic/therapeutic (embolization) but is invasive and requires brisk bleeding (0.5-1 mL/min).\n*   Nuclear scanning detects slower bleeding (0.1 mL/min) and allows repeat images for up to 24 hours.\n*   If patient cannot be stabilized and source not discovered, exploratory laparotomy with intraoperative endoscopy (E).\n*   If source cannot be localized, total colectomy is performed."
    },
    {
      "id": 48,
      "question_type": "mcq",
      "question": "A 65-year-old institutionalized patient presents with a 2-day history of abdominal distention, nausea, and obstipation. Physical examination is significant for marked distention with mild diffuse abdominal tenderness, no guarding, and no rebound. The WBC count is 10,000 cells/µL. Plain films reveal a massively dilated, inverted U-shaped (omega sign) loop of bowel. Management should consist of:",
      "options": [
        "A. Endoscopic detorsion",
        "B. Endoscopic detorsion followed by elective sigmoid colectomy",
        "C. Endoscopic detorsion followed by elective sigmoid colectomy in the case of a recurrence",
        "D. Exploratory laparotomy with sigmoid colectomy, on-table lavage, and primary anastomosis",
        "E. Exploratory laparotomy with sigmoid colectomy, proximal colostomy, and oversew rectal stump."
      ],
      "answer": "B",
      "explanation": "*   This patient has sigmoid volvulus.\n*   Common denominator: large, redundant colon.\n*   Predisposing factors: chronic constipation (elderly/institutionalized), high-fiber diet (elongated/redundant colon), megacolon (Chagas disease).\n*   Patients present with acute large bowel obstruction symptoms/signs.\n*   Important issues:\n    *   1. Establishing correct diagnosis: classic radiographic findings (markedly dilated colon, \"bent inner tube\" or omega sign).\n    *   2. Determining ischemic/dead bowel: systemic toxicity (labs) and physical exam (peritonitis); if present, patient needs laparotomy and sigmoid colectomy (D, E).\n    *   3. Understanding value of endoscopic detorsion: can be done with rigid proctosigmoidoscope or flexible endoscope.\n    *   4. High recurrence rate (~40%); after detorsion, recommend subsequent semielective colectomy (A, C).\n    *   5. Distinguishing from cecal volvulus: usually not endoscopically detorsed, requires surgery (right hemicolectomy)."
    },
    {
      "id": 49,
      "question_type": "mcq",
      "question": "Which of the following is true about hereditary nonpolyposis colon cancer (HNPCC) (Lynch syndrome)?",
      "options": [
        "A. It is not associated with a higher risk of upper genitourinary tract cancer.",
        "B. It is considered an autosomal recessive syndrome.",
        "C. Screening colonoscopy should begin at age 12.",
        "D. Colonic malignancy has the same prognosis as sporadic cancer.",
        "E. Modified Amsterdam criteria requires 1 family member to be diagnosed before age 40."
      ],
      "answer": "D",
      "explanation": "*   Stage for stage, colonic malignancy in Lynch syndrome has the same prognosis as sporadic cancer.\n*   In sporadic colon cancers, microsatellite instability and inappropriate DNA methylation lead to impaired DNA mismatch repair, increasing cancer risk.\n*   Lynch syndrome (HNPCC) arises from errors in DNA mismatch repair genes.\n*   It is an autosomal dominant syndrome with increased risk of colorectal carcinoma and other malignancies (lifetime risk: ~80% colon cancer, 20% gastric cancer, high risk of endometrial/upper genitourinary tract cancer) (A, B).\n*   Colon cancers are more commonly right-sided.\n*   Screening colonoscopy recommended at age 25 or 10 years younger than age of diagnosis in affected family members (C).\n*   FAP patients should begin screening earlier (age 10-12).\n*   Upper endoscopy screening recommended starting at age 50.\n*   Modified Amsterdam criteria for clinical diagnosis of HNPCC (3-2-1-1 rule): 3+ relatives with histologically verified cancers in colon, endometrium, small intestine, or pelvis; 2+ successive generations affected; 1+ relative diagnosed before age 50 (E); and FAP must be ruled out."
    },
    {
      "id": 50,
      "question_type": "mcq",
      "question": "Which of the following is true about colonic physiology?",
      "options": [
        "A. The colon absorbs the majority of water in the gastrointestinal tract.",
        "B. Sodium is absorbed actively via Na+,K+-ATPase.",
        "C. Ammonia reabsorption is unaffected by luminal pH.",
        "D. Chloride is secreted.",
        "E. It produces no nutrients."
      ],
      "answer": "B",
      "explanation": "*   The colon is responsible for water and electrolyte reabsorption.\n*   Water absorption averages 1-2 L/day but can be up to 5 L.\n*   However, the small intestine (mostly jejunum) absorbs the majority of water (A).\n*   Sodium is absorbed actively via Na+,K+-ATPase, with water following passively.\n*   Chloride is actively absorbed, not secreted, through a chloride–bicarbonate exchange (D).\n*   Bacterial fermentation in the colon produces short-chain fatty acids, a primary energy source for colonocytes (E).\n*   Decreasing colonic pH (e.g., with lactulose) decreases ammonia reabsorption (C)."
    },
    {
      "id": 51,
      "question_type": "mcq",
      "question": "A 55-year-old woman undergoes laparoscopy for presumed appendicitis. At surgery, she is found to have perforated appendicitis with what appears to be peritoneal studding. The patient undergoes appendectomy and biopsy of the peritoneum. Final pathology reveals appendiceal adenocarcinoma. Subsequent workup reveals no evidence of additional metastatic spread to the liver or lungs. Further treatment would consist of:",
      "options": [
        "A. No further treatment",
        "B. Systemic chemotherapy",
        "C. Intraperitoneal chemotherapy",
        "D. Cytoreductive surgery and hyperthermic intraperitoneal chemotherapy",
        "E. Cytoreductive surgery and systemic chemotherapy"
      ],
      "answer": "D",
      "explanation": "*   For peritoneal studding from appendiceal adenocarcinoma, cytoreductive surgery with hyperthermic intraperitoneal chemotherapy (HIPEC) shows promise in patients without distant organ metastasis.\n*   In a large series, patients with complete cytoreduction (tumor nodules <2.5 mm remaining) and adenomucinosis pathology had an 86% 5-year survival rate.\n*   Incomplete cytoreduction had a 20% 5-year survival rate.\n*   Systemic or intraperitoneal chemotherapy alone leads to lower survival rates (B-C, E).\n*   Offering no treatment is inappropriate (A).\n*   HIPEC is used for colorectal, gastric, and ovarian cancer, and intraperitoneal mesothelioma."
    }
  ]
}
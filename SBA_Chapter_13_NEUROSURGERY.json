{
    "chapter_name": "SECTION 13: NEUROSURGERY",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "Which one of the following forms the innermost layer of the scalp?",
            "options": [
                "A. Loose connective tissue",
                "B. Aponeurotic layer (galea)",
                "C. Skin",
                "D. Pericranium",
                "E. Dense connective tissue"
            ],
            "answer": "D",
            "explanation": "The scalp is formed by five layers denoted by the acronym SCALP from the outermost to innermost layer these are:\n• Skin\n• Connective tissue (dense)\n• Aponeurotic layer (galea)\n• Loose connective tissue\n• Pericranium\nThe outer surface (periosteum) of the skull bones provides nutrition and the ability to repair the bones. It can be lifted surgically during craniotomy.\nBlood supply to the scalp is provided by branches of the external and internal carotid arteries, which run in the dense connective tissue layer of the scalp and anastomose freely with each other. The nerve supply to the scalp varies according to region. The anterior scalp is supplied by the supratrochlear and supraorbital branches of cranial nerve V₁ (ophthalmic division of the trigeminal nerve). The posterior scalp is supplied by the posterior rami of the C2/C3 nerve roots and the lateral scalp is supplied by the auriculotemporal branch of cranial nerve V3 (mandibular division of the trigeminal nerve)."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "All of the following bones contribute to the formation of the pterion, except",
            "options": [
                "A. Frontal bone",
                "B. Parietal bone",
                "C. Temporal bone",
                "D. Greater wing of sphenoid bone",
                "E. Lesser wing of sphenoid bone"
            ],
            "answer": "E",
            "explanation": "The pterion is a point at the posterior end of the sapheno-parietal junc- tion, 3 cm superoposterior to the mid-point of the zygomatic process of the frontal bone. It marks the convergence of the frontal, parietal, temporal and sphenoid (greater wing) bones in an ‘H’-shaped suture. It is the thinnest part of the skull and overlies the anterior division of the middle meningeal artery, which runs on the inner aspect of the skull.\nThe middle meningeal artery is a branch of the maxillary artery, which itself is a branch of the external carotid artery. It is the largest of three branches supplying the meninges (the others being the anterior and pos- terior meningeal arteries). This artery can potentially be damaged if there is injury, such as a blow to the side of the head, and result in the collection of blood between the dura mater and the skull (an epi/extradural haema- toma). The lesser wing of the sphenoid contains the optic canal, anterior clinoid process and superior orbital fissure, which transmit a number of cranial nerves. It forms the posterior aspect of the anterior fossa at the base of the skull and does not contribute to the formation of the pterion."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "A 61-year-old teacher presents with a 3-month history of intermittent, right- sided facial pain affecting the area between his chin and lower eyelid. He reports that it occurs at any time of the day and has frequently disrupted his teach- ing sessions and daily activities such as brushing his teeth or having a meal. On examination, there is no obvious abnormality demonstrated. The admitting physician suspects trigeminal neuralgia in the distribution of the maxillary and mandibular branches. A specialist review is requested and appropriate treatment started. Through which of the following basal skull foramina does the mandibu- lar branch of the trigeminal nerve (cranial nerve V3) pass?",
            "options": [
                "A. Superior orbital fissure",
                "B. Foramen rotundum",
                "C. Foramen ovale",
                "D. Foramen lacerum",
                "E. Foramen spinosum"
            ],
            "answer": "C",
            "explanation": "All of the options in this question are found in the middle cranial fossa and transmit the following structures:\n• Superior orbital fissure – Oculomotor, trochlear and abducens nerves (cranial nerves III, IV and VI), ophthalmic division of trigeminal nerve (cranial nerve V₁ as the lacrimal, frontal and nasociliary nerves) and ophthalmic veins.\n• Foramen rotundum – Maxillary division of trigeminal nerve (cranial nerve V₂) supplies sensation to the cheek and nose. It passes through the foramen rotundum into the pterygopalatine fossa and enters the orbit via the inferior orbital fissure.\n• Foramen ovale – Mandibular division of trigeminal nerve (cra- nial nerve V3), accessory meningeal artery and lesser petrosal nerve.\n• Foramen lacerum – Internal carotid artery.\n• Foramen spinosum – Middle meningeal artery, which can be damaged as a result of pterion fractures, causing an extradural haematoma.\nThe trigeminal nerve (cranial nerve V) is a mixed sensory and motor nerve with three branches: ophthalmic (V₁), maxillary (V₂) and man- dibular (V3).\nTrigeminal neuralgia is a condition defined by brief episodes of intense, stabbing facial pain usually affecting one side of the face in a maxil- lary and mandibular distribution (the area supplied by the ophthal- mic branch, i.e. skin of upper nose, eyelid, forehead and scalp are only occasionally affected). The attacks can be frequent and precipitated by a touch to the skin, washing, shaving, eating and talking. The cause is usually unknown, but can occasionally be the result of a vascu- lar abnormality or cerebello-pontine angle tumour. Medical treatment is with carbamazepine, phenytoin and alcohol injection of the nerve, while surgical intervention to explore the nerve root can reveal tortu- ous blood vessels compressing it on entering the brainstem."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "Which of the following vessels supplying the brain is derived from the vertebral artery?",
            "options": [
                "A. Posterior cerebral artery",
                "B. Posterior communicating artery",
                "C. Middle cerebral artery",
                "D. Ophthalmic artery",
                "E. Anterior cerebral artery"
            ],
            "answer": "A",
            "explanation": "Blood supply to the brain is derived from two main supplies: the inter- nal carotid and vertebral arteries. The two vessels anastomose at the base of the brain to form the circle of Willis, branches of which supply different areas of the cerebrum.\nThe internal carotid artery is a branch of the common carotid artery. On the right, the latter begins as a bifurcation of the brachiocephalic trunk, whereas the left common carotid is a direct branch of the aortic arch. The vessel has no branches in the neck, which it traverses within the carotid sheath, together with the vagus nerve and internal jugular vein. The skull base is entered via the carotid canal, in the petrous part of the temporal bone, and intracranial branches are given off. Intracranial branches of the internal carotid are the ophthalmic artery, branches to the hypophysis and meninges, anterior cerebral artery and middle cerebral artery.\nThe vertebral artery meanwhile forms as a branch of the first part of the subclavian artery, ascending though the transverse foramina of the first six cervical vertebrae (C1-C6). After leaving the C1 foramen, the artery winds around the superior articular process of the atlas and passes through the foramen magnum into the cranium. Here it gives off intradural branches (the anterior and posterior spinal arteries and the posterior inferior cerebellar arteries), and joins its opposing vessel to form the basilar artery. Several vessels are also derived from the basilar artery. These are the anterior inferior cerebellar artery, pon- tine and labyrinthine branches and the superior cerebellar artery. The last two branches of the vertebral artery are formed by its division into two posterior cerebral arteries (which contribute to the formation of the circle of Willis). The posterior communicating artery joins the posterior cerebral artery to the internal carotid artery in the circle of Willis."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "In which layer does cerebrospinal fluid circulate?",
            "options": [
                "A. Subdural space",
                "B. Subarachnoid space",
                "C. Extradural space",
                "D. Between pia mater and spinal cord",
                "E. Spinal canal"
            ],
            "answer": "B",
            "explanation": "The meninges are three membranous layers surrounding the spinal cord. From inner to outermost they are the pia mater, arachnoid mater and dura mater. The subdural space is on the inner side of the dura, separating it from the arachnoid. The epidural/extradural space lies above the dura mater, containing the internal vertebral venous plexus and epidural fat.\nThe CSF is a clear, watery fluid that surrounds the spinal cord and brain, cushioning the latter from contact with the skull and reducing its weight. It is produced by the choroids plexus in the lateral, third and fourth ventricles and circulates there, in the central canal and in the subarachnoid space (the space between the arachnoid and pia mater lay- ers). It is absorbed by the arachnoid villi that project into the superior sagittal sinus. The CSF will normally have a clear appearance, a white cell count of <5 cells/mm³ (predominantly mononuclear cells), glucose level of 2.8-4.2 mmol/L (approximately half to two-thirds of the blood glucose level) and a protein content of 0.15-0.45 g/L."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "As the emergency department doctor on call, you are asked to perform a lum- bar puncture. The mid-point at the level of the iliac crests is identified as your point of insertion of the puncture needle. Which intervertebral space does this represent?",
            "options": [
                "A. L1/L2",
                "B. L2/L3",
                "C. L3/L4",
                "D. L4/L5",
                "E. L5/S1"
            ],
            "answer": "C",
            "explanation": "The spinal cord is part of the central nervous system and involved with transmission of neural impulses from the brain to the body peripheries. It is found in the upper two-thirds of the vertebral canal, terminating in a conical end (the conus medullaris) at the level of the second vertebral level (L2) in adults.\nA lumbar puncture (or spinal tap) is a diagnostic technique used to enter the subarachnoid space in order to measure the pressure of the CSF that flows within (8–14 mmHg in an adult) and to withdraw a sample for chemical analysis. The most common site of lumbar puncture is the L3/L4 vertebral space, found at the level of the iliac crests. Spinal tap above the conus medullaris can cause spinal cord injury and subsequent paralysis. Below this level is the filum terminale and cauda equina, which floats freely in cerebrospinal fluid and is not damaged by lumbar puncture. As a result, any space from L2/L3 to L5/S1 provides a safe entry point for puncture, but it is vitally important to identify the sur- face landmarks prior to a tap being performed.\nLumbar puncture is contraindicated in the presence of a bleeding diathe- sis, cardiorespiratory compromise, infection at the site of needle insertion and in cases of suspected raised ICP as indicated by very severe headache, reduced consciousness, rising blood pressure, vomiting, focal neurology and papilloedema. Withdrawal of CSF in the presence of raised ICP cre- ates a pressure gradient, which can cause tentorial herniation and death."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "While explaining the procedure of a lumbar puncture to a junior colleague, you are asked about the layers through which the lumbar puncture needle must pass before reaching the area containing cerebrospinal fluid. After piercing the skin and subcutaneous tissues, which anatomical structure would be traversed next during a tap?",
            "options": [
                "A. Interspinous ligament",
                "B. Supraspinous ligament",
                "C. Dura mater",
                "D. Ligamentum flavum",
                "E. Epidural space"
            ],
            "answer": "B",
            "explanation": "As discussed previously, lumbar puncture is an important diagnostic technique used to enter into the subarachnoid space to measure CSF pressure and obtain a sample for analysis. Understanding the anatomy of the lumbar region (where the tap is commonly performed) is essential to avoid (potentially dangerous) complications such as post-puncture headache, nerve root trauma, bleeding, infection and coning, i.e. her- niation of cerebellar tonsils with compression of the medulla.\nThe layers encountered from superficial to deep while performing a lumbar puncture are skin; subcutaneous tissue; supraspinous ligament and interspinous ligament (both ligaments form a connection between adjacent spinous processes); ligamentum flavum (a strong, yellow coloured ligament that extends between adjacent vertebrae in the inter- laminar space which can be up to 1 cm thick); epidural/extradural space (containing internal vertebral venous plexus); dura mater; arachnoid mater; and the subarachnoid space (contains CSF)."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "A 28-year-old male motorcyclist is brought into the emergency department where you, as the doctor on call, are asked to assess his consciousness as part of the primary survey. He is unresponsive when you speak to him, but, on rub- bing his sternum, opens his eyes and tries to push your hand away. During your assessment he also mutters something that you are unable to understand. His Glasgow Coma Scale score is",
            "options": [
                "A. 7",
                "B. 8",
                "C. 9",
                "D. 10",
                "Ε. 11"
            ],
            "answer": "C",
            "explanation": "The GCS is a tool used to rapidly assess the consciousness and neuro- logical function of a patient, particularly (but not exclusively) in the trauma setting. See Section 3, answer to Question 19 for the GCS. The patient in this scenario will score 9/15 (E2, V2, M5)."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "A 21-year-old female student presents to the emergency department following a fall from a ledge approximately 1.5 m high while walking home. She has been drinking heavily and her friends report that she is now drowsier following her fall. She opens her eyes when her name is mentioned and is talking about her studies tomorrow. She also winces when you press her nail bed. Her score accord- ing to the Glasgow Coma Scale will be",
            "options": [
                "A. 3",
                "B. 5",
                "C. 7",
                "D. 9",
                "Ε. 11"
            ],
            "answer": "E",
            "explanation": "The patient in this scenario will score 11/15 (Е3, V4, M4). (See Section 3, answer to Question 19 for the GCS.)"
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "A healthy 34-year-old builder presents to his general practitioner having fallen 4.5 m from a ladder 4 days previously, while working at a construction site. Although no major injuries were sustained, since his accident, he has been hav- ing near constant lower backache, which radiates down his right leg and is worse on coughing. On examination, the pain is noted to be particularly worse on the outer aspect of the right leg. In addition, there is reduced sensation over this area and the dorsum of the foot. Ankle and big toe dorsiflexion also appear to be weak in comparison to the left side. The patient is referred to the local hospital for an MRI scan, which shows a lateral disc protrusion in the lumbar spine. Which nerve root is likely to be affected in this individual?",
            "options": [
                "A. L2",
                "B. L3",
                "C. L4",
                "D. L5",
                "E. S1"
            ],
            "answer": "D",
            "explanation": "The intervertebral disc is a structure found between spinal vertebrae where it forms a cartilaginous joint to stabilize and allow slight move- ment of the vertebrae. The disc is composed in its inner aspect of the nucleus pulposus, a jelly-like substance, which is surrounded by the annulus fibrosus on the outer aspect.\nWith age, the nucleus can dehydrate and the annulus becomes weaker at the same time. This process, together with trauma, can result in tear- ing of the annulus fibrosus, through which the nucleus pulposus can extrude or herniate and impinge on spinal roots, as they exit the inter- vertebral foramen of their corresponding vertebrae. It is the tearing process which causes the acute backache that patients may present with an impingement that produces mostly unilateral symptoms of leg pain, numbness, reduced function and areflexia in the region of distribution of a particular nerve root.\nPosterolateral herniation will compress the root exiting the foramen below the affected level, i.e. L5/S1 will compress the S1 root. Ninety-five per cent of lumbar disc prolapses are at the level of L4/L5 and L5/S1. L4 compression can cause quadriceps wasting/weakness, reduced sensation over the medial calf and impaired knee jerk. L5 compression produces signs and symptoms as described in the scenario above, and S1 compres- sion leads to wasting/weakness of plantar flexors, sensory impairment over the lateral aspect of the foot and sole and an impaired ankle jerk.\nTreatment of lateral disc protrusion is usually conservative with bed rest, avoiding heavy lifting, analgesia and muscle relaxants. The devel- opment of severe and recurrent leg pain and neurological signs, par- ticularly foot drop, is worrying and may need further imaging, e.g. MRI, with a view to surgical treatment. Operative intervention involves removal of the prolapsed disc.\nWhereas lateral disc prolapse is a relatively benign condition, central disc prolapse can result in compression of the cauda equina (cauda equina syndrome), causing backache, bilateral sciatica, urinary retention and saddle anaesthesia. It is a neurosurgical emergency that requires urgent decompression to prevent paralysis and permanent sphincter damage."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "A 20-year-old university cricketer is hit in the side of his head by a cricket ball while fielding close to the bat during a varsity match. He is reported to have briefly lost consciousness, but at the time of examination in the emergency department his Glasgow Coma Scale score is 15/15. In addition, he complains of severe headache and blurred vision since regaining consciousness. A neurological examination reveals that his right pupil is dilated, but no other focal neurology is elicited. A CT scan is performed on the basis of these findings, which shows a lenticular-shaped collection suggestive of an extradural haematoma. Damage to which one of the following vessels would classically be associated with this pathology?",
            "options": [
                "A. Maxillary artery",
                "B. Middle meningeal artery",
                "C. Cerebral veins",
                "D. Middle cerebral artery",
                "E. Anterior communicating artery"
            ],
            "answer": "B",
            "explanation": "The middle meningeal artery is a branch of the maxillary artery, itself a branch of the external carotid artery, and the largest of three branches supplying the meninges. This artery runs beneath the pterion, the thin- nest part of the skull, and can be damaged if there is injury, such as a blow to the side of the head, and result in the collection of blood between the dura mater and skull (an epi/extradural haematoma).\nClinically, extradural haematomas present with a history of trauma followed by a brief loss of consciousness from which the patient recov- ers, seemingly without any lasting effect (the lucid interval). This is followed by steady and often dramatic neurological deterioration and ultimately death. More than 50% of cases of extradural haematoma are associated with an ipsilateral dilated pupil. A CT scan of the head is the imaging technique of choice and demonstrates a lenticular (lens) shaped collection within the extradural space. Treatment aims to prevent secondary brain damage and if affecting the patient's consciousness the haematoma can need urgent evacuation in a neurosurgical unit.\nThe anterior communicating and middle cerebral arteries form part of the circle of Willis. The middle cerebral and anterior cerebral arteries are derived from the internal carotid artery as its two terminal intra- cerebral branches. The anterior communicating artery acts as a bridge connecting the two anterior cerebral arteries, which are the two circu- latory branches derived from the pair of internal carotid arteries.\nExtradural haematomas can occasionally be caused by damage to the sagittal or transverse sinuses. Along with the cavernous sinus, these structures form the dural venous sinuses into which the venous blood drains after running in the subarachnoid space. In addition, subdural haematomas form when a cerebral vein ruptures as it passes through the arachnoid into the subdural space."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "An 85-year-old pensioner is brought to the emergency department by her family who are concerned that she has become increasingly confused and drowsy in the past 3 weeks. She is pleasantly confused and unable to recall events clearly but ori- ented to time and person and complains only of occasional frontal headache. Her family informs you that she may have fallen while climbing from the bathtub some weeks previously. She has also started sleeping for long periods of time, which is not her normal habit. A head CT scan is performed, which shows mild generalized atrophy and a crescent-shaped collection. This presentation is consistent with",
            "options": [
                "A. Intracerebral haemorrhage",
                "B. Subarachnoid haemorrhage",
                "C. Extradural haemorrhage",
                "D. Subdural haemorrhage",
                "E. None of the above"
            ],
            "answer": "D",
            "explanation": "Subdural haematoma is a collection of blood between the dura and arachnoid mater, caused by tearing of bridging veins, which leak into the subdural space. It is most commonly associated with increasing age, alcohol misuse, dementia and brain atrophy. Subdural haematoma can be an acute, subacute or chronic process. However, as the leak of blood is at a low pressure, signs and symptoms commonly take many days to weeks to develop.\nPresentation can be non-specific and confused by the age of the patient. Clinical features include dementia, deteriorating and/or fluctuating consciousness with increasing drowsiness, as well as symptoms and signs of raised intracranial pressure, i.e. headache, seizures, irritability and papilloedema. The investigation of choice is a head CT scan, the findings of which will vary according to the stage of the disease process. A CT taken early in the pathological process will show a hyperdense crescentic fluid collection while in the later stages a hypodense collec- tion with a thick membrane is seen.\nTreatment of chronic subdural haematoma is by surgical drainage, which involves burr holes in the posterior frontal and posterior parietal positions. The dura is then incised and the haematoma irrigated, after which the brain should re-expand. The burr holes are plugged with haemostatic foam and different layers sutured over. Prophylactic anti- biotics are also given.\nExtradural and subarachnoid haemorrhage are discussed elsewhere in this chapter."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "Which of the following sets of clinical signs are usually associated with a basal skull fracture?",
            "options": [
                "A. Periorbital ecchymoses, otorrhoea, retroauricular ecchymoses, cranial nerve III palsy",
                "B. Periorbital ecchymoses, rhinorrhoea, anosmia, cranial nerve VI palsy",
                "C. Rib fracture, otorrhoea, rhinorrhoea, anosmia",
                "D. Rib fracture, otorrhoea, rhinorrhoea, retroauricular ecchymoses",
                "E. Periorbital ecchymoses, otorrhoea, rhinorrhoea, retroauricular ecchymoses"
            ],
            "answer": "E",
            "explanation": "Basal (or basilar) skull fractures are linear fractures that can be caused by head injury due to a blow at the back of the head or sudden decelera- tion, as occurs in traffic accidents. Classically, clinical features of this injury are:\n• Periorbital ecchymoses (raccoon or panda eyes)\n• Retroauricular ecchymoses (Battle's sign is ecchymosis of the mastoid process)\n• Otorrhoea and rhinorrhoea (the leak of cerebrospinal fluid into the ears and nose respectively)\n• Haemotympanum\n• Anosmia\n• Cranial nerve VII (facial nerve) palsy\n• Depressed skull fracture (‘step off') – this is associated with an increased incidence of intracranial injury, early seizures and a risk of intracranial injury\nHospital guidelines for investigation and treatment vary, but in general treatment is mainly supportive as for any head injury, i.e. maintain ABC, treat raised intracranial pressure, treat seizures and give anti- biotic prophylaxis in cases of penetrating head injury. Most patients with basilar skull fractures are admitted for observation and supportive management only."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 29-year-old nurse is referred to the neurology outpatient clinic with a 6-month history of intermittent upper limb jerking, in which a digit on the left hand jerks initially, extending to the hand, arm and eventually the face. She reports being aware of these movements and feeling weak in the same arm for several hours after. This type of seizure could be described as being",
            "options": [
                "A. Jacksonian",
                "B. Temporal lobe",
                "C. Grand mal (tonic-clonic)",
                "D. Absence (petit mal)",
                "E. Status epilepticus"
            ],
            "answer": "A",
            "explanation": "Epilepsy is a neurological condition occurring as a result of sudden, uncontrolled neuronal discharge in the CNS that is usually self- terminating. It has a wide range of presentations from mild ‘absences', in which there is no awareness of a preceding period of time, to convul- sions or seizures lasting many minutes.\nThe condition is classified as partial/focal (i.e. originating in one part of the brain) or generalized (i.e. multiple foci of uncontrolled activity in the brain). Partial seizures are subdivided as simple, complex (i.e. associated impaired consciousness) and those that lead to tonic-clonic convulsions. Generalized seizure types include periods of absence and generalized tonic-clonic seizures.\nSimple partial seizures are the most common seizure type of which Jacksonian motor seizure or ‘march' is a variety. It is characterized by involuntary movements beginning in the hand or face and progressively involving larger muscle groups, i.e. a march. Patients are usually aware of these movements and have no loss of consciousness. They may experi- ence weakness in the limb once the seizure subsides – Todd's paralysis.\nTemporal lobe epilepsy is a complex partial seizure characterized by an initial aura (e.g. visual, auditory or gustatory hallucination) followed by change in consciousness, such as a feeling of depersonalization, flashbacks and mood changes. Attacks usually last several seconds and can be followed by headache and confusion. In cases refractory to medi- cal intervention, surgical lobectomy is an infrequently used treatment option. Most commonly, this will involve removal of the hippocampus and amygdala, which can act as foci of epileptic activity.\nAbsence seizures are usually confined to childhood and consist of multiple seizures a day lasting several seconds, manifesting as blank stares, with or without eye blinking and occasional muscle jerks. Patients are commonly not aware of their seizures and usually suffer no residual effects.\nGrand mal seizures occur as episodes of sudden loss of consciousness, followed by jerking of all limbs for up to several minutes. This may be associated with urinary and/or faecal incontinence and injuries associ- ated with falling at the time when consciousness is lost. Patients will usually be confused and drowsy in the post ictal phase. There may be an inducing stimulus and classically EEG recordings will demonstrate generalized spike and wave activity in the 3–5 Hz range.\nStatus epilepticus is a medical emergency in which seizures are either prolonged (lasting for more than 30 minutes) or an individual suffers repeated seizures without regaining full consciousness in between. It most commonly presents as a tonic-clonic event in known epileptics. Treatment is medical, but patients may need anaesthetic interven- tion in order to paralyse and artificially ventilate, with the hope of gaining control over seizure activity and thereby preventing cerebral damage."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "A 21-year-old male medical student presents with a 14-day history of intermittent fever, rigours, headache, neck stiffness and a single episode of vomiting just prior to attending his appointment. On questioning, he admits to a visit to rural east Africa 2 months ago as part of a university outreach group and is up to date on all vaccinations. Furthermore, he had not had unprotected sexual intercourse over the past several months. On examination, he is noted to be tachycardic with a pulse rate of 100 beats/min and appears slightly dehydrated. Routine blood tests show mod- erately raised inflammatory markers. The admitting team suspects meningitis and conducts a lumbar puncture. The tap reveals a white cell count of 995/mm³ with a neutrophilia and lymphocytosis, 2.5 g/L of protein and 3.0 mmol/L of glucose. Samples are additionally sent for Gram staining and virological exami- nation and appropriate therapy started pending final confirmation. Which one of the following micro-organisms is most likely causing meningitis in this patient?",
            "options": [
                "A. Treponema pallidum",
                "B. Epstein-Barr virus",
                "C. Mycobacterium tuberculosis",
                "D. Neisseria meningitides",
                "E. Human immunodeficiency virus (HIV)"
            ],
            "answer": "C",
            "explanation": "Meningitis is inflammation of the meninges, usually due to micro- organisms that reach the meninges as a result of extension from the ears and nasopharynx, cranial/spinal injury and haematogenous spread. Non-infectious causes include disseminated carcinoma and drugs that cause inflammation of the meninges.\nThe typical triad of presentation is headache, neck stiffness and fever. Photophobia, vomiting, drowsiness and the presence of cranial nerve lesions are suggestive of the development of complications such as hydro- cephalus and cerebral abscess. Examination may reveal the following:\n• Petechial or blotchy rash suggestive of meningococcal meningi- tis (due to Neisseria meningitides)\n• Evidence of septic shock\n• Kernig's sign – Inability to straighten the leg at the knee when the thighs are held at a right angle to the body (due to reflex spasm of spinal muscles)\n• Brudzinski's sign – Hip flexion on tilting the head forward\nAdditionally, duration of the symptoms, travel history, sexual history, occupational history and co-morbidities contribute to determining the causative agent. Viral meningitis is usually a benign and self-limiting illness. Acute bacterial meningitis can present suddenly and progress rapidly, while chronic illness (as caused by tuberculosis and syphilis) can have a more insidious onset. Immunocompromised individuals are most at risk from fungal infection.\nAlthough blood tests and cultures are a useful adjunct, the investiga- tion of choice is a lumbar puncture. The description of findings in this question combined with the history of travel is typical of tubercular meningitis. Viral meningitis will result in little change of CSF except for the presence of an increased number of cells, while acute bacterial meningitis will produce a turbid appearance of CSF, together with an increased presence of polymorphs and growth of micro-organisms on a smear.\nTreatment is dependent on the cause, but will include appropriate resusci- tation and commencement of intravenous antibiotics, if the clinical suspi- cion of bacterial meningitis in particular is high. Tubercular meningitis is treated with standard anti-tuberculosis medication and the patient is mon- itored for signs of relapse and complications, given the high mortality rate."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "All of the following are secreted by the adenohypophysis, except",
            "options": [
                "A. Follicle-stimulating hormone (FSH)",
                "B. Oxytocin",
                "C. Adrenocorticotropic hormone (ACTH)",
                "D. Growth hormone (GH)",
                "E. Prolactin"
            ],
            "answer": "B",
            "explanation": "The following table lists hormones released by the adenohypophysis and the neurohypophysis."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "A 28-year-old solicitor presents to the neurosurgery clinic with a 1-year his- tory of increasing tiredness, sweatiness, difficulty concentrating and pain and numbness in his hands at night. Further questioning reveals that his shoes have become tight in the past year, while examination reveals moderate hypertension, a protruding jaw and slightly coarse features. The admitting clinician suspects a growth-hormone-secreting pituitary tumour and requests several tests to confirm this diagnosis. Which one of the following tests is most appropriate to investigate this condition?",
            "options": [
                "A. Dexamethasone suppression test",
                "B. Short Synacthen test",
                "C. Fasting blood glucose",
                "D. Glucose tolerance test",
                "E. Fasting lipids"
            ],
            "answer": "D",
            "explanation": "Growth hormone is an anterior pituitary hormone involved in anabolism and growth. It can occasionally be produced in excess, most commonly as a result of a pituitary adenoma (benign growth-hormone-secreting tumour). Excess growth hormone in infancy results in gigantism, while in adults it causes acromegaly. The symptoms are the result of (i) a mass effect of tumour expansion such as headache and visual disturbance due to compression of the optic chiasm (resulting in bitemporal hemi- anopia) and (ii) physical effects of excess growth hormone. The effects of excess hormone can be insidious, and as a result, it can take many months and years for classical signs and symptoms to occur. The physi- cal effects of excess growth hormone secretion include:\n• Soft tissue swelling with enlarged hands, feet, lips, ears and nose (ask for changes in glove/hat size if worn)\n• Protruding lower jaw from mandibular growth (prognathism)\n• General coarseness of the features\n• Barrel chest due to increased curvature of the spine and hunch- ing of the back (kyphosis)\n• Cardiomegaly and heart failure\n• Hypertension\n• Thick, deep voice due to vocal cord swelling\n• Carpal tunnel syndrome due to thickening of the flexor retinaculum\n• Diabetes mellitus\n• Kidney failure\nClassically, the condition is diagnosed by conducting a glucose toler- ance test. A baseline measurement is made of the growth hormone level followed by oral administration of 75 g glucose orally. The growth hor- mone level is then recorded at 30-minute intervals. If, by 2 hours, the level is not less than 1 µg/L, as would be expected in normal individuals (due to the suppression effect of glucose on growth hormone), acro- megaly is virtually diagnostic. More recently, IGF-1 levels have also been used to gauge GH secretion, but assays must be refined enough to account for conditions which may naturally increase or decrease IGF-1 levels. Imaging modalities such as MRI and CT (particularly for imag- ing of the chest, abdomen and pelvis for evidence of tumours which might produce ectopic growth hormone e.g. pancreatic, ovarian and adrenal tumours) can also be used.\nTreatment of the condition is either medical or surgical. Medical ther- apy involves using radiotherapy, lareotide/octreotide (somatostatin analogues), pegvisomant (a growth hormone receptor antagonist) and bromocriptine (a dopamine agonist), which reduce the level of growth hormone. Surgical treatment is via the trans-sphenoidal (most com- mon), transcranial or transethmoidal approaches to the sella turcica (in which the pituitary gland is found). Surgical removal results in rapid regression of soft tissue changes, but can be associated with a hormonal imbalance, which may need to be addressed in the long term.\nThe dexamethasone suppression test is used for diagnosis of Cushing's disease. The short Synacthen test is used to diagnose adrenal insufficiency (Addison's disease). Fasting blood glucose is used to diagnose suspected cases of type 2 diabetes mellitus. Fasting lipids are used to check serum levels of various fats, but are not diagnostic of any specific condition."
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "A 72-year-old woman presents with a throbbing headache of 1 week's duration. Further questioning reveals the increasing difficulty in combing her hair, which causes pain over the scalp and jaw pain while eating. She is known to suffer from muscle aches and was diagnosed with polymyalgia rheumatica approximately 1 year ago. Physical examination reveals little else of note. The admitting physi- cian suspects giant cell (temporal) arteritis and requests a full blood screen and temporal artery biopsy. An increase in which one of the following blood markers would be diagnostic of this condition?",
            "options": [
                "A. Neutrophil count",
                "B. Erythrocyte sedimentation rate",
                "C. C-reactive protein",
                "D. D-dimer",
                "E. Bradykinin"
            ],
            "answer": "B",
            "explanation": "Giant cell or temporal arteritis is a vasculitic condition of the temporal artery associated with polymyalgia rheumatica in a large proportion of patients. It usually occurs in more elderly individuals and presents with headache, scalp and temporal artery tenderness, jaw claudication (as jaw pain while eating) and occasional visual disturbance such as amau- rosis fugax. Although several inflammatory markers can be raised, an ESR >100 mm/h is virtually diagnostic. The gold standard test is a temporal artery biopsy, which will show a granulomatous inflamma- tory infiltrate of the media and adventitia. However, it is only positive in 60% of individuals. Treatment is immediate with high-dose steroids, as there is a risk of permanent visual loss, and should not be delayed if the diagnosis is clinically suspected.\nErythrocyte sedimentation rate (ESR) is a test that measures the rate at which blood cells fall in an upright tube. It has a limited value as a marker of inflammation, but is particularly useful for diagnosis of temporal arteritis and polymyalgia rheumatica (which may co-exist), particularly at values >100 mm/h.\nNeutrophil count is a frequently used marker of infection, especially if bacterial in origin. C-reactive protein is an acute-phase protein produced by the liver and is a marker of general inflammation. The D-dimer is a product of fibrinolysis. It is used mainly in cases of suspected venous thromboembolism, e.g. DVT and pulmonary embolus. A negative value is highly predictive of the absence of a clot whereas a high value sug- gests either the presence of a clot or some other inflammatory pro- cess. Bradykinin is a vasoactive protein, which induces vasodilation, increases vascular permeability and causes smooth muscle contraction. It is not a marker of inflammation."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "Cancers arising in the following organs commonly metastasize to the brain, except",
            "options": [
                "A. Lung",
                "B. Bowel",
                "C. Kidney",
                "D. Endometrium",
                "E. Skin"
            ],
            "answer": "D",
            "explanation": "Almost half of all brain tumours are the result of metastases. Cerebral metastases account for almost 20% of presentations in individuals with carcinoma. The most common sites of origin for cerebral metastases are the lungs, breast, bowel, skin (malignant melanoma) and kidney (espe- cially renal cell carcinoma). Endometrial carcinoma is not frequently associated with metastases to the brain."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "A 62-year-old cleaner presents with multiple episodes of uncontrolled right arm jerking, unsteadiness while walking, difficulty seeing objects to one side and occasional headaches over the past several weeks. She is otherwise fit and well without any significant past medical history. Examination reveals increased lower limb tone, reduced power in the legs and papilloedema on fundoscopy. In addition, there appears to be a bony protuberance overlying the right pari- etal bone. A head CT scan with contrast is performed which shows a dense, homogeneous lesion in the right parasagittal area. This lesion is likely to repre- sent what type of cranial tumour?",
            "options": [
                "A. Astrocytoma",
                "B. Oligodendroglioma",
                "C. Meningioma",
                "D. Craniopharyngioma",
                "E. Medulloblastoma"
            ],
            "answer": "C",
            "explanation": "Astrocytoma is the commonest primary cerebral tumour, affecting mainly middle-aged individuals, and occurring in the frontal, temporal, parietal and thalamic areas. Tumours may be ‘low grade' or 'malignant', with symptoms developing slowly. Patients may present with epilepsy, signs of focal brain damage (i.e. personality change, hemiparesis) and signs of raised intracranial pressure (i.e. headache, projectile vomiting, depression and reduced consciousness). Presentation on CT and MRI depends on the tumour grade, while treatment depends on many factors, including lesion site, degree of malignancy, patient's age and wishes and absence/presence of raised ICP. Treatment modalities include ste- roids for relief of raised ICP, surgical resection and chemoradiotherapy.\nOligodendrogliomas are rare tumours of oligodendrocytes (glial cells that innervate axons of CNS neurones), affecting mainly the frontal lobe of patients aged 30-50 years. They are usually well-demarcated, calcified cystic tumours of gelatinous consistency and may involve the ventricular wall, resulting in metastatic spread via the CSF. Treatment is dependent on tumour stage, but as with astrocytomas, surgical resec- tion and chemoradiotherapy are the main modalities.\nMeningioma is an intracranial tumour arising from the arachnoid granulations, characterized by slow and expansile growth. They are more prevalent in middle-aged women and are most commonly found around the venous sinuses, but can involve any meningeal site, includ- ing the cerebral convexity, parasagittal area, sphenoid wing, olfactory groove, cerebellopontine angle, foramen magnum and spinal cord. Many patients present with focal epilepsy while the remainder develop slow pressure effects, i.e. evidence of raised ICP followed by focal neu- rological signs (depending on the site involved). For example, parasag- ittal tumours near the vertex of the skull can affect foot and leg motor and sensory function, while posteriorly located tumours can cause a homonymous hemianopia. Imaging may reveal hyperostosis (bone thickening) of the parietal bone and sagittal suture, while CT and MRI will reveal the lesion directly. Treatment involves removing the tumour completely where possible or irradiating it in non-resectable cases.\nCraniopharyngioma is a cystic, suprasellar cranial tumour with sur- rounding ring calcification, occurring most commonly in children and middle-aged adults. It can result in growth retardation in chil- dren, diabetes insipidus due to pituitary gland compression, bitemporal hemianopia from optic chiasm compression, and signs of raised intra- cranial pressure (projectile vomiting, headache, papilloedema) due to obstructive hydrocephalus. Treatment is with surgical resection and radiotherapy.\nMedulloblastoma is an extracranial tumour of primitive neuroecto- dermal origin, occurring most commonly in childhood. It is a malig- nant tumour originating in the cerebellar vermis, from where it spreads into the fourth ventricle and throughout the CSF. Patients can present with truncal and gait ataxia as a result of cerebellar involve- ment, which develops over several weeks, or symptoms of raised ICP secondary to blockage of CSF flow. Treatment is once again dependent on tumour stage, but involves the modalities previously described. Prognosis is variable, with a 5-year survival of 50%-85%."
        }
    ]
}
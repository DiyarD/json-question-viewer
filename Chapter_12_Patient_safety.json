{
    "chapter_name": "Patient safety",
    "questions": [
        {
            "id": "1",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A One in 100 patients are estimated to be at risk of preventable harm in the hospital setting.",
                "B A near miss is an event that reaches the patient but results in no injury.",
                "C Poor communication is a common cause of adverse events.",
                "D Human fallibility combined with complex health systems greatly increases the potential for errors.",
                "E It is estimated that there are around 10 near misses for every patient injury."
            ],
            "answer": [
                "C",
                "D",
                "E"
            ],
            "explanation": "The World Health Organisation estimates that 1 in 10 patients in the hospital is at risk of preventable harm. These rates highlight the importance of recognising the importance of patient safety in modern medicine. While an adverse event results in actual patient harm, a near miss is an incidence that fails to reach the patient. A non-harm event is an incident that reaches the patient but does not result in harm. The factors that contribute to patient safety incidents are shown in Table 12.1. Poor communication is amongst the most common causes underlying adverse incidents. Although humans make mistakes, the complexity of modern medical systems substantially increases the potential for harm. The problem can be seen on a personal level (understanding why an individual made a mistake) or a systems level. Most errors result from a series of failures, and systems should be set up to minimise the chance of such a series resulting in patient harm. It is important to understand that there are estimated to be around 300 near misses for every 29 minor injuries and one major injury (Figure 12.1). It is for this reason that near misses are reported. These provide the best method for assessing the integrity of systems designed to protect patients from preventable harm."
        },
        {
            "id": "2",
            "question_type": "msq",
            "question": "Which of the following statements are false?",
            "options": [
                "A The World Health Organisation plays a leadership role in patient safety.",
                "B Both developed and developing countries share the same issues with patient safety.",
                "C The routine use of information technology systems has been shown to reduce medical errors.",
                "D Radical system redesign is likely to result in higher rates of patient harm.",
                "E Individual training is critical to decreasing medical errors."
            ],
            "answer": [
                "B",
                "D",
                "E"
            ],
            "explanation": "The WHO has taken an international leadership role in patient safety, championing, amongst other initiatives, surgical checklists (Figure 12.2). Although aspirations of developing and developed countries are similar, the challenges they face differ significantly. While developed countries have systems such as physician licensure, patient safety education programmes and national level agencies to monitor safety issues, developing countries have significant challenges relating to equipment availability and basic training.\nThere are many ways that health care systems can improve safety, but for most, radical system redesign is required to institute significantly reduced patient harm. One example shown to improve patient safety is the increasing reliance on information technology. Not only does this allow more efficient reporting of outcomes, but technologies such as computerised physician prescribing have been shown to reduce medical errors. Although training on an individual level is important, almost all heath care is delivered by teams. It is critical that training in patient safety is delivered throughout the team to improve communication and decision-making behaviours."
        },
        {
            "id": "3",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Following an adverse event, open disclosure should be a priority.",
                "B Competence or fitness to practice refers only to skills and knowledge.",
                "C Complaints provide an opportunity to highlight a problem.",
                "D Fatigue and medical errors are not associated.",
                "E Safe prescribing requires knowledge of the patient, the patient's condition, the medication and the dose."
            ],
            "answer": [
                "A",
                "C",
                "E"
            ],
            "explanation": "Although the natural tendency after a clinical error is to avoid the patient and the subject, open disclosure is important. Good communication is critical as part of a patient-centred approach. Although an assessment of competence includes knowledge and skills, it also includes aspects such as attitude and health. Competence can be demonstrated using a system of credentialing and revalidation. Complaints can be stressful to handle, but they allow a health care system to identify problems that can lead to patient harm. Modern health care systems are designed to make the process of complaining easier via patient advocacy units. The environment in which health care is provided is critical. Tired surgeons make more errors and can be linked to personal health problems, which can further undermine patient care. All physicians are involved in prescribing medicines. Not only is in-depth knowledge of the patient and the drug required, legible handwriting is also important in accurate prescribing."
        },
        {
            "id": "4",
            "question_type": "msq",
            "question": "Which of the following statements are true?",
            "options": [
                "A Introduction of surgical safety checklists has been associated with a reduction in major surgical complications of up to 30%.",
                "B The surgical safety checklist calls for specific checks at two key time points.",
                "C The transition from conscious to unconscious control is called the learning curve in surgery.",
                "D A failure due to 'misinterpretation' relates to the misreading of a two-dimensional image.",
                "E The surgeon involved in an adverse incident may be considered the second victim."
            ],
            "answer": [
                "A",
                "C",
                "D",
                "E"
            ],
            "explanation": "Surgical safety checklists are now a mandatory part of surgical practice in many countries. They have been shown to reduce complication rates, and a fall from 11% to 7% (36%) in major complications has been demonstrated. The checklist is used at three time points: before anaesthesia, before the incision and before the patient leaves the operating room (Figure 12.2). Failures in operative technique include errors of judgement, procedure, execution, or misuse of instrumentation. The term misinterpretation is used to describe the function of misreading a two-dimensional image and is unique to minimally invasive surgery. Not all errors will be evident at the time of surgery, and the team must remain vigilant for missed iatrogenic injuries, which may present at a later date. Although the patient is a clear victim of the error, the surgeon involved in the incident may also be considered a victim. Coping with the impact of an error may be challenging, and support structures should be in place to help manage this stressful situation."
        },
        {
            "id": "5",
            "question_type": "emq",
            "question": "Identify the factor that most predisposes the patients below to adverse events:",
            "options": {
                "items": [
                    "A A 64-year-old lady following a low anterior resection is discharged back from surgical recovery to the general ward. Half-hourly observations are requested, but the ward has only 4 trained nurses for 36 patients.",
                    "B An 18-year-old man is admitted with right lower quadrant abdominal pain, fever and abdominal guarding. The emergency room physician diagnoses acute appendicitis and refers to the surgical middle grade on call. Tonight, a junior trainee has been asked to ‘act up' and cover one of his senior colleagues despite not having taken an acute abdomen to theatre in the past.",
                    "C A 45-year-old man is admitted with abdominal pain of unknown origin at 5 p.m. Investigations including bloodwork and an erect chest x-ray are ordered by the doctor, who is working until 6 p.m.",
                    "D An 80-year-old lady is admitted for total hip replacement. The operating surgeon plans to perform their standard procedure using the regular prosthesis. The previous three patients who received this prosthesis under the care of different surgeons in the hospital went on to develop significant operative site infections.",
                    "E A 24-year-old man is admitted to neurosurgical intensive care. The night before admission he was involved in a road traffic accident resulting in significant injury to the thorax, cervical spine and brain. An 8-hour procedure, which included thoracotomy and crainiotomy, was required and the patient now requires invasive ventilation and support, including intracranial pressure monitoring."
                ],
                "choices": [
                    "1 Complexity of health care environment",
                    "2 Deficiencies in training",
                    "3 Inadequate safety review systems",
                    "4 Inadequate staffing levels",
                    "5 Lack of coordination at handovers"
                ]
            },
            "answer": {
                "A": "4",
                "B": "2",
                "C": "5",
                "D": "3",
                "E": "1"
            },
            "explanation": "When considering the causes of adverse events in surgery, multiple factors often contribute and no one issue can be singled out. There is often overlap of personal and system failures and errors can be made at an individual, team, or institutional level.\n\n1. E Complexity of health care environment\nModern medical systems are complex. Patients may require multi-system support, input from many specialties and close monitoring. All of these requirements increase the risk to the patient, in addition to the critical clinical condition faced by patients with such needs.\n\n2. B Deficiencies in training\nIn this example, a junior is left to manage at a level he or she cannot achieve. Training is inadequate to prepare him or her for the level of clinical responsibility he or she requires. Although the institution may consider this a deficiency in training, this should not be interpreted as a personal failing of the trainee. The system in which he or she works should not allow this situation to arise, and analysis of how this scenario was allowed to develop should be undertaken. Such situations are common, and often no harm comes to the patient. However, surgeons should remember that for every one major injury, there are more than 300 near misses.\n\n3. D Inadequate safety review systems\nIt is impossible for a single surgeon to know everything that goes on in his or her department, let alone across a complex hospital. For this reason, it is critical that all adverse events are recorded and reviewed to protect future patients. In this example, there should be concern about the sterility of the current batch of prostheses. Problems such as these require robust systems of reporting and review to identify that an issue exists, to identify its cause and to act to prevent future occurrences.\n\n4. A Inadequate staffing levels\nStaffing levels are controversial and apply throughout health care systems. As the needs of sick patients increase, so does the need for staff to care for them. Improvements in technology aid in meeting these complex needs, but without adequate staffing levels, patients remain at risk. At the same time, health care providers are asked to ration resources and minimize expenditure on staff wherever possible. Clearly, this results in pressures on all departments to provide more with less.\nThis example can be seen in a number of ways. Staffing levels are too low on a general ward to provide the requested care. There may be deficiencies in training, which led to the surgeon discharging the patient to this unsafe environment or to the nurse in charge accepting the patient. If the hospital environment does not provide adequate facilities, such as a high-dependency unit, this institutional failure should be addressed to minimize risk to patients.\n\n5. C Lack of coordination at handovers\nClinical handovers are an increasingly important part of modern medicine. Whether at junior or senior level, they represent a critical time for the patient, even though the patient is not present. Thorough clinical handovers are important and require a structured approach. Nursing staff have great experience of handing over between shifts. In contrast, medical staff have been required to develop these skills in a shorter time. Many departments now have systems in place to promote high-quality handover of patients to minimise patient risk at this critical time point."
        }
    ]
}
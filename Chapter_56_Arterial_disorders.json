{
    "chapter_name": "Arterial disorders",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "1. The following statements are true\nexcept:\nA Pain of intermittent claudication (IC)\ncomes on after taking the first step.\nB Rest pain occurs at night.\nC Clinical presentation reflects the site of\nobstruction.\nD Severity of symptoms depends upon\nthe size of the vessel and if the onset is\nacute or chronic.\nE The most common cause is atheroma.",
            "options": [
                "A Pain of intermittent claudication (IC)\ncomes on after taking the first step.",
                "B Rest pain occurs at night.",
                "C Clinical presentation reflects the site of\nobstruction.",
                "D Severity of symptoms depends upon\nthe size of the vessel and if the onset is\nacute or chronic.",
                "E The most common cause is atheroma."
            ],
            "answer": "A",
            "explanation": "The pain of IC does not come on after taking the first step. It comes on after walking a certain distance and is relieved by stopping. This fact clinically differentiates it from arthritic pain, which comes on after taking the first step and is not relieved by rest. The pain-free distance that a patient can walk is called the claudication distance. Rest pain typically occurs at night and is felt in the distal foot. The pain is relieved by keeping the foot dependent and hanging it by the bedside or sleeping in a chair. The site of arterial obstruction can be diagnosed clinically. In aortoiliac disease, the patient complains of thigh and buttock claudication whilst calf claudication indicates superficial femoral artery obstruction.\nThe severity of symptoms depends upon the size of the original vessel and duration of onset. In acute onset the presentation would be sudden and severe, whereas in chronic disease the presentation will be gradual because there would have been time for collaterals to develop. The clinical presentation will also be influenced by the organ affected and size of the artery occluded: transient ischaemic attack or stroke in internal carotid artery stenosis, angina or myocardial infarction (MI) in the case of coronary artery, hypertension in renal artery stenosis and IC in lower limb vessel obstruction. The most common cause is atheromatous obstruction the pathophysiology of which is explained in Figure 56.1."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "2. Which of the following statements is\nnot true?\nA Concomitant diseases must be excluded\nin all patients.\nB Doppler ultrasound should be the initial\nvascular investigation.\nC Duplex scanning is ideal to visualise the\naorto-iliac segment.\nD A treadmill accurately assesses the\nclaudication distance.\nE Angiography, the roadmap, should be\ndone in all patients.",
            "options": [
                "A Concomitant diseases must be excluded\nin all patients.",
                "B Doppler ultrasound should be the initial\nvascular investigation.",
                "C Duplex scanning is ideal to visualise the\naorto-iliac segment.",
                "D A treadmill accurately assesses the\nclaudication distance.",
                "E Angiography, the roadmap, should be\ndone in all patients."
            ],
            "answer": "C",
            "explanation": "Duplex scanning is a major noninvasive technique that uses B-mode ultrasound to obtain an image of the vessels. The aorto-iliac segment is not ideally suited to this investigation, as obesity obscures the image; CT angiography is best for this segment. Duplex scanning is best to visualise the carotid. Angiography should not be done in all patients. It is done only when the decision has been made on clinical grounds to intervene, either radiologically or surgically.\nIn all patients with arterial occlusive disease, intercurrent illnesses must be excluded. Haematological and biochemical investigations are done to exclude anaemia, diabetes, renal impairment and polycythaemia or thrombocythaemia. An ECG and CXR will exclude cardiopulmonary problems, which are not uncommon in this age group. A cardiac echo and pulmonary function tests would be necessary in more severe disease for anaesthetic assessment, particularly when major arterial surgery is contemplated.\nThe ideal initial vascular investigation is a Doppler ultrasound, which would help to calculate the ankle-brachial pressure index (ABPI) that gives an objective assessment of the degree of ischaemia. The claudication distance is best measured by the treadmill in the vascular laboratory."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "3. Which of the following statements are\ntrue?\nA Intervention (surgical or radiological)\nshould be considered at the first\nconsultation before the obstruction gets\nworse.\nB Conservative management must be the\nfirst line of treatment in all cases.\nC Drugs can be used in selected patients.\nD Percutaneous transluminal angioplasty\n(PTA) should be the first interventional\nprocedure to be tried.\nE Operations for vascular reconstruction is\ncarried out in severe disease where PTA\nhas failed.",
            "options": [
                "A Intervention (surgical or radiological)\nshould be considered at the first\nconsultation before the obstruction gets\nworse.",
                "B Conservative management must be the\nfirst line of treatment in all cases.",
                "C Drugs can be used in selected patients.",
                "D Percutaneous transluminal angioplasty\n(PTA) should be the first interventional\nprocedure to be tried.",
                "E Operations for vascular reconstruction is\ncarried out in severe disease where PTA\nhas failed."
            ],
            "answer": "C",
            "explanation": "Drug treatment is required for concomitant diseases such as diabetes and hypertension. Treatment of the latter with β-blockers may worsen the claudication. Raised blood lipids are treated with statins, which also have a stabilising effect on atherosclerotic plaques; aspirin (75 mg) as an anti-platelet agent or clopidogrel as an alternative is useful. Vasodilators provide no benefit.\nIntervention is necessary when the symptoms of the patient are threatening the limb (critical ischaemia), livelihood and lifestyle. The first port of call should be the interventional radiologist for PTA. In the iliacs, the procedure is followed by insertion of a stent. Vascular reconstruction by open surgery is performed when PTA is not possible due to extensive disease or has failed. Depending upon the site of obstruction the procedures are aortofemoral or aorto-bi-femoral bypass, femoro-popliteal, or femoro-distal bypass. In patients with severe comorbid disease who have aortoiliac obstruction, extra-anatomic bypass graft in the form of axillo-femoral or femoro-femoral should be considered as a limb-salvage procedure."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "4. The following statements are true\nexcept:\nA Transient ischaemic attacks (TIAs) are a\nsymptom of internal carotid stenosis.\nB Subclavian steal syndrome is the result\nof vertebrobasilar insufficiency.\nC Thoracic inlet syndrome can cause\nvascular insufficiency of the upper limb.\nD Renovascular hypertension is always\ndue to atherosclerotic stenosis.\nE Ischaemic colitis is due to occlusion of\nthe superior mesenteric artery.",
            "options": [
                "A Transient ischaemic attacks (TIAs) are a\nsymptom of internal carotid stenosis.",
                "B Subclavian steal syndrome is the result\nof vertebrobasilar insufficiency.",
                "C Thoracic inlet syndrome can cause\nvascular insufficiency of the upper limb.",
                "D Renovascular hypertension is always\ndue to atherosclerotic stenosis.",
                "E Ischaemic colitis is due to occlusion of\nthe superior mesenteric artery."
            ],
            "answer": "D",
            "explanation": "Renovascular hypertension from renal artery stenosis is not always due to atherosclerotic stenosis. It can be due to fibromuscular hyperplasia. In the latter all other vessels would be normal, while the narrowing would be smooth and confined to the main trunk of the artery without involvement of the origin; when atherosclerosis is the cause the neighbouring vessels would be involved, including the origin from the aorta. Ischaemic colitis occurs due to atherosclerosis of the inferior mesenteric artery, causing post-prandial pain and rectal bleeding.\nTransient ischaemic attacks (TIAs) are the classical presentation of internal carotid artery (ICA) stenosis. In addition, patients may present with amaurosis fugax, sudden episodic blindness and reversible intermittent neurological deficit, and a systolic bruit in the neck. Subclavian steal syndrome occurs when there is atherosclerotic obstruction of the first part of the subclavian artery. Such patients, when they use the upper limb vigorously, suffer syncopal attacks because the subclavian artery responds to increasing demand by stealing blood from the vertebral artery causing cerebral ischaemia. Thoracic inlet syndrome may cause compression of the subclavian artery from a cervical rib or fibrous band. This might result in a stenosis with post-stenotic dilatation and atherosclerosis; small emboli from a thrombus get dislodged causing distal ischaemia of the hand."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "5. Which of the following statements are\ntrue?\nA Wet gangrene occurs when there is\ninfection.\nB Neuropathy is an important factor in\ndiabetic gangrene.\nC Frostbite is gangrene caused by cold\ninjury to the vessel wall.\nD Bedsore is a type of gangrene.\nE Amputation of the affected limb should be\ndone in all cases at the earliest to prevent\nthe spread of life-threatening sepsis.",
            "options": [
                "A Wet gangrene occurs when there is\ninfection.",
                "B Neuropathy is an important factor in\ndiabetic gangrene.",
                "C Frostbite is gangrene caused by cold\ninjury to the vessel wall.",
                "D Bedsore is a type of gangrene.",
                "E Amputation of the affected limb should be\ndone in all cases at the earliest to prevent\nthe spread of life-threatening sepsis."
            ],
            "answer": "A",
            "explanation": "Wet gangrene typically occurs when infection has supervened upon a part of the limb where there is tissue necrosis from vascular occlusion. This results in putrefaction. Clinically crepitus is felt denoting infection from gas-forming organisms, a situation typical of diabetic gangrene. Neuropathy is a major pathological change that contributes to diabetic gangrene. This is due to sensory loss as a result of which the patient is unaware of minor injuries, which therefore go unnoticed. Motor neuropathy causes neuropathic joints with loss of reflexes. Callosities form, which are a portal of entry of infection that spreads quickly along subfascial planes.\nFrostbite is gangrene caused by exposure to very low temperatures. It is seen in mountain climbers, the elderly and vagrants, the latter when exposed to unexpected cold spells. Cold injury damages the blood vessels, resulting in leakage of fluid and swelling with severe pain. There is blistering followed by gangrene and clear demarcation of devitalised tissue. Bedsores are a form of localised gangrene caused by pressure commonly seen in the elderly, debilitated and immunocompromised. The typical sites are ischial tuberosity, greater trochanter, sacrum and heel. The underlying pathology consists of the following: prolonged weight bearing → mechanical shear forces on soft tissues over bony prominences → increase in pressure across small vessels → reduced tissue perfusion → ischaemic necrosis → ulceration.\nAmputation should not be carried out at the earliest. Attempts must be made to salvage as much tissue as possible by considering revascularisation by surgery or interventional radiology. These procedures, with a period of conservative management, might help in performing a more distal amputation."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "6. Which of the following statements are\nnot true?\nA Acute thrombosis is the most common\ncause of acute arterial occlusion.\nB When acute thrombosis is diagnosed,\nthrombolysis should always be the first\nline of treatment.\nC When an embolus is the cause of\narterial occlusion, a left ventricular\nmural thrombus is the usual source.\nD Embolectomy should be the treatment\nfor an arterial embolus.\nE Compartment syndrome is a\ncomplication that might occur after\nembolectomy.",
            "options": [
                "A Acute thrombosis is the most common\ncause of acute arterial occlusion.",
                "B When acute thrombosis is diagnosed,\nthrombolysis should always be the first\nline of treatment.",
                "C When an embolus is the cause of\narterial occlusion, a left ventricular\nmural thrombus is the usual source.",
                "D Embolectomy should be the treatment\nfor an arterial embolus.",
                "E Compartment syndrome is a\ncomplication that might occur after\nembolectomy."
            ],
            "answer": "A",
            "explanation": "The most common cause of sudden arterial occlusion is an arterial embolus, not thrombosis. Moreover, the presentation of acute thrombosis is not as acute and dramatic as that of an embolus. If acute thrombosis is diagnosed, thrombolytic therapy is not the first line of treatment in all patients. Many vascular surgeons would perform revascularisation procedures straightaway so as not lose valuable time in trying thrombolysis. The latter may not be successful at all or be only partially successful.\nAn embolus, the most common cause of sudden arterial occlusion, usually originates from a mural thrombus in the left ventricle following a myocardial infarction (Figure 56.2). Embolectomy should be the treatment of choice carried out under general or local anaesthetic, depending upon the clinical condition of the patient who would just be recovering from a MI. Whilst an arterial thrombus is the most common cause of an embolus, there are several causes (Figure 56.3). Following an embolectomy, revascularisation injury in the form of compartment syndrome is a real worry. The surgeon should be on the lookout for such a complication, the treatment for which is fasciotomy."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "7. Which of the following statements\nare true?\nA Amputation sometimes might have\nto be carried out in the absence of\ngangrene.\nB Distal amputations are possible in\ndiabetic gangrene.\nC Below-knee (BK) amputation gives the\nbest chance of walking again, with a\nprosthesis.\nD Presence of a femoral pulse guarantees\nhealing of a BK amputation.\nE Long posterior flap technique is the more\ncommon method of BK amputation.",
            "options": [
                "A Amputation sometimes might have\nto be carried out in the absence of\ngangrene.",
                "B Distal amputations are possible in\ndiabetic gangrene.",
                "C Below-knee (BK) amputation gives the\nbest chance of walking again, with a\nprosthesis.",
                "D Presence of a femoral pulse guarantees\nhealing of a BK amputation.",
                "E Long posterior flap technique is the more\ncommon method of BK amputation."
            ],
            "answer": "A",
            "explanation": "Amputation might have to be performed in the absence of gangrene, in the presence of severe rest pain in critical limb ischaemia where vascular reconstruction is not possible. It is also necessary when there are joint contractures following paralysis where the limb is a liability and in irreparable traumatic damage. In these situations, the limb is referred to as a 'dead loss' limb. Distal amputations such as ray amputations and transmetatarsal and midtarsal amputations are possible in the diabetic because the ischaemia is due to microangiopathy as evidenced by a warm distal foot.\nThe amputee has the best chance of walking with a prosthesis after a BK amputation. The presence of the knee joint gives good proprioception, enabling early and better mobilisation. BK amputation is performed by two techniques – a long posterior flap and a skew flap. The former is more commonly performed because it is simpler.\nAlmost one-quarter of BK amputations will need conversion to an above-knee (AK) amputation because of failed healing. Presence of a femoral pulse does not guarantee healing of a BK amputation. Several tests such as Doppler pressures, oximetry, isotope clearance, arteriography, thermography and plethysmography have been used to predict the success of healing of a BK amputation. However, the simplest indicator of success of primary healing continues to be clinical judgement with the amount of bleeding at the incision site."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "8. The following statements are true\nexcept:\nA 95% of abdominal aortic aneurysms\n(AAA) are infra-renal.\nB When an AAA presents as an\nemergency, it is due to intraperitoneal\nrupture.\nC An AAA of more than 5.5 cm in\ndiameter should be operated upon.\nD A thrombosed popliteal artery\naneurysm can be confused for an\nabscess.\nE Berry aneurysms occur along the trunks\nof the vessels that form the Circle of Willis.",
            "options": [
                "A 95% of abdominal aortic aneurysms\n(AAA) are infra-renal.",
                "B When an AAA presents as an\nemergency, it is due to intraperitoneal\nrupture.",
                "C An AAA of more than 5.5 cm in\ndiameter should be operated upon.",
                "D A thrombosed popliteal artery\naneurysm can be confused for an\nabscess.",
                "E Berry aneurysms occur along the trunks\nof the vessels that form the Circle of Willis."
            ],
            "answer": "B",
            "explanation": "Emergency presentation of rupture or leak of AAA is retroperitoneal in the vast majority. This is because the anterior part of the aneurysm is occupied by clot and so leak occurs into the retroperitoneal space as a haematoma. Only a small minority rupture intraperitoneally; they usually do not survive. Berry aneurysms that occur along the Circle of Willis are always at the bifurcation of the vessels and not along the trunk. This is because the bifurcation is the weakest part, as the tunica media is absent at the site.\nThe cause of AAA is atheromatous disease and 95% are infra-renal. A patient with an AAA that is 5.5 cm or more in diameter is advised to undergo an operation even if it is asymptomatic because the patient has a greater risk of rupture. A popliteal artery aneurysm can often result in thrombosis. The patient then presents with distal ischaemia and a painful red tender swelling mimicking a popliteal abscess."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "9. Which of the following statements\nare true?\nA Thromboangiitis obliterans mainly\naffects the large vessels of the limbs.\nB Arteritis occurs in association with\nrheumatoid arthritis, systemic lupus\nerythematosus (SLE) and polyarteritis\nnodosa.\nC Cystic myxomatous degeneration\npresents with claudication.\nD Raynaud's disease and Raynaud's\nsyndrome are different.\nE Sympathectomy is an effective surgical\ntreatment in Raynaud's disease.",
            "options": [
                "A Thromboangiitis obliterans mainly\naffects the large vessels of the limbs.",
                "B Arteritis occurs in association with\nrheumatoid arthritis, systemic lupus\nerythematosus (SLE) and polyarteritis\nnodosa.",
                "C Cystic myxomatous degeneration\npresents with claudication.",
                "D Raynaud's disease and Raynaud's\nsyndrome are different.",
                "E Sympathectomy is an effective surgical\ntreatment in Raynaud's disease."
            ],
            "answer": "B",
            "explanation": "In connective tissue disorders such as rheumatoid arthritis, SLE and polyarteritis nodosa, arteritis is a common feature. Although the domain of the physician, the surgeon is involved when amputation of digits is necessary for distal gangrene. Cystic myxomatous degeneration mainly affects the popliteal artery where there is accumulation of jelly-like material causing narrowing of the vessel presenting with claudication. Duplex scan is the investigation of choice. The treatment is excision of the myxomatous material.\nRaynaud's disease and the syndrome by the same name are different. Raynaud's disease usually affects the hands of young women where the small arteries of the digits are constricted, causing the fingers to turn white. Typically the condition is episodic, with each attack consisting of blanching of the digits, dusky cyanosis, red engorgement and pain. Raynaud's syndrome (or phenomenon) is the term applied when there is an established cause. It is an arterial manifestation of collagen diseases such as SLE and rheumatoid arthritis and might occur after prolonged use of vibrating tools. This might also be part of CREST syndrome – Calcinosis, Raynaud's syndrome (sometimes called Raynaud's phenomenon), oEsophageal motility disorder, Scleroderma and Telengiectasis. The clinical features mimic Raynaud's disease but is much more intense.\nThromboangiitis obliterans (TAO) or Buerger's disease affects the small and medium-sized arteries of the limbs causing occlusion; thrombophlebitis of the superficial and deep veins is also present. It is a disease of male smokers under the age of 30. There are inflammatory changes in the walls of the arteries and veins, resulting in thrombosis. Sympathectomy has no role in the surgical treatment of Raynaud's disease."
        },
        {
            "id": 10,
            "question_type": "emq",
            "question": "Match the diagnoses with the clinical scenarios that follow:\nClinical scenarios\nA A 70-year-old man has been brought as an emergency complaining of sudden onset of severe\nleft-sided abdominal pain radiating to the back. He has a systolic blood pressure of 90 mmHg,\npulse rate of 120 per minute and is cold and clammy with a tender distended abdomen and a\npulsatile mass.\nBA 52-year-old man complains of a weak grip in his left hand with tingling and numbness along\nthe inner side of his arm and palm. When using his arm he has pain, and his palm has a dusky\ndiscoloration of the fingertips. His left radial pulse is weaker than the right.\nCA 73-year-old woman complains of attacks of sudden blindness in her right eye that last for a\nfew minutes. At the same time, she has episodic weakness of her upper limb. A systolic bruit\ncan be heard over the bifurcation of her carotid artery.\nD A 68-year-old man, who is a heavy smoker, complains of pain in his right thigh and buttocks\non walking about 400 metres. Once he stops, the pain disappears and returns when he walks\na similar distance again.\nE A 60-year-old woman, who is a heavy smoker and works as a domestic, gets syncopal attacks\nwhen she is working scrubbing floors using her right upper limb vigorously. This makes her\nquite uneasy and at times she feels faint.\nFA 68-year-old woman complains of sudden onset of severe pain in her right thigh, calf and\nleg of 6 hours duration. She has lost sensations from the mid-thigh distally, cannot move\nher foot or knee, her skin feels very cold and she looks pale. There are no pulses. She had a\nmyocardial infarction 6 weeks ago.\nGA 32-year-old woman complains of episodes of pain in the fingers of both her hands when\nit is cold. The fingers go white, swollen and dusky when she is unable to make any fine\nmovements. After some time, this subsides when the fingers become red.\nHA 28-year-old man, who is a heavy smoker, complains of pain in his right lower limb on\nwalking. He has developed a tender cord-like structure along his long saphenous vein with\nsome tenderness and a generally swollen leg.\n| A 74-year-old man complains of epigastric discomfort and throbbing backache for 4 months.\nOn examination he has a mass in his epigastrium extending on to umbilical region, which\nshows expansile pulsation.\nJA 64-year-old man, who is a postman, complains of intermittent claudication in his calf for\n8 months. He has a claudication distance of 200 metres and is a type 2 diabetic.\nKA 70-year-old man, who is a long-term heavy smoker, complains of onset of severe pain\nin his left calf and thigh of 2 days duration. Prior to this he had suffered from intermittent\nclaudication, with a claudication distance of 50 metres. He is unable to walk now.\nLA 45-year-old woman complains of a lump on the left side of her forehead for many years.\nThis has gradually become larger and gives her a continuous headache. On examination the\nlump has a to-and-fro thrill and a machinery murmur.\nMA 55-year-old woman who has been an insulin-dependent diabetic for 35 years has\ndeveloped necrotic skin patches in her right forefoot following a fall from a bicycle. In spite\nof good immediate and ongoing treatment from her doctor's surgery, she has developed\nnecrotic skin patches in her distal foot.\nNA 66-year-old man presented with a tender lump over his right popliteal fossa and severe pain\nin his leg for 48 hours. The lump was there a couple of years, but only over the last couple of\ndays it has become extremely tender, the leg has become cold and he is unable to walk.\nO A 70-year-old man underwent emergency operation for a leaking AAA. While in the ITU, after\n2 days, he became oliguric and has abdominal distension and cardio-respiratory compromise.\nHis CVP is 10 cm of water. He is still on the ventilator.\nPA 65-year-old woman with atrial fibrillation underwent a successful lower limb embolectomy\nunder local anaesthetic. A couple of days later she developed in the same limb severe\nthrobbing pain over a period of 4 hours; the limb looked pink.",
            "options": {
                "items": [
                    "A A 70-year-old man has been brought as an emergency complaining of sudden onset of severe\nleft-sided abdominal pain radiating to the back. He has a systolic blood pressure of 90 mmHg,\npulse rate of 120 per minute and is cold and clammy with a tender distended abdomen and a\npulsatile mass.",
                    "BA 52-year-old man complains of a weak grip in his left hand with tingling and numbness along\nthe inner side of his arm and palm. When using his arm he has pain, and his palm has a dusky\ndiscoloration of the fingertips. His left radial pulse is weaker than the right.",
                    "CA 73-year-old woman complains of attacks of sudden blindness in her right eye that last for a\nfew minutes. At the same time, she has episodic weakness of her upper limb. A systolic bruit\ncan be heard over the bifurcation of her carotid artery.",
                    "D A 68-year-old man, who is a heavy smoker, complains of pain in his right thigh and buttocks\non walking about 400 metres. Once he stops, the pain disappears and returns when he walks\na similar distance again.",
                    "E A 60-year-old woman, who is a heavy smoker and works as a domestic, gets syncopal attacks\nwhen she is working scrubbing floors using her right upper limb vigorously. This makes her\nquite uneasy and at times she feels faint.",
                    "FA 68-year-old woman complains of sudden onset of severe pain in her right thigh, calf and\nleg of 6 hours duration. She has lost sensations from the mid-thigh distally, cannot move\nher foot or knee, her skin feels very cold and she looks pale. There are no pulses. She had a\nmyocardial infarction 6 weeks ago.",
                    "GA 32-year-old woman complains of episodes of pain in the fingers of both her hands when\nit is cold. The fingers go white, swollen and dusky when she is unable to make any fine\nmovements. After some time, this subsides when the fingers become red.",
                    "HA 28-year-old man, who is a heavy smoker, complains of pain in his right lower limb on\nwalking. He has developed a tender cord-like structure along his long saphenous vein with\nsome tenderness and a generally swollen leg.",
                    "| A 74-year-old man complains of epigastric discomfort and throbbing backache for 4 months.\nOn examination he has a mass in his epigastrium extending on to umbilical region, which\nshows expansile pulsation.",
                    "JA 64-year-old man, who is a postman, complains of intermittent claudication in his calf for\n8 months. He has a claudication distance of 200 metres and is a type 2 diabetic.",
                    "KA 70-year-old man, who is a long-term heavy smoker, complains of onset of severe pain\nin his left calf and thigh of 2 days duration. Prior to this he had suffered from intermittent\nclaudication, with a claudication distance of 50 metres. He is unable to walk now.",
                    "LA 45-year-old woman complains of a lump on the left side of her forehead for many years.\nThis has gradually become larger and gives her a continuous headache. On examination the\nlump has a to-and-fro thrill and a machinery murmur.",
                    "MA 55-year-old woman who has been an insulin-dependent diabetic for 35 years has\ndeveloped necrotic skin patches in her right forefoot following a fall from a bicycle. In spite\nof good immediate and ongoing treatment from her doctor's surgery, she has developed\nnecrotic skin patches in her distal foot.",
                    "NA 66-year-old man presented with a tender lump over his right popliteal fossa and severe pain\nin his leg for 48 hours. The lump was there a couple of years, but only over the last couple of\ndays it has become extremely tender, the leg has become cold and he is unable to walk.",
                    "O A 70-year-old man underwent emergency operation for a leaking AAA. While in the ITU, after\n2 days, he became oliguric and has abdominal distension and cardio-respiratory compromise.\nHis CVP is 10 cm of water. He is still on the ventilator.",
                    "PA 65-year-old woman with atrial fibrillation underwent a successful lower limb embolectomy\nunder local anaesthetic. A couple of days later she developed in the same limb severe\nthrobbing pain over a period of 4 hours; the limb looked pink."
                ],
                "choices": [
                    "1 Abdominal aortic aneurysm (AAA)",
                    "2 Abdominal compartment syndrome (ACS)",
                    "3 Acute femoro-popliteal embolus",
                    "4 Acute femoro-popliteal thrombosis",
                    "5 Aortoiliac occlusion",
                    "6 Arteriovenous fistula",
                    "7 Diabetic gangrene",
                    "8 Femoro-popliteal occlusion",
                    "9 Internal carotid artery (ICA) stenosis",
                    "10 Limb compartment syndrome",
                    "11 Popliteal artery aneurysm",
                    "12 Raynaud's disease",
                    "13 Ruptured AAA",
                    "14 Subclavian steal syndrome",
                    "15 Thoracic inlet (outlet) syndrome",
                    "16 Thromboangiitis obliterans (TAO)"
                ]
            },
            "answer": {
                "A": "13",
                "B": "15",
                "C": "9",
                "D": "5",
                "E": "14",
                "F": "3",
                "G": "12",
                "H": "16",
                "I": "1",
                "J": "8",
                "K": "4",
                "L": "6",
                "M": "7",
                "N": "11",
                "O": "2",
                "P": "10"
            },
            "explanation": "1. I Abdominal aortic aneurysm\nThe various methods of presentation are shown in Figure 56.4. Once a clinical diagnosis is made, the first investigation is an ultrasound (Figure 56.5) to assess the size. If the aneurysm is 5.5 cm or more in diameter or is symptomatic, operation is carried out. A plain abdominal x-ray, taken for an unrelated cause, might show up an AAA (Figure 56.6). Further preoperative investigations are carried out, the details of which are in Table 56.1.\nThe patient is treated by an open operation (Figure 56.7) or endovascular repair (EVAR), the choice depending upon the deliberations of the vascular surgeon and vascular radiologist.\n\n2. O Abdominal compartment syndrome (ACS)\nRaised intra-abdominal pressure (IAP) can occur in various conditions, one of them being ruptured AAA. High IAP leads to reduced blood flow and global ischaemia causing multi-organ failure – renal impairment, decreased cardiac output from reduced preload and increased afterload, increased ventilation pressures because of diaphragmatic splinting resulting in decreased lung compliance, and reduction in visceral perfusion. Ideally this should be prevented by laparostomy – leaving the incision open and covering the abdominal contents with a mesh or a plastic saline-soaked bag (Bogota bag); once the tension has subsided, the abdomen is closed at a later date. If it has occurred, the abdominal incision is re-opened and the wound is left open as described above. The condition has a high mortality and if the patient survives, incisional hernia is almost inevitable.\n\n3. F Acute femoro-popliteal embolus\nThis patient, with a recent past history of MI, has a typical femoro-popliteal embolus – pain, pallor, pulselessness, paraesthesia, paralysis and perishing cold (six 'S's). The six classical features might not always be present. This is a clinical diagnosis. In case of doubt a Doppler ultrasound might be carried out, and if it cannot be distinguished from acute thrombosis an angiogram is done. Table 56.2 shows the differences between an embolus and thrombosis.\nThe patient is given analgesia and 5000 units of intravenous heparin. An embolectomy is carried out under local or general anaesthesia. Following the operation the patient is heparinised for 3 to 4 days, after which she is stabilised on warfarin, which should be continued for 6 months. The patient should be closely observed for the development of compartment syndrome (see the following).\n\n4. K Acute femoro-popliteal thrombosis\nThis patient is given analgesia and has to undergo an urgent angiogram to see the extent and exact site of thrombosis. Depending upon the local protocol and policy of the vascular and radiology units, the patient should undergo thrombolysis or a bypass procedure. If it is decided to give thrombolysis a chance initially, the angiogram catheter is left in place, through which tissue plasminogen (TPA) is infused. Repeat angiograms are done at regular intervals during the next 24 hours to see the outcome, and the patient remains under very close observation.\nDepending upon the success of thrombolysis (complete, partial, or none), the patient might not require any surgery or have to undergo an angioplasty or bypass. This requires very close teamwork between the vascular surgeon and interventional radiologist. Following a successful outcome one should be on the lookout for compartment syndrome.\n\n5. D Aortoiliac occlusion\nThis patient who has a claudication distance of almost one-quarter of a mile should first be managed by conservative measures – lose weight with dietary advice, give up smoking, and undertake regular exercises and walking within the limits of his disability. He should be started on statins, aspirin, or clopidogrel (if aspirin intolerant). The patient is kept under follow up. If his symptoms are threatening his livelihood or severely affecting his lifestyle, then intervention is discussed. An angiogram (Figure 56.8a and b) is carried out with a view to angioplasty and stenting or aorto-femoral bypass, depending upon the findings.\n\n6. L Arteriovenous fistula (A-V fistula)\nThese are found in the head, neck and extremities (Figure 56.9). This patient has one in the head called cirsoid aneurysm, which is a localised A-V fistula of congenital origin. It exhibits a to-and-fro thrill and a machinery murmur on auscultation. When they occur in the lower limbs, they produce local gigantism and in the long term might result in high-output cardiac failure.\nThe true extent of the malformation is seen by magnetic resonance angiography.\nTreatment is by therapeutic embolisation or occlusion of the feeding vessel with excision of the mass. This procedure for head-and-neck lesions can be dangerous, as it may cause a stroke. Therefore, such a procedure should be carried out only by a very experienced radiologist after careful consideration of the symptoms.\n\n7. M Diabetic gangrene\nThis patient has diabetic gangrene. This is an outcome of the pathological triad of ischaemia, neuropathy and sepsis. Ischaemia is secondary to small vessel atherosclerosis (microangiopathy); peripheral sensory neuropathy leads to trophic ulcers and the immunosuppression of hyperglycaemia predisposes to infection. Motor neuropathy with loss of reflexes might result in neuropathic joints.\nManagement consists of making sure that the diabetes is under good control. The infection is treated by drainage procedures and local amputations under appropriate antibiotic cover. An angiogram is carried out to map the blood supply to determine the possibility of revascularisation, which might render the limb salvageable or allow more distal amputations.\n\n8. J Femoro-popliteal occlusion\nThis patient has symptoms of femoro-popliteal occlusion with a short claudication distance. It is possible that his IC is affecting his job. If the condition progresses his livelihood may be under threat. Active conservative management must be advised – good control of his diabetes, total abstinence from smoking and weight-loss regimen. If his symptoms persist in spite of a good period of nonsurgical management, then revascularisation should be advised. An angiogram is carried out and depending upon the findings, the appropriate procedure performed.\nIn localised obstruction (stenosis) (Figure 56.10a and b) PTA is carried out. In a long obstruction (occlusion) of the superficial femoral artery a femoro-popliteal bypass is done using the patient's own long saphenous vein. This can be used in situ or reversed, a choice that depends on the individual surgeon. If the angiogram shows the obstruction to be in the posterior tibial artery, then a femoro-distal bypass should be the procedure.\n\n9. C Internal carotid artery (ICA) stenosis\nThis patient has ICA stenosis causing her symptoms of transient ischaemic attacks (TIA) such as amaurosis fugax and minor strokes. This is caused by platelet emboli into the cerebral circulation; the emboli arise from the atheromatous segment of the ICA where there might be a post-stenotic dilatation (Figure 56.11). These symptoms are a warning sign of an impending stroke and hence the patient should be treated urgently.\nA duplex scan is carried out, followed by ICA endarterectomy. Instead of an open operation, PTA with stenting can also be considered, the choice of the procedure depending upon the policy of the vascular and radiology unit. In patients who have an asymptomatic stenosis picked up by a carotid bruit, intervention is advised when the stenosis is more than 70%.\n\n10. P Limb compartment syndrome\nThis patient has developed compartment syndrome, which is a form of revascularisation injury. Following limb revascularisation procedures, some vascular units routinely measure compartment pressures (normal: up to 8 mmHg). A rising pressure is an indication for urgent fasciotomy where long incisions are made in the calf as the posterior compartment is the tightest. Later, skin grafting might be required.\nThe typical clinical features are severe pain out of proportion to the injury or operation, inability to discern two-point discrimination, extreme pain on passive movement of the muscles, and swollen tense compartment. Pressure studies can be unreliable, and fasciotomy must be performed on clinical grounds. However, in the unconscious patent pressure studies must be carried out. This condition also occurs following orthopaedic operations, burns, and crush injuries.\n\n11. N Popliteal artery aneurysm\nThis patient has a popliteal artery aneurysm which accounts for 70% of all peripheral aneurysms. The history is typical of thrombosis in the aneurysm (Figure 56.12), a recognised complication. An angiogram is done to see the 'run off' followed by femoro-distal bypass using the patient's reversed long saphenous vein. Surgery can be unsuccessful because the distal vessels are thrombosed; 50% of such limbs are not salvageable. An asymptomatic aneurysm should be repaired if the diameter is 2.5 cm or more to prevent complications such as distal emboli or thrombosis.\n\n12. G Raynaud's disease\nThis patient has intermittent digital vasospasm where no underlying cause can be found. The three typical phases are digital blanching from arterial spasm; swollen, blue and painful fingers from stagnant anoxia from local cyanosis; red and tingling of the digits due to recovery and reactive hyperaemia from vasodilatation. All three phases are not always present. In extreme cases there might be constant pain with ulceration and skin necrosis. Although the cause is unknown, it is thought that abnormality in the α-receptors of the vascular smooth muscle produces problems with smooth muscle contraction and elasticity of the arterial wall.\nCertain investigations are done routinely, including full blood count, urea and electrolytes, ESR, CRP, cryoglobulins, antinuclear factor, rheumatoid antibodies, anti-mitochondrial antibodies, antithyroid antibodies and x-ray of the thoracic inlet. The management is conservative and consists of avoidance of cold, tobacco abstinence and use of heated gloves. Cervical sympathectomy, used in the past, sometimes has dramatic but short-lived effect. As the procedure can be done by minimal access surgery (transthoracic endoscopic), it is sometimes still used albeit after full-informed consent.\n\n13. A Ruptured AAA\nThis is a typical emergency presentation of AAA. In 80% of these patients the presentation is a posterior leak as the aneurysm anteriorly is occupied by clot. This gives the patient a chance to get to the hospital and perhaps survive. In 20%, it is a true rupture into the peritoneal cavity when the patient dies before getting to the hospital. The combined mortality (community and hospital) of these patients is around 80%–90%. Hence, the benefit of screening for AAA in certain parts of the NHS.\nThis patient should be immediately resuscitated with two wide-bore intravenous cannulas for volume expansion with crystalloids, although the blood pressure should not be raised above 90–100 mmHg. Permissive hypotension should be the policy as it would be counterproductive to raise the blood pressure any higher. An indwelling urinary catheter is introduced and the patient taken to theatre for immediate operation.\nWith the triad of severe abdominal and back pain, hypovolaemic shock and pulsatile abdominal mass, precious time should not be lost by doing investigations. In the rare instance when the diagnosis is uncertain, a CT scan or a bedside US is carried out. CT scan is necessary if EVAR is being contemplated. The treatment is an emergency operation, which, in the vast majority, is an open procedure.\n\n14. E Subclavian steal syndrome\nThis woman has subclavian steal syndrome. There is obstruction of the first part of the subclavian artery from atheroma proximal to the origin of the vertebral artery. Vigorous exercise of the upper limb demands extra blood supply. In this patient, as there is narrowing of the subclavian artery, the extra demand for more blood is met by the subclavian artery stealing blood from the vertebral artery. Thus there is vertebro-basilar insufficiency leading to cerebral ischaemia, giving features of syncope. Confirmation is by digital subtraction angiography and treatment is PTA.\n\n15. B Thoracic inlet (outlet) syndrome\nThis condition is caused by compression of the subclavian artery and the lowest cord of the brachial plexus (C8 and T1) by one of several anatomical abnormalities: cervical rib, prominent transverse process of the C7 vertebra, fibrous band extending from the C7 transverse process to the first rib, and a sharp edge of the scalene muscles. The clinical features can be of vascular, neurological and local factors (Figure 56.13).\nThe vascular symptoms are from compression of the subclavian artery, causing it to narrow with post-stenotic dilatation and intraluminal thrombus. Small emboli are released from the thrombus, causing digital ischaemia with pain and in extreme cases skin necrosis of the digits. The neurological symptoms are from compression of the lower cord of brachial plexus with neurological deficiency in the distribution of the ulnar nerve. The local symptoms are pain and discomfort in the supraclavicular area from a bony lump, which is the abnormal rib. Rarely, the subclavian vein may be obstructed with swelling of the arm and subclavian vein thrombosis.\nAn x-ray of the thoracic inlet is useful in the presence of a rib (Figure 56.14). A Doppler ultrasound might help to elucidate the actual abnormality in the subclavian artery. The treatment is to remove the cause surgically.\nThe differential diagnosis of thoracic inlet syndrome is cervical spondylosis, syringomyelia, progressive muscular atrophy and Pancoast's tumour (bronchogenic carcinoma of the lung apex).\n\n16. H Thromboangiitis obliterans (TAO) (Buerger's disease)\nThis young man has typical TAO, which is an occlusive inflammatory disease of the small- and medium-sized arteries of the extremities. The additional features are thrombophlebitis of the superficial and deep veins and Raynaud's syndrome (see above). Usually all the features of the triad are not present. Involvement of the endothelium with neutrophil infiltrates leads to thrombosis and obliteration of the lumen. These histological changes might extend to the neighbouring veins and nerves.\nTotal abstinence from smoking is mandatory; this will arrest although not reverse the disease. Sympathectomy relieves the rest pain because there is an element of vasospasm in the diseased vessels; the procedure might also help to heal distal patches of skin necrosis and nailbed infection."
        }
    ]
}
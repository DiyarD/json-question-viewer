{
  "chapter_name": "Gynecology",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 23-year-old female has had two Pap smears over the last 24 months showing Atypical Squamous Cells of Undetermined Significance (ASC-US). On subsequent cervical biopsy, she is found to have mild dysplasia. Which of the following is the most appropriate treatment?",
      "options": [
        "A. Pap smear in 1 year",
        "B. Pap smear in 6 months",
        "C. Cryoablation",
        "D. Loop electrosurgical excision procedure (LEEP)",
        "E. Cold knife conization"
      ],
      "answer": "A",
      "explanation": "- The goal of cervical cancer screening is to prevent cancer progression while avoiding overtreatment of regressing lesions.\n- The patient had a concerning Pap smear with mild dysplasia (CIN 1) confirmed by cervical biopsy.\n- Cervical Intraepithelial Neoplasia (CIN) is a premalignant condition grouped into CIN 1 (mild), CIN 2 (moderate), and CIN 3 (severe).\n- CIN 1 management depends on patient age.\n- For women aged 21-24 with CIN 1, conservative management with a repeat Pap smear in 1 year is appropriate due to very low risk of cervical cancer.\n- For women older than 25 with CIN 1, management is tailored to HPV status, previous Pap results, and patient preference, but a repeat Pap smear in 1 year with HPV testing is generally appropriate.\n- Treatment (cryoablation or excisional methods like LEEP/cold knife conization) is recommended for CIN 2-3 due to high risk of progression.\n- Ablative options are preferred in reproductive-aged women due to lower risk of adverse outcomes like preterm delivery."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 28-year-old female would like to know if she is currently pregnant. Which of the following combinations of imaging and lab threshold is most likely to accurately demonstrate an intrauterine gestational sac the earliest?",
      "options": [
        "A. Transabdominal ultrasound with a serum beta human chorionic gonadotropin (hCG) of 3500 mIU/mL",
        "B. Transvaginal ultrasound with a urine beta hCG of 1500 mIU/mL",
        "C. Transvaginal ultrasound with a serum beta hCG of 2000 mIU/mL",
        "D. Transvaginal ultrasound with a urine beta hCG of 2500 mIU/mL",
        "E. Transabdominal ultrasound with a serum beta hCG of 5500 mIU/mL"
      ],
      "answer": "B",
      "explanation": "- Transvaginal or transabdominal ultrasound can be used with serum or urine beta hCG to identify and estimate gestational age.\n- Transvaginal ultrasound is more accurate for earlier gestational age determination.\n- Quantitative urine tests have comparable accuracy to serum beta hCG.\n- An intrauterine gestational sac can be visualized earliest with transvaginal ultrasound when urine or serum beta hCG is greater than 1500 mIU/mL.\n- Nonvisualization of an intrauterine sac with transvaginal ultrasound when hCG is >1500 mIU/mL is concerning for ectopic pregnancy.\n- An intrauterine sac is visible on trans-abdominal ultrasound when hCG is greater than 6000 mIU/mL."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 35-year-old woman presents to the emergency department (ED) complaining of abdominal pain and irregular vaginal spotting. Her last menstruation was 8 weeks ago. On physical exam, she has tenderness in her right adnexa. Laboratory data demonstrates leukocytosis of 18,000 cells/mL and beta hCG of 3,000 mIU/mL. She is hemodynamically stable. Which of the following is true regarding the most likely condition?",
      "options": [
        "A. This is most commonly seen in women after HPV infection.",
        "B. Intrauterine devices (IUDs) increase one's risk of this condition.",
        "C. Immediate laparotomy is warranted.",
        "D. Immediate laparoscopy is warranted.",
        "E. Methotrexate could be given with successful outcomes."
      ],
      "answer": "E",
      "explanation": "- Ectopic pregnancy is a common and potentially life-threatening cause of abdominal pain, with 97% of cases occurring in the fallopian tubes.\n- For hemodynamically stable patients interested in future reproduction, methotrexate can be given with an 84% success rate.\n- Absolute contraindications for methotrexate include beta hCG > 5000 mIU/mL, intrauterine gestational sac > 4 cm with no fetal cardiac activity, or intrauterine gestational sac > 3.5 cm with fetal cardiac activity.\n- Ectopic pregnancies are often associated with pelvic inflammatory disease (PID). HPV infection is not a risk factor for PID.\n- While IUDs carry a 5% risk of ectopic pregnancy, the overall risk is lower than for those not using contraception.\n- Laparoscopic surgery is safer than open laparotomy, but should only be performed in patients with an acute abdomen or who are hemodynamically unstable.\n- Rh-negative patients require anti-D globulin injection within 72 hours of medical or surgical intervention."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is true regarding adnexal torsion?",
      "options": [
        "A. Adnexal torsion is most commonly due to an ovarian malignancy.",
        "B. Doppler ultrasound is the best diagnostic test to confirm vascular compromise caused by torsion.",
        "C. CT imaging is the preferred method to confirm diagnosis.",
        "D. Hysterectomy is the recommended treatment in patients with signs of necrosis.",
        "E. The majority will detorse on their own."
      ],
      "answer": "B",
      "explanation": "- Adnexal torsion involves twisting of the ovary and/or fallopian tubes, compromising vascular supply.\n- It primarily affects reproductive-aged women and is commonly associated with benign ovarian/tubal enlargement (e.g., benign cystic teratoma, corpus luteum cyst) or pregnancy-related changes.\n- It is rarely related to ovarian malignancy.\n- Doppler ultrasound is the preferred imaging method for diagnosis, though CT can assist.\n- Adnexectomy is the treatment for patients with signs of tubal necrosis.\n- Laparoscopic detorsion can usually be performed in most patients once diagnosis is confirmed, requiring immediate surgical intervention to assess adnexal viability."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 38-year-old G1P1 female presents with abnormal vaginal bleeding. She reports having spotting throughout the month with some pelvic discomfort. She denies any recent sexual activity. Which of the following is least indicated for this patient?",
      "options": [
        "A. Serum beta hCG",
        "B. Magnetic resonance imaging (MRI) abdomen/ pelvis",
        "C. Endometrial biopsy",
        "D. Transvaginal ultrasound",
        "E. Pelvic examination"
      ],
      "answer": "B",
      "explanation": "- Abnormal vaginal bleeding has a broad differential diagnosis, including intrauterine pregnancy, ectopic pregnancy, endometriosis, adenomyosis, fibroids, and malignancy.\n- ACOG recommends a full history, physical examination (including pelvic exam), and blood work (including a pregnancy test) for all women with abnormal vaginal bleeding.\n- This should be followed by diagnostic imaging, such as a transvaginal ultrasound.\n- All patients over 35 years old should undergo endometrial biopsy.\n- MRI, though potentially useful for identifying a mass, is not typically needed during the initial evaluation of abnormal bleeding."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 50-year-old female presents to her obstetrician complaining of heavy menstrual bleeding that appears to be worsening. She is having significant abdominal cramping with her menses and is having trouble with urinary frequency and urgency. Which of the following is true regarding the most likely condition?",
      "options": [
        "A. The condition tends to get better during pregnancy.",
        "B. MRI is most often required to confirm the diagnosis.",
        "C. Most cases are associated with vaginal bleeding.",
        "D. This is a benign condition.",
        "E. Uterine artery embolization is preferred in younger women."
      ],
      "answer": "D",
      "explanation": "- Uterine fibroids (leiomyomas) are benign smooth muscle tumors of the uterus, most common in women aged 40-50.\n- Most are asymptomatic, but bleeding is the most common indication for hysterectomy.\n- Malignant degeneration is rare (<1%) and typically occurs in menopausal years.\n- High pregnancy hormone levels can enlarge fibroids, leading to complications like recurrent miscarriages, preterm labor, and pain.\n- Diagnosis is typically by transvaginal ultrasound; MRI, CT, and hysterosalpingography can also be performed.\n- Conservative management includes oral contraceptives, medroxyprogesterone acetate, GnRH agonists, uterine artery embolization, and myomectomy.\n- Uterine artery embolization is contraindicated in patients planning future pregnancy.\n- GnRH agonists are used for 3 months pre-surgery to reduce blood loss and normalize hematocrit."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 33-year-old female who is 18 weeks pregnant presents to the ED with hypotension, altered mental status, and tachycardia. The paramedics report that she was in a car accident earlier in the day and were called when she became altered. She has obvious vaginal bleeding, and the bedside nurse states that she is persistently bleeding from her peripheral IV site. Which of the following is true about this condition?",
      "options": [
        "A. Low fibrinogen levels are rare.",
        "B. Transfusion of blood products is the cornerstone of management.",
        "C. This condition can be excluded in cases with no vaginal bleeding.",
        "D. Ultrasound is the best initial screening test.",
        "E. Delivery of the fetus should be performed."
      ],
      "answer": "E",
      "explanation": "- Disseminated intravascular coagulation (DIC) is a hemostasis disorder involving widespread thrombosis, leading to depletion of platelets and coagulation factors, excessive thrombolysis, and profound bleeding diathesis.\n- DIC results in depletion of coagulation factors and platelets, and production of fibrin degradation products, causing hemorrhage, thrombosis, and multiorgan failure.\n- Blood transfusions are not definitive management for DIC; treating the underlying cause is key.\n- DIC in pregnancy is rare (0.03-0.035%) and is triggered by conditions like postpartum hemorrhage, preeclampsia, HELLP syndrome, amniotic fluid embolism, sepsis, and traumatic placental abruption.\n- Placental abruption can present with or without vaginal bleeding (concealed abruption).\n- For an unstable patient with DIC secondary to traumatic placental abruption, delivery of the fetus is the best management, often resolving the obstetric condition initiating DIC.\n- Ultrasound can be a useful adjunct in equivocal cases of placental abruption."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding cervical cancer?",
      "options": [
        "A. Cervical cancer is the most common gynecologic malignancy in the United States.",
        "B. Cervical cancer is staged during surgical exploration.",
        "C. Stage 3 disease requires surgical intervention.",
        "D. Cervical cancer screening should be performed 3 years after initiation of sexual intercourse regardless of age.",
        "E. Cervical cancer screening should be performed 3 years after initiation of sexual intercourse but no later than age 21."
      ],
      "answer": "E",
      "explanation": "- Cervical cancer is the third most common gynecologic malignancy in the U.S.\n- HPV-16 and HPV-18 are responsible for 70% of cervical cancer cases.\n- ACOG recommends annual cervical cytology screening with Pap smear starting 3 years after sexual intercourse initiation, but no later than age 21.\n- Cervical cancer staging is based on physical examination and adjuvant radiographs, not surgical exploration.\n- Five-year survival rates decrease with increasing stage: Stage 1 (88%), Stage 2 (63%), Stage 3 (38%), Stage 4 (10-20%).\n- Lymph node metastasis (pelvic or para-aortic) is a significant negative prognosticator.\n- Surgical candidates include patients with Stage 1 to Stage 2b invasive cervical cancer.\n- Patients with Stage 1 to 2b disease have a high cure rate (>90%) with hysterectomy.\n- Patients with Stage 2b and above do not benefit from surgical intervention and should be offered chemoradiation."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 4-year-old girl arrives to the ED accompanied by her mother after noticing blood in her underwear. The girl is sitting on her mother's lap and appears comfortable. The child was adopted and no family history is known. On physical examination, a bleeding, friable \"grape-like\" mass is appreciated at the vaginal introitus. Which of the following is true for this patient?",
      "options": [
        "A. It is more commonly seen in young adult females.",
        "B. The lesion is slow growing.",
        "C. The lesion is likely benign.",
        "D. A sexual assault evidence collection kit is indicated.",
        "E. The child should be referred for vaginoscopy and biopsy."
      ],
      "answer": "E",
      "explanation": "- Sarcoma botryoides (rhabdomyosarcoma of the bladder or vagina) is the most common malignant condition of the lower genitourinary system in childhood.\n- The tumor grows rapidly, may protrude from the introitus, and often appears as a \"grape-like\" friable mass.\n- Patients typically present with blood spotting on undergarments.\n- Diagnosis is confirmed by vaginoscopy and biopsy.\n- The extent of the lesion is best determined by pelvic ultrasound or CT scan.\n- This tumor has an excellent outcome, with >90% survival with limited fertility-preserving surgery and multimodal chemotherapy.\n- Sexual abuse should always be considered in young patients with unusual history/exam; suspicious findings include certain types of bruising or fractures, burns, head injury, or social isolation.\n- If sexual abuse is suspected, a sexual evidence collection kit is required.\n- The patient in the scenario appears comfortable and her history/exam are consistent with sarcoma botryoides, making sexual abuse unlikely."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true in regard to ovarian cancer?",
      "options": [
        "A. It is the most common malignant tumor in the female genital tract.",
        "B. It is staged similarly to cervical cancer.",
        "C. Bilateral ovary involvement is considered stage 4 disease.",
        "D. Krukenberg tumor classically demonstrates signet ring cells.",
        "E. Oral contraceptive pills increase the risk of ovarian cancer."
      ],
      "answer": "D",
      "explanation": "- Endometrial cancer is the most common malignant tumor of the female genital tract, though ovarian cancer is the leading gynecologic cause of death.\n- Most ovarian cancer cases are diagnosed in later stages due to few early symptoms.\n- Risk factors include early menarche, nulliparity, and late menopause, all linked to increased estrogen exposure.\n- Oral contraceptive pills decrease the risk of ovarian cancer but increase breast cancer risk (which can persist for ~10 years post-cessation).\n- Krukenberg tumor is an ovarian tumor metastasized from another site (classically stomach), characterized by signet ring cells.\n- Symptoms include vague abdominal pain, pressure, nausea, early satiety, constipation, swelling, weight loss, urinary frequency, and abnormal vaginal bleeding.\n- Initial workup includes transvaginal ultrasound and CA-125.\n- Staging is completed surgically, unlike cervical cancer, to best evaluate disease extent and guide adjuvant therapy.\n- Bilateral ovarian involvement is considered Stage 1 disease.\n- For localized ovarian cancer (Stage 1 and some Stage 2) where fertility preservation is desired, unilateral oophorectomy, peritoneal biopsies, and unilateral lymphadenectomy may be performed.\n- In other cases, total abdominal hysterectomy with bilateral salpingo-oophorectomy is recommended.\n- Cytoreduction (debulking surgery) to minimize tumor volume is accepted to improve survival, as survival is directly proportional to residual tumor volume."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 32-year-old female presents to the ED 1 week after vaginal delivery of her first child. She has persistent right lower quadrant abdominal pain, nausea, and leukocytosis. Pelvic examination is unremarkable. An ultrasound demonstrates a tubular hypoechoic structure that extends superiorly from the adnexa, with absence of flow on Doppler. Which of the following is true about this condition?",
      "options": [
        "A. MRI is generally not helpful in establishing the diagnosis.",
        "B. Therapeutic anticoagulation and IV antibiotics should be started.",
        "C. Exploratory laparotomy should be performed.",
        "D. Diagnostic laparoscopy should be performed.",
        "E. She likely has retained products of contraception."
      ],
      "answer": "B",
      "explanation": "- The patient's presentation is consistent with ovarian vein thrombophlebitis (OVT).\n- OVT typically presents with fever and abdominal pain within 1 week postpartum or post-surgery, with 80% occurring on the right side.\n- Symptoms may also include nausea and ileus.\n- Postpartum pelvic thrombophlebitis is often preceded by Virchow's triad: endothelial damage from delivery, venous stasis from pregnancy-induced ovarian venous dilation and low postpartum pressures, and pregnancy-related hypercoagulable state.\n- Diagnosis is challenging and often one of exclusion; persistent fever despite broad-spectrum IV antibiotics is a clinical clue.\n- No single imaging modality is definitively effective, but ultrasound can be useful (though limited by bowel gas), and both CT and MRI are useful.\n- Current recommended management is antibiotic therapy combined with systemic anticoagulation."
    }
  ]
}
{
  "chapter_name": "Oncology and Tumor Biology",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 60-year-old male with cirrhosis presents to clinic with a newly diagnosed 4-cm hepatocellular carcinoma (HCC) in segment 6. There is no evidence of gross vascular invasion and no regional nodal or extrahepatic distant metastases. His international normalized ratio (INR) is 1.2, creatinine is 1.0 mg/ dL, bilirubin is 2.5 mg/dL, and albumin is 4 mg/dL, and his computed tomography (CT) scan shows no evidence of ascites. Which of the following would be the best treatment option?",
      "options": [
        "A. Transarterial chemoembolization (TACE)",
        "B. Liver resection",
        "C. Radiofrequency ablation (RFA)",
        "D. Irreversible electroporation",
        "E. Liver transplantation"
      ],
      "answer": "E",
      "explanation": "*   The choice of HCC therapy is individualized based on tumor burden, underlying liver disease, patient performance status, and potential side effects or complications.\n*   Anatomic resection is the treatment of choice for patients without liver disease and appears superior to simple wedge resection.\n*   Evidence suggests RFA may be used in select patients with similar survival benefit to surgical resection, with significantly lower complications.\n*   Locoregional therapies (RFA, irreversible electroporation, proton beam therapy) are typically reserved for tumors not amenable to surgical resection or as bridge therapy to transplant (C).\n*   Best results for locoregional therapies are seen with tumors less than 4 cm.\n*   Irreversible electroporation (Nanoknife) shows promise but is not yet included in current NCCN guidelines for HCC treatment (D).\n*   Patients with liver disease and elevated bilirubin are less likely to tolerate surgical intervention.\n*   The absence of clinically relevant portal hypertension and normal bilirubin level are major determinants for successful liver resection (B).\n*   Liver transplantation is the only treatment modality left for cirrhotics with HCC.\n*   The Milan criteria (single tumor ≤ 5 cm or up to three tumors, none > 3 cm, no vascular invasion, regional lymphadenopathy, or distant disease) are used to select transplant candidates.\n*   TACE is another useful therapy for individuals not eligible for resection or regional treatment due to severe cirrhosis or other comorbidities (A).\n*   However, TACE is contraindicated in Child class C cirrhosis or for cases where the location precludes selective treatment.\n*   Sorafenib is the only chemotherapy currently approved for HCC, showing slight survival improvement from 7.9 to 10.7 months."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the development of skin cancers?",
      "options": [
        "A. Ultraviolet (UV) radiation both initiates and promotes DNA damage.",
        "B. UVA is the ultraviolet frequency most responsible for chronic skin damage.",
        "C. An increased level of skin melanin increases the risk of developing basal cell carcinoma.",
        "D. UV radiation damages the DNA mismatch repair gene.",
        "E. Mutations in the BCL-2 gene are a known mechanism for the development of skin cancer."
      ],
      "answer": "A",
      "explanation": "*   UV radiation is a known risk factor for squamous cell carcinoma, basal cell carcinoma, and possibly malignant melanoma.\n*   It acts as both an initiator and promoter of direct DNA damage and damage of DNA repair mechanisms.\n*   The degree of risk depends on the type of UV rays and the intensity of exposure.\n*   A higher quantity of melanin in skin is protective (C).\n*   The UV portion of the electromagnetic spectrum is divided into UVA (320-400 nm), UVB (280-320 nm), and UVC (200-280 nm).\n*   Of these, UVB is the most significant contributor to skin damage (B).\n*   The mechanism of carcinogenicity by UVB is by formation of pyrimidine dimers in DNA (D).\n*   This damage can be repaired by the nucleotide excision repair pathway.\n*   With excessive sun exposure, the capacity of this pathway is overwhelmed, leading to unrepaired DNA damage.\n*   Mutations in the ras and p53 genes occur early in skin cancers, mainly at the dipyrimidine sequences.\n*   The BCL-2 gene is involved in regulating cell apoptosis (E)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the interaction between radiation therapy and tumor cells?",
      "options": [
        "A. Radiation therapy leads to cancer cell death by directly inhibiting adenosine triphosphate (ATP) production in the mitochondria.",
        "B. As the energy used in radiation therapy increases, collateral damage to overlying skin also increases.",
        "C. Larger tumors are more sensitive to radiation therapy.",
        "D. The S-phase of the cell cycle is most sensitive to radiation effects.",
        "E. Correcting anemia can increase the efficacy of radiotherapy."
      ],
      "answer": "E",
      "explanation": "*   The complete mechanism of radiotherapy-induced cancer cell death is not fully elucidated.\n*   Charged particles (photons) are delivered to target cells via external beam, brachytherapy, or radioactive isotopes.\n*   These charged particles interact with the outer layer of loosely bound electrons in normal atoms, transferring energy from the photon and deflecting the electron to create a \"free radical\" (Compton effect).\n*   The energy dissipated by these ionizing events disrupts chemical bonds, primarily in DNA.\n*   Ionizing radiation has a direct effect on DNA in certain cells and indirectly affects others by forming oxygen-free radicals (A).\n*   The most important effect appears to be the creation of double-stranded DNA breaks.\n*   Normal cells can repair this damage to some degree, but tumor cells often have damaged or inhibited DNA repair mechanisms.\n*   As photon beam energy increases, tissue penetration increases.\n*   The skin is spared by the production of higher-energy electrons that travel forward and achieve full intensity at a depth below the skin's surface (B).\n*   Tissue hypoxia significantly reduces radiation damage and is a patient-modifiable factor researched to improve radiotherapy effectiveness.\n*   Relative hypoxia within large tumor cells contributes to their resistance to radiation (C).\n*   Systemic anemia negatively affects radiotherapy, and correction before radiation therapy is helpful.\n*   M phase of the cell cycle is the most vulnerable stage to radiation therapy (D)."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 43-year-old male is diagnosed with a high-grade right lower extremity osteosarcoma and undergoes surgical resection and adjuvant chemotherapy with MAP (methotrexate, doxorubicin, and cisplatin). After the third treatment cycle, the patient develops severe nausea, vomiting, and altered mental status. Workup reveals increased liver transaminases, a reduction in glomerular filtration rate (GFR), as well as leukopenia and thrombocytopenia. What medication can potentially reverse these effects?",
      "options": [
        "A. Omeprazole",
        "B. Folinic acid",
        "C. Folic acid",
        "D. Folate",
        "E. Cobalamin"
      ],
      "answer": "B",
      "explanation": "*   Folinic acid, also known as leucovorin, is frequently given as \"rescue therapy\" for methotrexate toxicity.\n*   Folinic acid is a 5-formyl derivative of tetrahydrofolic acid that does not require dihydrofolate reductase (DHFR) for its conversion, thus unaffected by methotrexate's inhibitory action on DHFR.\n*   Proton pump inhibitors, such as omeprazole, delay methotrexate elimination and can increase toxicity, so they should be stopped during therapy if possible (A).\n*   Folate is the natural form of vitamin B9, and folic acid is the synthetic form; both rely on DHFR for metabolism and have no effect on methotrexate toxicity (C, D).\n*   Cobalamin (vitamin B12) can treat megaloblastic anemia but will not affect myelosuppression caused by methotrexate."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding patterns of metastatic spread?",
      "options": [
        "A. The most common metastatic location for breast cancer is the brain.",
        "B. The most common metastatic location for colon cancer is the lungs.",
        "C. Metastases to the adrenal gland most commonly originate in the lungs.",
        "D. The most common metastatic location for melanoma is the small bowel.",
        "E. The transverse colon is frequently the first location of metastatic spread of pancreatic cancer."
      ],
      "answer": "C",
      "explanation": "*   Metastatic spread to the adrenal glands is common with breast and lung cancer, with lung cancer being more prevalent.\n*   While breast cancer can spread to the brain via Batson's plexus, the most common metastatic location is the lungs (A).\n*   Colon cancer spreads predictably, first to the corresponding nodal basin, then via the portal system to the liver.\n*   Though colon cancer can spread to the lungs, the liver is more common (B).\n*   Pancreatic metastases can be seen throughout the abdominal cavity, but the liver is frequently the first location following locally invasive disease (E).\n*   While the most common metastatic tumor of the small bowel is from melanoma, melanoma frequently spreads to the lungs first (D)."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding the human protein p53?",
      "options": [
        "A. Germline mutations of the p53? gene result in Cowden Syndrome.",
        "B. The unregulated growth seen with human papilloma virus (HPV) is partly due to binding and inactivation of the p53 protein.",
        "C. The p53 gene suppresses the translation process in DNA sequencing and cell growth.",
        "D. Overexpression of this gene leads to uncontrolled cell growth.",
        "E. Mutations frequently result in benign neoplastic growth rather than malignancy."
      ],
      "answer": "B",
      "explanation": "*   p53 is a protein encoded by the tumor suppressor gene TP53, located on chromosome 17p13.1.\n*   It is important for cell cycle regulation, DNA replication, and apoptosis in response to DNA damage.\n*   The p53 protein binds to DNA sequences in the promoter region of other genes to enhance or regulate transcription (C).\n*   p53 typically interacts with and enhances the effects of genes involved with inhibition of cell growth or replication (D).\n*   Mutations in the TP53 tumor suppressor gene result in unregulated cell growth and predisposition to malignant neoplasms (E).\n*   Li-Fraumeni syndrome is an autosomal dominant, hereditary disorder characterized by a germline mutation of the TP53 tumor suppressor gene (A).\n*   TP53 mutations can also arise sporadically and are seen in over half of all human cancers.\n*   HPV, for example, encodes protein E6, which binds and inactivates p53, contributing to cervical dysplasia."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 77-year-old male who resides in a subacute care facility has just finished adjuvant chemotherapy (FOLFOX and Bevacizumab) for metastatic colon cancer. Despite a normal albumin, minimal weight loss, and meticulous local wound care, his nurses have been unable to adequately treat a nonhealing sacral decubitus ulcer. The wound base looks clean, and he has no signs of systemic infection. Which of the following is true?",
      "options": [
        "A. The sacral wound should be preemptively debrided to avoid infection and facilitate wound healing.",
        "B. Supplemental enteral nutrition will facilitate faster wound healing.",
        "C. Rescue therapy can be attempted with leucovorin.",
        "D. The patient should be converted to Cetuximab.",
        "E. Barriers to healing will likely resolve in 6 months."
      ],
      "answer": "E",
      "explanation": "*   Bevacizumab (Avastin), a humanized monoclonal antibody against vascular endothelial growth factor (VEGF), prolongs survival when added to 5-fluorouracil-based chemotherapy for metastatic colorectal cancer.\n*   Bevacizumab has numerous adverse effects, with delayed wound healing being one of the most prevalent.\n*   Its inhibitory effect on VEGF receptors limits angiogenesis, which is critical for wound healing.\n*   Spontaneous bowel perforation is a potentially devastating, though infrequent, complication.\n*   The effects of the chemotherapy regimen on wound healing last about 6 months, with no studies showing an effect on wound healing after this period (E).\n*   For a patient already showing signs of impaired wound healing, additional surgery is likely unhelpful and potentially deleterious, especially without clinical signs of infection (A).\n*   Supplemental nutrition, in the absence of proven nutritional deficit, has not been shown to improve wound healing (B).\n*   Leucovorin (folinic acid) is given with 5-FU to reduce side effects but has no effect on bevacizumab (C).\n*   Cetuximab, an anti-EGFR monoclonal antibody, improves survival with FOLFIRI compared to bevacizumab, but wound healing complications were similar (D)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "An 87-year-old female presents to the emergency department (ED) with weight loss, vomiting, obstipation, and a distended abdomen. She has not had a bowel movement in 3 days. Past history is significant for a non-ST segment elevation myocardial infarction (NSTEMI) 6 weeks earlier. A computed tomography (CT) scan with oral contrast shows evidence of an obstructing mass in the sigmoid colon. However, the lumen does appear to be patent. Her vitals are stable. Which of the following is the best recommendation?",
      "options": [
        "A. Diverting ileostomy",
        "B. Diverting transverse colostomy",
        "C. Open sigmoid resection with proximal colostomy",
        "D. Colonoscopy with placement of a temporizing stent followed by an elective surgery",
        "E. Laparoscopic sigmoid resection with proximal colostomy"
      ],
      "answer": "D",
      "explanation": "*   Symptoms of obstruction are the initial presenting symptom in up to 8% of colorectal cancers.\n*   Emergency surgery has traditionally been the treatment of choice, but studies show higher morbidity and mortality rates compared to elective surgery.\n*   Many patients require temporary colostomy, which deteriorates quality of life and becomes permanent in 10% to 40% of cases.\n*   The aim of a temporizing stent is to avoid emergency surgery and plan for elective surgery (which can be laparoscopic) to improve surgical results, obtain accurate tumor staging, and detect synchronous lesions.\n*   Stenting also allows for medical optimization of patient comorbidities.\n*   Although stenting has multiple benefits, a recent prospective randomized study showed no advantage over emergency surgery.\n*   However, for an 87-year-old female with a recent NSTEMI, operative risk would be prohibitive.\n*   Despite potential immediate benefits of temporizing stents, their implication on long-term oncologic treatment results remains to be seen.\n*   Obstruction must still be treated surgically if stenting is not possible (A-C, E)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 55-year-old male presents to the ED with vomiting and an inability to tolerate oral intake for the last week. CT scan shows a significantly distended stomach, with a thickened mass near the pylorus. Upper endoscopy shows a large mass in the stomach that completely occludes the distal lumen. Biopsy is consistent with low-grade mucosa-associated lymphoid tissue (MALT) lymphoma. He takes proton-pump inhibitors for acid reflux. Which of the following is true regarding his condition?",
      "options": [
        "A. Eradication of H. pylori should be attempted before any other interventions.",
        "B. The patient should be given chemotherapy along with H. pylori eradication.",
        "C. Radiotherapy has no role in the treatment of gastric MALT lymphoma.",
        "D. Partial or total gastrectomy should be performed.",
        "E. In H. pylori-negative patients, eradication therapy with antibiotics has no role."
      ],
      "answer": "D",
      "explanation": "*   Gastric MALT lymphoma is a slow-growing non-Hodgkin lymphoma typically occurring with chronic H. pylori infection.\n*   Initially treated with surgical resection, the focus has shifted away from surgery.\n*   Systemic therapy initially mimicked other gastric lymphomas, with good response rates to systemic chemotherapy and radiotherapy alone (B, C).\n*   As the connection between H. pylori and gastric MALT lymphoma became apparent, initial therapy shifted towards H. pylori eradication.\n*   Chemotherapy and radiation are reserved for patients who do not respond, have recurrence, or metastatic disease at diagnosis (A).\n*   Zullo et al. demonstrated treatment response in H. pylori-negative patients and advocated for eradication trials in all patients regardless of H. pylori status (E).\n*   While surgical intervention is extremely limited, it remains the treatment strategy of choice for complete gastric outlet obstruction or uncontrollable bleeding."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 70-year-old male with a history of colon adenocarcinoma that was treated with a formal resection returns 2 years later with a 3-cm lesion on his liver that appears to be a metastasis. Which of the following is the most appropriate next step?",
      "options": [
        "A. Chemotherapy only",
        "B. Surgical resection only",
        "C. Surgical resection followed by chemotherapy",
        "D. Chemotherapy followed by surgical resection",
        "E. Surgical resection followed by radiation"
      ],
      "answer": "C",
      "explanation": "*   Recent literature shows a survival benefit for the resection of hepatic metastases in colorectal cancer.\n*   High-volume centers report 5-year survival rates of 25% to 58% for patients with metastatic colorectal cancer to the liver after resection.\n*   Perioperative mortality associated with hepatic resection has significantly fallen, with most high-volume centers reporting less than 2% 30-day mortality.\n*   Risk factors negatively affecting survival include: node-positive primary tumor, disease-free interval less than 12 months, multiple liver metastases, largest hepatic metastasis greater than 5 cm, and serum CEA level greater than 200 ng/mL.\n*   Patients with none of these risk factors have the greatest 5-year survival at 60%.\n*   Treatment varies for synchronous vs. metachronous lesions.\n*   Synchronous lesions can be safely treated with combined colon and liver resection if hepatic resection is limited (<3 segments), allowing quicker initiation of adjuvant chemotherapy.\n*   For synchronous rectal cancer (nonobstructing, nonbleeding) with liver metastasis, some experts advocate liver resection first, followed by chemoradiation.\n*   For metachronous disease, the timing of surgery and chemotherapy is still controversial, but tends to lean towards a surgery-first strategy (B).\n*   Nordlinger and colleagues' randomized trial comparing surgery alone vs. perioperative chemotherapy and surgery showed higher complications in the preoperative chemotherapy group and no survival difference (D).\n*   For potentially curable patients, surgery first likely confers the largest survival benefit.\n*   Patients with unresectable disease or poor prognostic indicators should be considered for systemic chemotherapy, followed by restaging and consideration for surgical therapy (A).\n*   Radiation is never in the treatment algorithm for colon cancer (E)."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A patient with metastatic colon cancer is to about to undergo chemotherapy, and the oncologist recommends the use of an anti-EGFR monoclonal antibody. Which of the following genetic profiles is most likely to show benefit from addition of this agent?",
      "options": [
        "A. K-ras wildtype gene",
        "B. BRAF mutation",
        "C. NRAS",
        "D. PIK3CA mutation",
        "E. K-ras mutant gene"
      ],
      "answer": "A",
      "explanation": "*   In 2012, the FDA approved cetuximab, an anti-EGFR monoclonal antibody, for use with FOLFIRI as first-line treatment for k-ras mutant negative (wildtype) metastatic colorectal cancer.\n*   This approval was based on the CRYSTAL trial and other supportive studies.\n*   A statistically significant overall survival and progression-free survival were observed in the cetuximab group (23.5 months vs 19.5 months).\n*   The recommended dose and schedule for cetuximab is 400 mg/m² intravenously as an initial dose, followed by 250 mg/m² weekly in combination with FOLFIRI.\n*   Other studies show negative effects and poor response rates for cetuximab in patients with mutations in BRAF, NRAS, and PIK3CA (B-D).\n*   K-ras mutations are seen in 35% to 45% of colorectal cancer patients, and this group will not benefit from cetuximab therapy.\n*   The most common K-ras mutation is on chromosome 12 and 13.\n*   These mutations have also been shown to predict treatment failure with cetuximab (E)."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following patients should be referred to a genetic counselor for BRCA testing?",
      "options": [
        "A. Family history of breast cancer in mother at the age of 55",
        "B. Adopted and unknown family history, developed breast cancer at 55",
        "C. Both parents are Sephardic Jews.",
        "D. 55-year-old female with breast cancer in bilateral breasts",
        "E. 55-year-old female with an inflammatory breast cancer"
      ],
      "answer": "D",
      "explanation": "*   In December 2013, the U.S. Preventive Services Task Force recommended evaluation for women with a family history of breast, ovarian, fallopian tube, or peritoneal cancer to assess for increased risk of a harmful BRCA mutation.\n*   Risk factors increasing the likelihood of having a harmful BRCA gene mutation include: breast cancer before 50 years old, cancer in both breasts in the same woman, both breast and ovarian cancers in the same family, multiple breast cancers, known BRCA in the family, cases of male breast cancer, and Ashkenazi Jewish descent (C).\n*   Other listed options may indicate an increased risk of developing breast cancer per the GAIL model, but do not necessitate genetic counseling (A, E).\n*   For adopted patients, genetic testing is recommended only if breast cancer developed at an age younger than 50 years (B)."
    }
  ]
}
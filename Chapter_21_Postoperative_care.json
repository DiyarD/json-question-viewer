{
    "chapter_name": "21 Postoperative care",
    "questions": [
        {
            "id": 1,
            "question_type": "msq",
            "question": "Which of the following answers regarding post-op respiratory complications are false?",
            "options": [
                "A Delivery of oxygen is the first line of management to a drowsy patient who is snoring, with oxygen saturations of 85% in the first line of management.",
                "B Hypoxia in recovery is always caused by atelectasis.",
                "C Adequate analgesia following abdominal or thoracic surgery is vital to ensure adequate ventilation and clearance of secretions.",
                "D Patients with pre-existing lung disease are more vulnerable to respiratory complications post-operatively.",
                "E Early mobilisation helps to reduce postoperative respiratory complication."
            ],
            "answer": [
                "A",
                "B"
            ],
            "explanation": "Respiratory complications are common postoperatively. Risks are higher in those with pre-existing respiratory disease and obesity, and those having abdominal or thoracic procedures. The anaesthetist will identify high-risk patients and an epidural may be sited to achieve excellent analgesia without the sedative effects of opioids. Adequate analgesia is vital to prevent atelectasis and pneumonia by enabling the patient to expand his or her lungs and clear secretions. Early mobilisation and chest physiotherapy has been shown to reduce respiratory complications postoperatively.\nHypoxia in recovery has a number of causes, and an anaesthetist must review the patient urgently. If there are signs of partial obstruction (snoring), the airway must first be opened using a jaw thrust or head-tilt chin-lift manouvre before oxygen therapy should be administered. Nasopharyngeal and oropharyngeal airways are useful to maintain the airway. Oxygen is useful only if the airway is patent."
        },
        {
            "id": 2,
            "question_type": "msq",
            "question": "Which of the following answers regarding deep vein thrombosis (DVT) are true?",
            "options": [
                "A All types of surgical procedure increase the risk of DVT equally.",
                "B DVTs are more likely in patients with malignancy.",
                "C With preventative treatment, DVTs are rare in the postoperative period.",
                "D DVTs are simple to diagnose.",
                "E Epidural and spinal anaesthesia are protective against lower limb DVTs."
            ],
            "answer": [
                "B",
                "E"
            ],
            "explanation": "DVTs are common, underdiagnosed and cause many preventable deaths each year. The risk of DVT is increased for all patients in the postoperative period. The exact risk is multifactorial and depends on patient factors (e.g., obesity, increasing age, pregnancy, malignancy, dehydration), type of surgery (trauma > abdominal > cardiothoracic) and anaesthetic factors (regional technique). The use of epidural and spinal anaesthesia reduces the risk of DVT. The sympathetic blockade causes vasodilatation, which improves blood flow and reduces pooling in the legs.\nIt is important to identify risk factors in each patient and prescribe appropriate DVT prophylaxis. Prophylaxis may be physical, using calf compression stockings, or pharmacological. No one method is foolproof and DVTs occur despite preventive measures. DVTs may present with unilateral leg swelling, tenderness and redness. However, most show only subtle signs or are completely asymptomatic. A duplex ultrasound or venography is necessary to make the diagnosis."
        },
        {
            "id": 3,
            "question_type": "msq",
            "question": "Which of the following answers regarding hypotension are false?",
            "options": [
                "A Hypotension is only important if urine output drops below 30mL/hour.",
                "B Hypotension associated with epidural use is always due to sympathetic blockade.",
                "C Mean arterial pressure is equal to cardiac output multiplied by systemic vascular resistance.",
                "D Mean arterial pressure above 60 mmHg is adequate.",
                "E Bleeding always causes a fall in blood pressure."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E"
            ],
            "explanation": "Hypotension in the postoperative period is commonplace and the causes are extensive. It causes a reduction in tissue perfusion, which may cause organ dysfunction if left untreated. Urine output (UO) can be used to assess kidney perfusion. Kidney perfusion is adequate if an hourly urine volume exceeds 0.5 mL/kg; therefore a urine output of 30 mL/hour is only acceptable if the patient weighs less than 60 kg.\nHypertensive patients are used to higher perfusion pressures, therefore, even ‘normal' mean arterial pressures (MAP) may be inadequate. Young patients are particularly good at compensating for hypovolaemia, and haemorrhage and hypotension can be a late sign. Blood pressure may only drop after significant losses (up to 30% of blood volume) have occurred.\nIt is useful to consider the following:\nMAP = cardiac output (CO) x systemic vascular resistance (SVR)\nCO = stroke volume (SV) x heart rate (HR)\nTherefore:\nMAP = (SV x HR) x SVR\nPreload — Vasodilatation\nMyocardial Contractility Vasoconstriction\nAfterload Tachycardia\nBradycardia"
        },
        {
            "id": 4,
            "question_type": "msq",
            "question": "Which of the following answers regarding postoperative bleeding are true?",
            "options": [
                "A Postoperative bleeding can be difficult to diagnose.",
                "B Postoperative bleeding is not significant unless Hb drops below 8g/dL.",
                "C Patients should be resuscitated with warmed fluids where possible.",
                "D Postoperative bleeding is only significant if losses are over 1 L.",
                "E Patients should have a valid group and save prior to major surgery."
            ],
            "answer": [
                "A",
                "C",
                "E"
            ],
            "explanation": "Postoperative bleeding can be frank or occult. Patients who are high risk for bleeding or who are undergoing major surgery should have Group and Save samples taken. If the patient needs fluid resuscitation, appropriate warmed fluids (crystalloid, colloid, or blood products) should be used where possible to try to prevent coagulopathy.\nThe question of when to transfuse is controversial. Historically, patients with ischaemic heart disease have been transfused to a haemoglobin (Hb) of 10 g/dL, and those without were transfused to a Hb of 8 g/dL. Recently, the trigger for transfusion in healthy asymptomatic individuals has been lowered to 7 g/dL. Blood products carry the risk of both morbidity and mortality, and so pros and cons should be considered for each patient.\nWhen thinking about the ‘significance' of losses, one must calculate the proportion of circulating blood that has been lost. Total blood volume = Weight (kg) x 70."
        },
        {
            "id": 5,
            "question_type": "msq",
            "question": "Which of the following answers regarding postoperative renal complications are false?",
            "options": [
                "A Renal failure increases mortality in the postoperative period.",
                "B Acute renal failure is associated with a creatinine of over 150 L.",
                "C Patients are more likely to go into retention if they have had a spinal anaesthetic.",
                "D Comorbidities such as diabetes and cardiovascular disease increase the risk of acute renal failure.",
                "E All patients should have urea and electrolytes checked postoperatively."
            ],
            "answer": [
                "B",
                "E"
            ],
            "explanation": "Evidence shows that acute renal failure adversely affects clinical outcome, increasing morbidity and mortality. High-risk patients must be identified and steps taken to try to prevent acute renal injury. Patients at particular risk are those with diabetes, pre-existing renal disease, heart failure, liver failure and those on nephrotoxic medication. These patients must have urea and electrolytes monitored postoperatively. This monitoring is not indicated for healthy patients attending for minor procedures, who are able to tolerate oral fluids soon after surgery.\nAn increase in serum creatinine of 1.5 times baseline or a 25% drop in eGFR indicate real injury and Stage I renal failure. It is vital that reversible causes be corrected and fluid balance be optimised.\nSpinal and epidural anaesthesia puts patients at higher risk of urinary retention. These patients are often managed with a short-term urinary catheter."
        },
        {
            "id": 6,
            "question_type": "msq",
            "question": "Which of the following answers regarding postoperative nausea and vomiting (N&V) are true?",
            "options": [
                "A Patients need anti-emetics routinely in the perioperative period to prevent N&V.",
                "B N&V is more frequent in thin patients.",
                "C Vomiting may cause the patient to aspirate.",
                "D Adequate pain relief with multimodal analgesia helps to prevent N&V.",
                "E The risk of N&V does not vary with the procedure performed."
            ],
            "answer": [
                "C",
                "D"
            ],
            "explanation": "With advancement in anaesthetic drugs and techniques, the rate of postoperative nausea and vomiting (PONV) has decreased. Patient factors (female sex, obesity, nonsmoker, motion sickness), anaesthetic factors (use of opioids) and surgical factors (squint correction, ear operations, Gl manipulation) all contribute to risk. If patients are considered low risk, routine prophylaxis with antiemetics is not necessary.\nAlthough the risk of PONV is increased with opioid analgesia, pain itself is a cause of nausea and vomiting. A multimodal approach to analgesia is important, as simple analgesics like paracetamol and non-steroidal anti-inflammatory drugs have opiate-sparing effects. A multimodal approach must also be adopted to treat PONV. Choose a combination of anti-emetics that work at different receptors in those at high risk or suffering from PONV."
        },
        {
            "id": 7,
            "question_type": "matching",
            "question": "Match the diagnoses with the clinical scenarios that follow:",
            "options": {
                "items": [
                    "A A fit 35-year-old man fell from a second floor balcony and sustained a severe blunt upper abdominal trauma. He had a splenectomy for ruptured spleen and partial hepatectomy for torn liver. On the third postoperative day he became oliguric, had cardiorespiratory compro- mise, type 2 respiratory failure and gross abdominal distension.",
                    "B A frail 75-year-old woman, ASA category 3, underwent an Ivor Lewis with pain control managed with an epidural. On the first postoperative evening, the nurses have been worried as the patient has been agitated and confused. They call you urgently following an epidural top up, as the patient is convulsing.",
                    "C A 60-year-old man underwent an emergency laparotomy for ischaemic bowel. On the second postoperative day, while still in ITU, his urinary output has reduced to 10 mL an hour. The catheter is not blocked.",
                    "D A 55-year-old female nurse is admitted with right upper quadrant pain. She undergoes a difficult laparoscopic cholecystectomy. At the end of the operation, a urinary catheter is inserted prior to extubation. Soon afterwards the patient's blood pressure drops to 50/30 mmHg, her heart rate is 170/minute and she becomes difficult to ventilate.",
                    "E A 65-year-old woman had a hip replacement 10 days ago. She is ready to be discharged. She went to the toilet just prior to leaving the ward for home. She collapsed in the toilet.",
                    "F A 66-year-old man underwent laparotomy, pancreatic necrosectomy, feeding jejunostomy and drainage of the lesser sac in severe acute pancreatitis with infected pancreatic necrosis. In ITU he is intubated and ventilated but remains hypoxic despite increasing inspired oxygen concentrations. Chest x-ray shows diffuse bilateral infiltrates.",
                    "G A 60-year-old man of ASA 1 anaesthetic risk underwent a total gastrectomy for cancer stomach. While in the ITU, 12 hours postoperatively, his blood pressure has fallen to 80 mm Hg systolic, he is peripherally cold and his capillary refill time is 5 seconds. You note he has been oliguric for the last 3 hours.",
                    "H A 62-year-old man underwent an anterior resection for rectal carcinoma. On the first postoperative day he has a pyrexia of 39°C and a swollen, tender right calf with shiny skin.",
                    "I A 35-year-old woman underwent an emergency appendicectomy for acute perforated appendicitis. Having had an uneventful appendicectomy and being discharged home after 2 days, she returned to hospital 1 week later feverish with a temperature of 41°C, lower abdominal pain and a tachycardia. She looks ill and toxic.",
                    "J A fit 28-year-old motorcyclist involved in a road traffic accident was admitted with a femoral fracture and a fracture-dislocation of his elbow treated by internal fixation. On the second postoperative day he is hypoxic, confused, and agitated and has developed a petechial rash."
                ],
                "choices": [
                    "1 Anaphylaxis",
                    "2 Abdominal compartment syndrome (ACS)",
                    "3 Acute respiratory distress syndrome (ARDS)",
                    "4 Deep vein thrombosis (DVT)",
                    "5 Hypovolaemic shock",
                    "6 Local anaesthetic toxicity",
                    "7 Pulmonary embolus",
                    "8 Renal failure",
                    "9 Sepsis",
                    "10 Fat embolism"
                ]
            },
            "answer": {
                "A": "2",
                "B": "6",
                "C": "8",
                "D": "1",
                "E": "7",
                "F": "3",
                "G": "5",
                "H": "4",
                "I": "9",
                "J": "10"
            },
            "explanation": "Scenario A: Abdominal compartment syndrome (No. 2)\nNormal intra-abdominal pressure is approximately 5-7 mmHg. Abdominal compartment syndrome (ACS) occurs at intra-abdominal pressures >20 mmHg associated with new organ dysfunction. Adequate perfusion pressure to abdominal organs is required to maintain normal function. Abdominal organ perfusion pressure can be calculated as the mean arterial pressure (MAP) minus the intra-abdominal pressure. Presentation is vague, but abdominal pain and distension are features combined with the following: Cardiovascular: ↓ Venous return, cardiac output ↑ Systemic and pulmonary vascular resistance Respiratory: ↑ Atelectasis, PaCO2, V/Q mismatching ↓ PaO2 Gastrointestinal: ↓ Organ perfusion ↑ Bacterial translocation Renal: ↓ Renal perfusion ↓ Urine output Diagnosis is difficult and a high degree of clinical suspicion is important. Patients considered at high risk should have intra-abdominal pressures monitored. Patients are at high risk if they fulfill two or more of the following: • Diminished abdominal wall compliance (e.g., abdominal surgery with tight wound closure) • Increased intra-luminal contents (e.g, ileus) • Increased abdominal contents (e.g., ascites) • Capillary leak/fluid resusciation (e.g., pancreatitis, trauma, burns) Management is either supportive or surgical. Supportive treatment involves measures to increase cardiac output and reduce intra-abdominal pressure to ensure organ perfusion pressure >60mm Hg. A combination of inotropes and fluid resuscitation (aiming for normovolaemia) is used to boost MAP. Surgical decompression by means of a laparotomy may be necessary if supportive treatment fails. For those at risk of ACS undergoing a laparotomy, consideration to leaving the abdomen open in the first instance should be undertaken. For patients who have developed ACS, decompression occurs as an emergency procedure.\nScenario B: Local anaesthetic toxicity (No. 6)\nLocal anaesthetic (LA) toxicity may manifest itself with predominant central nervous (CNS) system or cardiovascular (CVS) effects. Signs and symptoms are a result of sodium channel blockade and include tinnitus, dizziness, circumoral numbness, drowsiness, convulsions, apnoea, ECG changes, bradycardia, hypotension, asystole and cardiac arrest. LA toxicity may occur due to an accidental overdose or an inadvertent intra-vascular injection. Particular caution should be taken in patients of low body weight and dose adjustment must be undertaken. The following dose limits should not be exceeded: Bupivacaine 2 mg/kg Lidocaine 3 mg/kg without adrenaline 7 mg/kg with adrenaline If suspected LA toxicity occurs, take the following steps: • Stop giving LA. • Call for urgent help (including anaesthetics). • ABC pattern of resuscitation. • Treat convulsions/arrhythmias. • Reassess and monitor for circulatory arrest. • Arrange for safe transfer to ICU. Should circulatory arrest occur, cardiopulmonary resuscitation should commence according to standard protocols. Lipid emulsion therapy should be used in patients with LA toxicity who are in cardiac arrest. Guidelines for use are available on the AAGBI website, and management should be overseen by a consultant anaesthetist. Arrhythmias due to LA toxicity are often refractory to treatment and prolonged resuscitation attempts of more than one hour may be necessary. Cardiopulmonary bypass can be useful.\nScenario C: Renal failure (No. 8)\nAcute kidney injury (AKI) in the perioperative period is a common complication of major surgery. AKI is associated with significant morbidity and mortality, and patients often require prolonged hospital stays. Patients may also progress to chronic renal failure and end-stage renal failure, requiring dialysis. It is important to be proactive and identify patients at risk of AKI in the perioperative period. Risk factors can be split into patient factors and iatrogenic factors (Table 21.1). Urea and electrolytes should be carefully monitored in those at risk, and any deterioration in glomerular filtration rate should prompt careful patient assessment. Table 21.1 The risk factors for acute kidney injury (AKI) Patient risk factors Iatrogenic risk factors Acute Hypovolaemia Cardiac surgery Haemorrhage Vascular surgery Sepsis Emergency surgery Rhabdomyolysis Nephrotoxic agents, e.g.: Intra-abdominal hypertension • ACE inhibitors Chronic • NSAIDS Advancing age • IV contrast Diabetes mellitus • Aminoglycosides Chronic renal impairment Chronic liver failure Chronic heart failure Cardiac and Peripheral vascular disease The aetiology of renal failure is traditionally split into prerenal, renal and postrenal causes. In the perioperative period, prerenal and renal (most commonly acute tubular necrosis) are the most common causes of AKI. The key treatment strategies are the following: • Appropriate intravascular volume expansion with fluids to maintain renal blood flow. • Maintenance of renal perfusion pressure with an adequate cardiac output and blood pressure. • Avoidance of nephrotoxic agents. • Careful glycaemic control. • Referral to critical care/renal physicians for appropriate management of AKI and other postoperative complications.\nScenario D: Anaphylaxis (No. 1)\nHealth care workers and others exposed frequently to latex are at risk of developing a Type I hypersensitivity reaction on subsequent exposure. Anaphylaxis is likely when all three of the following criteria are met: 1. Sudden, rapidly progressing symptoms 2. Life-threatening airway or breathing or circulatory problems 3. Skin or mucosal changes Skin and mucosal changes can be absent or subtle and do not indicate anaphylaxis if present in isolation. Gastrointestinal symptoms like vomiting and diarrhoea may also occur. When managing a patient with anaphylaxis, an early call for help and an ABCDE approach is useful. If the trigger is apparent, it should be removed. In adults, 0.5 mg (0.5 mL of 1 in 1000 adrenaline) intramuscularly should be given and repeated every 5 minutes if the patient does not respond. Oxygen and fluid therapy should be given as soon as they are available. Bronchodilators can be useful in those presenting with asthma-like symptoms in isolation. After initial resuscitation, steroids and antihistamines can be given. Mast cell tryptase is specific for mast cell degranulation and is helpful to confirm the diagnosis of anaphylaxis. Timing is important. Ideally, three samples should be taken but they should not delay initial resuscitation. The first sample should be at the earliest opportunity after resuscitation has commenced. The second should be 1 to 2 hours after the start of symptoms and the last should be after 24 hours. The patient should be referred to an allergy clinic in due course to try to isolate the causative allergen.\nScenario E: Pulmonary embolus (No. 7)\nVenous thromboembolism (VTE) in postoperative period is common. Risk factors can be split into patient factors, surgical factors and anaesthetic factors (See Table 21.2). If patients are high risk, it is vital that appropriate prophylaxis is prescribed – calf compression with stockings or pneumatic devices, or anticoagulation. Pulmonary emboli (PE) are classified into the categories nonmassive, submassive and massive. Nonmassive (70%) are often clinically silent. Submassive (25%) are haemodynamically stable but have evidence of right heart strain on echocardiography. Massive (5%) (including saddle PEs) cause haemodynamic instability, hypotension and cardiac arrest. Table 21.2 The risk factors for pulmonary embolism Patient factors Surgical factors Anaesthetic factors Increased risk: Increased risk: Increased risk: Increasing age All surgery especially pelvic, Inadequate correction of Smoking, obesity malignancy, trauma hypovolaemia Pregnancy Oral contraceptive use Decreased risk: Hormone replacement therapy Spinal anaesthesia Immobility, trauma Epidural anaesthesia Malignancy Varicose veins Previous VTE Thrombophilias Genetic predisposition Decreased risk: Appropriate prophylaxis Investigations and management depend on the category of PE (See Table 21.3) Other than imaging, investigations include D-Dimer, arterial blood gas and electrocardiography (ECG). D-Dimer has little value in hospitalised patients, as a raised result is likely to be multifactorial and patients are unlikely to have a normal assay. ECG may show atrial fibrillation, tachycardia, R heart strain, R ventricular overload, R axis deviation, or S1Q3T3 pattern (< 20%).\nScenario F: Acute respiratory distress syndrome (No. 3)\nAcute lung injury (ALI) is characterised by acute severe hypoxia that is not a result of fluid overload or heart failure. ALI represents a disease spectrum, with acute respiratory distress syndrome (ARDS) being a severe form. ARDS is a clinical and radiological diagnosis and can be difficult to differentiate from other acute lung conditions. Patients are critically ill and have acute respiratory failure, with diffuse bilateral infiltrates on chest x-ray (noncardiogenic pulmonary oedema). There is a genetic predisposition to ARDS, which is triggered by the following direct and indirect causes: Direct: Indirect: Pneumonia Sepsis Aspiration Blood transfusion Pulmonary embolism Trauma Drowning Pancreatitis Pulmonary contusion Burns Diagnostic criteria include the following: • Acute onset • Bilateral infiltrates on CXR consistent with pulmonary oedema • Clinical absence of left atrial hypertension/fluid overload • Hypoxaemia with PaO2/FiO2 < 40 for ALI or < 27 for ARDS The mainstay of treatment is supportive care within a critical care environment. Conservative fluid management is necessary as excessive fluid therapy causes gas exchange to deteriorate. This is due to increased capillary permeability causing pulmonary oedema. Corticosteroids have been in and out of favour, but current evidence suggests no survival benefit. The majority of patients with ARDS will be mechanically ventilated. An intensivist should manage ventilator settings and aims are to optimise oxygenation whilst preventing ventilator-induced lung trauma. Prone positioning, nitric oxide and oscillatory ventilation are all treatment strategies used in sicker patients. If patients fail to respond, extracorporeal membrane oxygenation (ECMO) has been used for patients with life-threatening hypoxaemia.\nScenario G: Hypovolaemic shock (No. 5)\nSurgical patients are often hypovolaemic. They may have inadequate intake or excessive losses, or be bleeding postoperatively. Hypovolaemic shock can be categorised in the four following stages (See Table 21.4). An ABCDE approach is useful. If there are concerns, help should be called and the patient should be fully monitored. If critical care or theatre is needed, these departments should be alerted urgently. Wide-bore intravenous access should be placed and blood should be taken for full blood count, urea and electrolytes, coagulation screen and group and save. The cause of hypovolaemia or haemorrhage should be sought whilst fluid resuscitation is underway. Aggressive resuscitation should be undertaken if the patient is shocked, and boluses of 10 mL/kg warmed crystalloid should be started and the patient monitored for his response. If there is significant bleeding, a cross match should be arranged. Treatment goals include a urine output of >0.5 mL/kg, a mean arterial blood pressure of >65 mmHg and a central venous pressure of 8-12 mmHg. Table 21.4 The stages of shock Stage of shock Clinical findings Stage 1: 0%-15% losses Well compensated especially in young patients Normal HR, BP, RR Normal capillary refill time Normal urine output Stage 2: 15%-30% losses ↑ HR and RR Normal systolic BP, ↑ diastolic BP Cool clammy skin, ↑ capillary refill time ↓ urine output Stage 3: 30%-40% losses HR ↑ and RR ↑ BP < 100 mmHg systolic Cold sweaty skin, capillary refill time ↑ Anxious, altered mental status Stage 4: > 40% losses HR ↑ pulse feels weak BP↓ ↓ conscious level Extreme pallor Absent capillary refill No urine output.\nScenario H: Deep vein thrombosis (No. 4)\nPatients are at high risk for venous thromboembolism in the postoperative period. Surgical patients should have their risk of thromboembolism assessed on admission, and appropriate prophylaxis must be prescribed. Many patients are asymptomatic or have only very subtle symptoms and signs. Others have a warm, red, swollen, painful calf. The most serious complication of a DVT is a pulmonary embolus, which can be life threatening. About one-third of DVTs are complicated by post-thrombotic leg syndrome, characterised by leg pain, swelling and skin ulcers. The diagnosis is made using imaging. The gold standard is contrast venography, however, this is rarely performed, as it is invasive and expensive. Other options include ultrasound scans (proximal compression ultrasound, whole-leg ultrasound, or Doppler ultrasound), or CT/MRI venography. Currently, the mainstay of treatment is anticoagulation.\nScenario I: Sepsis (No. 9)\nSepsis is common in the perioperative period, and early recognition and goal directed treatment is vital to improve patient outcomes. Sepsis is systemic inflammatory response syndrome (SIRS) in response to a known or likely infection. SIRS is present if two or more of the following criteria are met: • Temperature < 36°C or > 38°C • Heart rate > 90 beats per minute • Respiratory rate > 20 breaths per minute • White cells < 4 x 10/L or > 12 x 10⁹/L Sepsis is further categorised into severe sepsis and septic shock. Severe sepsis is sepsis with sepsis-induced organ dysfunction. Septic shock is severe sepsis with tissue hypoperfusion that is unresponsive to fluid resuscitation. Organ dysfunction can progress to multi-organ dysfunction: • Lungs: Acute lung injury and adult respiratory distress syndrome • Heart: Hypotension and reduction in contractility • Kidneys: Acute kidney injury, oliguria and renal failure • Brain: Agitiation, delirium • Liver: Disorders of coagulation Early treatment and referral to critical care is vital. The surviving sepsis campaign bundle (Box 21.1) is used in the U.K. to aid treatment: Box 21.1 The following should be completed within 3 hours: 1. Measure lactate level. 2. Obtain blood cultures prior to administration of antibiotics. 3. Administer broad-spectrum antibiotics. 4. Administer 30mL/kg crystalloid for hypotension or lactate > 4mmol/L The following should be completed within 6 hours: 5. Apply vasopressors to maintain mean arterial pressure > 65mmHg. 6. In the event of persistent hypotension despite volume resuscitation (septic shock) or initial lactate > 4mmol/L: a. Measure central venous pressure (target >8 mmHg). b. Measure central venous oxygen saturations (target >70%). 7. Remeasure lactate if initial lactate was elevated. Source: Reprinted from Dellinger, RP, Levy, MM, Rhodes, A. et al. 2013. Crit Care Med., 41:580–637.\nScenario J: Fat embolism (No. 10)\nThe majority (95%) of fat embolism occurs after major trauma. It is most common after closed long bone and pelvic fractures. The incidence increases with the number of bones involved. Fat embolism can also occur with soft tissue trauma, liposuction and bone marrow harvest. Fat embolism syndrome typically occurs 24 to 72 hours after major trauma. Patients present with the following typical triad: 1. Respiratory changes: Dyspnoea, tachypnoea, hypoxia and ARDS requiring intubation and ventilation. 2. Neurological abnormalities: Confusion, agitation, focal neurological signs, seizures. 3. Petechial rash: Occurs on upper anterior aspect of body, especially neck, axilla and conjunctiva. Anaemia, thrombocytopenia, tachycardia and pyrexia may also be seen. Diagnosis is clinical and can be difficult, because the only pathognomonic sign is petechial rash, which is present in less than 50% of cases. Early fixation of long bones is an important prophylactic measure and methods to reduce intraosseus pressure during orthopaedic fixation have been shown to reduce fat emboli syndrome. Steroids are controversial and have been used with some success, but the mainstay of treatment is supportive care. Mortality is up to 15%."
        }
    ]
}
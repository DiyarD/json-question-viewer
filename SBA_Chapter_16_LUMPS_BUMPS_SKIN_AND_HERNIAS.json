{
    "chapter_name": "SECTION 16: LUMPS, BUMPS, SKIN AND HERNIAS",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "An 18-year-old school student of East African origin presents with a 2-week history of lethargy, myalgia, rigours with hot flushes and intermittent pyrexia. Neither she nor any close contacts have been travelling recently. Examination reveals enlarged anterior and posterior chain lymph nodes in the neck. A blood film reveals the presence of Downey bodies, thrombocytosis and an increase in the lymphocyte count to 50% of total leucocytes. This girl is likely to have",
            "options": [
                "A. Tuberculosis",
                "B. Toxoplasmosis",
                "C. Human immunodeficiency virus (HIV) infection",
                "D. Lymphoma",
                "E. Infectious mononucleosis"
            ],
            "answer": "E",
            "explanation": "Lymph nodes are the most common neck swellings in clinical practice, accounting for some 85% of all such presentations. Cervical lymphadenopathy itself can be local or occur as part of a generalized, systemic lymphadenopathy.\nInfectious mononucleosis (Pfeiffer's disease/glandular fever) is a viral illness resulting from EBV infection. It commonly occurs in young adults and teenagers, presenting with fever, sore throat, lethargy and myalgia. A blood film typically shows a reactive lymphocytosis of between 35% and 70% of the total leucocyte count and atypical T cells known as Downey bodies. Infectious mononucleosis is usually definitively diagnosed by a positive Monospot/Paul Bunnell test. Treatment involves simple analgesics and bed rest."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "A 16-year-old girl presents with a smooth, round and painless lump in the mid-line of the neck, of which she feels very self-conscious. On examination, it is fırm, transilluminates and is painless to touch. In addition, it moves up when the patient is asked to take a sip of water. This is likely to be a",
            "options": [
                "A. Papillary carcinoma of the thyroid",
                "B. Goitre",
                "C. Thyroglossal cyst",
                "D. Lingual thyroid",
                "E. Sebaceous cyst"
            ],
            "answer": "C",
            "explanation": "The description is that of a thyroglossal cyst. These are persistent remnants of the thyroglossal duct, which guides the passage of the thyroid gland during development. Typically, these cysts are smooth, round and 2-3 cm in diameter. They occur more commonly in females, especially teenagers and young adults. On examination the lump tends to move up with swallowing and tongue protrusion. Definitive management is by excision of the lump. Lingual thyroid occurs when residual tissue is left on the base of the tongue as the thyroid migrates along its tract during development."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "A 45-year-old female business executive presents with a swelling in the midline of the neck and features of hyperthyroidism secondary to Graves' disease. Following a course of antithyroid medication, a subtotal thyroidectomy is performed. Raised titres of which immunoglobulin would be expected in this individual?",
            "options": [
                "A. Anti-thyroglobulin antibody",
                "B. Rheumatoid factor",
                "C. Antinuclear antibody",
                "D. Antineutrophil cytoplasmic antibody",
                "E. Anti-thyroid-stimulating hormone receptor antibody"
            ],
            "answer": "E",
            "explanation": "Graves' disease is an autoimmune disorder that occurs most commonly in women (10:1) between the ages of 20 and 50 years. It is associated with signs of hyperthyroidism including the following:\n• Weight loss\n• Heat intolerance\n• Sweating\n• Diarrhoea\n• Tremor\n• Irritability\n• Increased activity\n• Emotional lability\n• Psychosis\n• Exophthalmos\n• Tremor\n• Ophthalmoplegia\n• Diffuse thyroid enlargement\nMost commonly there is an increase in antibodies against TSH receptors, resulting in a reduced level of TSH and increased free T4 and T3. It is also associated with other autoimmune disorders such as pernicious anaemia, type 1 diabetes mellitus and Addison's disease. Treatment is medical with carbimazole, propylthiouracil, propranolol and radioiodine therapy, or surgical with a partial/total thyroidectomy.\nAnti-thyroglobulin antibody, although raised in some patients with Graves' disease, is most commonly associated with Hashimoto's thyroiditis, an autoimmune inflammatory disease of the thyroid gland resulting in thyrotoxicosis. Rheumatoid factor is commonly raised in patients with rheumatoid arthritis, Sjögren's syndrome and Felty's syndrome. Raised antinuclear antibody titres occur in SLE, RA, chronic active hepatitis and systemic sclerosis. Antineutrophil cytoplasmic antibody (ANCA) is a marker of vasculitis and occurs in two forms: cANCA directed against serine protease 3 is usually elevated in patients with Wegener's disease, whereas pANCA is directed against myeloperoxidase and elevated in systemic vasculitides such as microscopic polyangiitis."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "You are asked to assess a 25-year-old patient who returned from theatre 2 hours ago following a thyroidectomy for a large, hyperplastic goitre and is now complaining of difficulty swallowing sips of water. On examination you note that she is very short of breath with a respiratory rate of 30 breaths/min, using her accessory muscles of respiration and only able to answer your questions in two or three words. In addition, there appears to be a fluctuant mass in the midline of the neck underlying the surgical clips. Immediate management of this patient would be",
            "options": [
                "A. High-flow oxygen via Hudson mask",
                "B. Removal of surgical clips at the bedside",
                "C. Intravenous access with two large-bore cannulae and fluid resuscitation",
                "D. Removal of surgical clips in theatre under general anaesthesia",
                "E. Call your senior and wait for him/her to remove the clips"
            ],
            "answer": "B",
            "explanation": "The scenario is one of haemorrhage following a thyroidectomy and formation of a tension haematoma, resulting in a compromised airway. This is a surgical emergency and requires immediate removal of the surgical clips at the bedside, followed by returning the patient to theatre to explore the area and control the haemorrhage. Although all of the other management routes are possible, it is reasonable to proceed with clip removal at the bedside as waiting for senior colleagues could result in this patient's death. Other complications of thyroidectomy are as follows:\n• Immediate – Haemorrhage, laryngeal oedema, recurrent/superior laryngeal nerve damage, tracheal damage and thyroid storm\n• Early – Reactionary haemorrhage, hypocalcaemia (secondary to parathyroid insufficiency) and infection\n• Late – Hypothyroidism, keloid scar, disease recurrence"
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "A 28-year-old secretary presents with a lump in the midline of the neck that has grown progressively larger over the past several months. On examination, there is a palpable lymph node in the left submandibular region. An aspirate is taken, confirming a malignant cancer of the thyroid gland. The origin of this is most likely to be",
            "options": [
                "A. Follicular",
                "B. Anaplastic",
                "C. Medullary",
                "D. Lymphoma",
                "E. Papillary"
            ],
            "answer": "E",
            "explanation": "Thyroid cancers can be either primary or secondary in origin. Papillary carcinoma of the thyroid accounts for approximately 70% of primary thyroid cancers. They occur commonly in women aged 20–40 years and are usually multifocal. They are locally invasive, spreading via the lymphatic system and causing enlarged cervical lymph nodes. Prognosis is usually good with 10-year survival in patients with extrathyroid disease at 55%. Follicular carcinoma makes up 15% of thyroid malignancy, occurring again more commonly in women in the 45- to 70-year age group. It is more common in areas of endemic goitre, with tumours usually being solitary and encapsulated. They metastasize by haematogenous spread to lungs and bones. Medullary carcinoma makes up less than 10% of thyroid cancers and occurs equally in men and women. These cancers arise from the parafollicular C cells, which secrete calcitonin and can occur as part of the MEN 2 syndrome. Metastasis is via the lymph nodes. Anaplastic thyroid carcinoma occurs in the elderly and is typified by a rapidly growing aggressive tumour which infiltrates locally and spreads via both lymphatic and haematogenous systems. It can present with symptoms of tracheal compression and laryngeal nerve involvement. Lymphoma is rare and usually associated with Hashimoto's thyroiditis."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "A 37-year-old patient is diagnosed with medullary carcinoma of the thyroid gland. The concentration of which electrolyte could be reduced in this patient?",
            "options": [
                "A. Sodium",
                "B. Potassium",
                "C. Chloride",
                "D. Calcium",
                "E. Magnesium"
            ],
            "answer": "D",
            "explanation": "Medullary carcinoma of the thyroid gland makes up less than 10% of all thyroid cancers and occurs equally in men and women. These cancers arise from the parafollicular C cells, which secrete calcitonin. Calcitonin acts to reduce the serum calcium and phosphate level. As a result, the calcium level could be low in this patient. Medullary carcinoma also occurs as part of the MEN 2 syndrome. Metastasis is via the lymphatic system."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "A 68-year-old man presents with a 10-week history of a rapidly growing swelling in the midline of the neck. Prior to this problem developing he has been in excellent health. Over the past 10 weeks, he has begun to feel more worn out and is unable to complete his daily 3-mile walk without getting short of breath, which he was previously able to manage comfortably. His wife also reports that his voice has become increasingly hoarse in the last 2 weeks. The presentation is likely to be consistent with",
            "options": [
                "A. Recurrent laryngeal nerve damage",
                "B. Tracheal trauma",
                "C. Medullary carcinoma of the thyroid",
                "D. Anaplastic carcinoma of the thyroid",
                "E. Papillary carcinoma of the thyroid"
            ],
            "answer": "D",
            "explanation": "Anaplastic thyroid carcinoma occurs in the elderly (50–70 years) and is typified by a rapidly growing, aggressive tumour, which infiltrates locally early on and spreads via both lymphatic and haematogenous systems. It can present with symptoms of tracheal compression and laryngeal nerve involvement, resulting in a hoarse voice and shortness of breath. Treatment is with radiotherapy and chemotherapy, but rarely curative given the rapid progression of the disease process. A tracheostomy may be needed, as a palliative procedure, should the patient's airway become compromised. Five-year survival is extremely poor at 14%."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "A 59-year-old fisherman presents with longstanding weight loss, anorexia and lethargy. Physical examination reveals a palpable swelling in the left supraclavicular fossa. A disseminated adenocarcinoma of the stomach is diagnosed following a gastroscopy and computed tomography scan of the thorax and abdomen. This patient has presented with",
            "options": [
                "A. Virchow's node",
                "B. Battle's sign",
                "C. Cloquet's node",
                "D. Troisier's sign",
                "E. Trousseau's sign"
            ],
            "answer": "D",
            "explanation": "Eponymous conditions are an exam favourite and knowledge of some of the more common eponyms is useful in both written and clinical examinations. Virchow's node (signal node) is an enlarged, hard, left supraclavicular lymph node which can contain metastasis of an intra-abdominal mass, e.g. gastric malignancy. Battle's sign is bruising over the mastoid process following a base of skull fracture involving the petrous temporal bone. Cloquet's node refers to the most superior of the deep inguinal lymph nodes, which passes through the femoral canal. There are approximately three to five deep inguinal nodes in the body. Enlarged inguinal lymph nodes can be a sign of localized lower limb infection, systemic infection or metastases from distal carcinomas, e.g. carcinoma of the anus and vulva. Troisier's sign is the term given to enlargement of the left supraclavicular lymph node (Virchow's node), usually secondary to advanced metastatic gastric carcinoma. Trousseau's sign of malignancy is phlebothrombosis of the superficial veins due to cancer induced blood hypercoagulability. Trousseau also gives his name to Trousseau's sign of latent tetany which may be elicited in individuals with a low serum calcium level."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "Which of the following structures does not form a border of the anterior triangle of the neck?",
            "options": [
                "A. Midline of the neck",
                "B. Anterior border of sternocleidomastoid muscle",
                "C. Lower border of the mandible",
                "D. Investing fascia",
                "E. Middle third of the clavicle"
            ],
            "answer": "E",
            "explanation": "Borders of the anterior triangle of the neck are as follows:\n• Medial: midline of the neck\n• Lateral: anterior border of SCM\n• Superior: lower border of mandible\n• Roof: investing fascia\n• Floor: prevertebral fascia\nBorders of the posterior triangle of the neck are as follows:\n• Anterior: posterior border of the SCM\n• Posterior: anterior border of trapezius muscle\n• Base: middle third of the clavicle\n• Floor: prevertebral fascia overlying the prevertebral muscles: (splenius capitis, levator scapulae, scalenus anterior/middle/ posterior)\nNeck anatomy, particularly that of the anterior and posterior triangles, is frequently tested in both written and practical examinations. A good working knowledge of their borders is therefore useful."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "A 45-year-old woman is diagnosed with a submandibular calculus, having presented with a tender lump below the jaw on eating. Which structure is likely to be obstructed?",
            "options": [
                "A. Warthin's duct",
                "B. Stensen's duct",
                "C. Biliary duct",
                "D. Lingual nerve",
                "E. Facial nerve"
            ],
            "answer": "A",
            "explanation": "Eighty per cent of salivary gland calculi occur within the submandibular glands. Calculi usually occur in young to middle-aged adults and present with pain and swelling under the jaw, following obstruction of Warthin's duct, which runs through the submandibular gland and opens on the floor of the mouth. Symptoms tend to occur before, during and after eating. Pressing on the gland can produce a foul tasting fluid in the mouth, but can occasionally relieve symptoms.\nThe calculi are often composed of calcium pyrophosphate or calcium carbonate, which is thought to be secondary to fragments of toothpaste acting as a focus for stone formation. Partial obstruction of the duct will result in swelling and pain lasting from several minutes to hours, whereas complete obstruction will cause persistent swelling and infection. Treatment for stones within the intraoral part of the duct involves removal under general anaesthesia, whereas stones within the substance of the gland can require removal of the entire gland.\nStensen's duct passes through the parotid gland. The lingual nerve also passes through the submandibular gland. The trunk of the facial nerve lies between the deep and superficial parts of the parotid glands."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "A 40-year-old man presents with a month-long history of intermittent, left-sided pain and swelling in the anterior neck under the left jaw. His symptoms are associated with meal times and regress shortly after completing each meal. In recent days however, the pain appears to have become more intense and the swelling more firm. On examination a firm lump is palpable in the left submandibular region, bimanual palpation of which causes the patient to complain of a foul taste in his mouth. The most appropriate diagnostic investigation will be",
            "options": [
                "A. Plain radiographs of the mouth",
                "B. Blood calcium level",
                "C. Biopsy of submandibular tissue",
                "D. Sialogram",
                "E. None of the above"
            ],
            "answer": "D",
            "explanation": "Sialogram consists of taking a baseline radiograph of the affected salivary gland followed by injection of a radio-opaque contrast into Warthin's duct. Multiple radiographs are then taken to show any underlying obstructions within the duct. The flushing effect of the contrast is also considered to be therapeutic and may help to remove stones from within the duct. Plain radiographs of the mouth include the following:\n• Tangential view of the cheek (to visualize the parotid gland)\n• Mandibular occlusal radiograph (to visualize the submandibular gland)\n• Lateral oblique radiograph of the mandible (to visualize the submandibular gland)\nSee also the explanation in the answer to Question 13."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "A 54-year-old builder attends your outpatient clinic with his wife, reporting an 8-month history of a lump on the left side of his face, in front of his ear. It is painless and does not trouble him. He has attended on the insistence of his wife, who is worried that it may be growing larger. On examination, the swelling appears to lie anterior to the angle of the jaw on the left side. It is non-tender and approximately 5 cm in diameter with a clear edge. The skin is easily moved on top of it and the lump itself feels rubbery to touch. There is no cervical lymphadenopathy or facial droop evident on examination. An aspirate is taken which shows cells of many different types. A decision is made at a follow-up appointment to excise the lump under anaesthesia. This is likely to be",
            "options": [
                "A. Pleomorphic adenoma",
                "B. Adenolymphoma (Warthin's tumour)",
                "C. Mikulicz's syndrome",
                "D. Sjörgen's syndrome",
                "E. Carcinoma of the parotid gland"
            ],
            "answer": "A",
            "explanation": "Pleomorphic adenoma is the most common salivary neoplasm and consists of several different types of tissue. Ninety per cent of these tumours occur in the parotid gland and grow slowly over many years. They can invade locally and can recur. Treatment is by superficial parotidectomy. Adenolymphoma (Warthin's tumour) is a benign cystic tumour that contains epithelial lymphoid elements. It occurs in middle to old age, causing a soft cystic lump in the parotid gland, in a similar location to a pleomorphic adenoma. The epithelial element is thought to arise from embryonic parotid ducts that have become separated from the main duct system of the gland, whereas the lymphoid element arises from normal lymph tissue close to the developing gland. Mikulicz's and Sjögren's syndrome are autoimmune diseases that result in slow, progressive and usually painless enlargement of the salivary glands as a result of lymphoid tissue replacing the glandular tissue. The syndromes consist of enlargement of parotid/submandibular glands, enlargement of lacrimal glands causing a bulge at the outer end of the upper eyelids and narrowing of the palpebral fissures, dry mouth, dry eyes and generalized arthritis (the last two symptoms are more common in Sjögren's syndrome). Carcinoma of the parotid gland can arise anew or in a longstanding pleomorphic adenoma. Men and women are equally affected and there is a rapid enlargement of the swelling, which is painful with pain radiating to the side of the face and ear. There may be mouth asymmetry and difficulty closing the mouth, as well as involvement of the facial nerve (which passes through the parotid gland), suggesting cancer invasion into the gland."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "A 6-year-old boy presents with his mother to the general practice at which you are based, with a 3-week history of bilateral cheek swelling. The family is newly registered and medical records have not yet been transferred to the practice. His mother informs you that the young boy has not received any of his childhood vaccinations, as she has been worried about their possible detrimental effects. The clinical suspicion is of mumps parotitis. Which class of infectious agent is responsible for mumps?",
            "options": [
                "A. RNA viruses",
                "B. DNA viruses",
                "C. Gram-negative bacteria",
                "D. Gram-positive bacteria",
                "E. Fungi"
            ],
            "answer": "A",
            "explanation": "The mumps virus is an RNA paramyxovirus spread by droplet infection. It has an incubation period of 2–3 weeks. Affected individuals are infective for 7 days before and after onset of parotid swelling. Parotid swelling is bilateral in 70% of cases. In addition to a viral prodrome, complications of mumps can include orchitis (enquiry about testicular pain is necessary), arthritis, meningitis, pancreatitis and myocarditis. Treatment is symptomatic. An immunization programme exists in the United Kingdom, in which the MMR vaccine (combining measles, mumps and rubella – all RNA viruses) is given as a single injection at 13 months and a booster at 3-5 years of age. The use of the MMR vaccine became controversial in the late 1990s due to a speculative link with autism (although this was later discredited in the medical press). This resulted in a reduced uptake of the MMR vaccine and a subsequent increase in the number of cases of mumps and associated complications."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "A 39-year-old man of Italian origin presents complaining of an exquisitely tender area over his right buttock, which has been present for several weeks. Within the past few days, the area has begun to weep profusely and his temperature at home prior to admission was 38°C. He reports having had this problem previously and was operated on during a previous admission. On examination you note that the man is extremely hairy and that there is an irregular, erythematous, warm and exquisitely tender shallow lump overlying the top of the right buttock. A small scar is seen over the lump and, on palpation, it is fluctuant and discharges purulent fluid. A pilonidal abscess is suspected. Definitive management would consist of",
            "options": [
                "A. Advising to shave the affected area",
                "B. Intravenous antibiotics",
                "C. Drainage of the abscess under local anaesthesia",
                "D. Drainage of the abscess under general anaesthesia",
                "E. Oral antibiotics"
            ],
            "answer": "D",
            "explanation": "Pilonidal abscesses occur as a result of infection of one or more pilonidal sinuses. These are short tracts leading from an opening in the skin near the top of the buttocks or natal cleft into the body. The tract is lined with granulation tissue and can get filled with hair debris and bacteria to act as a site of infection and result in abscess formation and/or recurrent sepsis. Pilonidal sinuses are more common in males (4:1), particularly among those who are more hairy and of Middle Eastern/Mediterranean origin (although the condition is not exclusive to these populations). Pilonidal sinuses present with persistent discharge of purulent or clear fluid, and recurrent infection. They can be exquisitely tender. A number of surgical techniques exist, but definitive treatment generally involves drainage of the abscess cavity and wide excision of the natal cleft. The recurrence rate after surgery can be as high as 15%. Encouraging good hygiene and advising individuals at risk to shave the affected area and back in particular reduces this risk. Antibiotics may stop an early infection but, in this scenario, drainage under general anaesthesia would be the most appropriate treatment."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "A 56-year-old priest presents with a lump at the back of his hand that has been getting larger over the past year. Although it does not trouble him, his parishioners are increasingly commenting on it after his Sunday service. On examination, there is a soft, non-tender, irregular lump on the dorsum of the hand 3 cm × 5 cm in size. It is fluctuant on movement and transilluminates, but does not reduce when pressed down. The skin moves freely over it and no other such lumps are to be found on either arm. An aspirate produces a dark gelatinous material. This is most likely a",
            "options": [
                "A. Sebaceous cyst",
                "B. Ganglion",
                "C. Bursa",
                "D. Rheumatoid nodule",
                "E. Cystic hygroma"
            ],
            "answer": "B",
            "explanation": "A ganglion is a cystic, myxomatous degeneration of fibrous tissue that most commonly occurs around joints, where there is a large amount of fibrous tissue. They present mostly between the ages of 20 and 60 years, growing slowly over many months. They are non-tender, spherical and smooth on the surface. They may slip between deeper structures when pressed, suggesting that the contents have reduced into a joint. The overlying skin is also freely mobile, while aspiration reveals a thick, gel-like material. Traditional therapy consists of striking the swelling with a heavy book such as a bible. However, this tends to be only a temporary measure (and also painful!), resulting in recurrence in many cases. It can also be aspirated and injected with hydrocortisone (again resulting in recurrence), but surgical excision is the definitive management. A bursa is a fluid-filled cavity occurring between tendons, bones and skin to allow easier movement between them. Rheumatoid nodules commonly occur in relation to rheumatoid arthritis, a symmetrical inflammatory disease of the joints. The presenting history is not suggestive of this condition."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "Which one of the following muscles lies closest to the peritoneal cavity?",
            "options": [
                "A. Rectus abdominis",
                "B. External oblique",
                "C. Internal oblique",
                "D. Transversus abdominis",
                "E. Cremaster"
            ],
            "answer": "D",
            "explanation": "The abdomen is demarcated on the surface of the body by the xiphoid process, lower six costal cartilages and anterior ends of the lower six ribs. Inferior markings are the pubic symphysis, pubic crest, tubercle, ASIS and the iliac crest. Muscles of the anterior abdominal wall from most superficial to deep are:\n• External oblique\n• Internal oblique\n• Rectus abdominis – A straight muscle lying between the linea alba and linea semilunaris, coated in its own protective sheath, formed at various levels by the external/internal oblique aponeuroses, transversus abdominis aponeurosis and transversalis fascia\n• Ttransversus abdominis\nCremaster muscle arises in the middle of the inguinal ligament from the internal oblique muscle and inserts into the pubic crest and pubic tubercle. It is involved in testicular retraction."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "A 55-year-old man with known atrial fibrillation presents to his general practitioner with a 3-month history of gynaecomastia. Which of his following medications is not associated with gynaecomastia?",
            "options": [
                "A. Digoxin",
                "B. Cimetidine",
                "C. Spironolactone",
                "D. Furosemide",
                "E. Metronidazole"
            ],
            "answer": "D",
            "explanation": "Gynaecomastia is the development of breast tissue in men. Oestradiol is the growth hormone of the breast, and an increase in serum concentration results in increased breast tissue. In men, oestradiol is a derivative of the peripheral conversion of testosterone and adrenal oestrone. Gynaecomastia can be regarded as the result of reduced androgen and increased oestrogen production. There are many causes, which are classified as follows:\n• Physiological:\n• Neonatal – Secondary to ingestion of maternal oestrogens.\n• Pubertal – Up to 50% of pubertal boys may develop asymmetrical gynaecomastia, secondary to a relative oestrogen excess during this period, which resolves spontaneously in the majority of individuals. Some patients may need surgical removal of the tissue.\n• Old age.\n• Hyperthyroidism can cause an increase in oestrogen levels.\n• Liver disease results in a reduced breakdown of oestrogen-derived compounds and as a result can cause gynaecomastia in patients with advanced disease.\n• Oestrogen-producing tumours, e.g. testicular and adrenal carcinomas (these can cause increased levels of androstenedione, which is converted by aromatase into oestrone, a type of oestrogen).\n• hCG-producing tumours, e.g. testicular (Leydig cell tumour) and bronchial carcinoma.\n• Starvation/refeeding.\n• Carcinoma of the male breast.\n• Drugs account for 10%–20% of clinically significant gynaecomastia in men and include:\n• Oestrogenic drugs which increase the level of serum oestrogen, e.g. oestrogens, digoxin (digitalis), cannabis, diamorphine, omeprazole, androstenedione and imatinib mesylate.\n• Anti-androgens which reduce serum testosterone, e.g. spironolactone, cimetidine, cyproterone, ketoconazole, metronidazole and finasteride.\n• Others: Gonadotrophins (GnRH analogues used for treating prostate cancer), cytotoxic agents, methyldopa, isoniazid.\nFurosemide is a loop diuretic used for the treatment the following:\n• Oedema associated with heart failure\n• Nephrotic syndrome\n• Liver cirrhosis\n• Hypertension"
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "Regarding hernias in females, the most common is",
            "options": [
                "A. Epigastric",
                "B. Umbilical",
                "C. Femoral",
                "D. Inguinal",
                "E. Incisional"
            ],
            "answer": "D",
            "explanation": "A hernia is a protrusion of a viscus through a defect in the wall of the cavity containing it into an abnormal position. Hernias occur more commonly in men than in women (9:1). Overall, abdominal wall hernias account for 80%–90% of hernias. Inguinal hernias remain the commonest type of hernia in both men and women, although femoral hernias occur 4 times more commonly in women than in men. The approximate incidence of various hernias is as follows:\n• Inguinal: 78% – of which direct inguinal hernias account for approximately 25% and indirect inguinal hernias 75%\n• Incisional: 10%\n• Femoral: 7%\n• Umbilical: 3%\n• Eepigastric: 1%"
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "Which of the following structures form a part of both the inguinal and femoral canals?",
            "options": [
                "A. Transversalis fascia",
                "B. Internal oblique muscle",
                "C. Transversus abdominis muscle",
                "D. Inguinal ligament",
                "E. Pectineal ligament"
            ],
            "answer": "D",
            "explanation": "Boundaries of the femoral canal:\n• Anterior: Inguinal ligament\n• Medial: Lacunar part of inguinal ligament (lacunar/Gimbernat's ligament)\n• Lateral: Femoral vein\n• Inferior: Pectineal ligament (of Astley Cooper) – this is involved in hip flexion and thigh adduction\nBoundaries of the inguinal canal:\n• Anterior: External oblique aponeurosis, reinforced by the internal oblique aponeurosis in the lateral third of its structure\n• Posterior: The transversalis fascia forms the lateral portion and the medial portion is formed by the merging of the pubic attachments of the internal oblique and transversus abdominis aponeurosis (the conjoint tendon)\n• Roof: Arching fibres of the internal oblique and transversus abdominis muscles\n• Floor: Inguinal ligament and lacunar ligament (deep reflection of inguinal ligament) on its medial aspect"
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "A 35-year-old professional weightlifter presents with a red and swollen lump in the left groin. An inguinal hernia is suspected and, at the time of operation, the lump is found to contain a small loop of necrotic bowel. This type of hernia is best described as",
            "options": [
                "A. Irreducible",
                "B. Strangulated",
                "C. Obstructed",
                "D. Sliding",
                "E. Richter's"
            ],
            "answer": "B",
            "explanation": "Although this lump can be described as irreducible, i.e. the hernia sac cannot be returned to its containing cavity, the description is really one of a strangulated hernia. This is when the blood supply to the bowel is permanently compromised and the affected segment becomes necrotic. Obstructed hernia means that the sac contains bowel through which faeces cannot pass. However, the blood supply is usually intact and the bowel is therefore salvageable at the time of repair. Sliding hernia occurs when part of the hernia sac is formed by an intra-abdominal structure, e.g. sigmoid/descending colon on the left side or caecum/ascending colon on the right side. In a Richter's hernia, only a part of the bowel herniates, of which the blood supply can also become compromised causing necrosis."
        }
    ]
}
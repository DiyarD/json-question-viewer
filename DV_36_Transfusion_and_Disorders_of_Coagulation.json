{
  "chapter_name": "Transfusion and Disorders of Coagulation",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true in regard to von Willebrand disease (vWD)?",
      "options": [
        "A. It is the second most common congenital defect in hemostasis.",
        "B. Type 1 vWD is transmitted in an autosomal recessive fashion.",
        "C. DDAVP (desmopressin) is helpful in type 3 VWD.",
        "D. Increased partial thromboplastin time (PTT) rules out vWD.",
        "E. DDAVP is ineffective for type 2B vWD."
      ],
      "answer": "E",
      "explanation": "*   Von Willebrand disease (vWD) is the most frequent congenital defect in hemostasis.\n*   Patients with vWD may have a normal or increased partial thromboplastin time (PTT) because von Willebrand factor (vWF) is a stabilizing factor for factor VIII.\n*   Type 1 vWD is an autosomal dominant disease characterized by a low level of vWF and is treated with DDAVP.\n*   Type 2 vWD is also inherited in an autosomal dominant fashion and has a qualitative defect in vWF.\n*   DDAVP is contraindicated in type 2B vWD because it can induce thrombocytopenia and form platelet complexes, leading to a prothrombotic state.\n*   Type 3 vWD is the most severe form with no vWF produced and is transmitted in an autosomal recessive fashion; recommended treatment is recombinant vWF and factor VIII."
    },
    {
      "id": 2,
      "question_type": "clinical_scenario",
      "question": "A 40-year-old obese female presents with a swollen left lower extremity, and ultrasound confirms a deep venous thrombosis (DVT). The patient is started on therapeutic heparin but despite progressively increasing the dose, the pharmacy is having difficulty achieving a therapeutic partial thromboplastin time (PTT) after 24 hours. Which of the following is the best option?",
      "options": [
        "A. Convert from unfractionated heparin to low-molecular-weight heparin.",
        "B. Administer fresh frozen plasma.",
        "C. Start a direct thrombin inhibitor.",
        "D. Place an inferior vena cava filter.",
        "E. Continue to increase heparin dose as needed."
      ],
      "answer": "B",
      "explanation": "*   Heparin resistance is defined as needing more than 35,000 units in 24 hours to prolong the PTT into the therapeutic range, or an activated clotting time (ACT) less than 400 seconds despite excessive heparin demand.\n*   It is most commonly the result of antithrombin-III (ATIII) deficiency.\n*   Heparin binds to ATIII, causing a conformational change that activates ATIII, which then inactivates thrombin and other proteases, most notably factor Xa.\n*   ATIII deficiency can be congenital or acquired, with causes including pregnancy, liver disease, disseminated intravascular coagulation (DIC), nephrotic syndrome, major surgery, acute thrombosis, and heparin treatment.\n*   Treatment of heparin resistance consists of administering fresh frozen plasma (FFP) or ATIII concentrates to replete ATIII, followed by heparin readministration.\n*   A direct thrombin inhibitor (argatroban) is a potential alternative but has no reversal agent for overdosage and bleeding.\n*   Low-molecular-weight heparin (LMWH) has no effect on ATIII deficiency.\n*   An inferior vena cava (IVC) filter is indicated if the patient bleeds while on heparin, not for heparin resistance.\n*   Most patients achieve therapeutic PTT within 6 to 18 hours of starting heparin, so simply increasing the heparin dose is not appropriate."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding prothrombin complex concentrate (PCC)?",
      "options": [
        "A. Three-factor and 4-factor PCC refer to varying concentrations of factor II.",
        "B. It is thawed more rapidly than fresh frozen plasma (FFP).",
        "C. PCC reverses warfarin to an international normalized ratio (INR) less than 1.5 within 30 minutes.",
        "D. PCC lowers INR as profoundly as recombinant factor VIIa.",
        "E. It reverses the anticoagulant effect of dabigatran."
      ],
      "answer": "C",
      "explanation": "*   PCC is an inactivated concentrate of proteins C and S, and factors II, IX, and X, with variable amounts of factor VII.\n*   4-factor PCC has normal amounts of factor VII, while 3-factor PCC has low levels of factor VII.\n*   PCC has several advantages over FFP: it does not need to be thawed (it is lyophilized), it has a more rapid correction of INR, and it can be infused faster and with less volume.\n*   Recombinant factor VIIa (rFVIIa) will lower INR faster than PCC, but concerns include potential for inducing thrombosis and high cost.\n*   PCC does not reverse the anticoagulant effect of dabigatran; idarucizumab is used for this purpose."
    },
    {
      "id": 4,
      "question_type": "clinical_scenario",
      "question": "A 31-year-old woman who is in her third trimester of pregnancy presents with fever, headaches, and myalgia. She is a former intravenous drug user. She denies pruritus, but her skin appears jaundiced. Blood pressure is normal. Her laboratory exam is remarkable for elevated aspartate aminotransferase (AST) and alanine transaminase (ALT), hyperbilirubinemia as well as thrombocytopenia, anemia, and severe hypoglycemia. Which of the following conditions is she most likely suffering from?",
      "options": [
        "A. HELLP (hemolysis, elevated liver enzymes, low platelet count) syndrome",
        "B. Acute fatty liver of pregnancy (AFLP)",
        "C. Intrahepatic cholestasis of pregnancy (ICP)",
        "D. Preeclampsia",
        "E. Hepatitis E"
      ],
      "answer": "B",
      "explanation": "*   Acute fatty liver of pregnancy (AFLP) is an uncommon but potentially fatal complication occurring in the third trimester or early postpartum period.\n*   It typically presents with a viral prodrome including fever, lethargy, malaise, nausea, and vomiting.\n*   AFLP is thought to result from mitochondrial dysfunction leading to microvesicular fatty infiltration of hepatocytes without significant inflammation or necrosis.\n*   Prompt diagnosis and treatment (delivery and intensive supportive care) are crucial for improving maternal and perinatal mortality rates.\n*   Laboratory abnormalities in AFLP include elevated AST and ALT (usually less than 1000 IU/L), prolonged PT and PTT, decreased fibrinogen, renal failure, profound hypoglycemia, and hyperbilirubinemia.\n*   Hypoglycemia is a key finding distinguishing AFLP from HELLP syndrome, which typically involves preeclampsia, hemolysis, and thrombocytopenia.\n*   Preeclampsia presents with hypertension, proteinuria, and rapid weight gain and can progress to seizures (eclampsia).\n*   Intrahepatic cholestasis of pregnancy (ICP) presents with intense pruritus, usually on hands and soles, unrelieved by antihistamines.\n*   Hepatitis E, caused by a single-stranded RNA virus, can lead to severe fulminant hepatic failure in pregnant patients, especially in developing countries."
    },
    {
      "id": 5,
      "question_type": "clinical_scenario",
      "question": "A 90-year-old male presents to the emergency department (ED) after a fall from standing. He takes warfarin for atrial fibrillation and a daily 81 mg aspirin. Computed tomography (CT) of the head demonstrates a subdural hematoma. Which of the following is true in regard to the anticoagulation and antiplatelet therapy in this patient?",
      "options": [
        "A. INR should be slowly reversed with cryoprecipitate.",
        "B. The warfarin should be allowed to wear off.",
        "C. If repeat imaging shows no expansion of the hematoma 24 hours later, prophylactic anticoagulation can be started immediately.",
        "D. Empiric platelet transfusion leads to a lower mortality.",
        "E. Recombinant factor VIIa (rFVIIa) should be given."
      ],
      "answer": "C",
      "explanation": "*   For acute intracranial hemorrhage (ICH) in patients on oral anticoagulants, current recommendations suggest reversing warfarin with prothrombin complex concentrate (PCC) as the quickest way to normalize INR.\n*   PCC's effect is not permanent, so it should be given with vitamin K (which takes about 12 hours to work).\n*   Recombinant factor VIIa (rFVIIa), originally for hemophilia, has been used for acute ICH, but while it rapidly normalizes INR, it does not replenish all vitamin K factors and carries an increased risk of serious venous thromboembolic events.\n*   Empiric platelet transfusion for antiplatelet medication has conflicting study results and no clear benefit in terms of mortality.\n*   Patients with acute ICH have a high risk of thromboembolic events.\n*   Guidelines for venous thromboembolism prophylaxis in ICH patients recommend chemical prophylaxis within 72 hours of initial injury based on a modified bleeding risk assessment.\n*   For stable CT scans, anticoagulation is recommended at 24 hours from admission for low-risk groups and 72 hours for medium-risk groups."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is correct with regard to unfractionated heparin (UFH) versus low-molecular-weight heparin (LMWH) in postoperative patients?",
      "options": [
        "A. LMWH is preferred in patients with renal disease.",
        "B. LMWH has a higher risk of heparin-induced thrombocytopenia.",
        "C. UFH is preferred in cancer patients.",
        "D. LMWH levels can be monitored by anti-Xa assay.",
        "E. For morbidly obese patients, LMWH dosing does not need adjusting."
      ],
      "answer": "D",
      "explanation": "*   Both UFH and LMWH have established roles in preventing and treating venous thromboembolism (VTE) in postoperative patients.\n*   Studies have shown no statistically significant difference in mortality when comparing LMWH and UFH, though some suggest a decreased incidence of bleeding complications with LMWH.\n*   Because LMWH undergoes renal excretion, UFH is recommended for VTE prophylaxis in patients with renal disease.\n*   UFH acts by binding to antithrombin III, causing a conformational change and increasing its activity, targeting the intrinsic pathway, and is monitored by PTT.\n*   LMWH specifically targets factor Xa and is monitored with a factor-Xa assay.\n*   Obese patients have a larger volume of distribution for lipophilic drugs like LMWH and require dose adjustment to reach adequate levels for thromboprophylaxis."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following electrolyte abnormalities are the most likely to occur with massive blood transfusion?",
      "options": [
        "A. Hypocalcemia, hypokalemia, and metabolic acidosis",
        "B. Hypercalcemia, hyperkalemia, and metabolic alkalosis",
        "C. Hypocalcemia, hyperkalemia, and metabolic alkalosis",
        "D. Hyponatremia, hyperkalemia, and metabolic alkalosis",
        "E. Hyponatremia, hyperkalemia, and metabolic acidosis"
      ],
      "answer": "C",
      "explanation": "*   Severe hypocalcemia with massive blood transfusion is uncommon unless the patient receives more than 1 unit of packed red blood cells (PRBC) every 5 minutes.\n*   Hypocalcemia results from citrate toxicity, as citrate in transfused blood binds to circulating calcium.\n*   Citrate is metabolized in the liver to bicarbonate, leading to metabolic alkalosis.\n*   Potassium concentration in stored PRBCs is higher than human plasma due to red blood cell lysis during storage, releasing potassium into the supernatant.\n*   The concentration of potassium in PRBCs increases linearly with the number of days of PRBC storage."
    },
    {
      "id": 8,
      "question_type": "clinical_scenario",
      "question": "A 75-year-old male with a history of atrial fibrillation presents to the ED with an acute onset of left lower extremity pain. Heparin is started. He is found to have a popliteal artery thrombosis. The clot is successfully cleared with thrombolytic therapy. He remains on a heparin drip with plans to convert to warfarin. However, on hospital day 5 his platelet count drops to 160,000 u/L (from an admission level of 370,000 u/L). Which of the following is true with regard to the drop in platelet count and the concern for heparin-induced thrombocytopenia (HIT)?",
      "options": [
        "A. Because the platelet count is above 100,000 u/L, heparin can be continued.",
        "B. The risk of recurrent thrombosis at this point is low.",
        "C. Because the platelet count dropped on day 5, the concern for HIT is low.",
        "D. HIT is less common in men.",
        "E. Warfarin should be started."
      ],
      "answer": "D",
      "explanation": "*   Heparin-induced thrombocytopenia (HIT) occurs in approximately 1% to 1.2% of patients receiving heparin.\n*   A scoring system assesses HIT risk, considering a platelet count drop greater than 50%, occurrence between days 5 to 10, nadir of platelet count greater than 20,000, no other reason for platelet count drop, and new skin necrosis or VTE.\n*   The percentage drop in platelet count is more important than the absolute nadir.\n*   HIT is caused by antibodies that attack the heparin-platelet factor 4 (PF4) complex, activating platelets and leading to prothrombotic platelet-derived microparticles, platelet consumption, and thrombocytopenia, often resulting in thrombosis.\n*   HIT can develop with any type, dose, or route of heparin administration.\n*   It occurs less commonly in men and more frequently in the elderly.\n*   If HIT is suspected, heparin should be discontinued, and a direct thrombin inhibitor started.\n*   If anticoagulation is not initiated, the chance of another thromboembolic event is approximately 5% to 10% per day."
    },
    {
      "id": 9,
      "question_type": "clinical_scenario",
      "question": "A 1-month-old infant with mild skeletal abnormalities arrives at the ED in respiratory distress. He has a cardiac arrest and passes away shortly after. On autopsy he is found to have extensive thrombosis in his coronary arteries. Which of the following is the most likely underlying condition?",
      "options": [
        "A. Factor V Leiden mutation",
        "B. Prothrombin gene mutation",
        "C. Antithrombin III deficiency",
        "D. Homocystinuria",
        "E. Protein deficiency"
      ],
      "answer": "D",
      "explanation": "*   Homocystinuria is the most common inherited condition predisposing patients to arterial thrombosis, affecting 5% to 10% of the population.\n*   It is an autosomal recessive disease, most commonly caused by a deficiency of cystathionine beta-synthase, resulting in elevated homocysteine levels in plasma and urine.\n*   Elevated homocysteine can lead to mental retardation, seizures, and skeletal abnormalities due to interference with collagen cross-linking.\n*   Patients are at increased risk of thrombosis due to the disruption of vascular endothelium by homocysteine, leading to platelet activation and aggregation.\n*   Early identification allows for administration of pyridoxine (vitamin B6) to induce cystathionine beta-synthase activity.\n*   Factor V Leiden mutation is the most common inherited condition increasing the risk of venous thromboembolism, followed by prothrombin gene mutation.\n*   Antithrombin III deficiency can cause a lack of response to unfractionated heparin.\n*   Protein C deficiency is a rare cause of venous thromboembolism."
    },
    {
      "id": 10,
      "question_type": "clinical_scenario",
      "question": "A 12-year-old female is brought to the ED in extremis after massive blood loss. Her mother refuses to allow the transfusion of blood products because they are Jehovah's Witnesses. Which of the following is the most appropriate next step in management?",
      "options": [
        "A. Proceed with packed red blood cell transfusion.",
        "B. Obey the mother and carefully document her wishes.",
        "C. Ask the mother to sign a blood-refusal consent and continue with fluid resuscitation.",
        "D. Administer hetastarch as a substitute for blood replacement.",
        "E. Administer albumin as a substitute for blood replacement."
      ],
      "answer": "A",
      "explanation": "*   Adult Jehovah's Witnesses have the right to refuse lifesaving intervention, including blood products.\n*   The Federal Child Abuse Prevention and Treatment Act (CAPTA) protects minors under the age of 18 from being refused blood products by their parents based on religious beliefs.\n*   Child abuse or neglect is defined as any act resulting in imminent risk of serious harm, death, serious physical or emotional harm, sexual abuse, or exploitation.\n*   This child should be transfused with packed red blood cells immediately.\n*   Hetastarch should be avoided as it has been shown to be associated with worsened mortality in critically ill patients.\n*   Albumin, while derived from human blood products, is an inferior substitute for blood in an extremis situation."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "The most common cause of transfusion-related death is:",
      "options": [
        "A. Infection",
        "B. ABO incompatibility",
        "C. Acute lung injury",
        "D. Delayed transfusion reaction",
        "E. Graft-versus-host reaction"
      ],
      "answer": "C",
      "explanation": "*   The leading causes of allogeneic blood transfusion (ABT)-related mortality in the United States, in order of reported number of deaths, are: transfusion-related acute lung injury (TRALI), ABO and non-ABO hemolytic transfusion reactions, and transfusion-associated sepsis.\n*   Graft-versus-host reaction is not a common cause of ABT.\n*   Non-leukocyte-reduced blood transfusions have been associated with increased mortality compared to leukocyte-reduced blood transfusions."
    },
    {
      "id": 12,
      "question_type": "clinical_scenario",
      "question": "A 35-year-old female develops postpartum hemorrhage and requires a transfusion of packed red blood cells and platelets. Twelve hours after transfusion, the patient abruptly develops rigors and chills. Her temperature increases to 39°C, her blood pressure drops from 110/70 to 70/40 mm Hg, and her heart rate increases from 80 to 120 bpm. Urine output drops, although the urine is clear. Despite attempts at resuscitation, the patient expires within 24 hours. The death is most likely due to:",
      "options": [
        "A. Gram-positive sepsis",
        "B. ABO incompatibility",
        "C. Acute lung injury",
        "D. Anaphylaxis",
        "E. Gram-negative sepsis"
      ],
      "answer": "E",
      "explanation": "*   Bacterial contamination of blood is the most frequent cause of death from transfusion-transmitted infectious disease and the third most common cause of death overall (after acute lung injury and ABO incompatibility).\n*   Bacterial contamination now accounts for 1 in every 38,500 cases of blood transfusion, coinciding with a decrease in viral infections.\n*   The highest risk of bacterial infection is from pooled platelet transfusions, as many microorganisms can live and propagate under platelet storage conditions (20-24°C).\n*   Gram-negative sepsis is the most lethal, with Yersinia being one of the most common organisms.\n*   Gram-negative sepsis can become clinically apparent within 9-24 hours after blood transfusion.\n*   ABO incompatibility (hemolytic reaction) is characterized by the development of red urine (hemoglobinuria), back pain, and a sense of doom.\n*   Acute lung injury manifests with rapid onset of dyspnea and tachypnea around 6 hours after transfusion.\n*   Anaphylactic reaction occurs rarely.\n*   Cytomegalovirus is the most common infectious agent transmitted but is generally not a threat to most patients, except for transplant recipients."
    },
    {
      "id": 13,
      "question_type": "clinical_scenario",
      "question": "Persistent life-threatening bleeding in a patient with Hemophilia A with high titers of inhibitors (factor VIII alloantibodies) is best treated with:",
      "options": [
        "A. A higher dose of factor VIII",
        "B. Fresh frozen plasma",
        "C. Cryoprecipitate",
        "D. Recombinant factor VIIa",
        "E. DDAVP (desmopressin)"
      ],
      "answer": "D",
      "explanation": "*   Hemophilia A is a sex-linked recessive genetic condition and the most common coagulation disorder, accounting for 80% of all inherited coagulation disorders.\n*   10% to 15% of patients with factor VIII-deficient hemophilia A develop inhibitors (alloantibodies) against factor VIII, usually from previous factor VIII transfusions.\n*   In situations of life-threatening hemorrhage, recombinant factor VIIa is the best option.\n*   Factor VIIa complexes with tissue factor at the site of injury, resulting in activation of factor X and clot formation.\n*   Factor VIIa bypasses the requirement for factors VIII and IX, and is effective in preventing and treating joint hemorrhage, life-threatening bleeding, and surgical bleeding.\n*   Primary concerns with recombinant factor VIIa are the potential for inducing thrombosis (stroke, deep venous thrombosis) and high cost.\n*   A higher dose of factor VIII would not overcome patient antibodies.\n*   Both fresh frozen plasma and cryoprecipitate contain factor VII but are diluted with other factors, including factor VIII.\n*   DDAVP is not helpful for a coagulation defect."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Levels of factors VIII and IX should be increased to what level before major surgery in a hemophiliac?",
      "options": [
        "A. 10%",
        "Β. 30%",
        "C. 50%",
        "D. 75%",
        "Ε. 100%"
      ],
      "answer": "E",
      "explanation": "*   For patients with hemophilia A and B, the levels of factors VIII and IX should be increased:\n    *   To 30% of normal to prevent bleeding after dental extraction.\n    *   To 50% of normal if major joint or intramuscular bleeding is already present.\n    *   To 100% in cases of life-threatening bleeding or before a major operation."
    },
    {
      "id": 15,
      "question_type": "clinical_scenario",
      "question": "After a transurethral prostate resection in a 50-year-old man, persistent bloody urine develops. The patient has no history of bleeding disorders, has had previous surgery without incident, and had a normal preoperative coagulation profile and platelet count. Which of the following is most likely to be of benefit?",
      "options": [
        "A. Fresh frozen plasma",
        "B. Platelets",
        "C. Cryoprecipitate",
        "D. Amicar (aminocaproic acid)",
        "E. DDAVP (desmopressin)"
      ],
      "answer": "D",
      "explanation": "*   Patients undergoing transurethral prostate resection (TURP) are at increased risk of bleeding from primary fibrinolysis.\n*   TURP leads to the release of urokinase and tissue plasminogen activator from the prostate, which bathes the resected area and can cause bleeding.\n*   Several studies have demonstrated the efficacy of antifibrinolytic agents such as Amicar (aminocaproic acid) and Cyklokapron (tranexamic acid) in treating bleeding during TURP.\n*   Fresh frozen plasma (FFP), platelets, cryoprecipitate, and DDAVP would be less effective in the setting of primary fibrinolysis."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following does not affect the bleeding time?",
      "options": [
        "A. Aspirin",
        "B. Von Willebrand disease",
        "C. Hemophilia A",
        "D. Severe thrombocytopenia",
        "E. Qualitative platelet disorders"
      ],
      "answer": "C",
      "explanation": "*   Bleeding time tests platelet adhesion and aggregation.\n*   It will be normal in derangement of the coagulation pathways.\n*   Hemophilia A is associated with a factor VIII deficiency, which manifests as an abnormality in the coagulation cascade and presents with a prolonged PTT, but does not affect bleeding time.\n*   Drugs that inhibit platelet function, such as aspirin (which inhibits cyclooxygenase), will increase bleeding time.\n*   Von Willebrand disease results in prolonged bleeding time due to qualitative or quantitative deficiency in von Willebrand factor, which is required for platelet adhesion.\n*   Severe thrombocytopenia (quantitative) and platelet dysfunction (qualitative) both prolong bleeding time.\n*   Fibrinogen deficiency also prolongs bleeding time because fibrinogen is required for platelet aggregation."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A deficiency of which of the following factors would increase INR but not prolong the PTT?",
      "options": [
        "A. II",
        "B. V",
        "C. VII",
        "D. IX",
        "E. X"
      ],
      "answer": "C",
      "explanation": "*   The INR detects abnormalities in the extrinsic and common pathways.\n*   The extrinsic pathway is triggered by exposure of the injured vessel to tissue factor and starts with factor VII.\n*   It then merges with the intrinsic pathway at factor X and is followed by activation of factors V and II and fibrinogen (factor I).\n*   Deficiencies in factors I, II, V, and X would prolong both the prothrombin time (PT)/INR and the PTT because they are all part of the common pathway.\n*   Factor IX is part of the intrinsic pathway, so its deficiency would prolong PTT only.\n*   Therefore, a deficiency of factor VII would increase INR but not prolong the PTT."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "The most important preoperative assessment to determine the risk of abnormal intraoperative bleeding is:",
      "options": [
        "A. Bleeding time",
        "B. Activated partial thromboplastin time (aPTT)",
        "C. International normalized ratio (INR)",
        "D. History and physical examination",
        "E. Platelet count"
      ],
      "answer": "D",
      "explanation": "*   The most important element in detecting an increased risk of abnormal bleeding before surgery is a detailed history and physical examination.\n*   A systematic review in 2008 demonstrated the poor value of using coagulation tests (bleeding time, aPTT, INR, platelet count) for identifying the risk of bleeding during an operation.\n*   Routine laboratory testing is neither sensitive nor specific for determining increased bleeding risk.\n*   One should inquire about a history of prolonged bleeding after minor trauma, tooth extraction, menstruation, and in association with major and minor surgery, as well as medications and over-the-counter supplements that might affect hemostasis.\n*   If a careful history is negative and the planned surgical procedure is minor, further testing is not necessary.\n*   For a major operation not considered high-bleeding risk, a platelet count, blood smear, and aPTT are recommended.\n*   If there is high suspicion for a history of abnormal bleeding or the operation is high-bleeding risk (e.g., neurosurgery), then bleeding time, INR, and a fibrin clot test should be added to detect abnormal fibrinolysis, and a hematology consult should be obtained."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Glanzmann thrombasthenia is characterized by:",
      "options": [
        "A. Normal bleeding time",
        "B. Treatment response to DDAVP (desmopressin) infusion",
        "C. Autosomal dominant inheritance",
        "D. Defect in platelet aggregation",
        "E. Prolonged INR"
      ],
      "answer": "D",
      "explanation": "*   Glanzmann thrombasthenia is an autosomal recessive disorder characterized by the absence of functional glycoprotein IIb/IIIa.\n*   Glycoprotein IIb/IIIa is a receptor for fibrinogen and von Willebrand factor, crucial for platelet adhesion and aggregation.\n*   Therefore, bleeding time will be prolonged, but aPTT and INR will be normal.\n*   These patients will not respond to DDAVP because there is no quantitative defect in the endothelial release of von Willebrand factor or factor VIII.\n*   The bleeding tendency for patients with Glanzmann's is variable.\n*   Treatment is with platelets, but repeated use of platelet transfusions can induce antiglycoprotein IIb/IIIa alloimmunization, rendering the treatment ineffective.\n*   In such circumstances, recombinant factor VIIa may be useful."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "The most useful laboratory test to assess both risk of bleeding and response to therapy in patients with uremia is:",
      "options": [
        "A. Bleeding time",
        "B. Platelet count",
        "C. INR",
        "D. APTT",
        "E. Thrombin time"
      ],
      "answer": "A",
      "explanation": "*   In uremic patients, the bleeding time is the most useful clinical laboratory test to assess both bleeding risk and response to therapy.\n*   The etiology of abnormal bleeding in uremia is multifactorial, but the most important factor is impairment of platelet function due to a functional defect in von Willebrand factor, which leads to impaired platelet aggregation.\n*   INR and PTT are less important because the pathophysiology is platelet dysfunction.\n*   Uremic patients may have a decreased platelet count, but the absolute count does not accurately reflect their risk of bleeding.\n*   The most common bleeding manifestation in uremic patients is excessive bleeding from puncture sites, followed by nasal, gastrointestinal, and genitourinary bleeding.\n*   Platelet defects cause superficial bleeding and defective initial hemostasis, while defects to the coagulation cascade cause deep space bleeding and platelet plug instability.\n*   Thrombin time will be prolonged with a low fibrinogen level, which can be congenital or acquired.\n*   Acquired causes of low fibrinogen include DIC, liver disease, elevated fibrin degradation products, and primary fibrinolysis."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "Which of the following is most likely to be useful in the treatment of bleeding in the uremic patient?",
      "options": [
        "A. Desmopressin",
        "B. Cryoprecipitate",
        "C. Fresh frozen plasma",
        "D. Recombinant human erythropoietin",
        "E. Estrogens"
      ],
      "answer": "A",
      "explanation": "*   DDAVP (desmopressin) enhances the release of von Willebrand factor by endothelial cells; a single dose (0.3 to 0.4 mcg/kg IV or subcutaneously) has a rapid onset and relatively short duration (4-6 hours).\n*   Dialysis is also effective in treating uremic bleeding by removing toxins that cause platelet dysfunction.\n*   Cryoprecipitate has high concentrations of von Willebrand factor, factor VIII, and fibrinogen, and can be effective, but is not first-line therapy.\n*   Recombinant human erythropoietin (Epogen [epoetin alfa]) helps uremic bleeding by enhancing platelet aggregation and displacing platelets from the center of the blood vessel.\n*   Estrogens have been shown to help with bleeding in men and women, theorized to decrease arginine levels, which decreases nitric oxide, leading to increases in thromboxane A2 and adenosine diphosphate.\n*   Fresh frozen plasma (FFP) does not have high concentrations of von Willebrand factor and is not effective for uremic bleeding."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "In a patient with abnormal bleeding, which of the following findings would support primary fibrinolysis as the more likely cause than disseminated intravascular coagulation (DIC)?",
      "options": [
        "A. Normal platelet count",
        "B. Prolonged thrombin time",
        "C. Prolonged aPTT",
        "D. Low fibrinogen level",
        "E. Increase in fibrin degradation products"
      ],
      "answer": "A",
      "explanation": "*   Primary fibrinolysis is rare and difficult to distinguish from DIC, as DIC itself leads to secondary fibrinolysis, making coagulation profiles very similar.\n*   Primary fibrinolysis can be triggered by conditions like malignancy, shock, sepsis, cirrhosis, and cardiopulmonary bypass, induced by excess plasminogen activator release.\n*   Plasminogen is converted to plasmin, which degrades fibrin, fibrinogen, and factors V and VIII, causing coagulopathy.\n*   The primary treatment for both DIC and primary fibrinolysis is to correct the underlying trigger.\n*   Inhibitors of fibrinolysis, such as aminocaproic acid or tranexamic acid, can be helpful in primary fibrinolysis by inhibiting plasminogen activation.\n*   Both DIC and primary fibrinolysis result in decreased fibrinogen levels, prolonged thrombin time, prolonged INR/PTT, and increased fibrin degradation products.\n*   The distinguishing feature for pure primary fibrinolysis is a normal platelet count (as opposed to decreased in DIC) and a normal D-dimer (as opposed to an increase in DIC)."
    },
    {
      "id": 23,
      "question_type": "clinical_scenario",
      "question": "A 55-year-old patient undergoes surgery, during which blood transfusions were given. One week later, skin lesions develop that appear to be purpura. The platelet count decreases from 250,000 cells/µL to 10,000 cells/µL, and an upper gastrointestinal bleed develops. The patient has not been receiving any medication that could affect platelets. Which of the following is true about this condition?",
      "options": [
        "A. It is more common in middle-aged men.",
        "B. Severe bleeding is best managed by platelet transfusions.",
        "C. It can occur without prior antigenic exposure.",
        "D. It is an antibody-mediated reaction.",
        "E. Platelet counts are typically higher than with heparin-induced thrombocytopenia."
      ],
      "answer": "D",
      "explanation": "*   Transfusion purpura is an uncommon cause of thrombocytopenia and bleeding after transfusion.\n*   It requires that the patient has been previously sensitized to the HPA-1a antigen (usually by a prior pregnancy or blood transfusion).\n*   When these patients receive blood products containing HPA-1a, they produce alloantibodies that attack both the donor's and the patient's own platelets.\n*   It usually presents 5 to 12 days after a transfusion, leading to profound thrombocytopenia and bleeding that can last for weeks.\n*   Mortality occurs in 10% to 20% due to hemorrhage.\n*   It is less common with leukocyte-reduced red cells and more common in women who have been pregnant.\n*   Diagnosis is made by demonstrating platelet alloantibodies with an absence of the corresponding antigen on the patient's platelets.\n*   Treatment is primarily with intravenous immunoglobulin (IVIG); plasmapheresis and corticosteroids are also potential options.\n*   Treatment with platelet transfusions can exacerbate the disease process.\n*   It can be confused with heparin-induced thrombocytopenia; a platelet count less than 15,000 cells/µL is more suggestive of transfusion purpura."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "Which of the following is true in regard to clopidogrel (Plavix)?",
      "options": [
        "A. It functionally mimics the pathophysiology of Bernard-Soulier disease.",
        "B. It has been linked to fatal episodes of pulmonary hypertension.",
        "C. It is recommended that clopidogrel be stopped 3 days before a major operation.",
        "D. It inhibits platelet aggregation within 2 hours of oral administration.",
        "E. It can inhibit the release of von Willebrand factor."
      ],
      "answer": "D",
      "explanation": "*   Clopidogrel (Plavix) irreversibly inhibits platelet aggregation within 2 hours of administration, with effects lasting 5 to 7 days (platelet half-life is 1 week).\n*   It works by indirectly inhibiting the activation of the glycoprotein IIb/IIIa complex by antagonizing the ADP receptor.\n*   This functional mechanism is similar to Glanzmann's thrombasthenia, which is characterized by a GpIIb/IIIa receptor deficiency preventing fibrin from linking platelets.\n*   Bernard-Soulier disease is characterized by GpIb receptor deficiency, which prevents vWF from linking the platelet to exposed collagen.\n*   Clopidogrel has been shown to decrease cardiovascular death, myocardial infarction, and stroke in patients with acute coronary syndromes.\n*   Use with aspirin increases the risk of bleeding.\n*   Clopidogrel has been associated with thrombotic thrombocytopenic purpura (TTP), even with short-term use (<2 weeks), treated with plasma exchange, with mortality up to 29%.\n*   It has not been associated with pulmonary hypertension."
    },
    {
      "id": 25,
      "question_type": "clinical_scenario",
      "question": "A 35-year-old man has been in the intensive care unit with severe pancreatitis, ventilator dependence, and pneumonia for 2 weeks. He is receiving nutrition parenterally. The INR is 2.0. The aPTT is normal. The total bilirubin level is normal. The platelet count is normal. Which of the following is the most likely etiology?",
      "options": [
        "A. Factor VIII deficiency",
        "B. DIC",
        "C. Vitamin K deficiency",
        "D. Primary fibrinolysis",
        "E. Chronic liver disease"
      ],
      "answer": "C",
      "explanation": "*   Patients in the ICU have a high incidence of coagulopathy, with vitamin K deficiency being the most common cause.\n*   The differential diagnosis for an elevated INR with a normal aPTT includes factor VII deficiency, warfarin administration, acute phase of liver disease, and vitamin K deficiency.\n*   Vitamin K is not stable in patients receiving total parenteral nutrition (TPN); in this case, the prolonged PT correlates with vitamin K deficiency.\n*   Prolonged parenteral nutrition often leads to cholestatic liver disease, which in turn impairs the liver's ability to use vitamin K appropriately.\n*   Factors II, VII, IX, and X, as well as proteins C and S, all require vitamin K and will be deficient in these patients.\n*   20% of hospitalized patients given intravenous nutrition over a 3-week period developed elevations of INR.\n*   Vitamin K should be given at least 6 to 12 hours before a procedure in patients with adequate liver function; IM route is preferred.\n*   In patients with hepatocellular disease, FFP or whole blood is required.\n*   Platelets and cryoprecipitate are unrelated to prolonged prothrombin time."
    },
    {
      "id": 26,
      "question_type": "clinical_scenario",
      "question": "A 60-year-old man with diabetes presents with right upper quadrant pain and leukocytosis. The patient has an elevated INR of 2.5 and a prolonged PTT of 60 seconds, a low fibrinogen level, and a platelet count of 70,000 cells/μL. An ultrasound scan reveals gas in the wall of the gallbladder. The most important part in management of this patient would be:",
      "options": [
        "A. Administration of fresh frozen plasma",
        "B. Administration of cryoprecipitate",
        "C. Checking the D-dimer assay",
        "D. Emergent cholecystectomy",
        "E. Administration of platelets"
      ],
      "answer": "D",
      "explanation": "*   This is a classic presentation of emphysematous cholecystitis complicated by sepsis, which then resulted in disseminated intravascular coagulation (DIC).\n*   Elderly male diabetic patients are at higher risk of emphysematous cholecystitis, and gas in the gallbladder confirms the diagnosis.\n*   DIC leads to a dysregulation of the coagulation cascade, leading to clotting and resultant bleeding, with consumption of fibrinogen, platelets, and coagulation factors.\n*   There is no specific test for DIC, but thrombocytopenia, hypofibrinogenemia, prolonged PT and PTT, and increased fibrin degradation products are sufficient for diagnosis.\n*   Fresh frozen plasma, platelets, and cryoprecipitate are important components of treatment, especially for an actively bleeding patient.\n*   The most important part of management is to identify and correct the underlying source, which in this case is broad-spectrum intravenous (IV) antibiotics and emergent cholecystectomy.\n*   Without removal of the source, DIC will continue to consume transfused products.\n*   The mortality rate from DIC ranges between 10% and 50%."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "Cryoprecipitate contains a low concentration of which of following?",
      "options": [
        "A. Fibrinogen",
        "B. Factor VIII",
        "C. Von Willebrand factor",
        "D. Fibronectin",
        "E. Factor XI"
      ],
      "answer": "E",
      "explanation": "*   Cryoprecipitate contains fibrinogen, factor VIII, von Willebrand factor, fibronectin, and factor XIII.\n*   It contains low concentrations of factor XI.\n*   Cryoprecipitate was originally created as a treatment for hemophilia but is now more often used in massive resuscitation with fresh frozen plasma to replenish fibrinogen levels.\n*   Factor XI deficiency (also known as hemophilia C or Rosenthal syndrome) occurs more often in the Ashkenazi Jewish population and is treated with fresh frozen plasma during bleeding episodes."
    },
    {
      "id": 28,
      "question_type": "clinical_scenario",
      "question": "A 76-year-old male is undergoing a laparoscopic colectomy for sigmoid colon cancer. Which of the following is the best prophylaxis for venous thromboembolic events (VTES)?",
      "options": [
        "A. Leg compression device",
        "B. Unfractionated heparin (UFH) until fully ambulatory",
        "C. Leg compression device intraoperatively, UFH until fully ambulatory",
        "D. Leg compression device intraoperatively, LMWH until fully ambulatory",
        "E. Leg compression device intraoperatively, LMWH for 4 weeks after surgery"
      ],
      "answer": "E",
      "explanation": "*   Patients undergoing surgery should be assessed for VTE risk and categorized as very low, low, moderate, and high-risk, often using the Caprini score.\n*   A Caprini score of 5 or more indicates a high-risk patient.\n*   This patient (76-year-old, cancer, major laparoscopic surgery) would be considered high risk.\n*   For low-risk patients, mechanical prevention (compression device) is recommended.\n*   For moderate-risk, pharmacologic prophylaxis with UFH or LMWH is recommended.\n*   High-risk patients should receive both mechanical and pharmacologic prophylaxis.\n*   The drug should be administered in close proximity to surgery and continued until the patient is fully ambulatory.\n*   Recent data for high-risk patients (such as those with cancer) demonstrate enhanced VTE prophylaxis with extended LMWH for 4 weeks after surgery.\n*   Patients undergoing colectomy for inflammatory bowel disease (IBD) are also at very high risk for VTE."
    },
    {
      "id": 29,
      "question_type": "clinical_scenario",
      "question": "A 50-year-old male undergoes a resection of a large retroperitoneal leiomyosarcoma. There is an estimated blood loss of 750 cc. The next day, the patient is found to be anemic and is given 2 units of blood. Halfway through the first unit, the patient develops chills and his temperature increases from 37° to 39°C. Which of the following is true in regard to this patient's condition?",
      "options": [
        "A. The transfusion does not need to be stopped.",
        "B. This occurs more commonly when given packed red blood cells versus platelets.",
        "C. Filtration is more effective than leukocyte washing in preventing this condition.",
        "D. Aspirin is more effective than acetaminophen in treating this condition.",
        "E. Pretransfusion administration of acetaminophen and diphenhydramine is the most effective prevention."
      ],
      "answer": "C",
      "explanation": "*   The patient is likely manifesting a febrile nonhemolytic transfusion reaction (FNHTR), the most common blood transfusion reaction, occurring in 0.5% to 1.5% of all blood transfusions.\n*   FNHTR is defined as a rise in temperature of at least 1.8°C from baseline, not accounted for by the patient's clinical condition, and is a diagnosis of exclusion.\n*   It is generally recommended to temporarily stop the transfusion and assess the patient for other symptoms like respiratory compromise, cyanosis, back pain, and hypotension, which may suggest a hemolytic reaction, TRALI, or sepsis.\n*   FNHTR is more common in pregnancy and in immunocompromised patients (e.g., leukemia, lymphoma).\n*   It occurs more commonly after platelet transfusions but can also occur with PRBC or FFP.\n*   Pretreatment with acetaminophen was thought to reduce severity, but randomized controlled trials have shown no difference in FNHTR rates with acetaminophen and diphenhydramine pretreatment compared to placebo.\n*   The incidence of febrile reactions can be greatly reduced by using leukocyte-reduced blood products.\n*   Filtration removes 99.9% of white blood cells and platelets and is more effective than leukocyte washing in preventing almost all febrile transfusion reactions.\n*   Aspirin is not advised due to its effects on platelets and bleeding."
    }
  ]
}
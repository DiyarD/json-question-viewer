{
  "chapter_name": "Breast",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding Poland's syndrome?",
      "options": [
        "A. Both breasts are typically involved.",
        "B. Men are more commonly affected.",
        "C. It classically presents with a sunken chest.",
        "D. It is due to an absence of the chest wall\nmuscles.",
        "E. It is not associated with symbrachydactyly."
      ],
      "answer": "B",
      "explanation": "- Poland syndrome is a sporadic congenital disorder that classically affects the unilateral breast, chest wall, and upper extremity.\n- It is present in at least 1 in 100,000 individuals, occurs more commonly on the right than left (2:1 to 3:1), and affects men more often than women (3:1).\n- Underdevelopment or absence of the pectoralis, serratus, and latissimus dorsi muscles, symbrachydactyly (fused, missing, and/or shortened digits), shortened forearm, dextrocardia, rib abnormalities, absent axillary hair, athelia, diminished subcutaneous fat localized over the ipsilateral chest wall, and renal agenesis or hypoplasia (rare) have all been described as characteristics of Poland syndrome.\n- The cause is thought to be due to interruption in the vascular supply to the affected chest wall and upper extremity in utero resulting in hypoplasia of the chest wall muscles.\n- Pectus excavatum is a separate congenital condition that is often inherited and results in a bilateral anterior chest wall deformity characterized by a sunken chest."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following statements is true regarding the lymphatic anatomy of the breast?",
      "options": [
        "A. Axillary lymph nodes are organized into three\nlevels with respect to the pectoralis major\nmuscle.",
        "B. In a standard axillary dissection, only level I\nand II nodes are removed.",
        "C. Approximately 30% of the lymphatic drainage\nfrom the breast goes to the contralateral lymph\nnodes.",
        "D. Rotter nodes are otherwise called \"anterior\npectoral nodes\" and are technically level I nodes.",
        "E. Batson plexus is a network of lymphatics that\ndrain the subareolar portion of the breast."
      ],
      "answer": "B",
      "explanation": "- Axillary lymph nodes are classically organized into six anatomic groups based on their anatomic location (lateral, pectoral, scapular, central, subclavicular, and interpectoral).\n- A more clinically useful classification is into levels based on their location relative to the pectoralis minor muscle, with level I being located lateral (most inferior) to the muscle border, level II being located behind the pectoralis minor, and level III nodes medial.\n- Rotter nodes are interpectoral (between the pectoralis major and minor muscles) and are technically level II nodes.\n- In a standard axillary dissection, level I and II nodes are removed.\n- There are approximately 20 to 30 lymph nodes in the average axilla, and the lymphatic drainage is fairly predictable, following a hierarchical pattern.\n- Most of the lymphatic drainage of the breast is to the axilla, with drainage to the contralateral breast being rare.\n- For this reason, it is not standard to remove (or even check for) sentinel nodes in the ipsilateral supraclavicular and internal mammary or contralateral lymph node stations.\n- The network of lymphatics that drains the subareolar region is called Sappey.\n- Batson plexus is a network of venous drainage that is thought to be a route for metastasis to the spine."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding gynecomastia?",
      "options": [
        "A. It is considered a risk factor for male breast\ncancer.",
        "B. Tamoxifen can worsen gynecomastia.",
        "C. It is uncommon after age 50.",
        "D. It is due to accumulation of subareolar fat.",
        "E. Mammography is excellent in differentiating\ntrue gynecomastia from malignant disease."
      ],
      "answer": "E",
      "explanation": "- Gynecomastia is an asymptomatic condition resulting from the abnormal benign proliferation of glandular breast tissue in men.\n- It is not considered a risk factor for breast cancer.\n- After examination, it is not uncommon to find that most patients, in fact, have pseudogynecomastia, which is an accumulation of subareolar fat without a proliferation in glandular tissue.\n- There are three stages where gynecomastia is more common—infancy, puberty, and after age 50.\n- The stimulation of breast growth is attributed to an imbalance of the effects of estrogen versus testosterone.\n- Older patients are more vulnerable to this imbalance and thus up to 70% of patients older than 50 have senescent gynecomastia.\n- Spironolactone increases the metabolism and clearance of testosterone; marijuana alters the hypothalamic-pituitary-gonadal axis; uremia related to ESRD causes prolonged half-life of luteinizing hormone (LH), which leads to decreased secretion of LH and decreased testosterone levels; and cimetidine increases plasma prolactin levels, all of which are well-described causes of gynecomastia.\n- Mammography is excellent in differentiating true gynecomastia from malignant disease with a sensitivity and specificity exceeding 90%.\n- However, the positive predictive value for cancer is low, as would be expected with such a low incidence of malignancy in this patient population.\n- If the patient is bothered by the appearance of gynecomastia, antiestrogens such as tamoxifen are frequently used with success.\n- Rarely, patients will require surgical removal."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is least likely to contribute to the development of breast infection (mastitis/\nabscess)?",
      "options": [
        "A. Nipple ring insertion",
        "B. Granulomatous mastitis",
        "C. Smoking",
        "D. Hidradenitis",
        "E. Alcohol intake (>2 drinks/day)"
      ],
      "answer": "E",
      "explanation": "- Nonlactational breast infections predominantly occur when there is an obstruction or pseudo-obstruction of the lactiferous duct.\n- The most common organism remains Staphylococcus aureus.\n- Trauma to the nipple, which includes the placement of nipple rings, causes scarring and obstruction.\n- Granulomatous mastitis is an inflammatory lesion of the breast, which may be autoimmune in nature, but is often recurrent and associated with superinfections of the inflammatory mass.\n- Smoking causes a change in the epithelium of the breast duct (keratinizing squamous metaplasia) that leads to keratin plugs that obstruct the ducts.\n- Hidradenitis is a skin infection that is caused by obstruction of the apocrine sweat glands, which often occurs in the periareolar, axillary, and inframammary regions of the breast.\n- Alcohol does not have a known direct association with breast abscess."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 48-year-old woman presents with a palpable tender mobile mass in the upper outer quadrant of her left breast. The overlying skin is normal and there is no adenopathy on exam. Ultrasound examination reveals a 2.5-cm cystic lesion. An ultrasound-guided cyst aspiration is performed. Which of the following is true?",
      "options": [
        "A. The fluid should be sent for cytologic\nexamination only if it is blood tinged.",
        "B. Straw-colored fluid should prompt a core\nneedle biopsy.",
        "C. The presence of septations is associated with a\nlow recurrence rate of the cyst after aspiration.",
        "D. Thickness of the cyst wall does not correlate\nwith cancer risk.",
        "E. Viscous gel-like fluid is a poor prognostic sign."
      ],
      "answer": "A",
      "explanation": "- Breast cysts are overwhelmingly a benign entity, occurring most frequently in women between the ages of 35 and 50.\n- The typical presentation is that of a painful smooth, mobile firm mass that often fluctuates in size according to the timing of a woman's menstrual cycle.\n- The exact etiology is largely unknown, but it is clear that hormones play a role in the course of disease.\n- Breast cysts largely disappear after menopause, so the presence of a cyst in a postmenopausal woman should raise concern.\n- The vast majority of breast cysts are termed \"simple cysts\" and do not require any action at all.\n- The presence of a simple cyst does not elevate an individual's risk of subsequent breast cancer.\n- Aspiration is primarily recommended if a woman is symptomatic, or if the cyst was inadvertently discovered on mammographic imaging, and the sonographer cannot definitively determine a sonographic lesion to be cystic or concordant with the mammographic abnormality.\n- Though most fluid aspirated from breast cysts is straw colored and watery, a viscous gel-like aspirate is common and not worrisome unless it contains blood.\n- There is no need to send cyst aspirate for cytologic evaluation unless it is bloody.\n- In the case of bloody aspirate, core needle biopsy should also be performed.\n- If suspicious features such as intracystic septations, thickened walls, and intracystic mass are present, these cysts are called \"complicated cysts,\" and core needle biopsy is recommended.\n- Recurrence of a simple breast cyst (or perhaps an enlargement of a different nearby cyst) is common after aspiration, and no feature predicts high or low risk of cyst recurrence.\n- However, if a cyst recurs within 2 weeks of the aspiration procedure, this should spark suspicion and consideration for biopsy."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Nipple discharge is most suspicious of breast cancer in which of the following women?",
      "options": [
        "A. A 35-year-old woman with bilateral brown\ndischarge that is only visible with squeezing of\nthe nipple",
        "B. A 45-year-old woman with unilateral serous\ndischarge that is spontaneous",
        "C. A 30-year-old woman who is lactating and\nnotices unilateral bloody nipple discharge that\nis spontaneous",
        "D. A 50-year-old woman with greenish colored\ndischarge bilaterally that is sometimes\nspontaneous",
        "E. A 40-year-old woman with bilateral milky\ndischarge that occurs spontaneously onto her\nbra"
      ],
      "answer": "B",
      "explanation": "- Nipple discharge is considered “pathologic\"if it is serous or bloody in color, unilateral, emanating from a single duct only, copious in amount, or spontaneous.\n- When a woman experiences pathologic discharge after the age of 50, it is particularly more worrisome.\n- Brown, green, white (milky), yellow, and blue discharge is more commonly “physiologic” and can usually be expressed from multiple ducts and/or bilaterally on examination.\n- Bloody and serous types should raise concern for malignancy.\n- Breast-feeding women can commonly have blood-tinged milk in the first weeks of pregnancy; this condition requires only observation, as it is most often self-limited.\n- In the case of pathologic discharge, mammography and breast ultrasound should be performed in an attempt to identify an occult malignancy causing the discharge.\n- If negative, ductal excision is recommended as both diagnostic and therapeutic.\n- Malignant lesions are found in fewer than 10% of cases."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following statements is TRUE regarding tamoxifen therapy?",
      "options": [
        "A. Tamoxifen has been shown to reduce the risk\nof developing breast cancer by 90% in patients\nthat are considered high risk.",
        "B. The primary serious side effect of tamoxifen is\nloss of bone mineral density.",
        "C. The mechanism of action of tamoxifen is to\nlower serum estrogen levels by decreasing\nestrogen production.",
        "D. Tamoxifen is most effective when administered\nconcurrently with chemotherapy.",
        "E. Treatment with tamoxifen should be\ninterrupted if a woman with a history of\nestrogen-receptor positive invasive breast\ncancer wishes to become pregnant."
      ],
      "answer": "E",
      "explanation": "- Tamoxifen is a selective estrogen-receptor modulator (SERM) that acts competitively at the estrogen receptor to halt cell division.\n- Indications for its use are to reduce cancer risk in high-risk patients and as a cancer therapy in men and women with estrogen receptor-positive noninvasive and invasive breast cancer.\n- In the NSABP-P01 trial, high-risk patients (5-year Gail risk >1.67% or lobular carcinoma in situ [LCIS]) experienced a 50% risk reduction in subsequent noninvasive and invasive breast cancers.\n- A 90% risk reduction is associated with prophylactic mastectomy, not tamoxifen.\n- The decision to give tamoxifen must always weigh the possible benefit against the potential side effects.\n- Tamoxifen is associated with the development of endometrial adenocarcinoma and with an increased risk of venous thromboembolism and cataract formation.\n- Tamoxifen is most effective when administered in sequence with chemotherapy, not concurrent.\n- If a woman desires pregnancy after completing surgery, chemotherapy, and radiation treatments for breast cancer, tamoxifen therapy should be halted to avoid fetal exposure and reinitiated after pregnancy and lactation."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is most characteristic of a malignant lesion as seen on ultrasound imaging?",
      "options": [
        "A. Taller-than-wide measurements",
        "B. Hypoechoic mass",
        "C. Anechoic mass",
        "D. Homogenous internal structure",
        "E. Bilateral edge shadowing"
      ],
      "answer": "A",
      "explanation": "- On ultrasound, lesions that are anechoic are fluid filled (i.e., cysts), and lesions that are hypoechoic are solid.\n- Benign and malignant masses can appear hypoechoic, but having a homogeneous internal structure is a benign characteristic.\n- Bilateral edge shadowing is also a typically benign finding on ultrasound as echoes are deflected off of a smooth-bordered rounded mass and appear as dark shadows below each edge of a lesion.\n- Taller-than-wide measurements denote a lesion that is infiltrative of the natural elements of the breast, which run parallel to the chest wall.\n- Lesions that are benign are typically wider-than-tall and grow along the natural elements of the breast."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 45-year-old premenopausal woman undergoes stereotactic core needle biopsy of calcifications seen on screening mammogram. The biopsy reveals atypical ductal hyperplasia (ADH). Which of the following is TRUE about the management of this patient?",
      "options": [
        "A. Tamoxifen should be prescribed.",
        "B. The lesion should be completely excised with a\nnegative margin.",
        "C. No further excision is required if the\ncalcifications were completely removed.",
        "D. Prophylactic bilateral mastectomy should\nstrongly be considered.",
        "E. Sentinel lymph node biopsy should be\nperformed along with excision of the lesion."
      ],
      "answer": "A",
      "explanation": "- Atypical ductal hyperplasia, along with atypical lobular hyperplasia and flat epithelial hyperplasia, is classified as a \"proliferative lesion with atypia.”\n- As such, it is associated with up to five times higher relative risk of breast cancer than normal breast tissue.\n- The risk is higher with multifocal lesions.\n- Stromal fibrosis and apocrine metaplasia do not have an increased risk for breast cancer and thus do not need any additional workup.\n- Though ADH is a benign diagnosis, it is morphologically similar to low-grade ductal carcinoma-in-situ and must be less than 2 mm in size to be termed ADH.\n- Surgical excision is recommended if ADH is diagnosed on core biopsy because of reported rates of upstaging (finding cancer) of 20% to 30%.\n- It is not important to have a negative margin, but excision of the initial abnormal area must be contained in the surgical specimen for pathologic evaluation.\n- Incorrect targeting (i.e., not seeing the clip on specimen radiograph) should spark consideration for retargeting and re-excision.\n- Tamoxifen is a standard recommendation after excisional biopsy confirms the absence of cancer.\n- Patients enrolled in the NSABP P-01 trial were randomized to tamoxifen versus placebo, and those who took tamoxifen had a 50% reduction in subsequent invasive and noninvasive carcinoma of the breast.\n- Axillary staging is not indicated given that ADH is benign, and bilateral prophylactic mastectomy should not be recommended for this relatively low-risk lesion."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "A 50-year-old woman has undergone stereotactic needle biopsy of abnormal calcifications, showing a large, high-grade ductal carcinoma in situ (DCIS). Which of the following choices is the most appropriate treatment for this patient?",
      "options": [
        "A. Lumpectomy alone",
        "B. Modified radical mastectomy",
        "C. Lumpectomy and sentinel lymph node\nbiopsy",
        "D. Lumpectomy and sentinel lymph node biopsy,\nfollowed by whole breast radiotherapy",
        "E. Lumpectomy and sentinel lymph node biopsy\nwith intraoperative radiotherapy"
      ],
      "answer": "D",
      "explanation": "- From the NSABP B-17 trial, lumpectomy plus radiotherapy was established as superior to lumpectomy alone, given the significant reduction of ipsilateral breast tumor recurrence rates with the addition of radiotherapy.\n- Sentinel lymph node biopsy is not absolutely indicated for DCIS when performing lumpectomy.\n- However, it is often performed in cases of high-grade DCIS, and in those with large or palpable masses, to reduce the need for second surgeries if occult invasive disease is found within the specimen.\n- Additionally, in most cases of lumpectomy (and all cases of mastectomy), the lymphatic drainage has been removed along with the tumor, and thus sampling the sentinel node would be impossible.\n- Planned axillary dissection (as part of a modified radical mastectomy) would not be indicated for in situ disease.\n- Intraoperative radiotherapy is not, as yet, standard of care and is only available at a few centers.\n- The TARGIT-A trial demonstrated that intraoperative radiation had a similar rate of wound infection, local recurrence, and overall survival compared to external-beam radiation therapy.\n- The advantage is that the patient only undergoes a single radiation event during the index operation compared to repeated episodes of radiation therapy over a 6-week period."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "BRCA1 and BRCA2 are:",
      "options": [
        "A. Proto-oncogenes",
        "B. Cyclin-dependent kinase",
        "C. Tumor suppressor genes",
        "D. Mismatch repair genes",
        "E. Tyrosine kinases"
      ],
      "answer": "C",
      "explanation": "- BRCA1 and BRCA2 are examples of tumor suppressor genes, which normally regulate and inhibit growth of abnormal cells.\n- A mutation in both copies of a tumor suppressor gene such as the BRCA gene (usually one inherited and one acquired) leads to loss of this protective function and unregulated growth of abnormal cells goes unchecked.\n- On the other hand, proto-oncogenes (such as ras) typically code for proteins that stimulate cell growth, and mutations in these genes lead to upregulated cell division and therefore cancer.\n- Mismatch repair genes code for proteins that recognize DNA errors and repair them, making them a type of tumor suppressor gene.\n- Mutations in mismatch repair genes can then lead to cancer formation.\n- A common example is the MSH2 and MLH1 associated with Lynch syndrome.\n- Tyrosine kinases and cyclin-dependent kinases are groups of enzymes that are important for cell regulation and play key roles in development of many cancers."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is TRUE of invasive lobular carcinoma of the breast?",
      "options": [
        "A. It is harder to detect metastasis on\nintraoperative frozen section analysis of\nsentinel nodes.",
        "B. Lobular cancers are typically hormone\nreceptor negative.",
        "C. Breast conservation therapy is contraindicated.",
        "D. Invasive lobular cancers typically appear on\nmammogram and ultrasound as a discrete\nmass.",
        "E. Lobular cancers comprise 40% of all invasive\nbreast cancers."
      ],
      "answer": "A",
      "explanation": "- Invasive lobular cancers comprise only 15% of all invasive breast cancers and arise from the terminal lobular components of the lactiferous ducts.\n- These cancers are typically hormone receptor positive and tend to occur in postmenopausal women.\n- Histologically, lobular cancers grow in a linear pattern infiltrating between tissue planes rather than distorting them.\n- This growth pattern explains why lobular cancer can be very indiscrete on mammogram and ultrasound (poorly defined borders).\n- Although it can be difficult to determine the extent of the lesion and mastectomy is often recommended for lobular cancers, breast conservation is an acceptable option and is associated with low rates of recurrence.\n- Since lobular cancer cells are small and difficult to distinguish from lymphocytes, metastatic cells are often not readily apparent on intraoperative analysis by frozen section, and results are often deferred pending definitive analysis."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "A 45-year-old woman with locally advanced right breast cancer has fullness in the right supraclavicular area. Ultrasound-guided fine-needle aspiration of a supraclavicular node on the right side reveals metastatic breast cancer. Which of the following is TRUE regarding this lesion?",
      "options": [
        "A. It should be treated by surgical resection of\nthe supraclavicular node at the same time\nas resection of the primary breast tumor,\nfollowed by chemohormonal therapy.",
        "B. It should be treated with chemoradiation\nand resection only of the primary breast\ntumor.",
        "C. Palliative chemohormonal therapy should be\ninitiated without resection of the node or the\nprimary breast tumor.",
        "D. Palliative chemohormonal therapy should be\ninitiated with resection only of the primary\nbreast tumor.",
        "E. Palliative hormonal therapy should be\ninitiated alone, without resection of the node\nor the primary breast tumor."
      ],
      "answer": "B",
      "explanation": "- Involved supraclavicular nodes denote an N3c nodal stage, which is a stage III breast cancer.\n- Breast cancer would be stage IV if more distant nodes (contralateral, periaortic, hilar) are involved or cancer has metastasized to bone, brain, lung, visceral organ, etc.\n- With regard to treatment of supraclavicular nodes, chemotherapy and radiation to the supraclavicular fossa without surgical resection of the supraclavicular node are the recommended approaches.\n- Resection of the supraclavicular node may be recommended if not fully treated by chemotherapy and radiation but it would not be the planned definitive therapy."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 78-year-old woman with mild dementia, chronic obstructive pulmonary disease (COPD), diabetes, end-stage renal disease, and a prior lower extremity amputation for peripheral vascular disease has an episode of severe chest pain 1 day after undergoing core biopsy of a 1.5-cm right breast mass. Angiogram demonstrates a critical stenosis of the left anterior descending artery and a drug-eluting stent is placed. She is subsequently placed on antiplatelet therapy. Her biopsy results later reveal invasive ductal carcinoma that is intermediate grade, 90% estrogen receptor (ER) and progesterone receptor (PR) positive, and HER2 negative. Her axilla is clinically negative. What is the BEST therapeutic approach to this patient?",
      "options": [
        "A. Lumpectomy and sentinel node biopsy,\nfollowed by radiotherapy and hormone\ntherapy",
        "B. Lumpectomy and sentinel node biopsy,\nfollowed by chemotherapy then radiotherapy\nand hormonal therapy",
        "C. Mastectomy and sentinel node biopsy,\nfollowed by hormone therapy",
        "D. Chemotherapy, then consideration for surgical\nresection depending on response",
        "E. Hormone therapy, then consideration for\nsurgical resection depending on response"
      ],
      "answer": "E",
      "explanation": "- In elderly patients and in patients with multiple comorbidities that, in and of themselves, limit a patient's survival, the standard treatment algorithms may be altered to reduce potential adverse effects of treatment that have lower margins of benefit in patients with limited life spans.\n- Given her recent myocardial infarction, surgical risk is extremely high.\n- Therefore, chemotherapy and hormonal therapy are more appealing to avoid the risks associated with anesthesia and perioperative stress.\n- In this patient, cardiac toxicities related to chemotherapy would likely preclude administration of standard agents.\n- Therefore, a 3- to 6-month course of aromatase inhibitor therapy followed by reimaging to assess response is the best course of action."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 67-year-old asymptomatic female with a past history of stage III breast cancer for which she completed mastectomy, chemotherapy, radiotherapy, and 5 years of hormonal therapy is incidentally found on computed tomography (CT) scan to have several 1-cm liver lesions and bilateral pulmonary nodules consistent with metastatic breast cancer. Biopsy of one of the liver masses confirms the diagnosis of an ER-positive and PR-positive, HER2-negative metastatic breast cancer. There is no evidence of local recurrence or new primary breast cancer. The BEST treatment for this patient would be:",
      "options": [
        "A. Chemotherapy",
        "B. Hormonal therapy",
        "C. Radiation therapy",
        "D. Metastectomy",
        "E. Metastectomy and chemotherapy"
      ],
      "answer": "B",
      "explanation": "- In distal recurrence of breast cancer, the goal of therapy becomes progression-free survival and management of symptoms.\n- There is no role for local therapies such as radiotherapy or mastectomy given that her disease is widespread systemically.\n- Hormonal therapy has the best benefit to risk ratio and would include second-line agents, such as fulvestrant, in addition to aromatase inhibitors.\n- Ideally, a patient such as this one is offered participation in a clinical trial.\n- However, given the options provided, hormonal therapy is the best initial choice in an asymptomatic woman."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is TRUE of sentinel lymph node biopsy?",
      "options": [
        "A. Failure to identify the sentinel lymph nodes\nby either the blue dye or radioactive colloid\noccurs in less than 5%.",
        "B. The procedure has a high false-negative rate.",
        "C. There is no role in DCIS.",
        "D. Utilization of the technetium radiocolloid is\ncontraindicated in pregnancy.",
        "E. If used in patients undergoing neoadjuvant\nchemotherapy, the procedure must be\nperformed before initiating chemotherapy."
      ],
      "answer": "A",
      "explanation": "- Sentinel lymph node biopsy is typically indicated as an axillary staging procedure for patients with clinically node-negative breast cancer.\n- The success rate for identifying the sentinel nodes when using both a blue dye and radioactive colloid is 95% or higher, and the false-negative rate (inaccurately determining the axilla to be negative for metastatic cancer) is around 10%.\n- By definition, DCIS is noninvasive and therefore cannot be associated with positive nodes in the axilla.\n- However, when DCIS is found on core biopsy, the remaining lesion may contain invasive cancer, so sentinel node biopsy is recommended in cases where the upstage rate is highest (high grade DCIS) or if breast lymphatics will be removed/disrupted at the primary surgery (mastectomy or lumpectomy in upper outer quadrant of the breast) precluding performance of sentinel node biopsy at a second procedure if invasive cancer is unexpectedly found.\n- Radioactive technetium is low dose and has been observed as safe for use in pregnancy.\n- It is actually the blue dyes that require caution in pregnancy.\n- Lastly, identification and false-negative rates are still favorable after neoadjuvant chemotherapy is administered and therefore does not preclude performance of sentinel node after chemotherapy."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Which of the following is TRUE regarding radiotherapy for the treatment of early breast cancer?",
      "options": [
        "A. Radiotherapy should be performed if more\nthan three nodes are positive.",
        "B. Radiotherapy should be performed in addition\nto axillary lymph node dissection if more than\nthree nodes are positive.",
        "C. Whole breast radiotherapy is most effective\nwhen given concurrent with chemotherapy.",
        "D. Radiotherapy is less efficacious with small\ntumors compared with larger ones.",
        "E. Higher energy radiation exerts more damage\nto skin."
      ],
      "answer": "A",
      "explanation": "- Radiotherapy works by directly damaging DNA within cells, not by inducing ischemia.\n- It exerts most of its effect during the M phase of the cell cycle by inducing formation of free oxygen radicals.\n- As such, radiation therapy is more efficacious with smaller tumors that have a higher oxygen potential.\n- Higher energy radiation has a skin-preserving effect as the maximal ionizing potential is not reached until the radiation beam reaches deeper structures.\n- Additionally, it has been shown to be most effective when used sequentially after chemotherapy instead of concurrently.\n- Nearly all patients undergoing lumpectomy for invasive and noninvasive breast cancer are candidates for radiotherapy.\n- NSABP B17 established that radiotherapy significantly reduces local recurrence when administered after lumpectomy.\n- Postmastectomy radiotherapy is generally indicated for locally advanced disease (T4, 4-cm tumor size or greater, and 4 or more lymph nodes positive).\n- In general, positive margins should be excised and radiotherapy not relied upon to clear margins.\n- ACOSOG Z0011 trial demonstrated that patients with early invasive breast cancer (T1 and T2) undergoing breast conserving therapy do not need completion axillary dissection if the sentinel lymph node biopsy is positive as there is no difference in mortality."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is true regarding chemotherapy for the treatment of breast cancer?",
      "options": [
        "A. Neoadjuvant chemotherapy has been shown\nto have better outcomes for ER-positive,\nHER2-negative breast cancer compared with\nadjuvant chemotherapy.",
        "B. In patients with ER-negative, PR-negative,\nHER2-negative (triple negative) breast\ncancer, complete response to neoadjuvant\nchemotherapy is achieved in most patients.",
        "C. Responses to chemotherapy can be predicted\nby testing whether certain genes are being\nexpressed in cancer tissue.",
        "D. Chemotherapy is most effective in infiltrating\ncancers that have low Ki67 and S-phase fractions.",
        "E. Chemotherapy is indicated if the breast cancer\nis proven to be invasive."
      ],
      "answer": "C",
      "explanation": "- Chemotherapy plays an important role in treating occult distant metastatic disease in invasive cancer.\n- However, not all invasive cancers benefit from chemotherapy.\n- Those that are low-grade, small, lymph-node negative, and have low S-phase fractions (<5%) or Ki67 (<20%) (markers of proliferation) may not benefit.\n- Gene expression profile assays that test which genes are being expressed in cancer tissue have been able to categorize patients into groups that will likely benefit from chemo and those that will not.\n- Chemotherapy timed preoperatively versus postoperatively has the same survival outcome for all cancer subtypes.\n- However, newer research may be demonstrating benefits for triple negative and HER2-positive cancers.\n- In triple negative breast cancer, a complete pathologic response (no more tumor seen at surgery) after neoadjuvant chemotherapy is approximately 20% to 45%."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Which of the following is NOT a well-known treatment toxicity related to breast cancer therapy?",
      "options": [
        "A. Steatosis and steatohepatitis associated with\naromatase inhibitor therapy",
        "B. Lymphedema after radiotherapy alone",
        "C. Decreased cognitive and memory functions\nafter chemotherapy",
        "D. Irreversible numbness along the chest wall\nafter modified radical mastectomy",
        "E. Worsening vision due to cataract formation\nafter tamoxifen therapy"
      ],
      "answer": "A",
      "explanation": "- Radiotherapy in and of itself is a well-known cause of lymphedema, although it appears to be less than that of axillary dissection.\n- Chemotherapy often leads to alterations in cognitive function and memory.\n- Injury or interruption of the intercostal nerves during mastectomy and axillary dissection can lead to irreversible numbness along the chest wall.\n- An uncommon yet important side effect of tamoxifen is visual changes due to cataract formation.\n- Steatosis and steatohepatitis do not occur as a result of aromatase inhibitor therapy.\n- Both can occur after cytotoxic chemotherapy or tamoxifen."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is the TRUE regarding positive lymph nodes in breast cancer?",
      "options": [
        "A. Involvement of internal mammary lymph\nnodes is considered stage IV disease.",
        "B. Completion axillary lymph node dissection\nshould be performed if the sentinel lymph\nnode biopsy is positive.",
        "C. In a patient with a core biopsy-proven positive\nlymph node and no primary lesion detected\non mammogram or physical exam, axillary\nlymph node dissection and serial 6-month\nmammograms should be performed.",
        "D. Radiotherapy can be administered instead of\nperforming axillary lymph node dissection for\na positive lymph node that is nonpalpable.",
        "E. Axillary dissection is no longer necessary if\na 6-cm primary breast cancer and associated\n3-cm nodes have all disappeared on ultrasound\nimaging after completion of preoperative\nchemotherapy (i.e. complete response)."
      ],
      "answer": "D",
      "explanation": "- In general terms, having grossly positive axillary lymph nodes is an indication for axillary dissection.\n- However, the ACOSOG Z0011 trial established equivalent survival with axillary dissection and no axillary dissection in patients with early stage breast cancer undergoing lumpectomy and radiation therapy who have three or fewer positive nodes.\n- The AMAROS trial further established that women with early breast cancer and no clinically palpable nodes could undergo radiotherapy in place of axillary dissection if lymph nodes were determined to be positive.\n- However, for patients with locally advanced disease and palpable lymph nodes, axillary dissection remains an important component of treatment to prevent local recurrence.\n- In a patient with an isolated positive node, magnetic resonance imaging (MRI) looking for a primary is indicated, and then mastectomy is indicated if the MRI is negative.\n- Involvement of internal mammary lymph nodes represents advanced local disease not metastatic disease."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 52-year-old woman with a body mass index (BMI) of 39 is recommended to undergo a mastectomy for a 9-cm segmental mural distribution of calcifications that were shown to be DCIS on core needle biopsy. Physical exam and ultrasound of the axilla are negative. The patient has a small breast contour and desires reconstruction of her breast. In addition to sentinel node biopsy, which of the following would be the BEST management?",
      "options": [
        "A. Nipple-sparing mastectomy with immediate\ntissue expander placement",
        "B. Nipple-sparing mastectomy with delayed\nreconstruction",
        "C. Skin-sparing mastectomy with immediate\ntissue expander placement",
        "D. Skin-sparing mastectomy with delayed\nreconstruction",
        "E. Total mastectomy with delayed reconstruction\nafter adjuvant therapy"
      ],
      "answer": "C",
      "explanation": "- Nipple-sparing mastectomy is contraindicated in patients with extensive intraductal cancer, associated nipple discharge, Paget disease, or cancer within 2 cm distance of the nipple.\n- Whereas total mastectomy would be an oncologically sound operation, this patient desires reconstruction and has no contraindications to immediate placement of expanders and sparing the skin."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "A 48-year-old woman with a modified radical mastectomy, a 45-year-old woman reports new-onset weakness in the ipsilateral arm when pulling on a cord to adjust the blinds in her home. On examination, she has difficulty when attempting to internally rotate and adduct her arm. What is the best explanation for her deficits?",
      "options": [
        "A. Intentional transection of the intercostobrachial\nnerve",
        "B. Application of surgical clips across the long\nthoracic nerve",
        "C. Inadvertent transection of the thoracodorsal\nnerve",
        "D. Complete cautery injury to the supraclavicular\nnerve",
        "E. Retractor injury to the medial pectoral nerve"
      ],
      "answer": "C",
      "explanation": "- Modified radical mastectomy includes, by definition, a resection of level I and II axillary nodes along with the entire breast parenchyma under skin flaps.\n- Several important nerves reside in the axilla, injury to which can lead to significant motor and sensory deficits.\n- Avoidance of intraoperative use of neuromuscular blockade during anesthesia and careful identification of the long thoracic and thoracodorsal nerves are key to avoiding inadvertent injury.\n- The intercostobrachial nerve is the lateral cutaneous branch of the second intercostal nerve.\n- Resection does not lead to any motor loss, but it can cause loss of sensation over the medial aspect of the upper arm.\n- The long thoracic nerve courses along the lateral chest wall in the midaxillary line on the serratus anterior muscle to innervate it.\n- The serratus anterior muscle abducts and laterally rotates the scapula and holds it against the chest wall.\n- Injury to the long thoracic nerve results in a winged scapula.\n- The thoracodorsal nerve courses lateral to the long thoracic nerve on the latissimus dorsi muscle, following the course of the subscapular artery.\n- It innervates the latissimus dorsi muscle.\n- The latissimus dorsi muscle adducts, extends, and medially rotates the upper arm.\n- Injury to this nerve generally does not cause a major disability, but it can lead to difficulty in arm adduction and medial rotation.\n- Furthermore, preservation of this nerve and vessels is important if a subsequent latissimus dorsi flap is being considered.\n- The medial pectoral nerve runs lateral to or through the pectoral minor muscle, actually lateral to the lateral pectoral nerve, with both innervating the pectoralis minor and major muscles.\n- Injury to the medial pectoral nerve may lead to atrophy of the clavicular portion of the pectoralis muscles, resulting in atrophy of the pectoralis muscle.\n- The anterior branches of the supraclavicular nerve are sensory nerves that supply a limited area of skin over the upper aspect of the breast, and therefore injury would not result in a motor deficit."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A 35-year-old woman presents with burning pain and redness along the anterolateral right breast. On exam, a firm tender cord could be palpated just below the skin from the shoulder tracking down toward the lateral breast. Which of the following is TRUE regarding the initial management of this disease?",
      "options": [
        "A. Mammogram and ultrasound should be\nperformed.",
        "B. Systemic anticoagulation should be initiated.",
        "C. Antibiotics covering gram-positive bacterial\nstrains should be administered.",
        "D. A short course of corticosteroid therapy should\nbe prescribed for cases where the erythrocyte\nsedimentation rate (ESR) is elevated.",
        "E. An incisional biopsy of the skin should be\nperformed."
      ],
      "answer": "A",
      "explanation": "- Mondor disease is a thrombophlebitis involving one or more of the superficial anterior chest wall veins (lateral thoracic vein, thoracoepigastric vein, or the superficial epigastric vein).\n- Similar to superficial thrombophlebitis that presents elsewhere, it usually causes an acute onset of pain and tenderness.\n- It is a result of an inflammatory-thrombotic process and not an infectious or autoimmune disease.\n- Risk factors include recent trauma or surgery to the local area, heavy lifting, tight clothing, and underlying malignancy.\n- Mondor disease typically presents over the lateral aspect of the breast and eventually turns into a palpable cord or hard mass.\n- The veins most commonly involved include the lateral thoracic vein, the thoracoepigastric vein, and, less frequently, the superficial epigastric vein.\n- The disorder is benign, self-limited, and not itself malignant or a risk factor for breast cancer.\n- Mammography and ultrasound are typically performed to exclude underlying malignancy.\n- Otherwise, the diagnosis is largely clinical and biopsy is not necessary.\n- Treatment consists of nonsteroidal antiinflammatory drugs and warm compresses.\n- Antibiotics, systemic anticoagulation, and corticosteroids are not warranted."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "A 28-year-old lactating woman presents with a 2-day history of right breast pain and redness that is progressively worsening. On examination, a 4-cm area of skin adjacent to the nipple-areolar complex is erythematous and tender with some focal edema and no detectable fluctuance. Focused ultrasound confirms the absence of a fluid collection. The appropriate initial management would consist of:",
      "options": [
        "A. Ultrasound-guided core needle biopsy",
        "B. Cessation of breast-feeding and/or pumping",
        "C. Incision and drainage",
        "D. Oral antibiotics",
        "E. Mammography"
      ],
      "answer": "D",
      "explanation": "- Mastitis commonly complicates lactation and is characterized by erythema, warmth, and tenderness of the breast.\n- It can often be associated with fever and malaise.\n- The majority of patients present without an associated abscess.\n- The etiology is thought to be due to bacteria ascending in the ductal tree of the breast through the nipple, coupled with relative milk stasis from intermittent clogging of ducts and long intervals between feedings.\n- The initial treatment includes the administration of antibiotics covering S. aureus (dicloxacillin), hot compresses with breast massage, and continuation of breast-feeding or pumping to evacuate static milk.\n- Hand evacuation may be necessary if the breast is too tender to allow feeding or pumping.\n- Incision and drainage or percutaneous aspiration are usually not warranted in the absence of a clear area of fluctuance or a fluid collection seen on ultrasound.\n- Mammography is typically not helpful in the workup of mastitis, often resulting in false-positive findings (mass, skin thickening).\n- However, if symptoms and signs of redness and skin thickening persist, mammography and core needle biopsy with or without skin biopsy should be performed to rule out inflammatory breast carcinoma."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "A 58-year-old woman presents with a 10-cm right breast mass. She notes that it has been rapidly growing, and the weight of the mass causes her right breast to rest lower than her left. Pathology from a core needle biopsy revealed a fibroepithelial lesion with notable leaflike projections of the stroma. Which of the following statements is true of this lesion?",
      "options": [
        "A. Stromal hypercellularity is the pathologic\nfeature that typically distinguishes this lesion\nfrom fibroadenoma.",
        "B. It is a common aggressive growth pattern similar to breast cancer.",
        "C. Sentinel lymph node biopsy has become\nstandard in the management of borderline-\nmalignant disease.",
        "D. The addition of radiotherapy is routinely\nrecommended to prevent recurrence after\nlumpectomy.",
        "E. Most mastectomy as a means of\nrevision in order to achieve adequate\nmargins."
      ],
      "answer": "A",
      "explanation": "- The described lesion is a phyllodes tumor, also historically referred to as cystosarcoma phyllodes.\n- These tumors are rare, accounting for fewer than 1% of breast neoplasms, and consist of both an epithelial component and a cellular, spindle cell stromal component that forms a characteristic leaflike structure (hence the term phyllodes).\n- They are predominantly benign, but borderline malignant and malignant variants occur in up to 40% of cases.\n- Phyllodes tumors typically occur in women during the fifth decade of life and commonly present as a fast-growing, firm, mobile mass in the breast.\n- At large sizes, the contours of the tumor are often visible beneath a thin stretched layer of skin, and the size and weight of the tumor cause the breast to take on the shape of a \"teardrop.\"\n- On imaging, phyllodes tumors appear similar to fibroadenomas, with distinct well-circumscribed margins and macrolobulations.\n- Core needle biopsy is the standard for obtaining a tissue diagnosis, particularly in a woman over 40 years of age.\n- However, benign phyllodes tumors can still be difficult to distinguish from fibroadenoma with core sampling alone, most often being reported as a \"fibroepithelial lesion,\" which require excision in order to make the diagnosis.\n- Distinguishing features of benign phyllodes from fibroadenoma are largely based on stromal hypercellularity and morphology.\n- Recent studies suggest that the best way to distinguish the two lesions is by the proportion of individual long spindle nuclei (>30% is reliable for phyllodes tumors) amid dispersed stromal cells.\n- Excision with a clear margin of breast tissue is the treatment of choice for the vast majority of phyllodes tumors, even malignant ones as long as a margin greater than 1 cm is achievable.\n- For larger, borderline and malignant lesions, mastectomy may be required, but this is not common.\n- Borderline malignant and malignant forms of the disease are associated with high local recurrence rates and metastasis via a hematogenous route, most commonly to the lungs.\n- Therefore, sentinel node biopsy and axillary dissection are not indicated, given that phyllodes tumors very rarely metastasize to lymph nodes.\n- Radiotherapy is not generally used after lumpectomy (as it is in breast cancer) since phyllodes are most often benign and, even in malignant variants, radiotherapy has questionable benefit.\n- Chemotherapy has not been proven effective with these tumors and is typically not recommended."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "A 55-year-old woman was found on routine mammography to have a new, 17 mm, stellate lesion with a translucent area in the central portion. Which of the following best describes appropriate management of this lesion?",
      "options": [
        "A. Observation only, since the mammographic\nappearance is sufficient to make the diagnosis",
        "B. Repeat mammography in 6 months because\nthis lesion is probably benign (<2% risk of\nmalignancy), but short-interval imaging is\nwarranted to confirm",
        "C. MRI of the breast to confirm the diagnosis,\nthen observation",
        "D. Image-guided core needle biopsy followed\nby wire-localized excision, since this lesion is\nconsidered high risk",
        "E. Image-guided core needle biopsy, followed by\nwire-localized wide excision with a negative\nmargin since this lesion is malignant"
      ],
      "answer": "D",
      "explanation": "- Radial scars (RS) (<1 cm) and complex sclerosing lesions (CSL) (>1 cm) are, in and of themselves, benign and are classified as proliferative lesions without atypia (papillomatosis and sclerosing adenosis are two other examples).\n- As such, they are associated with a mildly increased risk of subsequent breast cancer (1.5–2 times normal).\n- These lesions can mimic carcinomas of the breast on mammography given their stellate appearance.\n- However, presence of a translucent central area of fat within the lesion is the classical finding on imaging.\n- Although these lesions have a specific appearance on mammography, core needle biopsy is necessary to exclude malignancy.\n- Histologically, RS and CSL are characterized by a fibroelastic core from which ducts and lobules radiate.\n- Though biopsy rarely reveals atypia, carcinoma-in-situ or invasive cancer, upstaging is not uncommon after excision.\n- Therefore when core biopsy demonstrates RS or CSL, excisional biopsy of the entire lesion is generally recommended.\n- It is notable that newer studies have suggested that excisional biopsy may not be necessary in cases where vacuum-assisted needle cores provide large volume biopsy specimens, atypical epithelial hyperplasia is absent, and when mammographic findings are consistent with histologic findings.\n- Regardless, it is important for the radiologist and pathologist to alert the surgeon to the presence of a radial scar due to its increased risk of associated and subsequent malignancy."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "A 50-year-old perimenopausal woman presents with three episodes of dark bloody discharge from her right nipple that stained her bra. This is most likely to be due to which of the following:",
      "options": [
        "A. Atypical ductal hyperplasia",
        "B. Paget disease",
        "C. Phyllodes tumor",
        "D. Ductal carcinoma in situ",
        "E. Intraductal papilloma"
      ],
      "answer": "E",
      "explanation": "- Intraductal papilloma is a benign intraepithelial tumor of the breast ductal tissues.\n- When it occurs as a single lesion, it is classified as a nonproliferative lesion of the breast and confers no subsequent increased risk of breast cancer (adenosis, fibrosis, and squamous/apocrine metaplasia are other examples).\n- A papilloma can grow as large as a few centimeters in diameter and most commonly presents with spontaneous, unilateral bloody or serosanguinous nipple discharge.\n- It is the most common cause of bloody discharge.\n- Although invasive and noninvasive carcinomas must be ruled out with diagnostic mammogram, focused ultrasound examination, and core needle biopsy, malignancy accounts for fewer than 10% of cases of bloody nipple discharge.\n- Treatment for intraductal papilloma associated with nipple discharge is duct excision.\n- The affected duct is localized on physical examination by digitally compressing around the areola until bloody discharge is elicited.\n- Lacrimal duct dilators are then used to dilate the opening of the duct, and methylene blue dye is injected to assist in excision of the appropriate tissue.\n- Ductography is often unnecessary but can further assist in identifying the location of the papilloma within the duct to help guide surgical excision.\n- Intraductal papillomas that are diagnosed on core needle biopsy can be wire localized and directly excised."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "A 50-year-old woman presents to her primary doctor with a palpable mass in the upper outer quadrant of her right breast. It has been present and unchanged for 3 months, and she has no personal or family history of breast or ovarian cancer. On examination, there is a 1.5-cm firm, non-tender mass with no associated skin or nipple abnormalities and no lymphadenopathy. Mammography is performed and there is no evidence of mass, asymmetry, or calcification. It is reported as normal. What is the next appropriate step?",
      "options": [
        "A. Observation, with repeat physical exam in 3\nmonths",
        "B. Order a repeat mammogram in 3 to 6 months",
        "C. Order MRI of the breast",
        "D. Order focused breast ultrasound",
        "E. Excision of the mass"
      ],
      "answer": "D",
      "explanation": "- It is important to note that mammography alone is insufficient to determine whether to perform further diagnostic workup of a palpable breast mass.\n- Reportedly up to 10% of palpable malignancies can be missed if reliant only on the results of a mammogram as a result of varying breast density because some breast cancers can be mammogram occult.\n- Therefore, choosing to observe, reevaluate or repeat the mammogram in 3 months would delay the diagnosis of a possible malignancy.\n- Ordering additional breast imaging is the standard approach when there is a palpable finding and the initial mammogram is negative.\n- Focused breast ultrasound is the recommended study to further assess the palpable area.\n- There is no role for MRI at this point given the information provided.\n- If the lesion is confirmed on ultrasound and is solid, core needle biopsy is then indicated.\n- All breast imaging reports follow a standardized reporting system and use a well-established lexicon of descriptive terms.\n- The Breast Imaging Reporting and Data System (BI-RADS) category classification for mammograms uses a 0- to 6-point scale as follows: 0, assessment incomplete and additional imaging required; 1, negative; 2, benign finding; 3, probably benign finding; 4, suspicious abnormality; 5, highly suspicious of malignancy; 6, known biopsy-proven malignancy.\n- Recommendations by category for nonpalpable findings are as follows: 0, should obtain additional studies (such as ultrasonography); 1 and 2, continue routine screening; 3, short-term follow-up mammogram in 6 months; 4, perform needle biopsy; 5, biopsy and treatment; 6, continue with treatment plan."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "MRI of the breast is indicated in which of the following scenarios?",
      "options": [
        "A. 45-year-old woman with atypical ductal\nhyperplasia in 1-cm group of calcifications in\nthe upper inner quadrant of her left breast",
        "B. 45-year-old, average-risk woman with focal\nbreast pain and normal mammogram and\nultrasound workup",
        "C. 45-year-old woman with fibrocystic changes\non biopsy of her breast and infiltrating\ncarcinoma found in an ipsilateral axillary\nnode",
        "D. 45-year-old woman with 2-cm area of DCIS\nwith comedo necrosis",
        "E. 45-year-old woman with lobular carcinoma in\nsitu in a 1-cm group of microcalcifications in\nthe upper outer quadrant of her left breast"
      ],
      "answer": "C",
      "explanation": "- MRI has very few absolute indications for diagnostic workup of breast lesions.\n- Perhaps the most established is evaluating for a primary breast cancer in a patient with known nodal metastasis and no obvious lesion within the breast.\n- Having ADH or LCIS in a group of calcifications would require wire-localized excisional biopsy, and MRI has no role.\n- A focus of DCIS requires wide excision, followed by adjuvant treatments.\n- In dense breasts, there could be a potential role for MRI to assess extent of disease.\n- MRI does not have a role in the evaluation of breast pain."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "Which of the following lesions found on core needle biopsy does not require excisional biopsy?",
      "options": [
        "A. Atypical lobular hyperplasia",
        "B. Flat epithelial atypia",
        "C. Radial scar",
        "D. Lobular carcinoma in situ (LCIS)",
        "E. Adenosis with apocrine metaplasia"
      ],
      "answer": "E",
      "explanation": "- The rationale for recommending excisional biopsy of a lesion after core biopsy result showing a high-risk pathology such as atypical ductal/lobular hyperplasia, flat epithelial atypia, radial scar, and LCIS is explained by the phenomenon of \"upstaging\" from high risk to malignancy.\n- Core biopsy inherently has a sampling error associated with it since only a portion of the lesion is removed during biopsy.\n- When the remaining portion of the lesion is removed during excisional biopsy, a more significant lesion is often found.\n- In the list provided, all of the options except “E” are high-risk lesions associated with upstage rates close to 20%.\n- Adenosis and apocrine metaplasia are two of the histologic findings associated with fibrocystic changes.\n- These do not need to be routinely removed."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "A 45-year-old woman undergoes wire-localized excisional biopsy of a 12-mm group of microcalcifications that could not be biopsied by percutaneous core needle because of their posterior location. Pathology reveals LCIS. Which of the following is the most appropriate NEXT step in management?",
      "options": [
        "A. Bilateral prophylactic mastectomies, with or\nwithout reconstruction",
        "B. If the margins of excision are negative,\ninitiation of radiotherapy",
        "C. If the margins of excision are positive, re-\nexcision of the affected margin",
        "D. Performance of sentinel lymph node biopsy to\nstage the ipsilateral axilla",
        "E. Initiation of daily tamoxifen for 5 years"
      ],
      "answer": "E",
      "explanation": "- LCIS is a lobular neoplasia that is noninvasive and originates from the terminal lobular region of the lactiferous ducts.\n- Unlike ductal carcinoma in situ, it is often not associated with calcifications and is instead most often an incidental finding on biopsy.\n- There are two subtypes, classic and pleomorphic.\n- LCIS is not considered to be a premalignant lesion (i.e., does not itself progress to cancer), and therefore wide excision with negative margins is not necessary and neither is radiotherapy.\n- It is a noninvasive lesion and does not require nodal evaluation.\n- It is, however, a marker for the subsequent development of cancer, most often invasive, in either the ipsilateral or contralateral breasts.\n- This risk is reportedly 7 to 10 times the average woman's risk, but not high enough to warrant bilateral prophylactic mastectomy.\n- Management of LCIS after excision is largely preventative, with either tamoxifen, raloxifene, or aromatase inhibitor, depending on menopausal status."
    },
    {
      "id": 32,
      "question_type": "mcq",
      "question": "A 48-year-old female is being evaluated for a new left breast mass that was found on mammogram. She reports having 2 alcoholic drinks per day, is an active smoker with a 5-pack year smoking history, and has a mother who was diagnosed with breast cancer at age 55. Her past medical history is significant for atypical ductal hyperplasia that was excised 6 years previously. Which of the following factors is associated with the highest risk of breast cancer in this patient?",
      "options": [
        "A. Age",
        "B. Mother with a history of breast cancer",
        "C. Daily alcohol intake",
        "D. Smoking",
        "E. History of atypical ductal hyperplasia"
      ],
      "answer": "E",
      "explanation": "- The most common risk factors for breast cancer are female sex, age, family history of breast cancer (specifically a primary relative), genetic mutations (BRCA genes, PALB2, p53), personal history of breast cancer, receiving therapeutic dose of radiation to chest wall before age 30, prior breast biopsy showing ductal or lobular atypia or lobular carcinoma-in-situ, obesity, first pregnancy after age 30, menses beginning before age 12 or ending after age 55, daily alcohol intake of 2 drinks or more, smoking, physical inactivity, and having dense breast tissue on mammography.\n- The highest risk is associated with gene mutation carriers, where lifetime risk can be upwards of 80%.\n- In the scenario presented above, the patient's age does not particularly put her at risk, since most breast cancers occur after the age of 55.\n- A woman in her 40s has a breast cancer risk of 1 in 69 compared to 1 in 29 for a woman in her 60s.\n- Having a primary relative with breast cancer (without associated gene mutation) elevates a woman's personal risk by a factor of 2.\n- Daily alcohol intake of 3 drinks or more increases a woman's risk by 1.5 times.\n- The effect of smoking on breast cancer risk remains controversial.\n- It is generally understood, but not definitively proven, that smoking is a significant risk factor and, as such, smoking cessation is usually recommended to reduce risk.\n- Having a history of ductal or lobular atypia is associated with 3.5 to 5 times increased risk."
    },
    {
      "id": 33,
      "question_type": "mcq",
      "question": "Which histologic type of DCIS is most likely to progress to invasive ductal cancer?",
      "options": [
        "A. Comedo",
        "B. Micropapillary",
        "C. Papillary",
        "D. Cribriform",
        "E. Solid"
      ],
      "answer": "A",
      "explanation": "- DCIS is further classified histologically into micropapillary, papillary, cribriform, solid, and comedo subtypes.\n- The former three being considered less aggressive than the latter two.\n- The comedo subtype is considered the most aggressive, and because cells turn over more quickly, they can quickly outgrow their blood supply and the center of the duct may become plugged with dead cellular debris, often referred to as comedo necrosis.\n- Comedo DCIS tends to also have a higher cytologic grade and is more likely to produce microcalcifications that deposit around necrotic tissue."
    },
    {
      "id": 34,
      "question_type": "mcq",
      "question": "A 45-year-old woman undergoes wire-localized excision of an area of biopsy-proven, intermediate grade DCIS in the upper outer quadrant of her left breast. The final pathology shows no evidence of invasion, but there is DCIS involving the deep margin (i.e. positive margin). The NEXT appropriate step is:",
      "options": [
        "A. No further surgery; should initiate radiation\ntherapy",
        "B. No further surgery; should initiate tamoxifen",
        "C. Re-excision of the deep margin only",
        "D. Re-excision of the deep margin and sentinel\nnode biopsy",
        "E. Mastectomy"
      ],
      "answer": "C",
      "explanation": "- The SSO-ASTRO Consensus guideline was published in 2014 defining a negative margin as \"no ink on tumor\" and provided evidence that re-excisions should be performed if margins are positive according to this definition.\n- Also, NCCN guidelines suggest re-excision of margins less than 1 mm for DCIS.\n- Radiotherapy alone or tamoxifen alone would be inadequate to treat a positive margin.\n- Sentinel node would only be indicated if the lumpectomy demonstrated invasive cancer.\n- Mastectomy for positive margins is reserved for cases where multiple margins are positive or when margins remain positive after multiple re-excisions."
    },
    {
      "id": 35,
      "question_type": "mcq",
      "question": "A woman with a history of glioblastoma, left lower limb osteosarcoma as a teenager and breast cancer at the age of 40 is likely to have which of the following:",
      "options": [
        "A. Cowden syndrome",
        "B. Li-Fraumeni syndrome",
        "C. Peutz-Jeghers syndrome",
        "D. Ataxia-telangiectasia",
        "E. BRCA2 mutation"
      ],
      "answer": "B",
      "explanation": "- All of the choices provided are inherited disorders that carry an increased lifetime risk of developing breast cancer.\n- Cowden syndrome is caused by a mutation in PTEN and is characterized by multiple hamartomatous lesions as well as cancer of the breast, endometrium, kidney, and thyroid.\n- Li-Fraumeni syndrome is caused by mutations in p53 and is associated with breast cancer, sarcomas, glioblastoma, and adrenocortical cancers.\n- Peutz-Jeghers syndrome is caused by mutations in STK11 gene and classically is associated with the presence of hyperpigmented mucocutaneous spots, bowel hamartomas, and cancers of the gastrointestinal tract, pancreas, liver, breast, endometrium, and ovary.\n- Ataxia-telangiectasia is caused by mutation of the ATM gene and, along with neurologic and vasculocutaneous findings for which this disorder is named, it carries an increased risk of breast cancer, lymphoma, and leukemia.\n- BRCA2 mutations are associated with breast, ovarian, fallopian tube, pancreas, prostate, and skin (melanoma) cancers."
    },
    {
      "id": 36,
      "question_type": "mcq",
      "question": "A 21-year-old woman with a strong family history of breast cancer has just been told she is a carrier of a BRCA1 germline mutation. Which of the following is TRUE regarding this mutation?",
      "options": [
        "A. Breast cancers associated with BRCA1 mutations\nare typically hormone receptor negative.",
        "B. BRCA1 mutations are considered \"gain of\nfunction\" mutations.",
        "C. BRCA mutations account for 25% of all breast\ncancers.",
        "D. Her lifetime risk of developing breast cancer is\naround 40% and can be reduced by half if she\ntakes tamoxifen.",
        "E. Male relatives of the patient have a 100-fold\nrisk of developing breast cancer if they are\ncarriers of the mutation."
      ],
      "answer": "A",
      "explanation": "- Hereditary breast cancers (caused by mutations in BRCA, PTEN, ATM, STK11, PALB2, and p53 genes) collectively account for only 10% of all breast cancers.\n- BRCA mutations accounting for 25% of all hereditary breast cancers.\n- The mutations result in \"loss of function\" of the tumor suppression that BRCA genes normally provide.\n- BRCA1 mutations confer a 55-65% lifetime risk for breast cancer and a 35-45% lifetime risk for ovarian cancer.\n- BRCA2 mutations confer a lifetime risk of 40-55% for breast cancer and a 15-25% lifetime risk for ovarian cancer.\n- Breast cancers in women with BRCA1 mutations tend to be hormone receptor negative and are often triple negative.\n- Therefore, the use of tamoxifen as chemoprevention is not generally recommended to reduce risk.\n- Prophylactic bilateral mastectomy is the risk-reducing strategy most recommended, resulting in 90% overall risk reduction.\n- Male breast cancer risk is typically elevated to 100-fold risk in individuals who have BRCA2 mutations, not BRCA1."
    },
    {
      "id": 37,
      "question_type": "mcq",
      "question": "Which of the following is TRUE regarding the histologic subtypes of breast cancer?",
      "options": [
        "A. Half of breast cancers are invasive ductal\ncarcinoma, and the other half are invasive\nlobular carcinoma.",
        "B. Tubular carcinoma is rarely associated with\naxillary metastasis and survival approaches\n100%.",
        "C. Papillary carcinoma is an aggressive form\nof breast cancer with a high rate of axillary\nmetastasis.",
        "D. Mucinous (colloid) carcinoma is associated\nwith BRCA1 mutation.",
        "E. Medullary carcinoma is a form of lobular\ncancer that appears well differentiated\nhistologically."
      ],
      "answer": "B",
      "explanation": "- Approximately, 1 in 10 invasive breast cancers are lobular, meaning that 80% or more are ductal in origin.\n- Of the invasive ductal cancers, several histologic subtypes have been described based on histologic appearance and growth patterns.\n- Tubular carcinomas comprise only 2% of all invasive breast cancers, they tend to be well-differentiated, and they have the most favorable prognosis.\n- Papillary carcinomas comprise fewer than 1% of all invasive breast cancers and tend to occur in postmenopausal women.\n- Generally, they have a favorable prognosis and few metastasize regionally or systemically.\n- On the other hand, micropapillary carcinomas (similar name) are aggressive.\n- Mucinous, or colloid, carcinomas account for about 5% of invasive breast cancers and are characterized by the presence of a mucin component.\n- They tend to be well-differentiated, with low rates of metastasis.\n- Medullary carcinomas, not mucinous, are associated with BRCA1 mutations.\n- These cancers appear histologically to be poorly differentiated with aggressive features but they generally have a favorable prognosis."
    },
    {
      "id": 38,
      "question_type": "mcq",
      "question": "A 56-year-old woman is diagnosed with a 2 cm breast mass, which is estrogen and progesterone receptor negative with no overexpression of HER2/neu. Her axillary exam is normal. Aside from axillary evaluation by sentinel lymph node biopsy, what is the most appropriate recommendation for breast cancer therapy?",
      "options": [
        "A. Lumpectomy alone",
        "B. Lumpectomy plus hormonal therapy",
        "C. Lumpectomy plus radiotherapy",
        "D. Lumpectomy plus chemotherapy",
        "E. Lumpectomy plus radiotherapy and\nchemotherapy"
      ],
      "answer": "E",
      "explanation": "- This question addresses the appropriate adjuvant therapy for early stage triple-negative breast cancer.\n- First, all patients for whom lumpectomy is performed for an invasive cancer should undergo radiotherapy to reduce local recurrence and achieve similar survival outcome to mastectomy.\n- Second, hormonal therapy is not indicated in patients who are hormone receptor negative.\n- Chemotherapy is indicated for all triple negative breast cancer because of the more aggressive nature of the disease and lack of other systemic therapy options.\n- Taken together, this patient requires the last option of radiotherapy and chemotherapy, without hormonal therapy."
    },
    {
      "id": 39,
      "question_type": "mcq",
      "question": "Which of the following patients with a 1.5-cm invasive ductal breast cancer would be the most appropriate for breast conserving therapy?",
      "options": [
        "A. 33-year-old woman who is 10 weeks pregnant\nat diagnosis",
        "B. 58-year-old woman who has a history of\nlumpectomy in the same breast for previous\nT1N0 breast cancer",
        "C. 55-year-old woman with ipsilateral palpable\nlymph nodes that appear abnormal on\nultrasound",
        "D. 52-year-old woman with scleroderma",
        "E. 50-year-old woman with synchronous,\nmulticentric ipsilateral invasive lobular\ncancer"
      ],
      "answer": "C",
      "explanation": "- Breast conservation, by way of lumpectomy, can be adequately performed to treat T1 and smaller T2 breast cancers as long as adjuvant radiotherapy is administered to reduce the risk of local recurrence.\n- Contraindications to receiving radiotherapy therefore drive the contraindications of having a lumpectomy.\n- Radiotherapy cannot be safely administered in pregnancy, so women who are diagnosed in their first 2 semesters are often recommended mastectomy.\n- Women in their third trimester can often undergo operative therapy and wait until after childbirth to initiate radiotherapy.\n- Women with locally recurrent breast cancer, where radiation therapy was previously completed, are also typically advised to undergo mastectomy because a second round of radiotherapy to the same breast would exceed maximal recommended doses.\n- Active connective tissue disorders, such as scleroderma, may lead to increases in radiotherapy-related complications and therefore are considered relative to absolute contraindications to radiation.\n- Multicentric cancers (being located in separate quadrants of the breast) can also preclude lumpectomy, particularly if there is insufficient breast tissue to allow for two separate wide excisions.\n- It is important to note that multifocal cancers refer to multiple foci of breast cancer in the same quadrant and are amenable to breast-conserving therapy.\n- The best choice is the woman with ipsilateral involved nodes because axillary dissection is performed separately and does not limit the ability to perform breast conservation."
    },
    {
      "id": 40,
      "question_type": "mcq",
      "question": "Which of the following is the most important predictor of 10-year survival for breast cancer?",
      "options": [
        "A. Primary tumor size",
        "B. Histologic grade",
        "C. Total number of positive lymph nodes",
        "D. Estrogen-receptor status",
        "E. Age at time of diagnosis"
      ],
      "answer": "C",
      "explanation": "- Large tumor size, poor histologic grade, and estrogen-receptor status can certainly denote a poorer prognosis but the strongest predictor is the presence of regional metastatic disease.\n- Younger patients also tend to have more aggressive, higher grade, receptor-negative breast cancers, but nodal status is still more predictive.\n- In more recent years, gene expression profiles have surpassed nodal status in the ability to predict cancer recurrence (i.e., need for systemic therapy)."
    },
    {
      "id": 41,
      "question_type": "mcq",
      "question": "A 55-year-old woman presents with 1 month of breast erythema and swelling. On physical examination and mammogram, there is no evidence of a breast mass. However, there is diffuse skin thickening and edema associated with a 3-cm lymph node in the axilla. A trial of broad-spectrum antibiotics has been ineffective. A core needle biopsy reveals infiltrating ductal carcinoma that is 10% estrogen receptor positive and HER2/neu negative. Which of the following statements is TRUE regarding her management?",
      "options": [
        "A. Tamoxifen should be initiated immediately.",
        "B. Modified radical mastectomy should be\nperformed as soon as possible to increase\nchances of survival.",
        "C. Radiation therapy should be performed\nconcurrently with chemotherapy to improve\nresponse rates.",
        "D. Chemotherapy should be initiated\nimmediately.",
        "E. Antibiotics should be continued because of the\ninfectious signs."
      ],
      "answer": "D",
      "explanation": "- Inflammatory breast cancer comprises only 1% of all breast cancers and is characterized by erythema and skin edema (called peau d'orange) that result from malignant obstruction of subdermal lymphatics.\n- It is often mistaken initially with mastitis, and failure to respond to conventional antibiotic therapy is an indication to obtain tissue for analysis.\n- Absence of a palpable mass is common; therefore, biopsy should be performed of the abnormal skin and abnormal lymph nodes to confirm the diagnosis.\n- The best prognosis results from early treatment with systemic chemotherapy (i.e. neoadjuvant chemotherapy) followed by either surgery or radiotherapy depending on resectability.\n- The surgical therapy of choice is modified radical mastectomy because there is no role for sentinel node biopsy in inflammatory cancer or in patients with clinically positive nodes.\n- Concurrent chemotherapy and radiotherapy have been shown to be inferior to sequential therapy.\n- There is no role to continue antibiotics because the erythema is due to the inflammatory cancer, not ongoing infection.\n- The 5-year survival rate is still only 30% to 50%."
    },
    {
      "id": 42,
      "question_type": "mcq",
      "question": "Batson plexus provides a potential metastatic route of breast cancer to:",
      "options": [
        "A. Supraclavicular nodes",
        "B. Bone",
        "C. Liver",
        "D. Adrenal glands",
        "E. Lung"
      ],
      "answer": "B",
      "explanation": "- Batson plexus is a venous network that runs in the paravertebral space and drains abdominopelvic and thoracic regions.\n- The veins are valveless and therefore have been implicated in the metastatic spread of prostate, breast, and colon malignancies to bone, particularly the pelvis, vertebral bodies, and skull.\n- The Batson venous plexus also explains why patients may have bone metastases without first having pulmonary metastases because tumor cells enter the plexus and deposit in the vertebrae without first passing through the lungs."
    },
    {
      "id": 43,
      "question_type": "mcq",
      "question": "A 65-year-old woman underwent left modified radical mastectomy followed by chemotherapy and radiotherapy for a stage II breast cancer. When she was 40 years old, she has had long-standing swelling of her ipsilateral arm and recently developed raised purplish nodules along the anterior upper arm. Which of the following is TRUE regarding treatment of this lesion?",
      "options": [
        "A. Treatment of this condition is largely\nconservative because it is a slow-growing\ntumor that rarely causes mortality.",
        "B. Bevacizumab (angiogenesis inhibitor) plus\npaclitaxel has emerged as the treatment of\nchoice.",
        "C. Concurrent Adriamycin-based chemotherapy\nand radiation are considered the optimal\ntreatment strategy, with surgical resection\nbeing reserved only for those with large\nresidual tumors.",
        "D. Chemotherapy should be initiated immediately.",
        "E. Mastectomy is commonly required to treat this\ncondition."
      ],
      "answer": "D",
      "explanation": "- Purple nodular lesions occurring on an arm with long-standing lymphedema present is angiosarcoma, or lymphangiosarcoma, otherwise referred to as Stewart-Treves syndrome.\n- Classically, the patient has undergone axillary dissection and radiotherapy for cancer treatment and develops lymphedema.\n- The local immune response is impaired, allowing for development of this aggressive malignancy within the breast or ipsilateral arm.\n- The diagnosis is established via open biopsy because fine-needle aspiration alone may not be sufficient.\n- Characteristic features include pleomorphic nuclei, frequent mitosis, necrosis, and stacking up of the endothelial cells lining neoplastic vessels (particularly with high-grade lesions).\n- The tumor is highly aggressive with a propensity for early metastasis to the lungs.\n- Treatment consists of early wide surgical debridement, which may require amputation of the limb.\n- Prognosis is poor with most patients surviving less than 2 years."
    },
    {
      "id": 44,
      "question_type": "mcq",
      "question": "A 33-year-old female detects a 3-cm mass in her left breast when she is 16 weeks pregnant. Biopsy reveals infiltrating ductal carcinoma that is estrogen, progesterone, and HER2 negative. Which of the following is TRUE regarding breast cancer staging and therapy in this patient?",
      "options": [
        "A. Sentinel lymph node biopsy using a radiotracer\nto stage the axilla is contraindicated in\npregnancy.",
        "B. CT scan of the chest and abdomen to stage\nbreast cancer is contraindicated in pregnancy.",
        "C. Chemotherapy, such as Adriamycin, can be\nadministered cautiously during the\nsecond and third trimesters.",
        "D. Radiotherapy can be administered cautiously\nduring the second and third trimesters.",
        "E. Hormone therapy can be administered\ncautiously during the second and third\ntrimesters."
      ],
      "answer": "C",
      "explanation": "- Breast cancer during pregnancy is rare, with a reported incidence of 1 in 3000 pregnant women.\n- Stage for stage, the prognosis appears to be the same as for nonpregnant women, although pregnant women tend to present with more advanced disease given the difficulty of distinguishing malignant changes from physiologic changes of breast tissue in pregnancy.\n- Therapies for breast cancer in pregnancy vary depending on the trimester.\n- Surgery and chemotherapy are generally considered safe in the second and third trimesters of pregnancy.\n- On the other hand, radiotherapy and hormonal therapy are contraindicated in all trimesters of pregnancy.\n- Therefore, surgical therapy that is dependent on radiotherapy, such as lumpectomy, is typically only performed well into the third trimester, with radiotherapy being performed after delivery.\n- In regard to staging, sentinel lymph node biopsy is generally considered safe using radiotracer alone (without a blue dye), obviating the need for axillary dissection when the axilla is clinically negative.\n- The decision to perform CT scan is based on the pretest probability of metastasis and contribution to decision-making.\n- In general, excess radiation is avoided, but CT is not absolutely contraindicated."
    },
    {
      "id": 45,
      "question_type": "mcq",
      "question": "A 58-year-old postmenopausal woman with a history of right breast cancer presents with a new 1.2-cm nodule within the scar of her lumpectomy incision. Her prior therapy consisted of a negative sentinel node biopsy, radiotherapy, and chemotherapy, and she is currently taking tamoxifen. Core needle biopsy reveals recurrent infiltrating ductal carcinoma that is hormone receptor positive and HER2 negative. Which of the following is TRUE regarding her treatment?",
      "options": [
        "A. Axillary dissection is required because the\npatient has already had a sentinel lymph node\nbiopsy at her prior operation.",
        "B. Neoadjuvant (preoperative) chemotherapy\nshould be considered first in order to improve\nthe chances of achieving breast conservation.",
        "C. Tamoxifen should be continued for an\nadditional 5 years after operative excision to\nprevent another recurrence.",
        "D. The patient should undergo BRCA testing to\ndetermine whether or not she is a mutation\ncarrier.",
        "E. She will require mastectomy as her definitive\nsurgical management."
      ],
      "answer": "E",
      "explanation": "- In breast cancer local recurrence, the receipt of prior radiotherapy precludes the option of breast conservation the second time around.\n- Therefore, performance of neoadjuvant chemotherapy to achieve lumpectomy would not be recommended because a second course of radiotherapy would exceed dose limits.\n- Therefore, mastectomy is routinely indicated in local recurrence after lumpectomy and whole breast radiation.\n- Repeat sentinel node biopsy has been shown to have adequate identification and false-negative rates, so axillary dissection can usually be avoided in this group if the lymph nodes remain clinically negative.\n- Breast cancer recurrence is a different issue than having two separate primary breast cancers in one's lifetime.\n- Typically, occurrence of cancer within a prior surgical incision is indicative of local recurrence and testing for gene mutations would not be indicated.\n- Lastly, the local recurrence occurred while the patient was taking tamoxifen, so the patient should preferably be switched to a different agent.\n- Given her postmenopausal status, aromatase inhibitor would be a better option."
    },
    {
      "id": 46,
      "question_type": "mcq",
      "question": "A 65-year-old woman presents with an eczematoid rash involving her right nipple and extending onto the areola. The rash has not resolved despite daily applications of steroid cream. Other than the skin changes on the nipple, the physical examination of the breast is unremarkable. Which of the following is TRUE regarding this condition?",
      "options": [
        "A. If mammography is benign, steroid cream\nshould be continued, possibly at a higher\ndose.",
        "B. Shave biopsy is the preferred biopsy technique\ngiven the involvement of the nipple.",
        "C. Nipple discharge is nearly always present,\nand cytologic examination of the discharge is\nfrequently diagnostic for this disorder.",
        "D. This lesion is precancerous and associated\nwith 7 to 10 times increased risk of developing\nbreast cancer in the future.",
        "E. Mastectomy is commonly required to treat this\ncondition."
      ],
      "answer": "E",
      "explanation": "- Paget disease of the breast is an intraepithelial invasion of Paget cells (large, pale vacuolated cells) at the nipple surface causing an eczematoid appearance that is often confused for a contact dermatitis.\n- Failure to respond to topical treatments should raise concern for Paget disease, and full-thickness skin biopsy is the biopsy method of choice.\n- Nipple discharge is rarely present, and cytologic evaluation of ductal fluid has no role in the diagnostic evaluation since the Paget cells are within the epithelial layer.\n- Paget disease is not a precancerous lesion but instead is often simultaneously associated with extensive ductal carcinoma in situ or invasive ductal cancer extending deep to the visible lesion.\n- Paget disease is most commonly treated with mastectomy given the extent of the underlying cancer."
    },
    {
      "id": 47,
      "question_type": "mcq",
      "question": "Which of the following is TRUE of breast lymphoma?",
      "options": [
        "A. Primary breast lymphoma is predominantly a\nT-cell lymphoma.",
        "B. Secondary breast lymphomas are much more\ncommon than primary breast lymphoma.",
        "C. Primary breast lymphoma does not respond\nwell to chemotherapy that is standardly used\nfor nonbreast lymphoma.",
        "D. Breast lymphoma has a predilection for central\nnervous system recurrence.",
        "E. Treatment of breast lymphoma tends to require\nmastectomy with node dissection in most cases."
      ],
      "answer": "D",
      "explanation": "- Breast lymphoma is a rare disease.\n- The majority of cases are B-cell lymphomas, and the most common type is diffuse large B-cell lymphoma (40-70%).\n- Breast lymphomas are equally divided into primary and secondary.\n- Treatment depends on whether the lesion is localized or diffuse as well as on the grade of lymphoma.\n- With localized and low-grade lymphomas, primary excision may be all that is necessary, while standard combination therapy with CHOP (cyclophosphamide, doxorubicin, vincristine, prednisone) along with radiation therapy is recommended for intermediate- or high-grade lymphoma.\n- Several studies have noted an unusual predilection for distant dissemination for breast lymphoma to the central nervous system."
    },
    {
      "id": 48,
      "question_type": "mcq",
      "question": "The primary serious adverse reaction to trastuzumab that requires monitoring is which of the following?",
      "options": [
        "A. Hepatic toxicity",
        "B. Renal toxicity",
        "C. Cardiac toxicity",
        "D. Pulmonary toxicity",
        "E. Bone marrow toxicity (aplastic anemia)"
      ],
      "answer": "C",
      "explanation": "- Herceptin (trastuzumab) is a humanized IgG1 kappa monoclonal antibody that selectively binds with high affinity to the epidermal growth factor receptor 2 (HER2) protein.\n- Overexpression of HER2/neu (found in approximately 15-20% of breast cancers) is associated with a worse prognosis and an increased risk of recurrence but provides a specific target for the treatment of breast cancer.\n- Trastuzumab is associated with cardiac failure manifesting as a decreased left ventricular ejection fraction (LVEF).\n- Thus, serial assessments of the LVEF need to be performed while administering trastuzumab, particularly if given in conjunction with other agents that are cardiotoxic (such as anthracyclines)."
    }
  ]
}
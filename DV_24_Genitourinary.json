{
  "chapter_name": "Genitourinary 24",
  "questions": [
    {
      "id": "1",
      "question_type": "mcq",
      "question": "Which of the following is true regarding renal anatomy?",
      "options": [
        "A. The renal vein is posterior to the renal artery.",
        "B. The left renal vein can be ligated without irreversible renal damage.",
        "C. Glisson capsule surrounds the kidney.",
        "D. The left renal vein crosses posterior to the aorta.",
        "E. The renal arteries are supplied by the hypogastric artery."
      ],
      "answer": "B",
      "explanation": "- Gerota capsule surrounds the kidney, while Glisson capsule surrounds the liver.\n- Both renal arteries originate from the abdominal aorta.\n- The renal vein is the most anterior structure at the renal hilum, the renal pelvis is the most posterior structure, and the renal artery is between the two.\n- The right renal vein is short and drains directly into the inferior vena cava (IVC).\n- The longer left renal vein is joined by collateral vessels before entering the IVC.\n- The left renal vein is the preferred side for a donor kidney.\n- The left renal vein is joined superiorly by the left adrenal vein, inferiorly by the left gonadal vein, and posteriorly by the left lumbar vein.\n- The left renal vein can be ligated distally (close to the IVC) without irreversible renal damage or hydronephrosis, as venous drainage can still occur via collaterals.\n- The right renal artery passes posterior to the IVC, while the left renal vein passes anterior to the aorta.\n- A retroaortic left renal vein is a rare variant that can cause problems during infrarenal aortic surgery due to its susceptibility to injury and difficulty in repair."
    },
    {
      "id": "2",
      "question_type": "clinical_scenario",
      "question": "A 57-year-old male presents to the emergency department (ED) with a severe headache that started suddenly. His systolic blood pressure is 220 mm Hg which improves with labetalol. He does not have any medical problems but reports some scrotal discomfort over the past month. On exam, his left testicle has a mass that feels like a \"bag of worms.” When he lies supine, the mass does not disappear. Urinalysis demonstrates 18 red blood cells per high power field. Which of the following is the best next step in management?",
      "options": [
        "A. Computed tomography (CT) of the head",
        "B. Testicular ultrasound",
        "C. CT of the abdomen/pelvis",
        "D. Renal ultrasound",
        "E. Reassurance and referral to primary care physician to begin antihypertensives"
      ],
      "answer": "C",
      "explanation": "- Scrotal discomfort with a mass feeling like a \"bag of worms\" that does not disappear supine suggests a varicocele.\n- A scrotal mass that disappears supine and transilluminates is likely a hydrocele.\n- An acute-onset left-sided varicocele in an adult is concerning for IVC obstruction, with renal cell carcinoma (RCC) being the most common cause.\n- The classic triad for RCC includes flank mass, flank pain, and hematuria, though less than 10% of patients present with all three.\n- RCC can present with paraneoplastic syndromes such as hypertension (due to renin secretion), hypercalcemia (due to PTH-related peptide secretion), polycythemia (due to erythropoietin secretion), hypoglycemia (due to insulin secretion), and hepatic dysfunction (Stauffer's syndrome), all of which resolve with RCC treatment.\n- About 40% of RCC patients have elevated renin levels.\n- Risk factors for RCC include smoking, alcohol, obesity, cystic kidney disease, and diabetes.\n- The best next step is a CT scan of the abdomen/pelvis with a urogram phase to evaluate for a renal mass and visualize the upper urinary tracts.\n- Although most renal tumors are metastatic (typically from breast cancer), RCC is the most common primary renal tumor.\n- The lung is the most frequent site of distant spread.\n- Tissue diagnosis is required before surgical intervention.\n- Patients with resectable disease without distant spread may undergo partial nephrectomy for smaller tumors or radical nephrectomy for larger tumors or those with local invasion."
    },
    {
      "id": "3",
      "question_type": "clinical_scenario",
      "question": "A 24-year-old male is brought to the ED after a motor vehicle collision. He has no complaints, and his imaging is negative for any traumatic injuries. His urinalysis is positive for nitrite and leukocyte esterase with some bacteria identified but no squamous cells present. Which of the following is the best next step in management?",
      "options": [
        "A. Discharge home",
        "B. Renal ultrasound",
        "C. Renal ultrasound and post-void residual bladder volume",
        "D. Renal ultrasound, post-void residual bladder volume, and cystoscopy",
        "E. Renal ultrasound, post-void residual bladder volume, cystoscopy, and 7 day course of oral antibiotics"
      ],
      "answer": "A",
      "explanation": "- Asymptomatic bacteriuria is defined by the presence of bacteria or markers (positive leukocyte esterase, nitrites) in a properly collected urinalysis, without signs or symptoms of a urinary tract infection (e.g., frequency, urgency, dysuria).\n- Adult patients with asymptomatic bacteriuria generally do not require treatment, with exceptions for pregnancy and those undergoing urologic intervention (e.g., prostatectomy, prostate biopsy).\n- Symptomatic patients, in contrast, always require treatment.\n- Women are at higher risk for symptomatic UTIs due to their shorter, straighter urethra and proximity to the vaginal orifice.\n- Most uncomplicated cases can be managed with a 3-day course of nitrofurantoin or trimethoprim-sulfamethoxazole (TMP-SMX).\n- Ciprofloxacin should be reserved for cases with TMP-SMX resistance or when nitrofurantoin/TMP-SMX cannot be used.\n- Complicated cases (including those with previous urinary manipulation, abnormal anatomy, and all male patients) require a 7-day course of oral antibiotics.\n- Given the rarity of symptomatic UTI in young men, abnormal anatomy predisposing to bacteriuria and subsequent infection should be suspected.\n- Young males and most women with recurrent infections should be referred to a urologist for renal ultrasound and post-void residual bladder volume measurement."
    },
    {
      "id": "4",
      "question_type": "mcq",
      "question": "A 45-year-old male presents to clinic with his wife to discuss having a vasectomy. Which of the following is true regarding this procedure?",
      "options": [
        "A. It is typically performed by a urologist in the operating room (OR) under general anesthesia.",
        "B. It involves ligating the vas deferens.",
        "C. The patient can safely have intercourse 1 month after the procedure with little risk of pregnancy.",
        "D. Reversal of vasectomy is associated with a pregnancy rate of less than 10%.",
        "E. There is an increased risk for testicular cancer."
      ],
      "answer": "B",
      "explanation": "- Vasectomy is a highly effective method of male contraception, offering lower cost, greater safety, and shorter recovery time compared to tubal ligation.\n- It is performed less frequently, possibly due to patient misinformation and public stigma.\n- Vasectomy can be performed by urologists or general surgeons, typically in the office under local anesthesia.\n- The guiding principle is ligation of the vas deferens, achievable through two small scrotal incisions.\n- Despite a success rate exceeding 95%, patients should use unprotected intercourse for 3 months post-procedure and only after confirming sterility via semen analysis for azoospermia.\n- The probability of natural pregnancy after vasectomy reversal is 50%.\n- There is no evidence linking vasectomy to an increased risk of testicular cancer."
    },
    {
      "id": "5",
      "question_type": "clinical_scenario",
      "question": "A 67-year-old male undergoes an uneventful radical prostatectomy for prostate cancer. Eight days later, he has a fever and feculent material is noted in his urine. Pelvic CT reveals a 9- x 8-cm heterogeneous perirectal fluid collection. The best course of management is administering parenteral antibiotics, percutaneous drainage of the fluid collection, and:",
      "options": [
        "A. Repeat CT in 2 weeks",
        "B. Initiation of total parenteral nutrition",
        "C. Initiation of enteric feeding via a Dobhoff tube",
        "D. Insertion of a suprapubic cystostomy tube",
        "E. Diverting colostomy creation"
      ],
      "answer": "E",
      "explanation": "- Rectal injury is a known complication of radical prostatectomy, with an incidence of 1.5%.\n- If identified intraoperatively and the patient had a bowel prep, primary repair may be possible.\n- If the bowel injury is recognized postoperatively as a vesicorectal fistula, conservative management is not appropriate.\n- Given systemic signs of infection, the patient requires parenteral antibiotics and drainage of the fluid collection.\n- A large fluid collection suggests a significant rectal injury and perforation, necessitating a colostomy to temporarily divert stool for delayed repair."
    },
    {
      "id": "6",
      "question_type": "clinical_scenario",
      "question": "A 19-year-old male presents to the ED with a stab wound to his left lower back. He is hemodynamically stable and has no evidence of peritonitis. A CT scan of the abdomen and pelvis with oral and intravenous (IV) contrast demonstrates a subcapsular hematoma of the left kidney and a small posterior left kidney laceration with no extravasation of contrast or injury to the collecting system. There is no fluid or free air in the peritoneum. Distal ureters are intact bilaterally. The next best step is:",
      "options": [
        "A. Observation",
        "B. Retrograde ureteropyelogram",
        "C. IV methylene blue and local exploration of wound",
        "D. Retroperitoneal exploration and renal reconstruction",
        "E. Exploratory laparotomy, retroperitoneal exploration, and renal reconstruction"
      ],
      "answer": "A",
      "explanation": "- Historically, penetrating kidney trauma mandated surgical exploration, but this algorithm has been challenged.\n- For hemodynamically stable patients with penetrating injuries (stab wound or low-velocity gunshot wound), no intra-abdominal injuries, and low-grade renal injury, a nonoperative approach can be implemented.\n- The main concern with a penetrating flank or back wound is a missed colon injury.\n- Renal trauma is graded by severity of parenchymal injury, and disruption of the renal pelvis and vascularity:\n  - Grade I: Subcapsular renal hematoma or contusion, no laceration.\n  - Grade II: Parenchymal laceration <1 cm deep, hematoma contained within Gerota fascia.\n - Grade III: Laceration >1 cm deep, into medulla, hematoma contained in Gerota fascia.\n - Grade IV: Laceration into collecting system or renal pelvis, or ureteropelvic junction disruption; segmental renal artery or vein injury also qualifies.\n - Grade V: Disruption of main renal artery or vein, or shattered kidney.\n- If a patient is already undergoing laparotomy for a penetrating abdominal injury with a noted renal injury, the decision to explore the renal injury arises.\n- If there is no large or expanding hematoma and no active bleeding, observation without exploration is increasingly common.\n- Exploring such wounds involves opening the Gerota fascia, which can release tamponade effect and lead to bleeding and nephrectomy.\n- Grades I and II rarely require operative management.\n- Grades III and IV can be observed if no intraperitoneal injuries are noted.\n- Delayed bleeding occurs in 20% of Grade III to IV renal injuries and can be managed with arteriographic embolization.\n- Grade V injuries should be explored in the OR."
    },
    {
      "id": "7",
      "question_type": "clinical_scenario",
      "question": "A 45-year-old male presents to the ED with nausea, vomiting, and a sharp right groin pain that started 6 hours ago. He is unable to find a comfortable position and moves around frequently in the hospital bed. He is afebrile and hemodynamically stable. CT abdomen/pelvis without contrast reveals a 4-mm right-sided stone at the ureterovesical junction (UVJ) with mild hydronephrosis and some periureteral stranding. He has no dysuria, and his urinalysis is negative for infection. His pain and nausea improve with medical therapy. Which of the following is the most appropriate course of management?",
      "options": [
        "A. Medical expulsive therapy (tamsulosin, nonsteroidal antiinflammatory drugs [NSAIDs]) and outpatient follow-up",
        "B. Ureteral stent placement",
        "C. Extracorporeal shock wave lithotripsy (ESWL)",
        "D. Ureteroscopy and laser lithotripsy",
        "E. Percutaneous nephrostomy tube placement"
      ],
      "answer": "A",
      "explanation": "- The patient presents with acute pain from an obstructing 4-mm right UVJ stone.\n- Most stones are radiopaque calcium-oxalate; uric acid stones account for 10% and are radiolucent, necessitating a noncontrast stone protocol CT for initial workup.\n- For an obstructing distal ureteral stone without urinary tract infection, observation and medical therapy with tamsulosin 0.4 mg daily (to relax ureteral smooth muscle and facilitate passage) and NSAIDs are reasonable, provided pain is controlled and oral intake is adequate.\n- Given the stone's UVJ location, there is over a 75% chance of spontaneous passage within 3 weeks.\n- Medical expulsive therapy is less successful for stones larger than 7 mm or located in the proximal ureter.\n- ESWL and ureteroscopy/laser lithotripsy are not initially indicated for this stone due to its high chance of passage with medical management alone, but may be considered if symptoms persist.\n- Ureteral stent placement and percutaneous nephrostomy tube placement are indicated to decompress the urinary system if criteria for prompt intervention are met:\n  - High-grade unilateral urinary obstruction.\n  - Bilateral urinary obstruction.\n  - Urinary obstruction to a solitary kidney.\n - Urinary obstruction with urinary infection or sepsis.\n  - Inability to tolerate oral intake due to nausea/vomiting.\n - Severe pain not controlled by oral analgesics."
    },
    {
      "id": "8",
      "question_type": "clinical_scenario",
      "question": "An 18-year-old woman presents to the ED following a motorcycle collision. She is hemodynamically stable but has an obvious pelvic fracture. On exam, blood is found at the vaginal introitus. CT abdomen/pelvis demonstrates a severe pelvic fracture with normal appearing kidneys. The best next step is:",
      "options": [
        "A. Urethral catheter",
        "B. Cystogram",
        "C. Retrograde urethrogram and cystogram",
        "D. Urethroscopy, vaginoscopy, and cystogram",
        "E. Suprapubic bladder catheter"
      ],
      "answer": "D",
      "explanation": "- Open pelvic fractures are associated with high-impact injuries, common in high-speed motorcycle accidents.\n- They carry a high risk of significant bleeding and associated injuries, and can lead to life-threatening pelvic sepsis, especially if a rectal injury is unrecognized.\n- In the setting of a pelvic fracture, it is crucial to examine the perineum for external wounds and blood in the rectum or vagina; vaginal bleeding should not be assumed to be menstrual.\n- Any external perineal wounds or rectal/vaginal blood should be presumed to be due to an open pelvic fracture until proven otherwise.\n- Given blood at the vaginal introitus, there is a risk of injury to the urethra, vagina, bladder, or rectum.\n- The patient will require an exam under anesthesia, urethroscopy, vaginoscopy, and cystogram to evaluate for vaginal, urethral, or bladder trauma.\n- A retrograde urethrogram is technically difficult in younger females due to a short urethra (around 4 cm) and is not used for female urethral trauma diagnosis.\n- A suprapubic bladder catheter is not necessary without urethral evaluation.\n- Urethral catheter placement should be delayed until a urethral injury is ruled out, given the gross blood."
    },
    {
      "id": "9",
      "question_type": "clinical_scenario",
      "question": "A 27-year-old male presents to the ED after sustaining a gunshot wound to the pelvis. He undergoes exploratory laparotomy and is found to have a left sigmoid colon injury, which is repaired primarily. He is hemodynamically stable. On examination of the left distal ureter, it appears to be contused. Intravenous indigo carmine is administered, and no extravasation is seen from the ureter. Which of the following is the most appropriate next step?",
      "options": [
        "A. Observation",
        "B. Ureteral stent",
        "C. Percutaneous nephrostomy",
        "D. Resect damaged ureter and reimplant ureter into bladder",
        "E. Resect damaged ureter and repair with end-to-end ureteral anastomosis"
      ],
      "answer": "B",
      "explanation": "- Blast injuries cause extensive direct and indirect soft tissue damage, with initial damage evolving over several days.\n- Gunshot wounds resemble blast injuries; injury severity correlates with weapon type, bullet caliber, and distance, with bullet velocity having the greatest effect on soft tissue damage.\n- A minor ureteral contusion is managed with ureteral stent placement to prevent stricture from scar tissue.\n- More severe ureteral damage, compromising microvascular supply, can lead to breakdown or stricture days to weeks post-injury, necessitating excision and either end-to-end anastomosis (ureteroureterostomy) or reimplantation into the bladder (ureteroneocystostomy).\n- Percutaneous nephrostomy is not indicated if ureteral stenting is possible."
    },
    {
      "id": "10",
      "question_type": "clinical_scenario",
      "question": "A 62-year-old male with a history of diverticulitis presents with pneumaturia, urinary frequency, and dysuria for several days. He is afebrile and hemodynamically stable. Urine culture grows multiple organisms. The best study to diagnose the etiology of his urinary symptoms is:",
      "options": [
        "A. Barium enema",
        "B. Plain films of abdomen/pelvis",
        "C. Colonoscopy",
        "D. CT abdomen/pelvis with oral contrast",
        "E. Cystoscopy"
      ],
      "answer": "D",
      "explanation": "- The patient's symptoms suggest a colovesical fistula secondary to diverticulitis.\n- Other common etiologies include Crohn disease, colorectal carcinoma, radiation, infection, and trauma.\n- Patients often present with lower urinary tract symptoms (dysuria, pneumaturia, frequency), suprapubic pain, hematuria, and/or tenesmus.\n- While diagnosis is often clinical, CT scan is the test of choice.\n- CT findings suggestive of a colovesical fistula include: (1) bladder wall thickening adjacent to thickened bowel, (2) air in the bladder (without prior urinary tract manipulation), and (3) presence of colonic diverticula.\n- CT is the most sensitive and specific test due to its ability to detect small amounts of air in the bladder.\n- Active UTI or recent indwelling Foley catheter can cause false positives.\n- Oral contrast helps visualize contrast tracking into the bladder for better fistula localization.\n- Barium enema and colonoscopy have low sensitivity for diagnosing colovesical fistula.\n- Cystoscopy may identify a bladder lesion, but findings are often nonspecific (erythema or papillary change).\n- Plain films are not useful for identifying a colovesical fistula."
    },
    {
      "id": "11",
      "question_type": "clinical_scenario",
      "question": "For the patient in question 10, the definitive management consists of:",
      "options": [
        "A. Total parenteral nutrition, bowel rest, and antibiotics",
        "B. Colon resection with primary closure of bladder",
        "C. Colon resection and excision of cuff of bladder",
        "D. Partial cystectomy",
        "E. Cystoscopy with fulguration"
      ],
      "answer": "B",
      "explanation": "- Definitive treatment for a colovesical fistula due to diverticulitis involves colon resection with primary closure of the bladder.\n- Partial cystectomy would not resolve the underlying disease.\n- Nonoperative management is generally not standard, except in some cases of Crohn disease where medical management (antibiotics, azathioprine, steroids, infliximab) may resolve the fistula.\n- If the fistula is due to malignancy, en bloc resection is recommended.\n- During operative management of a colovesical fistula, an omental flap is placed between the repaired bladder and bowel to prevent overlapping suture lines and promote healing.\n- Cystoscopy with fulguration and endoscopic stenting are not used for colovesical fistula management."
    },
    {
      "id": "12",
      "question_type": "clinical_scenario",
      "question": "A 49-year-old male undergoes a low anterior resection for rectal cancer. During mobilization and dissection of the sigmoid colon, the left ureter is injured. There is a 1-cm segment destroyed above the pelvic brim. The patient is hemodynamically stable. Which of the following is the appropriate management for this ureteral injury?",
      "options": [
        "A. Resect injured segment and perform a primary end-to-end ureteral anastomosis over a stent",
        "B. Ligate ureter and place a percutaneous nephrostomy tube",
        "C. Mobilize ureter and reimplant into the bladder after performing a psoas hitch",
        "D. Perform a nephropexy and ureteroureterostomy",
        "E. Perform an ileum interposition"
      ],
      "answer": "A",
      "explanation": "- Ureteral injury and repair are critical in general surgery due to their common occurrence during pelvic dissection and mobilization of iliac arteries.\n- Ureteral repair depends on the size of the missing segment (large >2 cm or small <2 cm) and the location.\n- The upper and middle thirds of the ureter are defined as above the pelvic brim.\n- For small injuries above the pelvic brim, the recommended management is resection of the injured segment followed by a primary end-to-end ureteral anastomosis over a stent.\n- For small injuries to the distal third, reimplantation into the bladder is recommended.\n- For larger injuries to the upper and middle third, nephropexy (anchoring the kidney caudad) to create a tension-free end-to-end ureteral anastomosis (ureteroureterostomy) is an option.\n- For large injuries to the distal third of the ureter, reimplantation into the bladder is recommended. If the ureter cannot reach, the bladder may need to be mobilized using a psoas hitch maneuver (bladder pulled up and anchored to the psoas muscle) or a Boari bladder flap (bladder tubularized for length).\n- In unstable patients, ureteral ligation and percutaneous nephrostomy tube placement may be done, with delayed repair (possibly including ileal interposition).\n- Absorbable sutures should always be used to prevent stricturing, calculi formation, and infection.\n- Drains are often left for ureteral injuries."
    },
    {
      "id": "13",
      "question_type": "clinical_scenario",
      "question": "A 15-year-old boy presents to the ED with severe left testicular pain that woke him from sleep 3 hours ago. He denies scrotal trauma or recent infections. He had a similar episode 6 months ago that resolved within minutes. Physical exam reveals an enlarged, firm, and tender left testicle with abnormal lie. Stroking the left inner thigh does not elicit elevation of the hemiscrotum. Manual elevation of the scrotum does not relieve the pain. Which of the following is the best next step in management?",
      "options": [
        "A. Testicular ultrasound",
        "B. Attempt left testicular detorsion in the ED followed by left testicular orchiopexy in the OR",
        "C. Attempt left testicular detorsion in the ED followed by bilateral orchiopexy in the OR",
        "D. Take to the OR to perform left testicular detorsion and bilateral orchiopexy",
        "E. Take to the OR to perform a left orchiectomy"
      ],
      "answer": "C",
      "explanation": "- The patient's presentation is classic for testicular torsion, which occurs bimodally in infant boys and adolescent boys (rapidly growing testicle during puberty), though it can occur at any age.\n- Torsion presents with acute onset of severe testicular pain, with or without swelling.\n- The history suggests possible intermittent torsion that resolved spontaneously, but this is difficult to definitively diagnose.\n- Physical exam findings include a tender, firm testicle with horizontal lie, high-riding, and absent cremasteric reflex.\n- Unlike epididymitis, testicular torsion patients have a negative Prehn sign (manual elevation does not relieve pain).\n- Torsion is a clinical diagnosis; surgical exploration should not be delayed if suspected.\n- If diagnosis is questionable and within 4 hours of onset, a scrotal Doppler ultrasound is a reasonable option, showing absent flow and heterogeneous texture.\n- A torsed testicle is usually viable if detorsed within 6 hours.\n- Initial detorsion can be attempted in the ED with pain medication, but urgent bilateral orchiopexy in the OR is still necessary.\n- After surgical detorsion, both testes are sutured to the scrotal dartos muscle (orchiopexy) to prevent future torsion episodes, as the contralateral testis also has a higher risk.\n- Epididymo-orchitis, a common imitator, is differentiated by pain relief with testicular elevation, normal or increased flow on Doppler ultrasound, and bacteriuria on urinalysis.\n- Sexually transmitted infections must be ruled out if epididymo-orchitis is suspected.\n- If the testicle is ischemic and does not recover color/appearance after detorsion, testicular infarction has occurred, necessitating orchiectomy."
    },
    {
      "id": "14",
      "question_type": "clinical_scenario",
      "question": "A 22-year-old male presents to the ED with an erection that has lasted for 9 hours and is becoming exceedingly painful. He denies genitourinary trauma, drug use, or recreational use of phosphodiesterase-5 inhibitors. He also denies any personal or family history of hematologic diseases. He had a similar episode 8 months ago that resolved spontaneously after 4 hours, but now he is having severe worsening penile pain. Management of his condition involves:",
      "options": [
        "A. Oxygen, IV hydration, and close monitoring",
        "B. Oral phenylephrine",
        "C. Penile Doppler ultrasound",
        "D. Corporal aspiration and irrigation with saline",
        "E. Urgent cavernoglandular shunt"
      ],
      "answer": "D",
      "explanation": "- The patient is suffering from ischemic priapism, a urologic emergency requiring urgent intervention to prevent permanent erectile dysfunction.\n- Ischemic priapism results from decreased venous outflow from the cavernosa, leading to increased intracavernosal pressure, decreased arterial inflow, blood stasis, local hypoxia, and acidosis.\n- On exam, the penis is fully erect, rigid, and tender, while the glans and corpus spongiosum are soft.\n- Early intervention is crucial.\n- In the ED, corporal aspiration and irrigation with normal saline are performed to drain static blood and flush old clots, achieving detumescence.\n- Intracorporal phenylephrine may also be injected, but the patient must be on a cardiac monitor due to risks of hypertension, tachycardia, reflex bradycardia, and arrhythmia if systemically absorbed.\n- If detumescence is not achieved by aspiration/irrigation, an urgent cavernoglandular shunt procedure is necessary, though it carries a higher risk of permanent erectile dysfunction.\n- Oral phenylephrine has not shown benefit for priapism.\n- For sickle cell patients with priapism, first-line management involves oxygen, IV hydration, and pain control.\n- Blood exchange transfusions are indicated for sickle cell patients if initial medical therapy fails.\n- Penile Doppler ultrasound is not routinely performed for priapism but can differentiate ischemic from nonischemic priapism.\n- Nonischemic priapism is managed conservatively and often resolves spontaneously; it is nontender, partially rigid, usually due to penile trauma causing a fistula between the corporal tissue and cavernous artery, and is not an emergent condition."
    },
    {
      "id": "15",
      "question_type": "clinical_scenario",
      "question": "A 36-year-old female is admitted to the hospital after being struck by an automobile while riding her motorcycle. Plain films demonstrate a fracture at her inferior pubic ramus. Upon urethral catheter placement, she was found to have gross hematuria. CT cystogram revealed contrast extravasation into the extraperitoneal space with no bony structures within the bladder wall. The patient is hemodynamically stable. Laboratory studies are unremarkable. The next step is:",
      "options": [
        "A. Prolonged indwelling urethral catheter",
        "B. Replace urethral catheter with suprapubic cystostomy",
        "C. Open operative repair of bladder injury",
        "D. Cystoscopy to visualize bladder perforation site",
        "E. Bilateral nephrostomy tubes for temporary urinary diversion"
      ],
      "answer": "A",
      "explanation": "- Bladder injury is typically caused by pelvic fracture or blunt lower abdominal trauma when the bladder is distended.\n- Injuries include bladder contusions (hematuria without extravasation), extraperitoneal bladder rupture, and intraperitoneal bladder rupture.\n- Gross hematuria is the most common sign of rupture, often accompanied by pelvic fracture and suprapubic discomfort/tenderness.\n- Bladder rupture is diagnosed with a cystogram, where the bladder is filled with 300-400 cc of contrast via a Foley catheter, and extravasation is observed.\n- Intraoperative bladder ruptures can be diagnosed by filling the bladder with colored dye to assess for leakage.\n- Extraperitoneal bladder rupture is managed with a 2-week course of an indwelling Foley catheter and a repeat cystogram to confirm healing.\n- Replacing the Foley catheter with a suprapubic cystostomy is invasive and unnecessary.\n- Operative repair of an extraperitoneal bladder rupture is indicated for persistent hematuria, concomitant pelvic organ injury, bladder foreign bodies, persistent urine leak, or penetrating trauma.\n- Open surgical repair is also necessary for intraperitoneal ruptures as soon as feasible to prevent peritonitis.\n- Intraperitoneal ruptures usually occur at the bladder dome, which is lined by peritoneum.\n- The bladder is closed in 2-3 layers with absorbable suture (non-absorbable suture can cause calcification and bladder stones).\n- Bladder injuries may not be immediately detected, potentially leading to urinoma development.\n- If an infected urinoma is suspected, IR drainage may be beneficial, though adequate bladder drainage is usually sufficient.\n- Cystoscopy is a diagnostic option for intraoperative bladder perforations, but for traumatic bladder rupture, a cystogram is the preferred diagnostic approach due to its speed, less invasiveness, and ability to differentiate between intraperitoneal and extraperitoneal perforations.\n- In poor operative candidates with persistent urine leakage despite urethral drainage, bilateral nephrostomy tubes may temporarily divert urine to aid bladder healing."
    },
    {
      "id": "16",
      "question_type": "clinical_scenario",
      "question": "A 67-year-old male with a history of nocturia and urinary frequency due to bladder outlet obstruction from an enlarged prostate undergoes a transurethral resection of the prostate using a monopolar resectoscope with sterile water used as an irrigant. Estimated blood loss was over 300 mL. In recovery, the patient is found to be somnolent and has two episodes of emesis. Blood pressure is 196/100 mm Hg, and heart rate is 47 beats per minute. Which of the following would be most useful in determining the etiology for the patient's current condition?",
      "options": [
        "A. Complete blood count",
        "B. Basic metabolic panel",
        "C. Urinalysis",
        "D. CT head",
        "E. CT cystogram"
      ],
      "answer": "B",
      "explanation": "- A classic postoperative complication of transurethral resection of the prostate (TURP), seen in 2% of patients, is dilutional hyponatremia.\n- This condition, known as TUR syndrome, causes neurologic symptoms (confusion, convulsions, somnolence, visual disturbance), hypertension, bradycardia, and nausea/vomiting.\n- TUR syndrome is caused by hypotonic fluid (sterile water) rushing into the open venous sinuses of the prostate during resection.\n- Therefore, obtaining a basic metabolic panel to assess for hyponatremia is the next best step.\n- TUR syndrome is becoming less common due to the widespread use of the bipolar resectoscope, which uses normal saline as irrigant, unlike the monopolar resectoscope requiring hypotonic irrigants like sterile water or glycine.\n- Prevention involves reducing irrigant pressure, shortening operative time, and minimizing venous sinus opening intraoperatively.\n- Management involves administering 3% hypertonic saline and furosemide (10-20 mg IV) postoperatively to correct hyponatremia and diurese free water.\n- A blood loss of 300 mL is not significant enough to cause cerebral hypoperfusion or altered mental status, making a complete blood count unnecessary.\n- Urinalysis is unlikely to provide useful information.\n- Imaging studies are not useful for managing TUR syndrome."
    },
    {
      "id": "17",
      "question_type": "clinical_scenario",
      "question": "A 3-year-old girl with a history of surgical correction for a high imperforate anus presents with persistent urinary incontinence. A voiding cystourethrogram (VCUG) reveals a large trabeculated bladder, grade 2 vesicoureteral reflux on the right, and incomplete bladder emptying. Two normal kidneys without hydronephrosis are noted on renal ultrasound. The most appropriate next step is:",
      "options": [
        "A. Clean intermittent catheterization",
        "B. Spinal ultrasound",
        "C. Alpha-blocker",
        "D. Spinal magnetic resonance imaging (MRI) scan",
        "E. Vesicostomy"
      ],
      "answer": "D",
      "explanation": "- Spinal cord abnormalities, such as tethered cord or thickened filum terminale, are found in 20-50% of patients with imperforate anus.\n- The severity of the rectal lesion correlates with the severity of the spinal cord lesion.\n- This patient's symptoms and radiographic findings (incomplete bladder emptying, trabeculated bladder, vesicoureteral reflux) suggest possible neurogenic bladder dysfunction.\n- The best next step is a spinal MRI to rule out spinal cord lesions.\n- Spinal ultrasound is suboptimal because spinal ossifications prevent clear visualization of a tethered spinal cord.\n- A formal diagnosis of neurogenic bladder and urodynamic studies are required before initiating clean intermittent catheterization, alpha-blockers, and vesicostomy."
    },
    {
      "id": "18",
      "question_type": "clinical_scenario",
      "question": "A 32-year-old male is brought to the ED by ambulance after a motorcycle accident at 45 mph. Abdominal CT scan with contrast demonstrates a deep renal laceration with urinary extravasation into the retroperitoneum. After observation for 10 days, a repeat CT urogram shows persistent urinary extravasation with development of a small urinoma. There is no hydronephrosis. He is hemodynamically stable and afebrile. The most appropriate next step is:",
      "options": [
        "A. Continued observation",
        "B. Surgical exploration and repair",
        "C. Insertion of a ureteral stent",
        "D. Percutaneous nephrostomy drainage",
        "E. Percutaneous perinephric drainage"
      ],
      "answer": "C",
      "explanation": "- Blunt kidney injuries are often managed conservatively, even with urinary extravasation on early imaging.\n- Extravasation resolves spontaneously in 85% of renal injuries without further intervention.\n- Patients with persistent extravasation should be managed by draining urine with an internal ureteral stent.\n- A Foley catheter may also be needed to maximally decompress the bladder and prevent urine reflux, aiding collecting system injury closure.\n- Percutaneous nephrostomy tubes are difficult to place without hydronephrosis and offer no advantage over internal stents in this case.\n- Perinephric drainage is unnecessary without evidence of infection or large urinoma formation.\n- Surgical exploration is excessively invasive and may cause more kidney damage."
    }
  ]
}
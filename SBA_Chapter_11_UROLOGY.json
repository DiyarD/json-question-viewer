{
    "chapter_name": "SECTION 11: UROLOGY",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "1. Covering layers of the kidney\nAll of the following form a covering layer over the kidney, except",
            "options": [
                "A. Gerota's fascia (peri-renal fascia)",
                "B. Peri-renal fat",
                "C. Liver",
                "D. Para-renal fat",
                "E. Fibrous capsule"
            ],
            "answer": "C",
            "explanation": "The kidneys are a pair of retroperitoneal organs lying on the posterior abdominal wall. The right kidney lies lower in the body in comparison with the left as a result of the liver, which due to its large size pushes the kidney down during development. Meanwhile, the renal hila of the left and right kidney lie above and below the transpyloric plane respectively, approximately 5 cm from the midline.\n\nThe kidneys have four covering layers, which are as follows (from most proximal, i.e. in contact with the kidney substance to distal):\n\n• Fibrous capsule\n• Peri-renal fat\n• Peri-renal/Gerota's fascia – a layer of connective tissue that surrounds the kidneys and adrenal glands. It is continuous with the fascia transversalis laterally.\n• Para-renal fat – the outermost covering layer of the kidney, forming part of the retroperitoneal fat.\n\nThe liver (more specifically the right lobe of the liver) forms the superior border/relation of the right kidney. It does not however form a covering layer of the kidney itself."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "2. Anatomy of the kidney\nThe posteromedial aspect of the kidneys is related to which one of the following\nstructures?",
            "options": [
                "A. Psoas muscle",
                "B. Ilio-inguinal nerve",
                "C. Diaphragm",
                "D. Pancreas",
                "E. 12th rib"
            ],
            "answer": "A",
            "explanation": "Anatomical relations are shown in Table 11.1.\n\nTable 11.1 Anatomical relations of the kidneys\nAnterior Left kidney Right kidney\nSuperior Stomach Adrenal gland\nSpleen Right lobe of liver\nMedial Pancreas Second part of duodenum (D2)\nInferior Left colon Right colon; small bowel\nPosterior Left and right kidney\nSuperior Diaphragm; costo-diaphragmatic recess\nInferior 12th rib; ilio-hypogastric nerve; ilio-inguinal nerve\nMedial Psoas muscle\nLateral Quadratus lumborum; transversus abdominis muscle"
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "3. Anatomy of the renal tract\nIn its course from the kidney to the bladder, the ureter runs on the top of which\nmuscle?",
            "options": [
                "A. Quadratus lumborum",
                "B. Transversus abdominis",
                "C. Psoas",
                "D. Iliacus",
                "E. Latissimus dorsi"
            ],
            "answer": "C",
            "explanation": "The ureters are a pair of muscular tubes that emerge from the hilum of each kidney and run vertically downwards behind the parietal peritoneum on the psoas muscle. The psoas muscle separates the ureter from the tips of the lumbar vertebrae transverse processes. Each ureter is approximately 25 cm in length and has three natural constrictions at the renal pelvis (pelvi-ureteric junction or PUJ), the pelvic brim and on joining the bladder itself (vesico-ureteric junction or VUJ). Within the pelvis, the ureter runs down the lateral wall in the region of the ischial spine, where it turns forward and enters at the lateral angle of the bladder.\n\nQuadratus lumborum is an intra-abdominal muscle that arises from aponeurotic fibres of the iliolumbar ligament and the iliac crest. It is involved in lateral flexion and extension of the vertebral column and fixes the ribs in forced expiration. In addition, it forms the posterolateral border of the kidney. Transversus abdominis is a muscle of the abdominal wall that also forms the posterolateral border of the kidney. Iliacus is a muscle of thigh flexion and lateral rotation found in the iliac fossa, lateral to the psoas muscle. Latissimus dorsi is a large muscle of the back that is involved in pulling the arm dorsally and caudally (backwards and downwards)."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "4. Vascular supply of the kidney (1)\nThe renal arteries arise at intervertebral level",
            "options": [
                "A. T11/T12",
                "B. T12/L1",
                "C. L1/L2",
                "D. L2/L3",
                "E. L3/L4"
            ],
            "answer": "C",
            "explanation": "The renal arteries are branches of the abdominal aorta, arising at the level of L1/L2, immediately below the origin of the superior mesenteric artery (vertebral level L1)."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "5. Vascular supply of the kidney (2)\nIn a non-exercising individual, the proportion of cardiac output supplied to the\nkidneys is approximately",
            "options": [
                "A. 5%",
                "B. 10%",
                "C. 15%",
                "D. 20%",
                "Ε. 25%"
            ],
            "answer": "D",
            "explanation": "While an individual is at rest, the kidneys receive around 20% of the cardiac output via the renal arteries. The right renal artery lies posterior to the inferior vena cava and is longer than the left renal artery.\n\nThe renal artery divides into five segmental branches, each independently supplying a parenchymal zone unrelated to the anatomical arrangement of the pyramid and calyx (the base unit of the kidney). The areas supplied are the apical, upper, middle, lower and posterior zones. The segmental arteries are further divided into arcuate branches that run in the boundary between the kidney cortex and medulla. Finally, the arcuate arteries branch into smaller vessels that run up and down, parallel with the collecting tubules, and form the afferent artery to each glomerulus."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "6. Anatomy of the reproductive system\nA 34-year-old father of five children attends the family planning clinic for advice\non birth control. After discussing the various options available, he requests a\nvasectomy. Which of the following structures lies most proximal to the vas def-\nerens (ductus deferens)?",
            "options": [
                "A. Superficial scrotal fascia (Dartos fascia)",
                "B. Internal spermatic fascia",
                "C. Tunica vaginalis",
                "D. External spermatic fascia",
                "E. Preperitoneal fat"
            ],
            "answer": "C",
            "explanation": "The vas deferens (or ductus deferens) is one of a pair of ducts that connect to the testis via the epididymis. It functions to transmit sperm to the urethra. It is supplied by the artery of the vas deferens, which arises from the superior vesical artery, a branch of the internal iliac artery.\n\nVasectomy is a method of contraception in which the vasa deferentia are (usually surgically) ligated or injected to prevent the flow of sperm. Active sperm can remain in the seminal vesicles for up to 12 weeks after and the patient must be informed of this when the procedure is undertaken. Several layers must be cut through in order to reach the vas. From superficial to deep, these are:\n\n• Skin\n• Superficial scrotal fascia (Dartos fascia)\n• External spermatic fascia\n• Cremasteric fascia and muscle\n• Internal spermatic fascia\n• Preperitoneal fat\n• Tunica vaginalis"
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "7. The male urethra\nWith regard to the male urethra, which one of the following segments is the\nnarrowest?",
            "options": [
                "A. Pre-prostatic",
                "B. Prostatic",
                "C. Membranous",
                "D. Bulbar",
                "E. Penile"
            ],
            "answer": "C",
            "explanation": "The urethra is a tubular structure that connects the bladder to the external environment in males and females alike. Although its main function is to excrete urine, in males, it has the added function of acting as a conduit for semen.\n\nIn females, the urethra is a short perineal structure approximately 3–5 cm in length, opening in the vulva between the clitoris and vagina. Given its short length and location in the perineum, females are especially prone to ascending urinary tract infections (UTIs).\n\nIn comparison, the male urethra is around 20 cm long and has five components. These are\n\n• Pre-prostatic or intramural urethra – Approximately 0.5–1.5 cm in length (varies according to bladder fullness).\n• Prostatic urethra – Approximately 3 cm in length and the widest/most dilatable part of the urethra. The vas deferens and prostatic ducts (contributing sperm and seminal fluid) open into this portion.\n• Membranous urethra – Approximately 2 cm long portion of the urethra piercing the urogenital diaphragm. It is also the narrowest part of the urethra.\n• Bulbar urethra.\n• Penile urethra – Runs along the ventral surface of the penis and is the longest portion, comprising most of the urethral length."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "8. Renal stone disease (1)\nA 40-year-old office executive presents with a 4-hour history of excruciating\nleft loin pain radiating to the groin. The pain has been constant with short spells\nof more severe pain every 30-40 minutes. He informs you that his father has\ngout and has had similar pains in the past. A KUB and IVU confirm the presence\nof a radio-opaque stone in the left ureter, measuring approximately 4 mm in\ndiameter. What type of stone is more likely to be present in this patient?",
            "options": [
                "A. Xanthine",
                "B. Uric acid",
                "C. (Triple) phosphate",
                "D. Calcium oxalate",
                "E. Cysteine"
            ],
            "answer": "D",
            "explanation": "Renal tract stones (calculi) are common, affecting approximately 1%–2% of the adult population. They are more prevalent in young and middle-aged men and caused mainly by factors that increase urine solute concentration, e.g. calcium salts, urine concentration and urinary stasis. They can arise in any part of the urinary tract and present with intense colicky loin to groin pain, and are associated with nausea, vomiting and lower urinary tract symptoms.\n\nMost stones (approximately 90%) are formed of calcium oxalate and magnesium/calcium/ammonium phosphate (so-called triple phosphate stones). These substances are radio-opaque and as a result mostly seen on a plain KUB scan. Xanthine, uric acid and cysteine stones are rarer and usually the result of an acquired or genetic biochemical abnormality. These types of stones are generally radiolucent and therefore not seen on a KUB scan.\n\nInitial treatment consists of adequate analgesia, fluid rehydration (oral ± intravenous) and correcting any underlying abnormality that could predispose to stone formation. Further treatment depends on the size of the stone. Most calculi (95%) <5 mm in diameter will tend to pass spontaneously (although this can be painful). Patients can therefore be treated conservatively with fluid rehydration and analgesia. For calculi >5 mm in diameter or in individuals in whom pain is not resolving, further investigation may be needed, with treatment dependent on calculus size and location.\n\nApproximate frequency of stone types is\n\n• Xanthine – <1%\n• Cysteine – <2%\n• Uric acid – 5%\n• (Triple) phosphate (Mg2+, Ca2+, PO43-) – 33%\n• Calcium oxalate – 60%"
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "9. Investigation of urinary calculi\nA 30-year-old PhD student presents with acute-onset colicky left loin pain and\ndescribes a history suggestive of urinary calculi. Which one of the following\nwould be the initial investigation of choice to determine the presence of a calcu-\nlus in the renal tract?",
            "options": [
                "A. Dimercaptosuccinic acid (DMSA) scan",
                "B. Kidney ureter bladder (KUB) radiograph",
                "C. Intravenous urogram/pyelogram",
                "D. Flexible cystoscopy",
                "E. Diethylene triamine pentaacetic acid (DTPA) scan"
            ],
            "answer": "B",
            "explanation": "Renal colic is the result of ureter spasm and hyper-peristalsis secondary to stone impaction in the urinary tract. Calculi impact at sites of narrowing in the ureter, which can be pathological in origin (e.g. strictures) or naturally occurring (e.g. the pelvi-ureteric junction, crossing of the ureter at the SIJ and at the vesico-ureteric junction).\n\nSeveral methods of imaging are available to visualize the renal tract and urinary calculi. Traditionally, the most frequently used technique has been an x-ray KUB (also called the control film) which visualizes the kidneys, ureters and bladder. It relies on the fact that more than 90% of urinary calculi are radio-opaque and will therefore appear on a plain radiograph. This is the correct answer here.\n\nIntravenous urography/pyelography is an X-ray technique consisting of a control film, i.e. taking a KUB and giving a contrast solution. Following contrast injection, another film is immediately taken followed by more radiographs at 20 and 60 minutes. An IVU will indicate the level of an obstruction, whether there is prevention of flow of contrast (seen as filling defect), or tumours in the bladder. Although an excellent technique, it is contraindicated in those with contrast allergy, poor renal function and diabetic patients taking metformin. It is incorrect in this scenario as there is no indication of a KUB having been taken already.\n\nDMSA and DTPA scans are used for cortical imaging and can give an estimate of renal function. They are not commonly used as first line imaging tools in cases of suspected renal tract stones. Ultrasound KUB is also a commonly used technique to determine acute obstruction and can detect some stones, but is generally unreliable for detecting ureteric calculi. More recently, many units have begun to use CT-KUB as a first line investigative tool, however this is not yet universal practice. Flexible cystoscopy is used to directly visualize the urethra, bladder and ureters. It is more commonly used as a minimally invasive method of stone removal in the presence of large renal tract stones or if conservative management of small stones is unsuccessful."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "10. Renal stone disease (2)\nA 35-year-old housewife presents to her GP with a week-long history of dysuria,\nfrequency and extremely strong smelling urine. A urine dipstick test confirms\nthe presence of leucocytes and nitrites. She has previously suffered from mul-\ntiple urinary tract infections, which have resolved with a short course of antibi-\notics. To rule out further complications of the urinary tract, an ultrasound scan\nis performed, which suggests the presence of a large calculus within the left\npelvicalyceal system. Which one of the following microorganisms is *not* associ-\nated with the formation of such stones?",
            "options": [
                "A. Proteus",
                "B. Klebsiella",
                "C. Pseudomonas",
                "D. Mycoplasma",
                "E. Mycobacteria"
            ],
            "answer": "E",
            "explanation": "Repeated UTI predisposes individuals to so-called infection stones that account for approximately 10% of renal tract stones. They are the result of repeated infection with organisms such as *Proteus*, *Pseudomonas*, *Staphylococcus*, *Mycoplasma* and *Klebsiella*. These are referred to as urea-splitting organisms as they hydrolyse urea to ammonium with a resulting alkalinization of urine. The alkalinization process results in deposition of various ions and formation of struvite stones (magnesium–ammonium phosphate) especially in the pelvicalyceal system. The stones can appear to have the shape of deer antlers and are therefore also referred to as staghorn calculi.\n\nMycobacteria species include the organisms *Mycobacterium tuberculosis* (TB) and *Mycobacterium leprae* (leprosy), which are not usually involved in the formation of struvite stones."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "11. Renal stone disease (3)\nA 75-year-old man presents to the surgical unit with a 24-hour history of acute-\nonset left loin pain, which seems to worsen intermittently and has not settled\nwith regular simple analgesia. He suffers from mild dementia and is unable to\nrecall the details of his past medical history. The foundation year 2 doctor on\ncall suspects that a urinary calculus is the cause of this man's pain and spots an\nold pathology report in the patient's notes showing the presence of negatively\nbirefringent crystals in a synovial fluid aspirate. Which one of the following\nsubstances is likely to make up the majority of this man's calculus?",
            "options": [
                "A. Xanthine",
                "B. Uric acid",
                "C. (Triple) phosphate",
                "D. Calcium oxalate",
                "E. Cysteine"
            ],
            "answer": "B",
            "explanation": "Gout is a disorder of purine metabolism exacerbated by dehydration, resulting in hyperuricaemia and acute recurrent attacks of synovitis due to urate crystal deposition in the (predominantly) large joints of the body.\n\nAspiration of joint fluid and examination under polarized light shows negatively birefringent crystals, which are characteristic of the condition and suggested in this individual. Hyperuricaemia also predisposes individuals to urate and calcium oxalate stones. Treatment is as for other urinary tract stones, but also includes allopurinol and diet modification in order to lower levels of serum uric acid.\n\nGiven the age of this man, it is important to exclude other important differentials (as for any patient), particularly a ruptured AAA, which can present with similar symptoms and is occasionally missed in such individuals resulting in a catastrophic outcome. The aetiology of other types of urinary calculi is discussed in the answer to Question 8."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "12. Urological infection (1)\nA 24-year-old sexually active medical student is diagnosed as having a urinary\ntract infection by her GP. Which one of the following organisms is most com-\nmonly associated with community acquired urinary tract infection?",
            "options": [
                "A. Escherichia coli",
                "B. Pseudomonas",
                "C. Staphylococcus saprophyticus",
                "D. Staphylococcus aureus",
                "E. Streptococcus faecalis"
            ],
            "answer": "A",
            "explanation": "Many factors contribute to the impairment of urinary tract defence mechanisms, thereby predisposing an individual to developing a UTI. These include:\n\n• Female sex – Women have shorter a urethra than men, which can allow the transfer of faecal flora. Vaginal flora can be transferred during sexual intercourse and hormonal changes during pregnancy/menopause alter the acidity and composition of urine.\n• Diabetes – Causes immunosuppression and glycosuria, which provides a sugar-rich environment in which bacteria can flourish.\n• Urinary stasis secondary to obstruction.\n• Foreign bodies, e.g. catheterization.\n\n*E. coli* is a Gram-negative organism that accounts for some 90% of UTIs in the community and approximately 50% of infections in hospitalized patients. *Pseudomonas* infection is associated with the presence of a foreign body, such as an indwelling urinary catheter or urinary tract calculus. *Staph. saprophyticus* infection occurs most commonly in sexually active women and is the second commonest cause of community-acquired UTI. *Staph. aureus* infection is associated with recent surgery or presence of surgical instruments within the urinary tract. *Strep. faecalis* is an Enterobacter (this group also includes *Proteus* and *Klebsiella* species), which are urea-splitting organisms that predispose to the formation of struvite stones in affected individuals. They are uncommon causes of uncomplicated UTI."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "13. Urological infection (2)\nA 40-year-old female lawyer is referred to the urology outpatient clinic with a\nhistory of multiple urinary tract infections over the preceding 10 years, which\nhave required increasingly longer courses of antibiotics to treat. She also reports\nfeeling more lethargic of late, despite leading a relatively active lifestyle. An\nultrasound scan of this patient's renal tract indicates chronic pyelonephri-\ntis. Which of the following sonographic features would be diagnostic of her\ncondition?",
            "options": [
                "A. Absent kidney",
                "B. Hydronephrotic kidney",
                "C. Multiple renal stones",
                "D. Atrophic kidney",
                "E. Poor urinary concentration"
            ],
            "answer": "D",
            "explanation": "Pyelonephritis is an infection of the renal pelvis and the substance of the kidney itself. It is divided into acute and chronic. Acute pyelonephritis occurs as a result of ascending infection of the urinary tract or septicaemia, leading to fever, rigours and loin pain as the classic triad of presentation. A variety of methods are used to investigate acute pyelonephritis including a urine dipstick test, as well as urine and blood cultures (to exclude a possible bacterial cause and direct treatment). Radiological investigations such as CT-KUB and ultrasound may demonstrate obstructing points indicative of renal stone disease, while an IVU can indicate kidney enlargement and poor urinary concentration.\n\nChronic pyelonephritis is the result of recurrent UTI and vesico-ureteric reflux. It is diagnosed by the radiological finding of a small, contracted, scarred and atrophic kidney. Occasionally, patients may present later with signs and features of chronic renal failure. Treatment is by addressing the underlying cause, correcting metabolic and renal abnormalities, antibiotics and occasionally nephrectomy in the presence of severely diseased kidneys."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "14. Urethral discharge\nA 28-year-old student presents with a 2-day history of dysuria and mucopuru-\nlent urethral discharge. He reports recently having had unprotected sex while\non holiday in the Mediterranean. A urethral discharge smear inoculated into\nThayer-Martin medium confirms infection with *Neisseria gonorrhoeae* and\nappropriate antibiotics are started. What type of organism is *N. gonorrhoeae*?",
            "options": [
                "A. Lactose-fermenting Gram-negative rod",
                "B. Maltose-fermenting Gram-negative coccus",
                "C. Coagulase-positive Gram-positive coccus",
                "D. Glucose-fermenting Gram-negative coccus",
                "E. Lactose-non-fermenting Gram-negative rod"
            ],
            "answer": "D",
            "explanation": "*N. gonorrhoeae*, a glucose-fermenting Gram-negative diplococcus, is the causative organism in gonorrhoea, which is a common sexually transmitted illness. It can involve many parts of the body, including the throat, joints and urogenital organs in men, women and also children. In addition, it can cause conjunctivitis in newborn infants. It can present with dysuria and profuse, purulent urethral discharge, particularly in affected males. In addition to urethral smear showing Gram-negative diplococci, inoculation of discharge into Thayer-Martin medium is also used to confirm the disease. Treatment is with broad-spectrum antibiotics (which also cover Chlamydia) and encouraging the use of condoms as a preventive measure.\n\nLactose-fermenting Gram-negative rods include *Klebsiella* species, *E. coli*, *Enterobacter* species, *Citrobacter* species and *Serratia* species. *Neisseria meningitides* is a maltose, sucrose and glucose-fermenting, Gram-negative coccus. *Staphylococcus aureus* is a cluster-forming, coagulase-positive, Gram-positive coccus. Lactose non-fermenting, Gram-negative rods comprise the oxidase-negative *Shigella*, *Salmonella* and *Proteus* species and oxidase-positive *Pseudomonas* species."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "15. Urological disease\nA 69-year-old diabetic man presents to the acute surgery unit with a 5-day his-\ntory of mild dysuria, frequency and feeling generally unwell. On examination,\nhe is found to be pyrexial and tachycardic. A genital examination reveals both\nthe penis and the scrotum to be swollen, red and tender to touch, with ery-\nthema also extending into the groin bilaterally. Of note, the examining surgeon\nbelieves that there is palpable crepitus in the perineum. Routine bloods and\ncultures are taken (which later grow both aerobic and anaerobic organisms), and\nfluid resuscitation and broad-spectrum antibiotics are commenced. Following\nfurther discussion with a urologist, he is taken promptly into the operating the-\natre for definitive management. The most likely diagnosis in this patient is",
            "options": [
                "A. Fournier's gangrene",
                "B. Epididymo-orchitis",
                "C. Testicular tumour",
                "D. Testicular torsion",
                "E. Prostatitis"
            ],
            "answer": "A",
            "explanation": "Fournier's gangrene is a relatively rare necrotizing fascitis of the perineal, perianal and genital areas (secondary to infection by aerobic and anaerobic bacteria), affecting predominantly middle-aged and elderly men with pre-existing co-morbidities (it is seen more frequently in diabetic patients). It is a urological emergency that often presents with swelling, pain and erythema of the genital region accompanied by systemic features such as fever and rigour. This is commonly preceded by a several-day history of pruritus and discomfort of the external genitalia. External necrotic areas may or may not be evident. The presence of perineal crepitus is virtually diagnostic. Given the potential for rapid spread and tissue destruction, early diagnosis and debridement is an essential component of management, along with broad-spectrum antibiotic cover. Mortality is high and related to the level of existing co-morbidity.\n\nProstatitis is an inflammation of the prostate gland related to bladder outflow obstruction that presents with frequency, urgency, dysuria and occasional haematuria (i.e. symptoms of a UTI) as well as fever, haemospermia and occasionally a tender prostate and pain on ejaculation. Treatment is with antibiotics and further investigations such as a trans-rectal ultrasound may be employed to rule out (and if necessary, drain) any abscess that has formed as a result of the inflammatory process. Testicular tumours, torsion and epididymo-orchitis are discussed elsewhere in this chapter."
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "16. Rhabdomyolysis\nA 45-year-old railway worker is admitted following a crush injury to his left\nleg. He is talking in full sentences and complaining of pain in his leg. Further\nexamination reveals a blood pressure of 90/58 mmHg, pulse of 99 beats/min,\nand a swollen and bruised left leg. Intravenous access is gained, routine blood\nsamples are taken and fluid resuscitation is commenced. In addition, the patient\nis catheterized for monitoring purposes but passes only a small volume of red-\nbrown urine, which, on microscopy, is confirmed to contain myoglobin. The\nadmitting physician makes a working diagnosis of rhabdomyolysis. Which one\nof the following metabolic abnormalities is *not* associated with this condition?",
            "options": [
                "A. Hypocalcaemia",
                "B. Hyperkalaemia",
                "C. Hypernatraemia",
                "D. Hyperphosphataemia",
                "E. Hyperuricaemia"
            ],
            "answer": "C",
            "explanation": "Rhabdomyolysis is the destruction of striated muscle due to injury, which may be physical, chemical or biological in origin. Causative factors for rhabdomyolysis include:\n\n• Common causes e.g. crush injury, ischaemia, prolonged epileptic fits, heavy physical exercise (especially if dehydrated) and alcohol withdrawal.\n• Rare causes e.g. infection (viral necrotizing myositis), inflammatory myopathy (polymyositis), drugs (statins), hypothyroidism, snake bites, malignant hyperthermia and electric shock.\n\nThe presentation will be dependent on the cause, but may include pain, swelling and weakness of an obviously affected muscle in crush injury. Occasionally, this can cause compartment syndrome as surrounding tissues are compressed by swelling, requiring urgent fasciotomy. Patients may also present with nausea, confusion, disorientation, coma, hypotension and physiological shock due to volume depletion and metabolic disturbance.\n\nClassically, expected metabolic abnormalities are hyperkalaemia, hyperuricaemia and raised creatinine (indicative of acute renal failure), hypocalcaemia (from calcium binding to necrotic muscle), hyperphosphataemia (as a reaction to hypocalcaemia), raised creatine kinase (from muscle breakdown) and occasionally, deranged liver function tests. Furthermore, a urine dipstick test may reveal blood, which is confirmed as myoglobin on microscopy. Myoglobin can accumulate to form casts in renal tubules, leading to obstruction of urine flow and acute tubular necrosis. Myoglobinuria is also suggested by the presence of red-brown urine.\n\nInitial management consists of stabilizing the patient, followed by fluid resuscitation (for rehydration and prevention of myoglobin deposition and tubular necrosis) and catheterization (to monitor urine output and guide rehydration). Urine alkalization with isotonic sodium bicarbonate can be used to make myoglobin more soluble, but evidence for its overall benefit is limited. Electrolyte abnormalities, particularly hyperkalaemia, will need correction, given its potential to cause fatal arrhythmias. Dialysis can be used in severe cases."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "17. Inherited urological disease\nA 41-year-old man presents to the emergency department with a severe head-\nache that started suddenly following a weight-training session. He is treated\nappropriately and further examination some days later reveals a palpable lump\nin the left loin. An ultrasound scan confirms multiple kidney cysts and hepato-\nmegaly, suggestive of adult polycystic kidney disease. On further questioning,\nhe reports that his father died of a brain haemorrhage at the age of 35. Adult\npolycystic kidney disease is most commonly inherited by which one of the fol-\nlowing modalities?",
            "options": [
                "A. Autosomal recessive gene chromosome 16",
                "B. Autosomal dominant gene chromosome 16",
                "C. Autosomal dominant gene chromosome 8",
                "D. Autosomal recessive gene chromosome 4",
                "E. Autosomal dominant gene chromosome 4"
            ],
            "answer": "B",
            "explanation": "Adult polycystic kidney disease is an autosomal dominant disease caused by a defect on chromosome 16 affecting the *PKD1* gene (in 85% of patients, while the majority of remaining cases is due to a gene defect on chromosome 4). The condition is characterized by the formation of multiple kidney cysts (which are present at birth), with progressive enlargement and reduced renal function in affected adults.\n\nPatients may present with features of renal dysfunction such as loin pain, haematuria (due to bleeding into a cyst), renal failure, hypertension and UTI or with systemic features of the disease such as\n\n• Intracranial haemorrhage – Especially subarachnoid haemorrhage due to rupture of berry aneurysms of the circle of Willis\n• Liver, breast and pancreatic cysts\n• Mitral valve prolapse\n• Aortic root dilatation\n• Thoracic aorta dissection\n• Abdominal wall hernias\n\nThere may also be a family history of unexplained intracranial bleed or renal failure, with most patients developing end-stage renal failure by age 60. Treatment is with dialysis and renal transplantation. Affected families can also be offered genetic counselling and testing."
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "18. Paediatric urology (1)\nA 6-week-old boy presents with his parents to the specialist paediatric urology\noutpatients department. The family is Jewish and at the time of the boy's circum-\ncision were told by their rabbi that the urethral meatus was not in the normal\nposition. On examination, the meatus is on the ventral surface just below the\nglans penis. What is the most likely diagnosis?",
            "options": [
                "A. Hypospadias",
                "B. Epispadias",
                "C. Phimosis",
                "D. Chordee",
                "E. Perineal urethra"
            ],
            "answer": "A",
            "explanation": "Hypospadias is the name for the abnormal ventral opening of the urethral meatus along the urethral groove between the glans penis and the scrotum or perineum, occurring in around 1:125 births. The meatus opens on the glans penis in the majority of cases (so-called first-degree hypospadias) and usually causes little functional problem. Opening of the urethra on the shaft and scrotum/perineum (second- and third-degree hypospadias) can result in difficulty urinating, along with psychosexual and fertility problems, necessitating repair at a young age (usually between 9 and 18 months). Common methods of repair include:\n\n• Meatal advancement and glanuloplasty – Involving the creation of a new meatus and closure of the existing opening.\n• Mathieu flap – Used for proximal shaft hypospadias, creating a flap based on the ectopic meatus, which is folded over, and the remaining lateral flaps closed over the new urethra.\n\nEpispadias is a condition in which the urethral meatus opens on the dorsum of the penis. It results from failure of mid-line structures below the umbilicus to fuse and is associated with the split symphysis pubis, low umbilicus, bifid clitoris (in girls), undescended testes, bladder exstrophy and cloacal exstrophy (in rare cases). Phimosis is a contraction of the foreskin, preventing its retraction from the head of the penis. In infants, it is usually a physiological process due to adhesion of the prepuce to the glans penis. Pathological phimosis occurs usually in older children and adults as a result of a disease process or infection. Treatment depends on the extent of functional disability and the commonest surgical intervention is circumcision. Paraphimosis occurs when retracted foreskin is not fully replaced, resulting in a tight and irreducible band around the penis, e.g. after insertion of a urinary catheter. Chordee is a congenital abnormality in which the head of the penis curves down in a ventral direction. It is usually corrected surgically during infancy. Perineal urethra refers to a urethral opening in the perineum. It is most common in women."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "19. Paediatric urology (2)\nA young girl presents to her GP with a 2-day history of fever and swelling on the\nleft side of her abdomen. Examination confirms a raised temperature and left\nloin swelling extending into the mid-line. In addition, microscopic haematuria\nis found on a urine dipstick test. She is referred to the local hospital where an\nultrasound scan of the abdomen and biopsy confirm Wilm's tumour (nephro-\nblastoma). Which one of the following statements regarding Wilm's tumour is\ntrue?",
            "options": [
                "A. The tumour may be associated with anophthalmia",
                "B. 5-year survival in stage IV disease is approximately 65%",
                "C. Children most commonly present at the age of 8–10 years",
                "D. Some cases are associated with a gene mutation on chromosome 13",
                "E. It commonly metastasizes to the brain"
            ],
            "answer": "B",
            "explanation": "Wilm's tumour (nephroblastoma) is a malignant tumour of embryonic origin, most commonly affecting children aged 3–4 years. It is associated with a gene mutation on chromosome 11 that leads to the loss of the tumour suppressor gene WT-1. Occasionally, Wilm's tumour may be associated with other systemic abnormalities such as WAGR syndrome (Wilm's tumour, aniridia (absence of the iris), genito-urinary abnormalities and mental retardation) or Denys–Drash syndrome (associated with hemi-hypertrophy), but most patients are otherwise healthy and present acutely with fever, abdominal swelling and haematuria.\n\nThe tumour is classified into four stages, depending on the extent of tumour spread:\n\n• Stage I - Disease is limited to the kidney and can be completely excised. It does not breach the renal capsule.\n• Stage II – Disease extends beyond the kidney but can be excised with no residual beyond the excision margin.\n• Stage III – There is an unresectable primary tumour with lymph node metastasis.\n• Stage IV - Distant metastases are present, especially in the lungs.\n\nTreatment is by surgical resection, which may be delayed to allow pre-resection chemotherapy. After resection, further chemotherapy may be required depending on the tumour stage. Disseminated disease, particularly lung secondaries, can be treated with radiotherapy. Five-year survival is dependent on tumour stage, but overall prognosis is excellent. Individuals with stage I/II disease (the most common presentation) have a >90% 5-year survival, those with stage III disease have a >80% 5-year survival, and finally patients with disseminated stage IV disease have an approximately 65% 5-year survival."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "20. Preoperative assessment\nA 65-year-old hypertensive man attends the preoperative assessment clinic\n7 days before he is due to undergo a transurethral resection of the prostate for\nbengn prostatic hypertrophy. He is currently taking furosemide for blood pres-\nsure control but no other regular medication. A routine set of bloods is taken,\nthe results of which show a potassium level of 2.7 mmol/L. On the basis of\nthis an electrocardiogram is requested. All of the following electrocardiographic\nchanges are characteristic of hypokalaemia, except",
            "options": [
                "A. Left bundle branch block",
                "B. Flattened T waves",
                "C. U waves",
                "D. ST segment depression",
                "E. Prolonged QT interval"
            ],
            "answer": "A",
            "explanation": "Hypokalaemia is the presence of a low serum potassium level. The normal range of serum potassium varies from laboratory to laboratory, but is approximately 3.5–5.0 mmol/L. The serum potassium level is usually strictly controlled, but may be altered as a result of disease, physiological response or medication. Causes of low serum potassium include:\n\n• Diuretics, e.g. furosemide, bumetanide and ethacrynic acid, which are all loop diuretics that inhibit the Na+/K+/2Cl- symporter in the thick ascending limb of the loop of Henle, resulting in reduced serum potassium levels\n• Vomiting and diarrhoea\n• Pyloric stenosis\n• Villous adenoma of the rectum\n• Intestinal fistula\n• Steroids/Cushing's syndrome (excess steroid production)\n• Conn's syndrome\n• Alkalosis\n\nHypokalaemia may present asymptomatically or with muscle weakness, hypotonia, cramp, tetany and potentially fatal cardiac arrhythmias (this is in common with hyperkalaemia).\n\nECG changes in hypokalaemia are small or inverted T waves, prominent U waves, prolonged PR interval, ST segment depression and a prolonged QT interval. Although left bundle branch block may occur in hypertension, it is not classically associated with hypokalaemia. ECG changes in hyperkalaemia include tall (tented) T waves, small P waves and wide QRS complexes.\n\nTreatment of hypokalaemia involves removing any causative agents and treating underlying conditions. For acute cases, oral or intravenous potassium supplementation is indicated with slow correction in order to prevent possible overload and arrhythmias."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "21. Renal cell carcinoma\nWhich one of the following statements regarding renal cell carcinoma is true?",
            "options": [
                "A. It is an incidental finding in approximately 30% of patients",
                "B. Women are more commonly affected than men",
                "C. Approximately 5% of cases are familial",
                "D. Renal cell carcinoma accounts for around 3% of adult cancers",
                "E. Metastases are poorly visualized by standard imaging techniques"
            ],
            "answer": "D",
            "explanation": "Renal cell (adeno)carcinoma is a malignant cancer of proximal renal tubule cells accounting for around 3% of all adult cancers. It is a highly vascular malignancy with a slightly higher incidence in men than women. Risk factors for renal cell carcinoma include:\n\n• Acquired renal cystic disease (affects 90% of patients on dialysis)\n• Smoking\n• Exposure to lead\n• Asbestos\n• Polycarbons\n\nAlthough the majority of cases are sporadic, a small proportion (~2%) are familial and associated with Von Hippel-Lindau disease, haemangioblastomas of the cerebellum and spine, retinal haemangiomas, phaeochromocytoma and islet cell tumours.\n\nA significant number of patients will present with pain, palpable loin mass and haematuria, a triad of symptoms considered classical for the disease. In the majority of patients, however, the disease is an incidental finding (~50%) or associated with signs of systemic illness, e.g. weight loss, anaemia. Some patients may present with paraneoplastic syndromes indicative of disseminated disease. This will include release of renin, erythropoietin, ACTH or parathyroid-like hormone and will cause, among other symptoms, hypercalcaemia, polycythaemia, hypertension and night sweats. Metastatic spread of the disease is by direct extension into the paranephric fat, fascia and into the renal vein/inferior vena cava; or haematogenous, presenting as cannonball metastases in the lung, brain and bone.\n\nTreatment is dependent on stage and spread of disease. Localized disease is treated mainly with radical nephrectomy. This involves removal of the kidney and surrounding Gerota's fascia via either an extra-peritoneal lateral loin approach or trans-abdominal approach. A partial nephrectomy may be performed in certain cases, e.g. poor renal function. Treatment for metastatic disease (which affects around 30% of patients on initial presentation) includes palliative nephrectomy, embolization, chemo/radiotherapy and immunotherapy.\n\nFive-year survival is dependent on tumour stage and grade. In cases of localized disease, there is approximately 90% 5-year survival, but in patients with distant metastases, this drops to around 20%."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "22. Bladder malignancy (1)\nWith regard to carcinoma of the bladder, which one of the following statements\nis *not* correct?",
            "options": [
                "A. Epithelial tumours account for the majority of bladder tumours",
                "B. It accounts for 1 in every 5000 new cases of cancer in the United\nKingdom",
                "C. Males are more commonly affected than females",
                "D. There is a strong correlation with exposure to industrial dyes",
                "E. It frequently presents with painful haematuria"
            ],
            "answer": "E",
            "explanation": "Carcinoma of the bladder is a malignancy that arises more commonly in middle-aged and elderly individuals, particularly men. It accounts for approximately 1 in 5000 cancers in the UK. There are several predisposing factors, including cigarette smoking, exposure to industrial chemicals (historically aromatic amines and aniline dyes used in the dying industry, but also those involved in printing, processing and rubber industries), drugs such as phenacetin and cyclophosphamide, and chronic inflammation (e.g. secondary to schistosomiasis/Bilharzia).\n\nMalignant bladder cancers are predominantly (<90%) transitional cell carcinomas, arising from transitional cells found in the kidneys, ureters and bladder. Rarer bladder malignancies include squamous cell carcinoma, adenocarcinoma and sarcoma, which account for around 10% of bladder cancers. Squamous cell carcinomas arise typically in an area of metaplasia and can follow chronic inflammation, e.g. post schistosomiasis. They form large, bulky masses in the bladder. Adenocarcinomas arise from urachal remnants on the bladder dome.\n\nBladder cancers usually present with painless haematuria and occasionally symptoms of renal failure due to ureteric obstruction. In more advanced disease, patients can present with dysuria, frequency, urgency, clot formation and urinary retention.\n\nTreatment depends on the level of differentiation as determined by biopsy, staging and presence of metastatic spread. Modalities of treatment typically consist of chemotherapy, radiotherapy and surgical resection. Five-year survival is variable, depending on the stage and grade of the tumour."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "23. Bladder malignancy (2)\nA 69-year-old retired canal engineer who has previously worked in North Africa\npresents to the urology outpatients department with a 2-month history of inter-\nmittent painless haematuria. A cystoscopy is performed showing a sessile mass\non the posterior bladder wall. A biopsy is taken of this mass, which confirms\ntransitional cell carcinoma invading the bladder muscle, but no local nodes are\ninvolved. A further staging computed tomography scan shows no distant metas-\ntases. According to the TNM classification, the tumour stage in this individual is",
            "options": [
                "A. Tis Nx Mx",
                "B. T2 N0 ΜΟ",
                "C. T2 N1 ΜΟ",
                "D. T3 N1 M1",
                "E. T3 N0 M1"
            ],
            "answer": "B",
            "explanation": "The TNM classification of bladder cancer is shown in the table below.\n\nTis Carcinoma in situ\nTa Papillary non I-IV carcinoma\nT1 Tumour extends through lamina propria\nT2 Tumour invades muscle\nT2a Tumour invades superficial muscle\nT2b Tumour invades deep muscle\nT3 Tumour invades peri-vesical tissue\nT3a Microscopic invasion\nT3b Macroscopic invasion\nT4 Tumour invades adjacent structures\nT4a Invades prostate, uterus or vagina\nT4b Pelvic/abdominal wall invasion\nNx Level of nodal involvement unknown\nN0 No nodes involved\nN1 Single lymph node metastasis <2 cm\nN2 Single node 2–5 cm or multiple nodes >5 cm\nN3 Metastasis >5 cm\nMx Degree of metastatic spread unknown\nM0 No distant metastasis\nM1 Distant metastasis present\n\nTreatment of bladder carcinoma depends on tumour stage:\n\n• Superficial disease (i.e. Tis, Ta and T1) is treated with trans-urethral resection of bladder tumour (TURBT) + intravesical therapy. Patients are followed up with regular cystoscopy as there is a risk of developing invasive disease.\n• Intravesical therapy consists of mitomycin C or BCG for 6 weeks.\n• Radical therapy is reserved for patients with extensive disease and those who fail to respond to intravesical treatment."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "24. Testicular malignancy (1)\nWhich one of the following statements regarding testicular tumours is true?",
            "options": [
                "A. They account for 5%-10% of male malignancy in the United\nKingdom",
                "B. Seminomas are more common than non-seminomatous germ cell\ntumours",
                "C. Teratomas commonly present between the ages of 30 and 50 years",
                "D. Seminomas secrete a-fetoprotein and β-human chorionic\ngonadotrophin",
                "E. 5-year survival for seminomas is approximately 90%"
            ],
            "answer": "E",
            "explanation": "Testicular malignancy is the commonest solid tumour in young men, but accounts for approximately 1%–2% of all male cancers in the United Kingdom. Individuals with undescended testicles, infertile parents and a previous contralateral malignancy are at an increased risk.\n\nTesticular tumours are divided into three broad groups: stromal tumours, lymphomas and germ cell tumours. Stromal tumours are those arising from Leydig's cells (which secrete androgens and can cause infantile Hercules' syndrome) and Sertoli's cells (these secrete androgens and individuals can present with testicular feminization). Approximately 10% are malignant. Lymphomas account for <10% of testicular tumours, occurring predominantly in elderly men, and have a poor prognosis.\n\nGerm cell tumours comprise the majority of testicular tumours (80%–90%) and are subdivided into two main types: seminomas and non-seminomatous germ cell tumours. Seminomas arise from germinal cells in the testes and are solid and slow growing. They comprise approximately 42% of germ cell tumours and are extremely radiosensitive, giving an excellent prognosis with a 5-year survival rate of around 90%. NSGCTs account for almost 60% of germ cell tumours and also have many subtypes of which teratomas are the most common. Teratomas usually affect individuals aged 15–35 years and are believed to originate from totipotent cells. They can be solid or cystic in nature.\n\nMost patients will present with a painless lump in the testicle although a small proportion may present with testicular pain. Occasionally, patients will complain of haematospermia and gynaecomastia (as a result of β-hCG production). Infrequently, patients will present with signs of disseminated disease such as shortness of breath, bone pain and a palpable abdominal mass (due to enlarged para-aortic lymph nodes). These malignancies can also produce tumour markers including AFP and β-hCG. Both markers are produced by teratomas whereas seminomas may produce AFP alone. Treatment is dependent on the type, grade and stage of the malignancy, and includes radical orchidectomy, chemotherapy and radiotherapy."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "25. Testicular malignancy (2)\nA 36-year-old carpenter is diagnosed with a seminoma. To which lymph nodes\ndo a seminoma most commonly spread first?",
            "options": [
                "A. Para-aortic lymph nodes",
                "B. Superficial inguinal lymph nodes",
                "C. Anterior cervical chain",
                "D. Posterior cervical chain",
                "E. Deep inguinal lymph nodes"
            ],
            "answer": "A",
            "explanation": "Seminoma is a type of germ cell tumour of the testicle, predominantly affecting individuals aged 20–40 years. Vascular supply to the testicles is from the testicular artery, a branch of the abdominal aorta that travels through the inguinal canal to reach the testicles. Lymphatic drainage of the testicles follows the arterial supply back to the aorta and as a result initial dissemination of testicular malignancies is in the para-aortic lymph nodes.\n\nThe anterior cervical chain of nodes lies above and below the sternocleidomastoid muscle in the neck and drains the throat, posterior pharynx, tonsils and thyroid gland. Meanwhile, the posterior cervical chain lies posterior to the sternocleidomastoid muscle (and anterior to the trapezius) and can become enlarged during upper respiratory tract infections. The superficial inguinal lymph nodes drain lymph from the scrotum, while the deep nodes can become enlarged as a result of spread from anal and vulval malignancies. The deep nodes drain to the external iliac, pelvic and finally para-aortic lymph nodes."
        },
        {
            "id": 26,
            "question_type": "mcq",
            "question": "26. Carcinoma of the penis\nAll of the following statements regarding carcinoma of the penis are true, except",
            "options": [
                "A. It is a squamous cell carcinoma",
                "B. Incidence is lower in men infected with the human papilloma virus",
                "C. Incidence is lower in men circumcised at birth",
                "D. Staging of disease is by the tumour node metastasis (TNM) system",
                "E. 5-year survival in patients with localized disease is around 80%"
            ],
            "answer": "B",
            "explanation": "Carcinoma of the penis is a rare squamous cell carcinoma originating predominantly in the glans penis or foreskin and accounting for around 1% of male malignancy. It is extremely rare in individuals circumcised at a young age and thought to result from chronic irritation due to balanitis and smegma. Incidence is also higher in individuals with HPV infection (particularly serotypes 16, 18 and 31).\n\nPatients usually present with a painless lesion (an erythematous indurated area, ulcer or wart) on the glans, prepuce or foreskin. Patients will often delay consulting a medical practitioner, and as a result may have palpable inguinal lymph nodes at the time of initial presentation.\n\nThe disease is staged by the TNM classification, with treatment being dependent on staging. Local disease may be treated simply with local biopsy or circumcision, while more advanced disease may require topical chemotherapy (e.g. with 5-fluorouracil) or even partial or total amputation of the penis if there is poorly differentiated or locally advanced disease. Patients with palpable inguinal lymph nodes may or may not have disseminated disease. Antibiotic therapy is used to treat the underlying infection that could be confounding an individual's presentation. If lymph nodes remain palpable despite treatment, then bilateral inguinal lymphadenectomy with *en bloc* dissection may be needed to clear the disease.\n\nThe 80% 5-year survival is dependent on tumour stage and the presence of metastatic disease. Overall survival is approximately 50%, but can be as low as 20% in patients with iliac node involvement or as high as 90% in those with only local disease without metastatic spread."
        },
        {
            "id": 27,
            "question_type": "mcq",
            "question": "27. Peyronie's disease\nA 55-year-old solicitor presents to the urology outpatients department with a\n6-month history of abnormal angulated penis on erection. This has made sexual\nintercourse particularly difficult and painful and has been affecting his rela-\ntionship with his wife. After further questioning, a diagnosis of Peyronie's dis-\nease is offered. All of the following statements regarding Peyronie's disease are\ntrue, except",
            "options": [
                "A. It is a connective tissue disorder of unknown origin",
                "B. Around 1% of men are affected",
                "C. It is the result of a gene mutation on chromosome 5",
                "D. Surgical treatment is considered only 1 year after initial\npresentation",
                "E. There is an association with Dupuytren's contracture"
            ],
            "answer": "C",
            "explanation": "Peyronie's disease is an eponymously named connective tissue disorder of unknown origin, resulting in growth of fibrous plaques in the tunica albuginea and the corpus cavernosum. The disease affects approximately 1% of mainly middle-aged men, causing the penis to curve abnormally on erection (at the point at which fibrous plaques are present), and resulting in pain. The presence of pain and abnormal penile curvature can make sexual intercourse difficult and lead to erectile dysfunction. The condition is also associated with Dupuytren's and plantar fascial contractures.\n\nTreatment is initially conservative for 1 year to allow the disease process and pain to stabilize. ESWL can be used to soften or destroy the penile plaque, but there haven't been any long-term follow-up studies of this procedure.\n\nSurgical management is generally considered after 1 year especially if the condition is causing sexual dysfunction. Three main procedures are used:\n\n• Nesbit's operation – Tunica albuginea on the opposite side of the offending plaque is excised, leading to return of normal curvature but also penile shortening.\n• Plaque excision and patching – Can lead to softer erections.\n• Implantation of penile prosthesis – Straightens penis in men with pre-existing erectile dysfunction."
        },
        {
            "id": 28,
            "question_type": "mcq",
            "question": "28. Anatomy of the prostate gland\nWhich of the following vessels contributes to the blood supply of the prostate\ngland?",
            "options": [
                "A. Coeliac plexus",
                "B. Superior mesenteric artery",
                "C. Inferior mesenteric artery",
                "D. Internal iliac artery",
                "E. External iliac artery"
            ],
            "answer": "D",
            "explanation": "The prostate gland is a conical shaped structure lying inferior to the bladder in men and surrounds the prostatic urethra. It functions to produce an alkaline fluid that builds up seminal fluid. It is supplied by branches of the inferior vesical and middle rectal arteries, which are two of the branches of the internal iliac artery. Venous drainage is via the prostatic venous plexus, which drains into the internal iliac vein and occasionally into the vertebral venous plexus. Lymphatic drainage of the gland is to the internal iliac nodes."
        },
        {
            "id": 29,
            "question_type": "mcq",
            "question": "29. Prostatic disease\nAn 80-year-old man presents to his GP with a 6-month history of increasing\nurinary frequency. He passes urine approximately eight times during the day\nand six times each night, but feels that he has not completely voided. In addition,\nhe reports that his stream is very slow and finds it hard to stop, with micturi-\ntion prolonged due to terminal dribbling. He is otherwise fit and healthy with\nno other symptoms reported. On rectal examination, the prostate is found to be\nsmoothly enlarged with no other significant findings on systemic examination.\nWhich of the following layers of the prostate gland is likely to be enlarged in\nthis man?",
            "options": [
                "A. Transition zone",
                "B. Central zone",
                "C. Peripheral zone",
                "D. Anterior fibromuscular stroma",
                "E. All of the above"
            ],
            "answer": "A",
            "explanation": "This scenario describes a case of BPH. The prostate gland is composed primarily of glandular tissue, with fibromuscular stroma contributing the rest of its mass. It is composed of three lobes (anterior, posterior and median) formed by four tissue layers:\n\n• Transition zone – Innermost tissue layer of the prostate that surrounds the urethra proximal to the ejaculatory ducts and is enlarged in BPH, leading to the associated signs and symptoms described.\n• Central zone – Surrounds the ejaculatory ducts and projects beneath the bladder to the seminal vesicles.\n• Peripheral zone – Most cancers of the prostate arise here (causing the bulky and the irregular prostate to be palpable on rectal examination).\n• Anterior fibromuscular stroma.\n\nBenign prostatic hypertrophy is the benign enlargement of stromal and glandular tissue within the inner transition zone of the prostate gland. This process is thought to result from a steroid hormone imbalance causing a proportionately increased level of oestrogen as compared with testosterone within the body. As a result, the elevated levels of oestrogen inhibit the elimination of DHT from the prostate. It is more common in middle-aged and elderly individuals, affecting most men by the age of 80. Presentation can be asymptomatic, i.e. found coincidentally, with lower urinary tract symptoms (which may develop over weeks or months) or urinary retention.\n\nLower urinary tract symptoms include:\n\n• Voiding symptoms, e.g. hesitancy, straining, poor stream, terminal dribbling and strangury (the sensation of incomplete voiding).\n• Storage symptoms, e.g. frequency, urgency, nocturia, overflow incontinence.\n• Other symptoms – UTI, bladder stones due to stasis, occasional haematuria.\n\nPhysical examination may reveal a palpable, enlarged bladder, which may also cause pain. This must be relieved by urinary or suprapubic catheterization. In addition, a digital rectal examination will reveal a smoothly enlarged prostate but this does not always correlate with the patient's symptoms. Key investigations in addition to routine blood tests are PSA level, although this is not specific for investigation of LUTS, and ultrasound scan of the renal tract, to rule out any other abnormalities."
        },
        {
            "id": 30,
            "question_type": "mcq",
            "question": "30. Prostate cancer\nA 75-year-old man presents to the urology outpatient clinic with a 6-month\nhistory of urinary frequency associated with difficulty initiating micturition,\ndribbling on reaching the end of his stream and nocturia. A digital rectal exami-\nnation reveals a hard prostate gland. Core biopsy is performed on the gland and\nthe pathology report indicates the presence of a tumour involving most of the\nright lobe. According to the TNM classification, the tumour stage is",
            "options": [
                "A. T2 N1 MO",
                "B. T3 Nx Mx",
                "C. T3 N1 ΜΟ",
                "D. T2 Nx Mx",
                "E. T1 N1 ΜΟ"
            ],
            "answer": "D",
            "explanation": "Cancer of the prostate is the most common cancer in men and the third most common cause of death (in men) due to cancer. Several different classification systems exist to stage prostate cancers, of which the TNM classification is the most widely used (see Table 11.2). In the case described, it is known that the prostate gland is mis-shapen on rectal examination and in addition the tumour remains within the capsule of the prostate gland. There is no indication in the scenario of lymph involvement or the presence of metastases. As a result the tumour stage would be T2 Nx Mx – x indicating that the involvement of lymph nodes and presence of metastases is unknown.\n\nTable 11.2 TNM classification of prostate cancer\nTis Carcinoma in situ\nT1 Incidental finding\nT2 Intracapsular tumour with deformation of the prostate\nT3 Extra-prostatic extension\nT4 Tumour fixed to the pelvis\nNx Level of nodal involvement unknown\nN0 No lymph node involvement\nN1-4 One or more lymph node systems involved to varying levels\nMx Degree of metastatic spread unknown\nM0 No distant metastases\nM1 Metastases to a distant site, e.g. spine"
        }
    ]
}
{
    "chapter_name": "65 The liver",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "1. Which of the following statements is not true?\nA The falciform ligament of the liver divides it into functional right and left units.\nB The right and left triangular ligaments help to fix the liver and keep it in its place.\nC The main blood supply of the liver is derived from the portal vein.\nD The right hepatic vein has an extrahepatic course while the middle and left hepatic veins join the inferior vena cava within the liver.\nE The left intrahepatic duct has a longer extrahepatic course than the right.",
            "options": [
                "A The falciform ligament of the liver divides it into functional right and left units.",
                "B The right and left triangular ligaments help to fix the liver and keep it in its place.",
                "C The main blood supply of the liver is derived from the portal vein.",
                "D The right hepatic vein has an extrahepatic course while the middle and left hepatic veins join the inferior vena cava within the liver.",
                "E The left intrahepatic duct has a longer extrahepatic course than the right."
            ],
            "answer": "A",
            "explanation": "The falciform ligament does not divide the liver into functional right and left anatomical units. This is done by Cantlie's line (see the following). The falciform ligament extends from the posterior surface of the anterior abdominal wall and diaphragm on to the anterior and superior surfaces of the liver into the interlobar fissure; it divides the liver anatomically into a large right lobe and much smaller left lobe. The falciform ligament contains the ligamentum teres, which is the obliterated left umbilical vein.\nThe left triangular ligament is a double layer of peritoneum on the superior border of the left lobe of the liver; dividing this ligament allows the lobe to be mobilised from the diaphragm. The right triangular ligament fixes the larger right lobe of the liver to the right hemidiaphragm. To mobilize the right lobe, the right triangular ligament needs to be divided.\nThe main blood supply of the liver is derived from the portal vein, which supplies 80%, the remaining 20% being supplied by the hepatic artery. The right hepatic vein can be exposed outside the liver before it enters the inferior vena cava while the middle and left hepatic veins join the inferior vena cava within the liver. The left extrahepatic duct has a longer intrahepatic course. This important anatomic fact is very useful; because of its accessibility, in high common bile duct strictures, a left hepatico-jejunostomy can be carried out."
        },
        {
            "id": "2",
            "question_type": "msq",
            "question": "2. Which of the following statements are true?\nA Cantlie's line passes through the gallbladder fossa and middle hepatic vein.\nB The functional right and left units divided by Cantlie's line are further subdivided into four segments on each side.\nC The free edge of the lesser omentum contains the hepatic artery, bile duct and portal vein.\nD The portal vein is formed by the union of the superior and inferior mesenteric veins.\nE The structures at the porta hepatis are the portal vein, bile ducts, hepatic artery and hepatic veins.",
            "options": [
                "A Cantlie's line passes through the gallbladder fossa and middle hepatic vein.",
                "B The functional right and left units divided by Cantlie's line are further subdivided into four segments on each side.",
                "C The free edge of the lesser omentum contains the hepatic artery, bile duct and portal vein.",
                "D The portal vein is formed by the union of the superior and inferior mesenteric veins.",
                "E The structures at the porta hepatis are the portal vein, bile ducts, hepatic artery and hepatic veins."
            ],
            "answer": [
                "A",
                "B",
                "C"
            ],
            "explanation": "The Scottish anatomist, Sir James Cantlie, in 1897 described a line that divided the liver into two physiological halves indicating the functional midline of the liver. This is 'an extrapolated line from the posthepatic inferior vena cava across the diaphragmatic surface of the liver to the site where the fundus of the gallbladder contacts the inferior margin of the liver'. The French anatomist, Claude Couinaud, in 1957 divided these two halves of the liver into eight segments. Each of these segments are a separate functional unit with a branch of the hepatic artery, portal vein and bile duct and drained by a tributary of the hepatic vein. The physiological and functional right and left halves were thus divided into the following four segments each: segments I–IV in the left half and segments V-VIII in the right half known as the Couinaud's segments (Figure 65.1).\nThe free edge of the lesser omentum between the stomach and liver is thin and fragile, containing the bile duct on the right, hepatic artery medially and portal vein posterior to both. The portal vein is formed by the union of the superior mesenteric and splenic veins behind the neck of the pancreas. The inferior mesenteric vein empties into the splenic vein. At the porta hepatis the structures are the portal vein, bile ducts and hepatic artery. The hepatic veins (right, middle and left) enter separately into the inferior vena cava (see previously)."
        },
        {
            "id": "3",
            "question_type": "msq",
            "question": "3. Which of the following liver function tests (LFTs) are abnormal?\nA Bilirubin 5-17 µmol/L\nB Alkaline phosphatase (ALP) 35-130 IU/L\nC Aspartate transaminase (AST) 55-80 IU/L\nD Alanine transaminase (ALT) 135-240 IU/L\nE Gamma-glutamyl transpeptidase (GGT) 110-148 IU/L",
            "options": [
                "A Bilirubin 5-17 µmol/L",
                "B Alkaline phosphatase (ALP) 35-130 IU/L",
                "C Aspartate transaminase (AST) 55-80 IU/L",
                "D Alanine transaminase (ALT) 135-240 IU/L",
                "E Gamma-glutamyl transpeptidase (GGT) 110-148 IU/L"
            ],
            "answer": [
                "C",
                "D",
                "E"
            ],
            "explanation": "The liver has many functions chief among which are maintenance of acid-base balance; metabolism of glucose, fat and carbohydrate; urea formation from protein breakdown; manufacture of bile; maintenance of body temperature; and synthetic functions such as the manufacture of albumin and clotting factors. The normal levels of the transaminases are as follows: AST = 5-40 IU/L, ALT = 5-40 IU/L and GGT = 10-48 IU/L. Increased levels of transaminases (AST, ALT) and GGT indicate acute hepatocellular damage. Raised ALP indicates obstructive jaundice, whilst hyperbilirubinaemia indicates excessive haemoglobin breakdown, liver cell damage, or cholestasis.\nFor jaundice to be clinically obvious the bilirubin level needs to be almost three times the normal. For patients who are being observed for liver damage, the routine tests that are useful are serum bilirubin, albumin and prothrombin time."
        },
        {
            "id": "4",
            "question_type": "msq",
            "question": "4. Which of the following statements are true?\nA Ultrasound (US) is the first-line investigation.\nB Nuclear medicine scanning gives an idea of the extent of anatomical derangement.\nC The 'gold standard' is contrast-enhanced computed tomographic scan (CECT).\nD Magnetic resonance imaging (MRI) has advantages over CECT.\nE Angiography is best reserved when embolisation is contemplated.",
            "options": [
                "A Ultrasound (US) is the first-line investigation.",
                "B Nuclear medicine scanning gives an idea of the extent of anatomical derangement.",
                "C The 'gold standard' is contrast-enhanced computed tomographic scan (CECT).",
                "D Magnetic resonance imaging (MRI) has advantages over CECT.",
                "E Angiography is best reserved when embolisation is contemplated."
            ],
            "answer": [
                "A",
                "C",
                "D",
                "E"
            ],
            "explanation": "Ultrasound is the first-line investigation, as it is safe and universally available. It detects liver tumours and biliary pathology. It is operator dependent. CECT is the ‘gold standard' for liver imaging in most clinical situations – trauma, tumour, infections and inflammations. Triple-phase, multi-slice, spiral CECT provides fine detail of liver lesions. Oral contrast shows up the anatomical relationship of the stomach and duodenum to the liver hilum. Intravenous contrast gives the arterial and venous phases. MRI has the following advantages over CECT: there is no risk of allergic reaction as iodine-containing contrast is not used; there is no radiation; magnetic resonance cholangiopancreatography (MRCP) provides excellent images of the biliary tract; and magnetic resonance angiography (MRA) gives high-definition images of hepatic artery and portal vein without recourse to arterial cannulation. As vascular information can be obtained from CECT and MRI, hepatic angiography is mostly reserved when therapeutic embolisation is contemplated, as in trauma or tumour.\nRadioisotope liver scanning does not show anatomical abnormalities but provides diagnostic information and is a useful noninvasive screening test in suspected bile leak or biliary obstruction. HIDA is a technetium-99m radionuclide (⁹⁹Tc Hydroxy Iminodiacetic Acid) administered intravenously for this purpose. A radioactive sulphur colloid liver scan allows the study of Kupffer cell activity; an adenoma or haemangioma can be diagnosed, as these do not take up sulphur colloid because they lack Kupffer cells."
        },
        {
            "id": "5",
            "question_type": "msq",
            "question": "5. Which of the following statements are not true?\nA The overall mortality from acute liver failure is about 50%.\nB Chronic congestive heart failure is a terminal event in chronic liver disease.\nC The most useful clinical sign is flapping tremor.\nD Model for End-Stage Liver Disease (MELD) score depends upon, INR, serum bilirubin and serum creatinine.\nE Liver transplantation has good short-term results in acute liver failure.",
            "options": [
                "A The overall mortality from acute liver failure is about 50%.",
                "B Chronic congestive heart failure is a terminal event in chronic liver disease.",
                "C The most useful clinical sign is flapping tremor.",
                "D Model for End-Stage Liver Disease (MELD) score depends upon, INR, serum bilirubin and serum creatinine.",
                "E Liver transplantation has good short-term results in acute liver failure."
            ],
            "answer": [
                "B",
                "E"
            ],
            "explanation": "Gradual liver failure is associated with high-output cardiac failure with hyperdynamic circulation, collapsing pulse, high systolic and low diastolic pressure (high pulse pressure) and warm extremities. Endotoxins and disordered vasomotor tone have been implicated in causing this cardiovascular problem. In acute liver failure, liver transplantation has poor short-term results.\nThe overall mortality from acute liver failure is about 50% in spite of the best supportive management. Management of acute liver failure should be in the ICU with meticulous fluid balance support, acid-base monitoring, adequate nutrition and organ support such as dialysis and ventilation; reducing cerebral oedema and preventing opportunistic infections are important.\nFlapping tremor is the most obvious clinical sign associated with confusion, memory impairment and personality changes – all features of hepatic encephalopathy brought on by cerebral oedema. The severity of chronic liver disease is graded by the MELD score. This gives the probability of survival based on the patient's international normalised ratio (INR), serum bilirubin and serum creatinine."
        },
        {
            "id": "6",
            "question_type": "msq",
            "question": "6. Which of the following statements are not true?\nA Liver injuries are common.\nB Blunt trauma is often associated with splenic, mesenteric and renal injuries.\nC Penetrating trauma is often associated with pericardial or chest injuries.\nD CECT scan must be carried out in every case of liver trauma.\nE Interventional radiology has a role in the management of liver injury.",
            "options": [
                "A Liver injuries are common.",
                "B Blunt trauma is often associated with splenic, mesenteric and renal injuries.",
                "C Penetrating trauma is often associated with pericardial or chest injuries.",
                "D CECT scan must be carried out in every case of liver trauma.",
                "E Interventional radiology has a role in the management of liver injury."
            ],
            "answer": [
                "A",
                "D"
            ],
            "explanation": "Liver injuries are rare because of its anatomical position under the diaphragm where it is protected by the lower thoracic cage. Therefore when the liver is damaged, the overall injury is usually very severe. Blunt trauma is often associated with damage to neighbouring structures, such as the spleen, kidneys and mesentery. Stab and gunshot wounds causing penetrating injuries are associated with chest trauma.\nCECT scan is not done in every case of liver trauma. If unstable, the patient needs to be taken to theatre forthwith without wasting time on a scan. On the other hand, stable patients suspected of having liver damage should undergo a CECT scan of chest and abdomen. The stable patient who has no hollow viscus damage, but continues to bleed from the liver, might well benefit from an interventional radiologist who could perform a hepatic angiogram with a view to doing embolisation."
        },
        {
            "id": "7",
            "question_type": "msq",
            "question": "7. Which of these statements are true?\nA Penetrating injuries should be explored.\nB Blunt injuries are usually treated conservatively.\nC Exploration for a liver injury is best done by a long midline incision.\nD Severe crush injury is ideally treated by packing.\nE Venovenous bypass should be considered in major liver vascular injury.",
            "options": [
                "A Penetrating injuries should be explored.",
                "B Blunt injuries are usually treated conservatively.",
                "C Exploration for a liver injury is best done by a long midline incision.",
                "D Severe crush injury is ideally treated by packing.",
                "E Venovenous bypass should be considered in major liver vascular injury."
            ],
            "answer": [
                "A",
                "B",
                "D",
                "E"
            ],
            "explanation": "A penetrating injury, such as a lower right chest and abdominal stab wound, requiring large amounts of blood replacement will need urgent exploration. The patient should be transferred to the operating theatre whilst active resuscitation is underway. Blunt injuries are mostly treated conservatively. Stable patients need to undergo a CECT scan and be treated conservatively as long as they continue to be stable. Exploration for liver injury is ideally carried out by a rooftop incision, which can be extended upward for a median sternotomy (Mercedes-Benz incision) if necessary.\nSevere crush injury is treated by packing and re-exploration after 48 hours. In major liver vascular damage, the patient is put on a venovenous bypass. In this a cannula is passed from the femoral vein to the superior vena cava; this allows the IVC to be safely clamped to facilitate caval or hepatic vein repair.\nIdeally these patients are best managed in a tertiary hepatobiliary unit. In the management of these patients, there should be close liaison with the blood transfusion department, as these patients will not only require large amounts of blood but also fresh frozen plasma and cryoprecipitate. These patients are prone to develop irreversible coagulopathies due to lack of fibrinogen and clotting factors. Standard intraoperative coagulation studies are inadequate and factors are given empirically. An ideal method of monitoring the coagulation status is thromboelastography (TEG), which is a dynamic form of intraoperative assessment of the coagulation profile."
        },
        {
            "id": "8",
            "question_type": "msq",
            "question": "8. The following statements are true except:\nA Acute haematemesis from portal hypertension occurs most commonly from gastric varices.\nB Initial endoscopic treatment of oesophageal varices with banding, as opposed to injection sclerotherapy, has less chance of oesophageal ulceration.\nC Long-term beta-blocker therapy coupled with sclerotherapy regime or endoscopic banding is the mainstay of treatment of portal hypertension.\nD In failed drug or endoscopic treatment, the ideal choice is the surgical shunt of portocaval anastomosis.\nE Ascites in cirrhosis can be treated by a peritoneovenous shunt.",
            "options": [
                "A Acute haematemesis from portal hypertension occurs most commonly from gastric varices.",
                "B Initial endoscopic treatment of oesophageal varices with banding, as opposed to injection sclerotherapy, has less chance of oesophageal ulceration.",
                "C Long-term beta-blocker therapy coupled with sclerotherapy regime or endoscopic banding is the mainstay of treatment of portal hypertension.",
                "D In failed drug or endoscopic treatment, the ideal choice is the surgical shunt of portocaval anastomosis.",
                "E Ascites in cirrhosis can be treated by a peritoneovenous shunt."
            ],
            "answer": [
                "A",
                "D"
            ],
            "explanation": "Acute haematemesis from portal hypertension (Figure 65.2) most often occurs from lower oesophageal varices and not gastric varices. The initial definitive treatment is endoscopic sclerotherapy or banding, the latter having a lesser incidence of oesophageal ulceration. Long-term beta-blocker therapy coupled with endoscopic sclerotherapy or banding is the main treatment for portal hypertension. When this fails, transjugular intrahepatic portosystemic stent shunt (TIPSS) (Figure 65.3) is the treatment of choice in preference to the operation of portocaval anastomosis. Ascites can be treated by insertion of a peritoneovenous shunt – either a Le Veen or Denver shunt. The latter helps to evacuate any debris blocking the shunt.\nIn some instances the rate of blood loss might be so severe that endoscopic evaluation by oesophagogastroduodenoscopy (OGD) might not be possible in practice. In such an extreme situation oesophageal tamponade by the use of a Sengstaken-Blakemore tube (Figure 65.4) might have to be carried out. The details of its use are in Table 65.1."
        },
        {
            "id": "9",
            "question_type": "emq",
            "question": "A A 30-year-old woman has a history of recurrent attacks of fever with rigors, right upper quadrant pain and jaundice with itching. Biochemistry shows a jaundice of obstructive nature. CT scan shows intrahepatic ductal dilatation with stones.",
            "options": {
                "items": [
                    "A"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "4",
            "explanation": "This patient has recurrent attacks of obstructive jaundice with features of sepsis – typical of bile duct stones. The CT scan confirms the diagnosis of this congenital condition. There are two types – a periportal fibrotic type occurring in childhood and a simple type that presents later in life. Treatment is with antibiotics and removal of the stones. If and when the disease is limited to one lobe of the liver, lobectomy might be carried out (see Chapter 67, The gallbladder and bile ducts)."
        },
        {
            "id": "10",
            "question_type": "emq",
            "question": "B A 40-year-old woman presents with recurrent episodes of right upper quadrant pain with jaundice. Biochemistry shows an obstructive pattern of the jaundice. Five years ago she underwent a panproctocolectomy for ulcerative colitis and has been well since, except for these attacks. Endoscopic retrograde cholangiopancreatography (ERCP) shows irregular narrowed intra- and extrahepatic bile ducts.",
            "options": {
                "items": [
                    "B"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "11",
            "explanation": "This patient who has suffered from ulcerative colitis now has primary sclerosing cholangitis. Although her ulcerative colitis has been treated successfully by surgery, her primary sclerosing cholangitis has continued unabated. The disease causes progressive fibrous stricturing with gradual obliteration of the intra and extra-hepatic biliary tree. The ERCP is diagnostic, showing irregular narrowed biliary tree. There is no specific treatment. Death from liver failure eventually is the outcome. A close surveillance should be carried out because this patient might develop a cholangiocarcinoma. Appearance of a new or dominant stricture on repeat cholangiography should arouse this sinister suspicion."
        },
        {
            "id": "11",
            "question_type": "emq",
            "question": "C A 50-year-old woman complains of general malaise, lethargy, pruritus and jaundice, the latter being present over the last 3 months. The LFTs show a rise in bilirubin, transaminases and prothrombin time. She has had recurrent small haematemesis and has ascites.",
            "options": {
                "items": [
                    "C"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "10",
            "explanation": "Primary biliary cirrhosis is a condition of gradual onset. The liver function tests show hepatocellular dysfunction. Confirmation is by liver biopsy. The condition progresses slowly, causing portal hypertension with variceal bleeding and ascites. The treatment is supportive or liver transplantation."
        },
        {
            "id": "12",
            "question_type": "emq",
            "question": "D A 30-year-old woman complains of abdominal discomfort and distension. She has had three episodes of small haematemesis in the past 6 months. On examination she has hepatomegaly and ascites. All the LFTs are deranged. CT scan of the liver shows a large congested liver.",
            "options": {
                "items": [
                    "D"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "3",
            "explanation": "This is Budd-Chiari syndrome where there is hepatic vein thrombosis caused by an underlying myeloproliferative disorder or procoagulant state due to antithrombin 3, protein C, or protein S deficiency. The hepatic venous outflow obstruction causes a congested liver, impaired liver function, portal hypertension, ascites and oesophageal varices. CT scan is diagnostic. Confirmation is by hepatic venography via the transjugular route, which might allow a biopsy.\nPatients who present acutely in fulminant liver failure or with established cirrhosis and portal hypertension should be considered for liver transplantation. In those who do not have cirrhosis, transjugular intrahepatic portosystemic stent shunt (TIPSS) is advised. Lifelong warfarin anticoagulation is necessary."
        },
        {
            "id": "13",
            "question_type": "emq",
            "question": "E A fit-looking 50-year-old man complains of recent onset of dull aching right upper quadrant pain of 3 to 4 months' duration. Examination shows no abnormality. Liver function tests are normal, as is an upper gastrointestinal endoscopy. An ultrasound of the liver shows a 6 cm solitary cystic lesion.",
            "options": {
                "items": [
                    "E"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "14",
            "explanation": "This patient has a simple solitary hepatic cyst confirmed on ultrasound with the following typical findings: a regular, thin-walled unilocular space-occupying lesion without any surrounding tissue response or variation in density within the cavity. Asymptomatic cysts are left alone. Large cysts producing abdominal discomfort can be treated by laparoscopic deroofing."
        },
        {
            "id": "14",
            "question_type": "emq",
            "question": "F A 25-year-old man complains of generally feeling unwell with fever and weight loss. He has had bloodstained motions on and off for the last 6 weeks after he returned from the Indian subcontinent where he was working for 6 months. On examination he has a tender right upper quadrant with hepatomegaly. US shows a hypoechoic cavity in the right lobe with ill-defined borders.",
            "options": {
                "items": [
                    "F"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "1",
            "explanation": "Having returned from a stay in the Indian subcontinent, this patient has amoebic dysentery with an amoebic abscess. The diagnosis is confirmed by stool examination and isolation of the parasite. US of the liver followed by diagnostic aspiration of the contents are both therapeutic and diagnostic – the contents are usually sterile, the aspirate being characteristically chocolate coloured. Medical treatment with metronidazole and tinidazole should be carried out. Aspiration helps in the penetration of metronidazole and so reduces the morbidity when carried out with drug treatment in a large abscess.\nSurgical treatment is reserved for rupture into the pleural, peritoneal, or pericardial cavities. Resuscitation, drainage and appropriate lavage with vigorous medical treatment are the key principles in management (see Chapter 6, Surgery in the tropics)."
        },
        {
            "id": "15",
            "question_type": "emq",
            "question": "G A 50-year-old woman has had recurrent attacks of colicky right upper quadrant and epigastric pain with jaundice, high temperature with rigors and itching. 10 months ago she underwent an uneventful laparoscopic cholecystectomy. On examination she is jaundiced with scratch marks all over her body and hepatomegaly. She has raised serum bilirubin and the ALP is 1100 IU/L. US shows a dilated common bile duct with stones.",
            "options": {
                "items": [
                    "G"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "2",
            "explanation": "This patient has classical Charcot's intermittent hepatic triad (biliary colic, jaundice and high temperature with rigors) almost certainly from a retained stone as seen on the US. The LFTs show an obstructive picture, particularly the much-raised alkaline phosphatase. She needs to be resuscitated with intravenous fluids and given antibiotics to combat the sepsis and vitamin K to prevent excessive bleeding from the increase in prothrombin time. An ERCP is carried out to confirm the diagnosis and at the same time endoscopic papillotomy carried out to remove the stones (See Chapter 67, The gallbladder and bile ducts)."
        },
        {
            "id": "16",
            "question_type": "emq",
            "question": "H A 35-year-old man presents with general ill health, weight loss, anorexia and malaise for several weeks. He has developed jaundice for the last 2 weeks; he has no pruritus. Abdominal examination shows a tender hepatomegaly. Liver function tests show raised bilirubin and transaminases.",
            "options": {
                "items": [
                    "H"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "15",
            "explanation": "Viral hepatitis can be due to hepatitis A, B and C. Hepatitis C is one of the most common causes of liver disease worldwide. Hepatitis B is the most serious and later can cause a hepatoma. Some patients might present acutely with fulminating liver failure or at a late stage with cirrhosis, variceal bleeding and ascites. Diagnosis is confirmed by the antibody titre to the infective agent. Treatment is supportive for cirrhosis and its complications. Liver transplantation can be considered. Without viral suppression, death from reinfection of the transplanted liver can occur."
        },
        {
            "id": "17",
            "question_type": "emq",
            "question": "I A 75-year-old man, an insulin-dependent diabetic for 40 years, complains of anorexia, fever, malaise and right upper quadrant discomfort. On examination there is weight loss and tender hepatomegaly. US shows a multiloculated cystic mass, a finding confirmed on CT scan.",
            "options": {
                "items": [
                    "I"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "12",
            "explanation": "Pyogenic liver abscess usually occurs in the elderly and infirm who are immunocompromised, as is this patient who is a type 1 diabetic of long standing. The US and CT scan findings are diagnostic. The common organisms are Streptococcus milleri and faecalis, E. coli, Klebsiella and Proteus. The patient is treated with penicillin, aminoglycosides and metronidazole and image-guided aspiration, which might have to be repeated. A source of the infection such as the colon should be sought."
        },
        {
            "id": "18",
            "question_type": "emq",
            "question": "J A 50-year-old man, a native of Cyprus, presents with a painful mass in the right upper quadrant. The pain is a continuous dull ache and has the features of a mass arising from the right lobe of the liver. The blood count shows eosinophilia. The CT scan shows a smooth space-occupying lesion with multiple septa within it.",
            "options": {
                "items": [
                    "J"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "9",
            "explanation": "As a native of a Mediterranean country, this patient has a hydatid cyst of the right lobe of the liver. The diagnosis is confirmed by eosinophilia, serological test for antibodies to hydatid antigen in the enzyme-linked immunosorbent assay (ELISA) and typical CT scan findings of a floating membrane within the cyst and multiple septa. This is caused by the tapeworm Echinococcus granulosus for which the host is the dog and the human. The cyst can rupture into the neighbouring serous cavities.\nTreatment is started with albendazole and mebendazole. The acronym PAIR summarises the treatment of choice: puncture of the cyst under image guidance, aspiration of the contents, instillation of hypertonic saline, reaspiration. The surgical options are liver resection, local excision and deroofing with evacuation of the contents (see Chapter 6, Surgery in the tropics)."
        },
        {
            "id": "19",
            "question_type": "emq",
            "question": "K A 35-year-old woman who is on the contraceptive pill presents with right upper quadrant aching pain. She is fit without any physical findings. Her LFTs and other blood tests are normal. US of the liver shows a single well-demarcated hyperechoic mass and CT scan demonstrates a well-circumscribed vascular solid tumour.",
            "options": {
                "items": [
                    "K"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "7",
            "explanation": "This woman on the contraceptive pill has a hepatic adenoma confirmed on US and CT findings. Biopsy is contraindicated because of the extreme vascularity of these tumours. Stopping the pill is known to have produced tumour regression. They are thought to have a malignant potential and therefore large symptomatic tumours are best resected."
        },
        {
            "id": "20",
            "question_type": "emq",
            "question": "L A 40-year-old man presents with dull, persistent upper abdominal pain, weakness, weight loss and occasional fever. He had one episode of haematemesis. Abdominal examination shows an enlarged liver with a mass in the right lobe. Liver function tests show elevation of the transaminases and much-raised alpha-fetoprotein (AFP).",
            "options": {
                "items": [
                    "L"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "8",
            "explanation": "This male patient clinically has the features of a HCC, which is one of the world's most common cancers with the incidence set to rise because of chronic liver disease from hepatitis B virus (HBV) and hepatitis C virus (HCV). He needs to be thoroughly staged with contrast MRI, CECT, bone scan and CT scan of chest including all routine blood tests. The patient is thus assessed regarding his general condition as to his fitness for surgery and severity of the underlying liver disease. The latter is done by the MELD score (see previously) and the Child-Turcotte-Pugh (CTP) classification. Details of the CTP classification are out of the scope of this book. Once the patient is staged he is discussed in the multidisciplinary team meeting with regard to the best line of management.\nIf surgical treatment is a possibility, the choice is between resection and liver transplantation. The option is tailored according to the stage of liver disease, physical characteristics of the tumour, all facilities available and availability of organ (live or cadaver). Most patients are not amenable for resection because by the time of presentation the disease is beyond surgery. The choices of treatment are shown in Figure 65.5."
        },
        {
            "id": "21",
            "question_type": "emq",
            "question": "M A 60-year-old man presents with dragging pain in the right upper quadrant for 3 months and weight loss. On examination he is slightly jaundiced. He has an enlarged liver. Three years ago he underwent a right hemicolectomy for cancer of the caecum. LFTs show elevation of all the parameters. US shows a solid mass in the right lobe, and a CECT confirms the mass with lack of enhancement.",
            "options": {
                "items": [
                    "M"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "13",
            "explanation": "This patient who had a colonic cancer removed 3 years ago now has the following clinical features of secondaries in the liver: jaundice, hepatomegaly and a liver mass on imaging. He needs a thorough reassessment so that he can be considered for hepatic resection. This would consist of oral and intravenous contrast CT of the liver and abdomen, chest CT and colonoscopy to exclude recurrent or synchronous colonic cancer. As the liver secondary is being staged, at the same time the patient's general condition should be assessed with regard to his suitability for a major hepatic resection. Carcinoembryonic antigen (CEA) level is useful but has low specificity. Biopsy prior to surgery is not done, as malignant cells can seed along the biopsy track.\nMacroscopically on the surface of the liver secondary a depression is felt, typically described as umbilicated. This is because with time the secondary nodule outgrows its blood supply causing the central core of the secondary to necrose resulting in the surface to collapse (Figure 65.6).\nThe longer the recurrence-free gap between the removal of the primary and appearance of the secondary, the better would be the outcome following resection of the metastasis. This patient's primary was removed 3 years ago. Therefore, he would be a good candidate for resection. As these patients have normal liver parenchyma, they could withstand removal of two-thirds of their liver parenchyma with little risk of postoperative liver failure. The resectability rate of colorectal liver metastasis is 20% to 30% whilst approximately 35% of those resected are alive after 5 years. In a selected group of patients, downstaging the metastasis with chemotherapy have enabled secondaries to be resected, which were considered 'unresectable' in the past."
        },
        {
            "id": "22",
            "question_type": "emq",
            "question": "N In a 30-year-old woman, during laparoscopic cholecystectomy, the surgeon noticed that the under-surface of the liver has several lesions that are blue in colour.",
            "options": {
                "items": [
                    "N"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "6",
            "explanation": "Haemangioma is the most common benign liver lesion, increasingly being diagnosed with the availability of expertise in US reporting. MRI will show the classical ‘light bulb' sign. Such lesions are best left alone in the vast majority, the exception being the very large ‘giant' lesions that are symptomatic or show the potential for rupture."
        },
        {
            "id": "23",
            "question_type": "emq",
            "question": "O A 45-year-old woman underwent an US for suspected biliary pain. The US of the biliary tract was normal but showed a solid lesion in the liver. Therefore, she had a CECT scan that showed a vascular lesion surrounding a solid mass with central scarring.",
            "options": {
                "items": [
                    "O"
                ],
                "choices": [
                    "1 Amoebic liver abscess",
                    "2 Ascending cholangitis",
                    "3 Budd-Chiari syndrome",
                    "4 Caroli's disease",
                    "5 Focal nodular hyperplasia",
                    "6 Haemangioma",
                    "7 Hepatic adenoma",
                    "8 Hepatocellular carcinoma (HCC)",
                    "9 Hydatid liver disease",
                    "10 Primary biliary cirrhosis",
                    "11 Primary sclerosing cholangitis",
                    "12 Pyogenic liver abscess",
                    "13 Secondary liver metastasis",
                    "14 Simple cystic disease",
                    "15 Viral hepatitis"
                ]
            },
            "answer": "5",
            "explanation": "Focal nodular hyperplasia is the second most common benign liver lesion, an incidental finding, increasingly diagnosed with improvements in US and CT, which have typical images. Focal nodular hyperplasia contains hepatocytes and Kupffer cells, which are very few in tumours. Thus a sulphur colloid scan, which is taken up by Kupffer cells, would be diagnostic and differentiate it from metastasis. It is left alone."
        }
    ]
}
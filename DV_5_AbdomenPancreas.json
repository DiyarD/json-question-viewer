{
  "chapter_name": "Abdomen-Pancreas",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 48-year-old male presents with vague abdominal pain of 2 weeks' duration. He was recently discharged for an episode of alcohol-related pancreatitis. Laboratory exam is remarkable for a mildly elevated serum amylase. A computed tomography (CT) scan demonstrates a 4-cm well-circumscribed peripancreatic fluid collection with homogenously low attenuation. The borders of the collection appear to be ill-defined. The patient is afebrile and hemodynamically stable. What is the most appropriate next step?",
      "options": [
        "A. Intravenous (IV) antibiotics and fluids",
        "B. Admit and place the patient on nothing by mouth (NPO)",
        "C. Percutaneous aspirate for carcinoembryonic antigen (CEA) level",
        "D. Exploratory laparotomy",
        "E. Observe"
      ],
      "answer": "E",
      "explanation": "*   The history of recent pancreatitis combined with vague abdominal pain, elevated serum amylase, and a CT scan showing a peripancreatic fluid collection most likely represents pancreatic pseudocyst.\n*   Most patients with pseudocyst do not need admission and can continue to eat, although a low-fat diet is recommended.\n*   Admission and total parenteral nutrition (TPN) would only be recommended if the patient were unable to tolerate an oral diet.\n*   There is no reason to start IV antibiotics because the patient is not presenting with an infected pseudocyst.\n*   Initial management of pseudocysts is conservative via observation because most spontaneously resolve.\n*   Pancreatic cyst CEA level is considered the most accurate tumor marker for diagnosing a mucinous pancreatic cystic lesion; however, in this setting, given the high suspicion for a pseudocyst, it would not be needed.\n*   Invasive interventions are inappropriate because most pseudocysts resolve spontaneously.\n*   Predictors of failure for conservative management include pancreatic pseudocysts larger than 6 cm or those that have persisted for more than 6 weeks.\n*   CT or ultrasound can be used to characterize interval changes in pancreatic pseudocysts."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is the least favorable management option for a chronic large pancreatic pseudocyst?",
      "options": [
        "A. Endoscopic transpapillary drainage using a stent",
        "B. Laparoscopic cystogastrostomy",
        "C. CT-guided drainage with a pigtail catheter",
        "D. Open Roux-en-Y cystojejunostomy",
        "E. Endoscopic transgastric cystogastrostomy"
      ],
      "answer": "C",
      "explanation": "*   Internal drainage is usually preferred to external drainage for a symptomatic pancreatic pseudocyst that has failed to resolve with conservative therapy.\n*   External drainage is associated with a higher rate of complications, including infection and pancreaticocutaneous fistula.\n*   The only indication for percutaneous drainage is in a patient with a documented or clinically apparent infected pancreatic pseudocyst that is unstable for a surgical or endoscopic procedure.\n*   Pseudocysts communicate with the pancreatic ductal system in 80% of cases.\n*   Internal drainage can be achieved endoscopically via a transmural approach or a transpapillary approach, or surgically.\n*   Surgical options include cystogastrostomy, Roux-en-Y cystojejunostomy, and cyst duodenostomy.\n*   Cystogastrostomy can be performed endoscopically, laparoscopically, or with a combined approach.\n*   Failure of the endoscopic approach can be predicted by the finding of major ductal disruption or stenosis on endoscopic retrograde cholangiopancreatography (ERCP) or magnetic resonance cholangiopancreatography.\n*   Regardless of the approach, biopsies of the cyst wall must be done to rule out malignancy."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 65-year-old man presents with a persistent skin rash of the lower abdomen and perineum, accompanied by intermittent vague left upper quadrant pain and recent weight loss. A chemistry panel reveals serum glucose to be 160 mg/dL, but results are otherwise unremarkable. CT reveals a large mass in the pancreas. Which of the following is true regarding the most likely condition?",
      "options": [
        "A. This patient is at higher risk for venous thromboembolic disease.",
        "B. The mass is most commonly in the head of the pancreas.",
        "C. The secretory peptide responsible for the symptoms also stimulates exocrine pancreatic flow.",
        "D. Patients often have associated hypokalemia.",
        "E. These are often benign lesions."
      ],
      "answer": "A",
      "explanation": "*   Glucagonoma can be remembered by the 4 D's: diabetes, dermatitis, deep vein thrombosis, and depression.\n*   The rash is termed necrolytic migratory erythema and tends to manifest on the lower abdomen or perineum.\n*   The mass characteristically appears in the tail of the pancreas, along with VIPoma.\n*   The responsible hormone, glucagon, inhibits exocrine pancreatic flow.\n*   The diagnosis of glucagonoma is confirmed by measuring fasting glucagon levels.\n*   Because the tumors are in the distal pancreas, the patient does not usually present with jaundice; as such, the diagnosis is often made late when the tumor is large.\n*   Glucagonoma is most commonly malignant.\n*   It should be removed with enucleation (if <2 cm) or by distal pancreatectomy.\n*   Somatostatinoma can present with diabetes, gallstones, steatorrhea, hypochlorhydria, and most commonly occurs in the head of the pancreas along with pancreatic polypeptide-secreting tumor.\n*   Patients with VIPoma have large-volume secretory diarrhea and can lose enormous amounts of fluids and electrolytes, including potassium."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "The most common cause of chronic pancreatitis worldwide is:",
      "options": [
        "A. Gallstones",
        "B. Alcohol abuse",
        "C. Hereditary",
        "D. Hypertriglyceridemia",
        "E. Infectious"
      ],
      "answer": "B",
      "explanation": "*   For acute pancreatitis, gallstones and alcohol abuse are by far the two most common etiologies, with a slightly higher incidence of biliary pancreatitis.\n*   Biliary pancreatitis, however, leads to chronic pancreatitis far less often.\n*   Alcohol abuse is by far the most common cause of chronic pancreatitis.\n*   Although hypertriglyceridemia, infection (often viral), and hereditary syndromes can lead to acute pancreatitis, they occur less frequently than alcohol abuse and gallstones."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 35-year-old cachectic woman presents with episodic severe watery diarrhea that has led to multiple hospital admissions for replacement of fluids and electrolytes over the course of several months. Stool cultures are repeatedly negative, and she has no history of travel abroad. On examination, a mass is palpated in the epigastrium/right upper quadrant. CT reveals a large, bulky pancreatic mass with extension into the superior mesenteric vein and adjacent organs. The best palliative management option for this patient's symptoms is:",
      "options": [
        "A. Octreotide",
        "B. Streptozotocin",
        "C. Embolization",
        "D. Chemotherapy",
        "E. Radiation therapy"
      ],
      "answer": "A",
      "explanation": "*   The patient most likely has a VIPoma, also termed WDHA (watery diarrhea, hypokalemia, and achlorhydria) and Verner-Morrison syndrome.\n*   Patients have large-volume secretory diarrhea and can lose enormous amounts of fluids and electrolytes.\n*   Diagnosis is by CT scan, and most tumors have metastasized at the time of diagnosis.\n*   Another useful imaging tool is endoscopic ultrasonography.\n*   Even with distant metastasis, tumor debulking, hepatic artery embolization, and radiofrequency ablation of liver metastasis are useful in controlling symptoms.\n*   The best medical treatment of symptoms is achieved with octreotide, a somatostatin analogue.\n*   Chemotherapy has no role in the management of VIPoma.\n*   Streptozotocin is toxic to pancreatic beta cells and may be useful in the management of insulinoma."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 65-year-old male presents for evaluation of yellowing skin. Review of systems is significant for loose-fitting clothes, fatigue, and night sweats. Laboratory evaluation is remarkable for elevated total bilirubin. CT scan reveals a pancreatic mass. Which of the following is least likely to contribute to this condition?",
      "options": [
        "A. History of cholecystectomy",
        "B. Diabetes",
        "C. Smoking",
        "D. BRCA2",
        "E. Coffee consumption"
      ],
      "answer": "E",
      "explanation": "*   Coffee drinking has not been shown to be a risk factor for pancreatic cancer.\n*   Factors associated with a risk for pancreatic cancer include smoking (strongest and accounts for 25-30% of all cases), obesity, diabetes, atypical multiple mole melanoma, hereditary pancreatitis, familial adenomatous polyposis, hereditary nonpolyposis colon cancer, BRCA2, and Peutz-Jeghers syndrome.\n*   The role of alcohol in pancreatic cancer is debatable.\n*   More recently, a history of cholecystectomy and/or cholelithiasis has been demonstrated to be associated with an increased risk of pancreatic cancer."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "A 41-year-old female presents with palpitations, trembling, diaphoresis, and confusion. Serum glucose is 48 mg/dL and C-peptide level is elevated. Her symptoms resolve with the administration of a carbohydrate load. Which of the following is true regarding the most likely condition?",
      "options": [
        "A. Elevated C-peptide and hypoglycemia rule out an exogenous source.",
        "B. Patients will often have a mass in the neck of the pancreas.",
        "C. The most sensitive study for localization is a high resolution CT scan.",
        "D. Recurrent lesions can be managed with streptozocin and 5-FU.",
        "E. It is the least common functional pancreatic endocrine neoplasm."
      ],
      "answer": "D",
      "explanation": "*   Insulinoma is the most common functional pancreatic endocrine neoplasm.\n*   The classic feature is the Whipple triad, which includes symptomatic fasting hypoglycemia, a documented serum glucose level of less than 50 mg/dL, and relief of symptoms with the administration of glucose.\n*   Patients will often present with recurrent episodes of syncope, palpitations, trembling, diaphoresis, confusion or disorientation, and seizures.\n*   The diagnosis is confirmed by demonstrating a low fasting blood sugar (insulin to glucose ratio of >0.3) and an elevated C-peptide level.\n*   Elevated C-peptide and hypoglycemia confirm an endogenous source, not rule out an exogenous source.\n*   Localization is achieved by CT scan and endoscopic ultrasonography; intraoperative ultrasonography is considered the most sensitive imaging study.\n*   In contrast to other functional endocrine pancreatic neoplasms, an octreotide scan is poor at localizing insulinoma owing to the fact that these lesions may not express sufficient somatostatin receptors.\n*   Insulinomas are evenly distributed throughout the head, body, and tail of the pancreas; there is no pancreatic tumor that characteristically appears in the neck of the pancreas.\n*   The majority of insulinomas are benign (90%).\n*   They can be treated with enucleation.\n*   Diazoxide inhibits insulin release and is occasionally used for preoperative control of symptoms related to hypoglycemia.\n*   For patients with recurrent or metastatic malignant insulinoma, tumor debulking may be beneficial, as is the use of streptozocin and 5-FU."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Octreotide scanning is most useful for localization of which of the following tumors?",
      "options": [
        "A. VIPoma",
        "B. Glucagonoma",
        "C. Pancreatic polypeptide-secreting tumor",
        "D. Gastrinoma",
        "E. Insulinoma"
      ],
      "answer": "D",
      "explanation": "*   Many pancreatic endocrine tumors have high concentrations of somatostatin receptors and can therefore be imaged with a radiolabeled form of the somatostatin analogue octreotide (indium-111 pentetreotide).\n*   Octreotide scanning has the advantage of whole-body scanning, which is useful in gastrinomas because they can present in a wide area.\n*   Used in combination with endoscopic ultrasonography, it detects more than 90% of gastrinomas.\n*   It is also useful for localizing carcinoid tumors.\n*   As many as 90% of gastrinomas are found in the Passaro triangle, an area defined by the junction of the cystic duct and common bile duct, the second and third portions of the duodenum, and the neck and body of the pancreas.\n*   Although a CT scan is also useful, an octreotide scan is particularly helpful in localizing gastrinomas smaller than 1 cm.\n*   Somatostatinoma and VIPoma tend to be large bulky tumors and are thus readily seen by CT.\n*   Glucagonoma may present with a mass seen in the pancreatic tail.\n*   Octreotide scanning will miss as many as 40% of insulinomas because they may not express sufficient somatostatin receptors.\n*   Pancreatic polypeptide (PP) seems to have an important role in glucose metabolism.\n*   PP regulates the expression of the hepatic insulin receptor gene.\n*   PP-secreting tumor is rare and often asymptomatic but can be established by the presence of an enhancing solitary pancreatic head tumor on CT imaging with elevated fasting PP level."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "A 36-year-old male is admitted for management of acute alcoholic pancreatitis. Which of the following alone is considered a predictor for mortality in this patient population?",
      "options": [
        "A. BUN > 20 mg/dL",
        "B. Fever",
        "C. Presence of white blood cell count > 18,000 cells/L",
        "D. Age > 55 years",
        "E. Presence of pleural effusion"
      ],
      "answer": "E",
      "explanation": "*   The Bedside Index for Severity in Acute Pancreatitis (BISAP) score is a novel predictor of clinical outcome in acute pancreatitis.\n*   The parameters for BISAP include:\n    *   blood urea nitrogen (BUN) level greater than 25 mg/dL\n    *   impaired mentation\n    *   2 or more systemic inflammatory response syndrome (SIRS) criteria\n    *   age greater than 65 years\n    *   the presence of pleural effusion.\n*   It is simple to use and can be obtained on the first day of admission.\n*   The simplicity makes it attractive when compared to the Acute Physiologic Assessment and Chronic Health Evaluation II (APACHE II) scoring system.\n*   The sensitivity and specificity of BISAP has been shown to be superior.\n*   Ranson criteria have fallen out of favor because it requires 48 hours of admission to use this scoring system."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the role of endoscopic retrograde cholangiopancreatography (ERCP) and/or timing of surgery for acute biliary pancreatitis?",
      "options": [
        "A. In mild pancreatitis, laparoscopic cholecystectomy can be safely performed within 48 hours of admission.",
        "B. ERCP with sphincterotomy should be used routinely before surgery.",
        "C. If a common bile duct stone is suspected, ERCP with sphincterotomy should be performed preoperatively.",
        "D. In severe pancreatitis, early cholecystectomy reduces morbidity and mortality.",
        "E. There is minimal risk of worsening the pancreatitis with the performance of ERCP."
      ],
      "answer": "A",
      "explanation": "*   The presence of gallstones is the most common cause of acute pancreatitis worldwide, which is thought to be due to a gallstone causing transient obstruction at the ampulla of Vater.\n*   In most cases, the inflammation is mild to moderate, and the stone passes into the intestine spontaneously.\n*   In patients with severe pancreatitis, early cholecystectomy is associated with an increased morbidity and mortality, so that cholecystectomy should be delayed until the pancreatitis is resolved.\n*   In mild to moderate pancreatitis, the timing of surgery is not critical, and early cholecystectomy (within 48 hours) can be safely performed.\n*   However, long delays result in as much as a 30% recurrence of pancreatitis.\n*   Routine ERCP to detect the presence of common duct stones is unnecessary because the probability of finding residual stones is low and the risk of ERCP-induced pancreatitis is significant.\n*   Preoperative ERCP should be reserved for patients with concomitant cholangitis or clear evidence of biliary obstruction (jaundice, persistent elevation of total bilirubin >4 mg/dL).\n*   Otherwise, an intraoperative cholangiogram should be performed, and if a common bile duct stone is detected, either a laparoscopic common duct exploration or a postoperative ERCP should be performed."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which of the following is true regarding pancreatic cysts?",
      "options": [
        "A. Serous cystadenoma has malignant potential.",
        "B. Asymptomatic patients with mixed-type intraductal papillary mucinous neoplasm (IPMN) should undergo conservative management.",
        "C. Weight loss in patients with IPMN is mostly attributed to an elevated level of TNF-alpha.",
        "D. Mucinous cystadenoma usually occurs in women and in the body or tail of the pancreas.",
        "E. Asymptomatic mucinous cystadenoma can be managed with repeat imaging in 6 months."
      ],
      "answer": "D",
      "explanation": "*   Serous cystadenoma is a benign true cyst that most commonly occurs in women and in the pancreatic head.\n*   It is often asymptomatic, but large cysts (>4 cm) may cause vague abdominal pain.\n*   They do not need to be resected unless they are symptomatic.\n*   Mucinous cystadenoma is considered premalignant, has a female predominance, occurs commonly in the body or tail of the pancreas, and should always undergo resection.\n*   IPMN is divided into three types based on pancreatic duct involvement: main-duct, side-branch, and mixed-type.\n*   Main-duct IPMN carries up to a 50% risk of harboring malignant cells and should always be resected in surgically appropriate candidates.\n*   Mixed-type IPMN also has a higher risk and should be removed.\n*   Side-branch IPMN has a lower risk of malignancy and can be observed unless it is symptomatic, larger than 3 cm, or associated with mural nodules.\n*   The weight loss in patients with IPMN is mostly attributed to exocrine insufficiency from duct blockage and not TNF-alpha cachexia."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 55-year-old man presents with a 12-hour history of epigastric pain, nausea, and vomiting. He has diffuse mild abdominal tenderness to palpation. Laboratory values are significant for serum amylase of 800 U/L, serum glucose of 130 mg/dL, chloride of 104 mEq/L, white blood cell count of 12,000 cells/μL, serum sodium of 125 mEq/L, and triglyceride levels of 1800 mg/dL. The most likely explanation for the hyponatremia is:",
      "options": [
        "A. Excessive fluid loss",
        "B. Inappropriate antidiuretic hormone response",
        "C. Excessive free water replacement",
        "D. Pseudohyponatremia",
        "E. Adrenal insufficiency"
      ],
      "answer": "D",
      "explanation": "*   Severe hypertriglyceridemia leads to a falsely low sodium level.\n*   Water is displaced in the serum by lipids, resulting in an error in measurement.\n*   The danger is that the clinician who is unaware may try to correct the hyponatremia with hypertonic saline, leading to severe hypernatremia.\n*   Similarly, a significantly elevated level of serum glucose can also result in pseudohyponatremia.\n*   Excess volume loss secondary to emesis can lead to a hypovolemic hyponatremia but is accompanied by a hypochloremic metabolic alkalosis.\n*   Patients with gastrointestinal (GI) losses can have hyponatremia exacerbated by excessive free water replacement.\n*   Adrenal insufficiency may lead to hyponatremia secondary to the loss of action of aldosterone at the distal convoluted renal tubules but is accompanied with severe refractory hypotension and marked hyperkalemia."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Management of pancreatic lymphoma is by:",
      "options": [
        "A. Pancreaticoduodenectomy",
        "B. Chemotherapy",
        "C. Pancreaticoduodenectomy with postoperative chemotherapy",
        "D. Radiation therapy",
        "E. Preoperative chemoradiation followed by pancreaticoduodenectomy"
      ],
      "answer": "B",
      "explanation": "*   Primary pancreatic lymphoma is extremely rare.\n*   The management approach is based on case series and experience with lymphoma at other sites.\n*   Patients with pancreatic lymphoma may present with symptoms and CT findings suggestive of pancreatic adenocarcinoma, and as such, it may be difficult to diagnose preoperatively.\n*   However, suspicion of lymphoma should be raised in the presence of a large bulky pancreatic tumor or with more diffuse pancreatic involvement.\n*   This is one situation in which CT-guided needle biopsy of the mass is indicated because the majority of studies indicate that pancreatic lymphoma responds to chemotherapy as the primary modality.\n*   Surgery or radiation is not typically used in the management of pancreatic lymphoma."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Which of the following is true regarding pancreas divisum?",
      "options": [
        "A. The duct of Santorini ends in a blind pouch.",
        "B. The inferior portion of the pancreatic head drains through the duct of Santorini.",
        "C. The majority of the pancreas drains through the duct of Santorini.",
        "D. The duct of Wirsung drains through the minor papilla.",
        "E. The ducts of Wirsung and Santorini fail to develop."
      ],
      "answer": "C",
      "explanation": "*   In pancreatic divisum, the ducts of Wirsung and Santorini fail to fuse.\n*   The result is that the majority of the pancreas drains through the duct of Santorini and through the lesser papilla.\n*   The inferior portion of the pancreatic head and uncinate process drains through the duct of Wirsung and the major papilla.\n*   It is considered a normal anatomic variant and is seen in 10% of individuals.\n*   It is thought to lead to an increased risk of pancreatitis because the minor papilla sometimes cannot handle the higher flow of pancreatic juices.\n*   In another more common variant, the duct of Santorini ends in a blind pouch but still fuses with the Wirsung duct."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "The preferred definitive treatment for recurrent acute pancreatitis due to pancreas divisum is:",
      "options": [
        "A. Lateral pancreaticojejunostomy (Puestow procedure)",
        "B. Pancreaticoduodenectomy (Whipple procedure)",
        "C. Minor papilla sphincterotomy",
        "D. Major papilla sphincterotomy and pancreatic ductal septotomy",
        "E. Distal pancreatectomy"
      ],
      "answer": "C",
      "explanation": "*   Pancreas divisum can lead to recurrent episodes of acute pancreatitis as well as chronic pancreatitis with intractable pain.\n*   Unlike other forms of chronic pancreatitis, however, marked dilation of the dorsal duct is unusual.\n*   As such, surgical decompressive procedures are not successful.\n*   For patients with recurrent attacks of acute pancreatitis, the best option is sphincterotomy of the minor papilla because the duct of Santorini is providing the primary drainage to the pancreas.\n*   A study from Marseille found a decreased rate of acute pancreatitis in 24 patients after minor papilla sphincterotomy and dorsal duct stenting.\n*   The complication rate was lower with sphincterotomy than with stent insertion.\n*   Major papilla sphincterotomy would not likely be helpful because it drains a minority of the pancreas in pancreatic divisum.\n*   Distal pancreatectomy is typically not needed."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "A 50-year-old male with chronic pancreatitis has failed medical management and is being considered for more invasive treatment. Which of the following is true regarding potential interventions?",
      "options": [
        "A. Pancreaticoduodenectomy (Whipple procedure) is inappropriate for chronic pancreatitis.",
        "B. Endoscopic procedures have been shown to be superior to surgical treatment.",
        "C. Lateral pancreaticojejunostomy (Puestow procedure) is appropriate if the pancreatic duct is larger than 6 mm.",
        "D. The most common indication for invasive intervention in chronic pancreatitis is poor exocrine and endocrine function.",
        "E. Long term pain control is similar with either the Puestow, Beger, or Frey procedure."
      ],
      "answer": "C",
      "explanation": "*   The most common indication for surgical intervention in patients with chronic pancreatitis is chronic pain.\n*   Surgical drainage of a dilated pancreatic duct with distal obstruction is more effective than endoscopic approaches in patients with chronic pancreatitis.\n*   The Puestow procedure involves cutting open the length of the main pancreatic duct and anastomosing a Roux limb of jejunum to the duct but requires a dilated duct (>6 mm).\n*   Both the Whipple procedure (for inflammation limited to the pancreatic head) and total pancreatectomy are options for the treatment of intractable chronic pancreatitis, although they are associated with greater morbidity than a drainage procedure.\n*   The Beger procedure is another option, which resects the pancreatic head but spares the duodenum, stomach, and bile duct, but this is a technically challenging procedure.\n*   The Frey procedure is similar to Beger but easier to perform since it avoids the transection of the pancreatic neck over the superior mesenteric vessels.\n*   The best long-term pain control is achieved with longitudinal pancreaticojejunostomy with limited resection of the head of the pancreas, which Beger and Frey both satisfy, with Frey being the preferred option."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Adenocarcinoma of the pancreas arises most often from which anatomic site?",
      "options": [
        "A. Main pancreatic duct",
        "B. Branch pancreatic duct",
        "C. Pancreatic acinus",
        "D. Ampulla of Vater",
        "E. Pancreatic islet"
      ],
      "answer": "A",
      "explanation": "*   The majority of adenocarcinomas of the pancreas arise from the main pancreatic duct.\n*   Approximately 66% of pancreatic adenocarcinomas develop within the head or uncinate process of the pancreas.\n*   The remaining answer choices can lead to pancreatic adenocarcinoma, but it occurs less frequently.\n*   Carcinoma at the ampulla of Vater is most commonly duodenal adenocarcinoma."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 60-year-old man presents with obstructive jaundice, acholic stools, and weight loss. An abdominal ultrasound scan demonstrates a dilated biliary tree and no gallstones. A dynamic contrast-enhanced CT scan demonstrates a solid mass localized to the head of the pancreas without evidence of distant metastasis, or adenopathy. Vascular involvement can't be excluded. The patient is otherwise in good health. Laboratory values are normal. Which of the following is the next step in the management?",
      "options": [
        "A. Exploratory laparotomy",
        "B. Diagnostic laparoscopy",
        "C. MRI",
        "D. Endoscopic ultrasound",
        "E. Positron emission tomography (PET) scan"
      ],
      "answer": "D",
      "explanation": "*   In a patient with obstructive jaundice, the first study to perform is an abdominal ultrasound scan.\n*   In the absence of abdominal pain and in the presence of weight loss, it is highly likely that the diagnosis is malignancy.\n*   A dynamic, contrast-enhanced CT scan is highly effective in determining the resectability of the mass.\n*   In cases where vascular involvement is not clear, endoscopic ultrasonography has aided in determining resectability.\n*   Pancreatic cancer is considered unresectable if the tumor is encasing or occluding the superior mesenteric vein or portal vein and causing vein contour irregularity, or if the tumor is abutting or encasing the superior mesenteric artery, hepatic artery, or celiac trunk by more than 180°.\n*   More frequently, endoscopic guided biopsy is being performed; the advantage of this approach is that there is no risk of tumor seeding because the area through which the needle is passed becomes part of the Whipple specimen.\n*   That being said, in the situation in which the mass appears to be resectable, percutaneous or endoscopic ultrasonography-guided biopsy is not considered necessary.\n*   Needle biopsy is prone to sampling error; therefore, a negative biopsy finding would not alter the plan to perform a Whipple procedure.\n*   Likewise a positive biopsy finding would not alter the operative decision.\n*   Operative morbidity and mortality after the Whipple procedure are sufficiently low that one would accept the low likelihood (~5%) that the lesion is benign.\n*   Biopsy should be reserved for situations in which the lesion appears to be unresectable because it may guide chemotherapy.\n*   It is also indicated in situations in which the appearance of the mass suggests other less common pathologies such as pancreatic lymphoma.\n*   Diagnostic laparoscopy is often done before proceeding with a Whipple to confirm there are no obvious hepatic or peritoneal lesions.\n*   Suspected lesions are sent for a frozen sample.\n*   MRI may be a useful adjunct in patients with equivocal findings on CT or in cases where hepatic metastasis is suspected.\n*   The role of PET in cancer workup continues to develop but as of now it is unclear if PET adds any additional information beyond what is provided with CT."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Which of the following is true regarding alcohol and its relation to the pancreas?",
      "options": [
        "A. It induces spasm of the sphincter of Oddi.",
        "B. It decreases pancreatic secretion.",
        "C. It decreases pancreatic duct permeability.",
        "D. It transiently increases pancreatic blood flow.",
        "E. It inhibits chymotrypsin."
      ],
      "answer": "A",
      "explanation": "*   The exact mechanism by which alcohol induces pancreatitis is unclear.\n*   Ethanol induces spasm of the sphincter of Oddi, and this may lead to an increase in ductal pressure with a simultaneous brief stimulation of pancreatic secretion.\n*   It also increases pancreatic duct permeability, decreases pancreatic blood flow, and inappropriately activates chymotrypsin."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "Which of the following is true regarding alcohol and pancreatitis?",
      "options": [
        "A. It commonly occurs after a single binge of alcohol.",
        "B. The type of alcohol consumed is an important risk determinant.",
        "C. Patients consuming a high protein and fat diet are at greater risk.",
        "D. There is a threshold amount of alcohol consumption below which pancreatitis does not occur.",
        "E. It typically develops after a mean of 5 years of heavy drinking."
      ],
      "answer": "C",
      "explanation": "*   Most patients with alcohol-related pancreatitis have a long-standing history of heavy drinking.\n*   The mean number of years of drinking at the time of presentation with pancreatitis is 18 years in men and 11 years in women.\n*   The type of alcohol consumed is not important but rather the quantity and duration.\n*   The mean amount consumed in patients in whom pancreatitis develops is 100 to 175 g/day, although it can rarely develop after just one binge.\n*   In alcoholics, the first attack of pancreatitis may represent an acute exacerbation of chronic pancreatitis, and the patient may have had repeat subclinical bouts of acute pancreatitis previously.\n*   The risk of pancreatitis seems to be higher in patients who have a diet high in protein and fat."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "Which of the following is true regarding pancreatogenic (type 3) diabetes?",
      "options": [
        "A. Ketoacidosis is common.",
        "B. The diabetes is easily controlled.",
        "C. Peripheral insulin sensitivity is decreased.",
        "D. Glucagon and pancreatic polypeptide (PP) levels are low.",
        "E. Hyperglycemia is usually severe."
      ],
      "answer": "D",
      "explanation": "*   Diabetes in the setting of chronic pancreatitis or after pancreatic resection is termed type 3 diabetes.\n*   It differs from type 1 and 2 diabetes in that it is associated with decreased glucagon and PP levels as well as insulin due to pancreatic loss or destruction.\n*   Because all three of these hormones regulate glucose levels, the diabetes that ensues is considered to be difficult to control.\n*   Furthermore, peripheral insulin sensitivity is increased, whereas hepatic insulin sensitivity is decreased.\n*   The result is that patients are prone to the development of hypoglycemia, but ketoacidosis and marked hyperglycemia are rare.\n*   For diabetes to develop as a result of pancreatitis, extensive destruction of the pancreas must occur.\n*   In fact, resections involving up to 80% of an otherwise normal gland can be done without endocrine insufficiency.\n*   This may help explain why not all post-Whipple patients develop poor glucose control."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "A 30-year-old nurse presents with intermittent diaphoresis, trembling, and palpitations. Her fasting blood sugar is 50 mg/dL. Her insulin-to-C peptide ratio is greater than 1. Which of the following is the next step in management?",
      "options": [
        "A. CT scan of the abdomen",
        "B. Psychiatric counseling to discuss sulfonylurea abuse",
        "C. Psychiatric counseling to discuss exogenous insulin abuse",
        "D. Octreotide scan",
        "E. Magnetic resonance imaging"
      ],
      "answer": "C",
      "explanation": "*   Although the patient has symptomatic hypoglycemia, seemingly consistent with an insulinoma, her insulin-to-C peptide ratio is greater than 1.\n*   This combination, particularly in a health-care worker, is highly suggestive of factitious hypoglycemia with exogenous insulin abuse.\n*   The precursor to insulin is proinsulin.\n*   Proinsulin is packaged in the pancreatic B cell where it is cleaved to insulin and C peptide, which are then released into the circulation at an equal ratio.\n*   Insulin is cleared by the liver, whereas C peptide is cleared by the kidney and is cleared more slowly than insulin, such that the normal insulin-to-C peptide ratio is less than 1 during fasting.\n*   With a true insulinoma, both insulin and C peptide levels would be elevated; however, the ratio would still be less than 1.\n*   Factitious hypoglycemia will present with an insulin-to-C peptide ratio greater than 1 only if the patient is using exogenous insulin.\n*   In contrast, sulfonylurea abuse will have a ratio less than 1 since it stimulates pro-insulin release from the pancreas.\n*   Factitious hypoglycemia has been reported more frequently in health-care workers and is associated with a higher incidence of suicide, depression, and personality disorders.\n*   Thus, the patient should be referred for psychiatric counseling.\n*   Octreotide scan is not useful in the workup for insulinoma but CT, MRI, or endoscopic ultrasound may demonstrate a pancreatic mass."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A 60-year-old alcoholic man presents with chronic, vague abdominal pain. He denies a history of pancreatitis and is otherwise in good health. CT reveals a 6-cm multiloculated, septated cyst at the tail of the pancreas. Management consists of:",
      "options": [
        "A. Distal pancreatectomy and splenectomy",
        "B. CT-guided drainage of the cyst",
        "C. Endoscopic cystogastrostomy",
        "D. Roux-en-Y cystojejunostomy",
        "E. Repeat imaging in 6 months"
      ],
      "answer": "A",
      "explanation": "*   It is important to be aware that not all fluid-filled pancreatic abnormalities in a patient with a history of drinking represent pseudocysts.\n*   Some of these lesions may represent cystic neoplasms of the pancreas.\n*   Suspicion of a cystic neoplasm should be particularly increased in the absence of a history of pancreatitis, as in this patient.\n*   A cystic neoplasm should also be suspected when the CT scan demonstrates a solid component (septation) in the cystic lesion.\n*   The differential diagnosis includes serous cystadenoma, mucinous cystic neoplasm, intraductal papillary-mucinous adenoma, and solid pseudopapillary neoplasm.\n*   On a CT scan, a central scar is characteristic of a serous cystadenoma (although present in only 20%), whereas the finding of peripheral eggshell calcifications, although rare, is diagnostic of mucinous cystic neoplasm and highly suggestive of cancer.\n*   In the patient presented, the procedure of choice is surgical resection with distal pancreatectomy and splenectomy.\n*   This is based on several factors: The patient is having symptoms; he is a good candidate for surgery; the lesion is readily amenable to resection; and the lesion's size, its septations, and its multiple loculations.\n*   If, conversely, a patient has an incidentally discovered pancreatic cyst without symptoms, surgery is generally recommended if the risk of surgery is low.\n*   Before surgery, further studies are recommended to attempt to determine the malignant potential.\n*   The workup may include MRI, endoscopic ultrasonography to better delineate the mass, and CT-guided aspiration of the fluid for amylase level and tumor markers (carcinoembryonic antigen, CA 19–9, CA 125, CA 72–4, CA 15–3)."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "After a motor vehicle accident, persistent ascites develops in a 55-year-old man. Other than the ascites, CT findings are unremarkable. Paracentesis reveals clear fluid with an amylase level of 5000 U/L and a protein level of 40 g/L. The patient fails an attempt at bowel rest, parenteral nutrition, and paracentesis. Definitive management would consist of:",
      "options": [
        "A. Distal pancreatectomy",
        "B. Placement of pigtail catheter",
        "C. Roux-en-Y pancreaticojejunostomy",
        "D. Pancreaticoduodenectomy",
        "E. Pancreatic sphincterotomy and placement of a transduodenal pancreatic stent"
      ],
      "answer": "E",
      "explanation": "*   After surgery, trauma, or bouts of pancreatitis, persistent ascites or pleural effusions can develop.\n*   These are generally caused by a disruption of the pancreatic duct, with free extravasation of pancreatic fluid, leading to the development of an internal pancreatic fistula, which is rare.\n*   More commonly, the extravasated fluid leads to the formation of a contained fluid collection known as a pseudocyst.\n*   Management of pancreatic ascites or effusion first requires establishing the diagnosis by obtaining a sample of the fluid and demonstrating a markedly elevated amylase level and a protein level greater than 25 g/L.\n*   Serum amylase may be elevated from reassertion across the peritoneal membrane.\n*   The recommended management is a stepwise progression, first with conservative management with bowel rest, parenteral nutrition, placing the patient NPO, and paracentesis to completely drain the fluid.\n*   If this fails to resolve the internal fistula, ERCP with pancreatic stenting is recommended.\n*   If this fails, surgery is indicated and should be tailored to the location of the ductal injury.\n*   For distal duct disruptions, a distal pancreatectomy is recommended.\n*   Whereas for disruption of the body, a Roux-en-Y pancreaticojejunostomy is performed.\n*   Whipple procedure (pancreaticoduodenectomy) is not needed.\n*   Conservative therapy including somatostatin is successful in only approximately 50% so that nearly one-half will require an invasive procedure."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "A 60-year-old man presents with chronic epigastric abdominal pain and jaundice. CT reveals diffuse swelling of the pancreas with compression of the intrapancreatic common duct. Needle biopsy of the pancreas reveals diffuse fibrosis and a plasma and lymphocytic infiltrate. Serum IgG levels are increased. Primary management consists of:",
      "options": [
        "A. Whipple procedure",
        "B. Steroids",
        "C. Chemotherapy",
        "D. Hepaticojejunostomy",
        "E. ERCP with stenting"
      ],
      "answer": "B",
      "explanation": "*   Autoimmune pancreatitis is a form of chronic pancreatitis that is increasingly being recognized and can be confused with pancreatic lymphoma or pancreatic cancer.\n*   It presents most often as a diffusely enlarged hypoechoic pancreas.\n*   A CT scan often shows diffuse narrowing of the main pancreatic duct without the typical calcifications seen with chronic alcoholic pancreatitis.\n*   Pathology reveals a plasma cell and lymphocytic infiltrate.\n*   Laboratory values reveal increased levels of IgG and often diabetes.\n*   Antibodies against lactoferrin and carbonic anhydrase have been reported, but they are not a specific finding.\n*   The treatment of choice is steroid therapy, and the disease responds well to this management.\n*   Chemotherapy or invasive surgical/endoscopic procedures are not necessary."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "A 26-year-old male is diagnosed with tropical pancreatitis. Which of the following is true regarding this condition?",
      "options": [
        "A. It is uncommon in adolescents.",
        "B. It is associated with gallstones.",
        "C. He likely has family members with the disease.",
        "D. It is initially managed with endoscopic decompression.",
        "E. It is not associated with diabetes."
      ],
      "answer": "C",
      "explanation": "*   Tropical pancreatitis is a form of chronic pancreatitis that occurs in young patients in tropical regions of the world.\n*   Unlike acute pancreatitis, it is not associated with gallstones.\n*   It is associated with a genetic mutation of the pancreatic secretory trypsinogen inhibitor or SPINK1 gene.\n*   It is also associated with ingestion of the cassava root, which contains toxic glycosides that may lead to free radical injury to the pancreas.\n*   There is a familial pattern, and as such, some have theorized that it is simply a variant of hereditary pancreatitis.\n*   Patients present with abdominal pain, and diabetes commonly develops as the pancreatitis often becomes chronic.\n*   It is also associated with pancreatic duct stone formation.\n*   Treatment is with pain medication and digestive enzyme supplementation.\n*   Progression may require endoscopic decompression or rarely surgical decompression, although the latter has unsatisfactory results.\n*   It is associated with an increased risk of pancreatic cancer."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "A 61-year-old female undergoes a pancreaticoduodenectomy (Whipple) operation. On postoperative day three she becomes hypotensive, tachycardic, and has severe abdominal pain. Nasogastric tube demonstrates bilious output. She receives 2 L of fluids but remains hypotensive. The next step in her management is:",
      "options": [
        "A. Angiography with embolization",
        "B. Immediate take back to the OR",
        "C. IV octreotide drip",
        "D. Bedside ultrasonography",
        "E. Upper endoscopy"
      ],
      "answer": "A",
      "explanation": "*   This patient is presenting with a gastroduodenal artery stump leak following a pancreaticoduodenectomy (Whipple) procedure.\n*   It is unlikely that there is a complete blowout because those patients exsanguinate quickly and it is often fatal.\n*   The tissue planes are fragile this early after surgery making it difficult to control bleeding in the operating room.\n*   After resuscitation with blood products, the most appropriate next step involves performing an angiography with embolization.\n*   Upper endoscopy can be considered in the event that this patient had bloody nasogastric tube output and was suspected to have an upper gastrointestinal bleed.\n*   Esophagogastroduodenoscopy (EGD) needs to be selectively performed this early after surgery because the scope may compromise the freshly made gastrojejunostomy anastomosis if the afferent/efferent limbs are to be evaluated.\n*   Bedside ultrasonography is a useful adjunct but inappropriate in an unstable patient.\n*   Octreotide has no role in the management of gastroduodenal artery stump bleeding.\n*   It has been demonstrated that wrapping the gastroduodenal artery stump using the falciform ligament during surgery decreases the risk of this complication."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "Which of the following is true regarding anatomy or the embryologic development of the pancreas?",
      "options": [
        "A. The most commonly injured vessel during dissection behind the neck of the pancreas is the celiac vein.",
        "B. The pancreas receives its arterial supply from only the celiac artery.",
        "C. The ventral pancreas constitutes the head and part of the body of the pancreas.",
        "D. Venous drainage of the pancreas is to the inferior vena cava.",
        "E. The uncinate process is dorsal to the portal vein and superior mesenteric artery."
      ],
      "answer": "E",
      "explanation": "*   The ventral pancreas constitutes the uncinate process and inferior portion of the head of the pancreas, leaving the remainder the embryologic remnant of the dorsal pancreas.\n*   The uncinate process lies ventral to the aorta but dorsal to the portal vein and superior mesenteric artery.\n*   The most commonly injured vessel during dissection behind the neck of the pancreas is the superior mesenteric vein.\n*   The pancreas receives blood supply from two sources: the celiac axis (superior pancreaticoduodenal artery) and superior mesenteric artery (inferior pancreaticoduodenal artery).\n*   Venous drainage of the pancreas is to the portal system."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "A 35-year-old man presents with severe abdominal pain and diffuse abdominal tenderness. CT scan with IV contrast demonstrates areas of hypoattenuation in the pancreas. His vitals are stable. His temperature is 38.4°C. Which of the following is true regarding his condition?",
      "options": [
        "A. Fine-needle aspiration (FNA) for culture should be performed.",
        "B. Early IV antibiotics have demonstrated improved survival.",
        "C. Early necrosectomy decreases morbidity and mortality when compared with delayed intervention.",
        "D. The patient should be observed with medical optimization and repeat imaging if he deteriorates clinically.",
        "E. Percutaneous drainage should be performed."
      ],
      "answer": "D",
      "explanation": "*   CT scan with IV contrast demonstrating areas of hypoattenuation (nonperfused) in the pancreas in a patient with this presentation is concerning for necrotizing pancreatitis.\n*   It is important to note that the necrotic pancreas is not usually infected initially.\n*   Thus initial management of necrotizing pancreatitis is conservative with the avoidance of early invasive interventions.\n*   FNA with culture might be considered later (because infected necrosis typically develops weeks later) in the course of the hospitalization if the patient were to manifest evidence of sepsis such as leukocytosis, tachycardia, refractory abdominal pain, bacteremia, and/or persistent fevers.\n*   Prophylactic antibiotics for severe pancreatitis are controversial, but recent studies have failed to show a consistent benefit.\n*   In patients with proven (via needle aspiration) infected necrosis, wide debridement with necrosectomy was the surgical procedure of choice but has been replaced by minimally invasive percutaneous or endoscopic interventions followed by video-assisted retroperitoneal debridement with the goal of postponing or obviating the need for open surgery.\n*   Furthermore, early necrosectomy has been shown to increase morbidity and mortality when compared with delayed intervention.\n*   In a patient that does not appear to have an infected necrotizing pancreatitis, it is appropriate to approach management conservatively with medical optimization and repeat CT scan if there is a change in clinical status."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "A 60-year-old woman presents with gallstone pancreatitis. Which of the following is the best predictor of a residual gallstone persisting in the common bile duct?",
      "options": [
        "A. Persistent elevation of the total bilirubin level",
        "B. A dilated common bile duct on admission",
        "C. Persistent elevation of the alkaline phosphatase level",
        "D. Persistent elevation of the serum amylase level",
        "E. Persistent abdominal pain"
      ],
      "answer": "A",
      "explanation": "*   Although elevation of alkaline phosphatase can be seen with a residual common bile duct stone, the best predictor is a persistent elevation of the total bilirubin.\n*   Amylase is not typically elevated in this patient population.\n*   Because the pathophysiology of gallstone pancreatitis is transient obstruction of the ampulla of Vater by a gallstone, a significant number of patients will have some degree of common bile duct dilation on admission; as such, common bile duct dilation is not a specific finding.\n*   This differs from patients with symptomatic cholelithiasis in which ductal dilation is frequently associated with common duct stones.\n*   Persistent abdominal pain can occur as a result of multiple etiologies and should be appropriately worked up with history and physical, laboratory studies, and/or imaging, if necessary."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "Which of the following pancreatic cystic lesions is almost exclusively found in a young female?",
      "options": [
        "A. Serous cystic adenoma",
        "B. Mucinous cystic neoplasm",
        "C. Side-duct IPMN",
        "D. Main-duct IPMN",
        "E. Solid pseudopapillary epithelial neoplasm"
      ],
      "answer": "E",
      "explanation": "*   Solid pseudopapillary epithelial neoplasm is a rare tumor occurring almost exclusively in young women.\n*   It has low malignant potential and for the majority of patients, the tumor can be resected with curative intent regardless of the size.\n*   Metastasis and recurrence are uncommon.\n*   Serous cystic adenoma also occurs most commonly in women, but this has no malignant potential and does not need to be resected unless it is causing mass effect.\n*   Mucinous cystic neoplasm is considered a premalignant lesion, has a female predominance, occurs commonly in the body or tail of the pancreas, and should always undergo resection.\n*   Main-duct IPMN has a high risk of harboring malignant cells and should be resected.\n*   Side-duct IPMN can be managed conservatively unless it is symptomatic, larger than 3 cm, or associated with mural nodules."
    }
  ]
}
{
  "chapter_name": "Alimentary Tract—Esophagus",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 59-year-old diabetic male with chronic obstructive pulmonary disease (COPD) presents with a 2-year history of progressively greater difficulty swallowing. He has no other medical problems. Esophagram demonstrates a dilated proximal esophagus with abrupt tapering distally. Manometry shows high pressure in the lower esophageal sphincter (LES) at rest and failure of the LES to relax after swallowing. Upper endoscopy is negative. Which of the following is true regarding this patient?\nA. The underlying condition is characterized by high amplitude, peristaltic waves of the esophagus.\nB. Laparoscopic esophagomyotomy with complete fundoplication is the treatment of choice.\nC. A trial of calcium channel blockers should be started.\nD. Esophageal pneumatic dilation is the next step in management.\nE. Peroral endoscopic myotomy (POEM) is the treatment of choice.",
      "options": [
        "A. The underlying condition is characterized by high amplitude, peristaltic waves of the esophagus.",
        "B. Laparoscopic esophagomyotomy with complete fundoplication is the treatment of choice.",
        "C. A trial of calcium channel blockers should be started.",
        "D. Esophageal pneumatic dilation is the next step in management.",
        "E. Peroral endoscopic myotomy (POEM) is the treatment of choice."
      ],
      "answer": "D",
      "explanation": "*   This patient has achalasia, a primary motility disorder of the esophagus, specifically of the LES.\n*   The pathogenesis is presumed to be neurogenic degeneration of ganglion cells, which can be idiopathic or infectious (i.e., Chagas disease from *Trypanosoma cruzi*).\n*   The degeneration results in a failure of the LES to relax on swallowing, leading to an increase in intraluminal esophageal pressure, marked esophageal dilation (with an air-fluid level on radiograph), and loss of progressive peristalsis in the body of the esophagus.\n*   The classic triad of symptoms is dysphagia, regurgitation, and weight loss (e.g., loose-fitting clothes).\n*   Diagnosis should include esophageal manometry (showing failure of the LES to relax with swallowing and considered the gold standard), barium esophagography (showing a “bird's beak\"appearance), and endoscopy (to rule out malignancy).\n*   There are four basic treatment options, all considered palliative, as there is no cure.\n*   According to recent American College of Gastroenterology Clinical Guidelines, initial therapy should be either graded pneumatic dilation or laparoscopic surgical myotomy with a partial fundoplication in patients fit for surgery.\n*   Esophageal pneumatic dilation has reemerged as the first-line treatment recommended by most surgeons. It is safer than previously thought, but patients often require multiple dilations over time.\n*   For patients wishing a more definitive intervention or those who have failed conservative management, a laparoscopic esophagomyotomy with an anterior fundoplication (Dor) or partial, 270-degree posterior fundoplication (Toupet) should be performed.\n*   A recent multicenter, randomized controlled trial found that although a lower percentage of patients with a Toupet fundoplication had an abnormal 24-hour pH test when compared with a Dor fundoplication, the differences were not statistically significant and that either approach would be appropriate.\n*   A complete fundoplication, or a Nissen, has a high chance of causing recurrent dysphagia in this patient population (B).\n*   Medical management with calcium channel blockers and nitroglycerin can help relax the LES, but this treatment only relieves symptoms in less than 10% of patients. These medications are only considered in patients that are not appropriate surgical candidates (C).\n*   In high-risk elderly patients, injection of the LES with botulinum toxin can provide short-term relief. Botulinum toxin should be avoided in patients who would otherwise be appropriate surgical candidates because it can ruin the anatomic planes required for surgery.\n*   Nutcracker esophagus is characterized by high amplitude, peristaltic waves of the esophagus (A).\n*   Esophageal diverticula can be associated with a hypertrophic upper esophageal sphincter.\n*   POEM is starting to be performed more commonly but requires a long learning curve, and up to 50% of patients can have acid reflux following the procedure (E)."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 51-year-old male has been undergoing yearly endoscopy with biopsy for Barrett esophagus. His most recent biopsy demonstrates high-grade dysplasia without nodules. Which of the following is the best next step in management?\nA. Esophagectomy with reconstruction\nB. Repeat endoscopy with biopsy in 3 months\nC. Endoscopic radiofrequency ablation\nD. Antireflux operation\nE. Oncology referral for consideration of neoadjuvant chemotherapy",
      "options": [
        "A. Esophagectomy with reconstruction",
        "B. Repeat endoscopy with biopsy in 3 months",
        "C. Endoscopic radiofrequency ablation",
        "D. Antireflux operation",
        "E. Oncology referral for consideration of neoadjuvant chemotherapy"
      ],
      "answer": "C",
      "explanation": "*   The management of Barrett esophagus with carcinoma has evolved considerably in recent years.\n*   Esophagectomy with reconstruction was once considered the standard of care for high-grade dysplasia, but this has been largely replaced by minimally invasive endoscopic techniques including radiofrequency ablation (RFA) (A).\n*   A large meta-analysis published in the *New England Journal of Medicine* demonstrates that RFA is associated with a high rate of disease eradication and reduced risk of carcinoma development.\n*   Although no randomized control trial currently exists to support this recommendation, endoscopic therapy is now the favored approach for high-grade dysplasia in Barrett esophagus without suspicious nodules.\n*   Repeat endoscopy with biopsy in 3 to 6 months is appropriate in patients with low-grade dysplasia (B).\n*   An antireflux procedure such as a Nissen procedure or medical management can be considered in patients with Barrett esophagus without high-grade dysplasia (D).\n*   Oncology referral is premature because there is not yet a cancer diagnosis established for the above patient (E)."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following will predispose a patient to the development of esophageal disease?\nA. LES length of 3 cm\nB. Resting LES pressure of 8 mm Hg\nC. Resting upper esophageal sphincter (UES) pressure of 70 mm Hg\nD. Abdominal length less than 1 cm\nE. Relaxation of LES with swallowing",
      "options": [
        "A. LES length of 3 cm",
        "B. Resting LES pressure of 8 mm Hg",
        "C. Resting upper esophageal sphincter (UES) pressure of 70 mm Hg",
        "D. Abdominal length less than 1 cm",
        "E. Relaxation of LES with swallowing"
      ],
      "answer": "D",
      "explanation": "*   Manometry is an important diagnostic tool to identify predisposing conditions for esophageal disease.\n*   Characteristics of an abnormal LES include resting pressure less than 6 mm Hg (normal range is 6–26 mm Hg), overall length of less than 2 cm, and abdominal length less than 1 cm (A, B).\n*   Relaxation of LES with swallowing is a function of the normal swallowing mechanism and dysfunction will increase the risk for the development of achalasia (E).\n*   The resting UES is 60 to 80 mm Hg (C).\n*   High UES pressures will predispose patients to pulsion diverticulum and difficulty with swallowing."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "A 40-year-old female has been using a proton-pump inhibitor (PPI) to control gastroesophageal reflux disease (GERD) for the past 7 years. She is otherwise healthy. She was seen in clinic and deemed a suitable candidate for definitive surgical intervention. During the operation, after the phrenoesophageal ligament is mobilized, her distal esophagus is inspected and it appears shortened. Preoperative upper gastrointestinal study did not identify a hiatal hernia. Which of the following will most likely need to be done?\nA. Proceed with a standard Nissen fundoplication.\nB. Proceed with a Dor fundoplication.\nC. Perform Collis gastroplasty.\nD. Abort the operation and initiate management with steroids.\nE. Take several biopsies before aborting the operation.",
      "options": [
        "A. Proceed with a standard Nissen fundoplication.",
        "B. Proceed with a Dor fundoplication.",
        "C. Perform Collis gastroplasty.",
        "D. Abort the operation and initiate management with steroids.",
        "E. Take several biopsies before aborting the operation."
      ],
      "answer": "C",
      "explanation": "*   Roughly 15% of the adult population in the United States has GERD.\n*   Most patients can initially be managed conservatively with PPIs.\n*   Indications for surgical intervention include failure of conservative management, patient preference for definitive intervention (e.g., avoiding lifelong medication), and complications associated with GERD (e.g., Barrett esophagus or extra-esophageal manifestations like asthma, cough, hoarseness).\n*   The standard surgical intervention involves a Nissen fundoplication.\n*   If a shortened esophagus is encountered during surgery (abdominal length < 1 cm), then a Collis gastroplasty will need to be performed to lengthen it and minimize tension during antireflux repair (A).\n*   In most patients, about 3 cm of intra-abdominal esophagus can be mobilized to avoid the need to lengthen the esophagus.\n*   An anterior (Dor) fundoplication may be considered in patients with underlying esophageal dysmotility (B).\n*   Although scleroderma can present with a shortened or fibrotic esophagus, this is a diffuse process involving the entire esophagus.\n*   Most patients will have extra-esophageal disease (D).\n*   In the above patient, a biopsy should be considered; however, the long duration of GERD and absence of systemic symptoms (fevers, night sweats, weight loss) make carcinoma unlikely, so the surgery should proceed (E)."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "A 39-year-old male presents in clinic to discuss his care before starting neoadjuvant chemoradiation for esophageal cancer. His albumin is 2.4 mg/dL. Which of the following is true regarding nutritional optimization for this patient?\nA. He should begin parenteral nutrition.\nB. Percutaneous gastrostomy tube should not be offered.\nC. Esophageal stent placement has been consistently demonstrated to improve nutritional status.\nD. Nasogastric tube insertion has been shown to improve nutritional status.\nE. Stent migration and chest discomfort are uncommonly reported in patients with esophageal stents.",
      "options": [
        "A. He should begin parenteral nutrition.",
        "B. Percutaneous gastrostomy tube should not be offered.",
        "C. Esophageal stent placement has been consistently demonstrated to improve nutritional status.",
        "D. Nasogastric tube insertion has been shown to improve nutritional status.",
        "E. Stent migration and chest discomfort are uncommonly reported in patients with esophageal stents."
      ],
      "answer": "B",
      "explanation": "*   Patients with newly diagnosed esophageal cancer frequently present with poor nutritional status, which worsens after starting neoadjuvant therapy.\n*   Nutritional optimization is an important component in the management of esophageal cancer.\n*   Percutaneous gastrostomy should be discouraged because it may compromise the gastric conduit needed during esophageal reconstruction and will delay chemotherapy for an additional 2 to 4 weeks.\n*   The role for parenteral nutrition is limited due to its high cost and high rate of complications (A).\n*   Nasogastric tube insertion can lead to migration of the tube and aspiration (D).\n*   Esophageal stents are frequently offered because they can significantly improve dysphagia associated with esophageal cancer.\n*   Unfortunately, the role of esophageal stents in improving nutritional status has had inconsistent results in the literature (C).\n*   Stent migration and chest discomfort are common and lead to frequent removal of the stents (E).\n*   Additional studies are needed to determine the best approach for nutritional optimization in this patient population."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 52-year-old male with cirrhosis and known esophageal varices presents with a large amount of hematemesis. Which of the following statements is true?\nA. Beta blockade is ineffective for preventing rebleeding.\nB. The most important next step is endoscopy for both diagnostic and therapeutic intervention.\nC. Prophylactic antibiotics do not improve survival.\nD. Early administration of vasoactive drugs does not improve outcomes.\nE. Endoscopic band ligation has been demonstrated to be superior to endoscopic sclerotherapy.",
      "options": [
        "A. Beta blockade is ineffective for preventing rebleeding.",
        "B. The most important next step is endoscopy for both diagnostic and therapeutic intervention.",
        "C. Prophylactic antibiotics do not improve survival.",
        "D. Early administration of vasoactive drugs does not improve outcomes.",
        "E. Endoscopic band ligation has been demonstrated to be superior to endoscopic sclerotherapy."
      ],
      "answer": "E",
      "explanation": "*   Acute variceal bleeding (AVB) is the leading cause of upper GI bleeding in patients with cirrhosis, and its management can be challenging.\n*   Early recognition and intervention are important because progression to sepsis and multiorgan failure confers a dismal prognosis with over 90% mortality.\n*   The most important next steps in a cirrhotic presenting with AVB involve airway, breathing, and circulation (ABCs). Airway management should take precedence over controlling AVB (B).\n*   After ABCs, the recommended approach involves a combination of vasoactive drugs (octreotide) and endoscopic intervention.\n*   Medical management should be initiated as soon as possible because it can reduce the rate of active bleeding and improve the yield of endoscopic intervention (D).\n*   Several randomized controlled trials have compared endoscopic band ligation versus endoscopic sclerotherapy and demonstrated the superiority of the former in both controlling bleeding and safety profile.\n*   Infection has been demonstrated to be an important predictor of mortality in AVB.\n*   Patients who receive prophylactic fluoroquinolones have been shown to have a reduced incidence of AVB and improved survival (C).\n*   In patients with chronic esophageal varices, beta blockers can be used to prevent episodes of rebleeding (A)."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the surgical approach, anatomy, or blood supply to the esophagus?\nA. Outer longitudinal muscle is an extension of the cricopharyngeus muscle.\nB. Cervical esophagus is supplied by the inferior thyroid artery.\nC. The narrowest point in the esophagus is at the aortic arch.\nD. Branches off the intercostal arteries are the major blood supply to the thoracic esophagus.\nE. The standard surgical approach to the midesophagus is a right thoracotomy because the heart is in the way during a left thoracotomy.",
      "options": [
        "A. Outer longitudinal muscle is an extension of the cricopharyngeus muscle.",
        "B. Cervical esophagus is supplied by the inferior thyroid artery.",
        "C. The narrowest point in the esophagus is at the aortic arch.",
        "D. Branches off the intercostal arteries are the major blood supply to the thoracic esophagus.",
        "E. The standard surgical approach to the midesophagus is a right thoracotomy because the heart is in the way during a left thoracotomy."
      ],
      "answer": "B",
      "explanation": "*   The esophagus is a two-layered muscular conduit connecting the oropharynx to the stomach.\n*   The outer muscular layer is longitudinal while the inner layer is circular and considered an extension of the cricopharyngeus muscle (A).\n*   Several anatomic areas of narrowing exist in the esophagus, with the cricopharyngeus muscle contributing to the narrowest portion.\n*   Other anatomic areas of narrowing occur at the aortic arch and the diaphragm (C).\n*   The cervical esophagus is supplied by the thyrocervical trunk off the subclavian artery. The major branches of the thyrocervical trunk can be remembered by the mnemonic \"STAT\" (suprascapular artery, transverse cervical artery, ascending cervical artery, and inferior thyroid artery).\n*   The thoracic esophagus is primarily supplied by branches directly off the aorta.\n*   The surgical approach to the esophagus can be divided into thirds.\n*   The first and last portions of the esophagus are approached by a left thoracotomy while the midesophagus is approached with a right thoracotomy as the aorta is in the way during a left thoracotomy (E)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is true regarding surgical intervention for esophageal cancer?\nA. Ivor Lewis esophagectomy involves an upper midline laparotomy and a left thoracotomy.\nB. Transthoracic esophagectomy (TTE) is associated with a lower total hospital length of stay when compared to a transhiatal esophagectomy (THE).\nC. There is no difference in mortality between the use of TTE or THE in the surgical treatment of esophageal cancer.\nD. TTE is associated with fewer complications when compared with THE.\nE. THE is performed with a right cervical incision and midline laparotomy.",
      "options": [
        "A. Ivor Lewis esophagectomy involves an upper midline laparotomy and a left thoracotomy.",
        "B. Transthoracic esophagectomy (TTE) is associated with a lower total hospital length of stay when compared to a transhiatal esophagectomy (THE).",
        "C. There is no difference in mortality between the use of TTE or THE in the surgical treatment of esophageal cancer.",
        "D. TTE is associated with fewer complications when compared with THE.",
        "E. THE is performed with a right cervical incision and midline laparotomy."
      ],
      "answer": "C",
      "explanation": "*   Surgical intervention in esophageal cancer is an area of active research.\n*   The three standard approaches include TTE, THE, and a combination of the two using a three-incision esophagectomy.\n*   TTE was initially described as a two-stage procedure by Dr. Ivor Lewis, involving mobilization of the stomach via an upper midline laparotomy followed by resection of the esophagus via a right thoracotomy incision several days later (A).\n*   A large multicenter prospective study comparing THE and TTE failed to demonstrate any difference in overall mortality and morbidity between the two approaches (D).\n*   However, THE has been shown in several studies to be associated with a lower total hospital length of stay (B).\n*   THE is performed with a left cervical incision and midline laparotomy (E).\n*   THE is often performed for patients with distal esophageal cancer."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which one of the following is true about Mallory-Weiss syndrome?\nA. The chief pathologic finding is spontaneous perforation of the esophagus.\nB. It typically occurs on the right side.\nC. It is usually associated with air in the mediastinum.\nD. Endoscopy should be performed to confirm the diagnosis.\nE. Prompt surgical management is the treatment of choice.",
      "options": [
        "A. The chief pathologic finding is spontaneous perforation of the esophagus.",
        "B. It typically occurs on the right side.",
        "C. It is usually associated with air in the mediastinum.",
        "D. Endoscopy should be performed to confirm the diagnosis.",
        "E. Prompt surgical management is the treatment of choice."
      ],
      "answer": "D",
      "explanation": "*   The mechanism of a Mallory-Weiss tear is similar to that of an esophageal perforation (Boerhaave syndrome), but differs in that the injury is not full thickness (A).\n*   It is the result of forceful vomiting or coughing, such as after an alcohol drinking binge.\n*   The classic description is retching followed by vomiting of blood.\n*   The presence of a hiatal hernia is a predisposing factor and is found in a majority of patients.\n*   This situation exposes the LES to high pressures, resulting in a partial-thickness mucosal tear and bleeding most commonly 3 to 5 cm above the gastroesophageal junction on the left side (B).\n*   Boerhaave syndrome results in a full-thickness tear causing esophageal perforation (A). These patients often present with sepsis with air in the mediastinum and a pleural effusion.\n*   Severe sepsis in the setting of esophageal perforation mandates surgical intervention (C).\n*   Most bleeding from Mallory-Weiss tears stops spontaneously with nonsurgical management (E).\n*   Patients should undergo endoscopy to confirm the diagnosis.\n*   Recent studies suggest that bleeding is best managed by injecting sclerosing agents or epinephrine to prevent rebleeding."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "Which of the following statements about a paraesophageal hernia is true?\nA. It is associated with anemia.\nB. It does not pose a risk for incarceration and strangulation.\nC. Diagnosis is not readily made with upper endoscopy.\nD. It is usually caused by a traumatic injury.\nE. It rarely requires operative repair.",
      "options": [
        "A. It is associated with anemia.",
        "B. It does not pose a risk for incarceration and strangulation.",
        "C. Diagnosis is not readily made with upper endoscopy.",
        "D. It is usually caused by a traumatic injury.",
        "E. It rarely requires operative repair."
      ],
      "answer": "A",
      "explanation": "*   A paraesophageal hernia, or type II hiatal hernia, is also called a rolling-type hiatal hernia.\n*   The widened hiatus permits the fundus of the stomach to protrude into the chest, anterior and lateral to the body of the esophagus.\n*   The gastroesophageal junction remains below the diaphragm.\n*   The herniated gastric fundus rotates in a counterclockwise direction and is prone to becoming incarcerated and strangulated.\n*   This herniated portion of the stomach develops mucosal erosions (Cameron's ulcers) that can lead to chronic blood loss and anemia in up to one third of patients.\n*   Patients can also have dysphagia, heartburn, and abdominal pain.\n*   Diagnosis can be made by a barium swallow.\n*   Upper endoscopy can readily make the diagnosis on a retroflex view (C).\n*   Although incarceration is rare, most surgeons recommend elective repair of paraesophageal hernias due to the potential risk of strangulation (B, E).\n*   It is not typically preceded by trauma (D)."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which of the following statements is true about Zenker diverticulum?\nA. It is a true diverticulum.\nB. It is best diagnosed with esophagoscopy.\nC. It is unlikely to cause aspiration.\nD. It is a pulsion diverticulum.\nE. Small diverticula (<3 cm) are best managed endoscopically.",
      "options": [
        "A. It is a true diverticulum.",
        "B. It is best diagnosed with esophagoscopy.",
        "C. It is unlikely to cause aspiration.",
        "D. It is a pulsion diverticulum.",
        "E. Small diverticula (<3 cm) are best managed endoscopically."
      ],
      "answer": "D",
      "explanation": "*   A Zenker diverticulum is a false, esophageal diverticulum that does not contain all layers of the esophagus; it is also a type of pulsion diverticulum (A).\n*   A pulsion diverticulum forms at a point of weakness and is due to alterations in luminal pressure.\n*   Conversely, a traction diverticulum is from external pulling on the esophageal wall, such as from inflamed lymph nodes with tuberculosis.\n*   Zenker diverticulum is the most common type of esophageal diverticulum.\n*   It usually presents in older patients (>60 years).\n*   It characteristically arises at a point of weakness, most commonly at the Killian triangle, which is formed by the inferior fibers of the inferior constrictor muscle and the superior border of the cricopharyngeus muscle.\n*   Patients typically present with dysphagia, regurgitation of undigested food, halitosis, episodes of aspiration, and salivation (C).\n*   With the characteristic history, the first diagnostic study is a barium swallow.\n*   In the absence of other pathology (such as an irregular mucosa), endoscopy is not needed (B).\n*   Treatment is surgical by either open or endoscopic techniques.\n*   The open technique involves cervical esophagomyotomy with stapling and amputation of the diverticulum.\n*   The endoscopic technique involves division of the common wall between the diverticulum and the esophagus.\n*   Studies have shown that results with the endoscopic technique are better with larger diverticula (E).\n*   Diverticula smaller than 3 cm are too short to accommodate one cartridge of staples and to allow complete division of the sphincter, and therefore this size is considered a contraindication to this technique."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Dysphagia lusoria is most likely associated with:\nA. Bovine arch\nB. Aberrant subclavian artery\nC. Coarctation of the aorta\nD. Ascending aortic aneurysm\nE. Patent ductus arteriosum",
      "options": [
        "A. Bovine arch",
        "B. Aberrant subclavian artery",
        "C. Coarctation of the aorta",
        "D. Ascending aortic aneurysm",
        "E. Patent ductus arteriosum"
      ],
      "answer": "B",
      "explanation": "*   Dysphagia lusoria (dysphagia by a freak of nature) refers to difficulty in swallowing due to compression of the esophagus by an aberrant right subclavian artery (C-E).\n*   The aberrant right subclavian artery arises distal to the origin of the left subclavian artery in the descending thoracic aorta, traverses the mediastinum posterior to the esophagus and trachea, and then follows the course of the normal artery into the right upper extremity.\n*   It is usually asymptomatic.\n*   The most common associated symptom is dysphagia associated with compression of the esophagus between the trachea and the artery.\n*   It is associated with a Kommerell diverticulum, which occurs as a result of abnormal regression of the fourth aortic arch and persistent patency of the right eighth dorsal aortic segments.\n*   An aortic diverticulum is found at the site of origin of the atretic arch.\n*   A Kommerell diverticulum can occur in a number of anomalies of the aortic arch system.\n*   These abnormalities can, but do not always, cause symptoms of tracheal or esophageal compression.\n*   The diverticulum is most frequently present in cases of a right aortic arch with an aberrant left subclavian artery, but it can also occur in association with an aberrant right subclavian artery.\n*   A \"bovine arch\" is a normal variant in which the left common carotid artery and the innominate artery share a common origin off the aortic arch (A).\n*   It is important to note that, in a trauma patient, a Kommerell diverticulum can be confused with an aortic transection on angiography."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "A 36-year-old male presents for consultation regarding an incidental esophageal mass seen on computed tomography (CT) scan. This was performed after he was involved in a motor vehicle collision (MVC). He had no serious injuries and was discharged the same day. Barium swallow demonstrates a smooth, crescent-shaped filling defect. Which of the following is true regarding this mass?\nA. Resection is the treatment of choice.\nB. They most commonly present with satellite tumors.\nC. They have no risk of malignant degeneration.\nD. Esophageal ultrasonography may be useful.\nE. A preoperative endoscopic biopsy should be performed.",
      "options": [
        "A. Resection is the treatment of choice.",
        "B. They most commonly present with satellite tumors.",
        "C. They have no risk of malignant degeneration.",
        "D. Esophageal ultrasonography may be useful.",
        "E. A preoperative endoscopic biopsy should be performed."
      ],
      "answer": "D",
      "explanation": "*   Leiomyomas are the most common benign tumor in the esophagus, accounting for more than 50% of benign tumors.\n*   However, benign masses constitute only 10% of esophageal tumors.\n*   They have a small risk of malignant degeneration (C).\n*   Leiomyomas only become symptomatic when they are very large (>5 cm).\n*   Otherwise, they are incidentally discovered during the course of other studies.\n*   They have a characteristic appearance on barium swallow of a smooth, crescent-shaped filling defect that encroaches on the lumen.\n*   On endoscopy, the mucosa is usually intact, and the tumor moves up and down with swallowing.\n*   If it has the characteristic appearance, the tumor should not undergo biopsy because of an increased risk of mucosal perforation. This can create scarring that may affect efforts at resection later (E).\n*   Esophageal ultrasonography is very useful in the diagnosis of leiomyomas because it will demonstrate a homogeneous region of hypoechogenicity.\n*   Treatment is to enucleate the mass, which can be done via a videoscopic approach with intraoperative esophagoscopy (A).\n*   The cell of origin of these tumors is mesenchymal.\n*   The average age at presentation is 38 years, and they are twice as common in males and most commonly located in the lower two-thirds of the esophagus.\n*   Leiomyomas are usually solitary, but multiple tumors are seen in as many as 10% of patients (B)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Barrett esophagus:\nA. Is a congenital abnormality\nB. Occurs more frequently in black patients\nC. When diagnosed, should be treated with an antireflux procedure to prevent cancer\nD. Diagnosis requires replacement of a 3-cm long segment of the squamous cells by columnar epithelium\nE. Features the presence of goblet cells",
      "options": [
        "A. Is a congenital abnormality",
        "B. Occurs more frequently in black patients",
        "C. When diagnosed, should be treated with an antireflux procedure to prevent cancer",
        "D. Diagnosis requires replacement of a 3-cm long segment of the squamous cells by columnar epithelium",
        "E. Features the presence of goblet cells"
      ],
      "answer": "E",
      "explanation": "*   Barrett esophagus occurs in 5% to 7% of patients with GERD.\n*   It is an acquired pathology (A).\n*   The hallmark feature is the presence of intestinal goblet cells, which signifies intestinal metaplasia, on endoscopic biopsy.\n*   It occurs more commonly in males with a 3:1 ratio and is uncommon in black patients (B).\n*   Once Barrett esophagus develops, the risk of adenocarcinoma is approximately 0.5% per year. In one large study, the prevalence of cancer was 4%.\n*   Management of Barrett esophagus initially is medical, provided there is no evidence of severe dysplasia.\n*   However, surveillance of patients with Barrett esophagus for dysplasia is recommended.\n*   If severe dysplasia is present, endoscopic radioactive ablation or esophagectomy are recommended (D).\n*   Another option for high-grade dysplasia is photodynamic therapy using Photofrin (porfimer sodium), a light-sensitizing drug that is administered orally and concentrates in the area of metaplasia. A laser is then focused on the esophagus, activating the drug and destroying the cells.\n*   In patients with Barrett esophagus without dysplasia, a randomized study comparing medical management with antireflux surgery showed that there were no differences between the two treatments with regard to preventing progression to dysplasia and adenocarcinoma, although antireflux surgery was more efficient than medical treatment (C)."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is true regarding Barrett esophagus?\nA. PPIs are considered a more effective treatment option than H2 blockers.\nB. Dietary restrictions such as those used for patients with GERD are not useful.\nC. Patients with short- and long-segment Barrett esophagus have a similar risk of high-grade dysplasia.\nD. Use of high-dose PPIs when compared with low-dose PPIs has been demonstrated to reduce the progression of carcinoma in patients with Barrett esophagus.\nE. Photofrin is a useful treatment modality.",
      "options": [
        "A. PPIs are considered a more effective treatment option than H2 blockers.",
        "B. Dietary restrictions such as those used for patients with GERD are not useful.",
        "C. Patients with short- and long-segment Barrett esophagus have a similar risk of high-grade dysplasia.",
        "D. Use of high-dose PPIs when compared with low-dose PPIs has been demonstrated to reduce the progression of carcinoma in patients with Barrett esophagus.",
        "E. Photofrin is a useful treatment modality."
      ],
      "answer": "A",
      "explanation": "*   Although pharmacologic treatment for Barrett esophagus should be similar to that for GERD, most authorities agree that the use of PPIs is more effective in treating patients with Barrett esophagus.\n*   High-dose PPIs have not yet been demonstrated to be superior to low-dose PPIs in the progression of cancer in Barrett esophagus.\n*   A large randomized trial from the United Kingdom (ASPECT trial) is currently investigating this, along with the role of aspirin in Barrett esophagus, and plans to release results in 2018 (D).\n*   Interestingly, *in vivo* studies have shown that nonsteroidal antiinflammatory drugs (NSAIDs) and statins can reduce the progression of cancer in patients with Barrett esophagus.\n*   The ASPECT trial may provide more powerful evidence to suggest the use of NSAIDs in patients with Barrett esophagus for chemoprophylaxis.\n*   Long-segment Barrett esophagus has a higher risk for high-grade dysplasia (C).\n*   Photofrin has not been demonstrated to be a useful modality (E).\n*   Dietary restrictions are helpful in Barrett esophagus and include the avoidance of fatty foods, chocolate, peppermint, alcohol, coffee, ketchup, mustard, or vinegar (B)."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "During the course of an upper endoscopy for manometry confirmed achalasia, the endoscopist thinks he may have caused an inadvertent perforation of the left lower esophagus. The patient is stable and shows no signs of sepsis. Esophagogram confirms a markedly dilated esophagus with a small distal free perforation. Management consists of:\nA. Intravenous (IV) antibiotics, placing patient NPO (nothing by mouth), and close observation\nB. Left thoracotomy, primary repair, longitudinal myotomy on the contralateral side\nC. Laparoscopic primary repair and longitudinal myotomy on the ipsilateral side\nD. Esophagectomy with immediate reconstruction\nE. Esophageal stent placement",
      "options": [
        "A. Intravenous (IV) antibiotics, placing patient NPO (nothing by mouth), and close observation",
        "B. Left thoracotomy, primary repair, longitudinal myotomy on the contralateral side",
        "C. Laparoscopic primary repair and longitudinal myotomy on the ipsilateral side",
        "D. Esophagectomy with immediate reconstruction",
        "E. Esophageal stent placement"
      ],
      "answer": "B",
      "explanation": "*   The decision of how to proceed in an iatrogenic esophageal perforation depends on five factors: whether it is a free or contained perforation, the duration of time that the perforation has been present, the underlying pathology in the esophagus, whether severe inflammation is present at surgery, and the patient's condition.\n*   As a general rule, if the perforation is contained, as shown on an esophagogram, management can be conservative (A).\n*   If it is a small free perforation, surgery is indicated with primary repair with or without an intercostal muscle flap.\n*   Resection of an injured esophagus with cervical esophagostomy (spit fistula), gastrostomy, and feeding jejunostomy is reserved for situations with a long delay in diagnosis (>72 hours), severe inflammation, or if the patient is extremely ill or disabled (B).\n*   If the underlying disease requires an esophagectomy (e.g., cancer, severe burn), immediate esophagectomy with reconstruction is recommended if it is feasible (limited inflammation and minimal delay) (D).\n*   Stenting is generally reserved for unresectable cancer (E).\n*   An iatrogenic perforation in a patient with achalasia will need to have the perforation addressed as discussed above but will also need definitive management of the underlying disease, provided the patient is not extremely ill.\n*   The treatment of choice is a left thoracotomy, primary repair, longitudinal myotomy on the contralateral side with or without fundoplication.\n*   Laparoscopic repair is increasing in popularity but will still need a myotomy on the contralateral side of the perforation (C)."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 4-year-old boy presents to the ED after an accidental ingestion of lye. The child is exhibiting stridor and hoarseness. The child is emergently intubated and resuscitated with IV fluids. An upright chest radiograph shows no evidence of perforation. The patient is admitted to the intensive care unit. The next step in the management is:\nA. Esophagoscopy\nB. Esophagography\nC. Chest computed tomography scan\nD. Close observation\nE. Immediate exploratory laparotomy",
      "options": [
        "A. Esophagoscopy",
        "B. Esophagography",
        "C. Chest computed tomography scan",
        "D. Close observation",
        "E. Immediate exploratory laparotomy"
      ],
      "answer": "A",
      "explanation": "*   Caustic injuries can lead to esophageal perforation in the short term and severe esophageal strictures in the long term.\n*   Initial management should focus on the ABCs.\n*   An upright chest radiograph should be obtained to look for free air under the diaphragm.\n*   Emetics should be avoided.\n*   Further workup is needed to determine the extent of injury (E).\n*   In children, esophagoscopy may not be necessary if the patient is completely asymptomatic.\n*   In this patient who is having symptoms and in adults, esophagoscopy is recommended within 12 hours of the ingestion to assess the degree of injury (provided there is no evidence of perforation) (B).\n*   It is important to advance the endoscope only to the first area of injury, so as not to increase the risk of iatrogenic perforation.\n*   CT has lower sensitivity in demonstrating mucosal damage (C).\n*   Injury is graded as first degree (mucosal hyperemia, edema), second degree (limited hemorrhage, pseudomembrane formation), or third degree (complete obstruction of lumen by edema, charring).\n*   First-degree burns can be treated by observation (D).\n*   Second- and third-degree burns (without perforation) are treated by placing the patient NPO and administering IV antibiotics, H2-receptor antagonists, PPIs, and IV fluids.\n*   The use of steroids is controversial."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Over the past 2 years, a 50-year-old man repeatedly reported difficulty swallowing, which he described as a lump in his throat. He has noticed expectoration of excess saliva, dysphagia, intermittent hoarseness, and some weight loss. Which of the following is true of the most likely diagnosis?\nA. Swallowing is easiest immediately after waking up in the morning and gets increasingly difficult throughout the course of the day.\nB. It is best managed with diverticulectomy alone through a left cervical incision.\nC. It involves an outpouching of the muscularis propria.\nD. Esophagectomy will improve survival.\nE. The patient should likely be started on chemoradiation.",
      "options": [
        "A. Swallowing is easiest immediately after waking up in the morning and gets increasingly difficult throughout the course of the day.",
        "B. It is best managed with diverticulectomy alone through a left cervical incision.",
        "C. It involves an outpouching of the muscularis propria.",
        "D. Esophagectomy will improve survival.",
        "E. The patient should likely be started on chemoradiation."
      ],
      "answer": "A",
      "explanation": "*   Cricopharyngeal dysfunction has multiple causes including neurogenic and myogenic etiologies, such as stroke, multiple sclerosis, peripheral neuropathy, Parkinson disease, and dermatomyositis.\n*   The exact cause is unknown, but the primary theory is that the cricopharyngeus muscle, which is normally in a state of tonic contraction, fails to relax and allow the passage of food into the cervical esophagus.\n*   This produces a Zenker diverticulum, which is considered a false diverticulum (only involves an outpouching of the mucosa and submucosa) and can be confirmed with a barium swallow (C).\n*   Endoscopic evaluation of a suspected Zenker diverticulum is discouraged as it can lead to an iatrogenic perforation.\n*   Patients describe difficulty swallowing food, which worsens throughout the day as the diverticulum increasingly gets filled with food.\n*   Another key element of the diagnosis is the classic history of an inability to handle saliva secretion, such that the patient describes expectoration of saliva.\n*   Patients also report hoarseness.\n*   Management includes a diverticulectomy through a left cervical incision. A pharyngoesophageal myotomy also needs to be performed to prevent recurrence (B).\n*   Weight loss results from a decreased caloric intake.\n*   Although one should always be suspicious of carcinoma in a patient with difficulty swallowing and weight loss, the long duration of symptoms makes carcinoma unlikely (D, E)."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Esophageal manometry performed in a patient with a true paraesophageal hernia will demonstrate that the LES is:\nA. Above the normal position\nB. At the normal position\nC. Hypertensive\nD. Hypotensive\nE. Short",
      "options": [
        "A. Above the normal position",
        "B. At the normal position",
        "C. Hypertensive",
        "D. Hypotensive",
        "E. Short"
      ],
      "answer": "B",
      "explanation": "*   Hiatal hernias are divided into three types.\n*   Type I, or a sliding hiatal hernia, is the most common. In this hernia, the gastroesophageal junction moves upward into the posterior mediastinum along with part of the stomach, such that the LES is above its normal position (A).\n*   The majority of these hernias are asymptomatic. Those who do have symptoms typically experience heartburn and regurgitation.\n*   In type II or paraesophageal hernias, the gastroesophageal junction and therefore the LES are in their normal positions, as is the cardia.\n*   However, the gastric fundus is dislocated upward.\n*   The LES is neither hypertensive nor hypotensive (C, D).\n*   A type III hernia is a combination of types I and II.\n*   A hypertensive LES is characteristic of achalasia.\n*   In GERD, the LES pressure is low.\n*   GERD seems to begin from gastric distention.\n*   The distention leads to a shortening of the LES (E).\n*   As the sphincter shortens, its resting pressure decreases.\n*   The location of the LES (in the normal abdominal position or in the mediastinum) is important in GERD.\n*   Loss of abdominal length of the LES causes a decrease in LES pressure because it is no longer subjected to the positive pressure of the abdomen."
    }
  ]
}
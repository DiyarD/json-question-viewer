{
    "chapter_name": "Appendix Common instruments used in general surgery",
    "questions": [
        {
            "id": 1,
            "question_type": "emq",
            "question": "Abdomino-perineal resection (APR) (upper end)",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "E",
                "D"
            ],
            "explanation": "This is a self-retaining three-bladed retractor used for operations on the sigmoid colon and rectum, such as upper end of APR, anterior resection or Hartmann's operation. With the patient in the Lloyd-Davies (lithotomy-Trendelenberg) position, the abdomen is opened. On opening the abdomen and performing a laparotomy, the patient is placed in the head-down position. The retractor is now inserted with only the two lateral blades to separate the wound edges. Next, the entire small bowel from the duodeno-jejunal flexure to the ileocaecal junction is packed away toward the head end with wet towels. Now the centre blade is applied to push the packs and keep them away from the site of operation. The three blades are available in different sizes to fit in with the build of the patient. The appropriate dissection is now commenced.\nThe Dyball retractor, which the assistant uses, is a very useful deep retractor in the latter stages of these operations to retract the urinary bladder or the uterus, or both, when dissecting in the region of the recto-vesical pouch or the pouch of Douglas."
        },
        {
            "id": 2,
            "question_type": "emq",
            "question": "Abdomino-perineal resection (lower end)",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "J"
            ],
            "explanation": "This is a self-retaining retractor devised for the perineal end of an APR. After applying a purse-string to the anus, the stitch is left long and held in a haemostat to apply traction during dissection. An elliptical incision is made around the anus. The incision is deepened into both ischiorectal fossa. Once the incision is deep enough, the retractor is applied with the pointed ends upward to separate the ischiorectal fat, providing a good view of the anorectum that is held by the purse-string on the haemostat. As the dissection proceeds, the retractor has to be repositioned."
        },
        {
            "id": 3,
            "question_type": "emq",
            "question": "Anterior resection",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "E",
                "D"
            ],
            "explanation": "Please see number 1 above for APR."
        },
        {
            "id": 4,
            "question_type": "emq",
            "question": "Appendicectomy",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "B"
            ],
            "explanation": "This is an atraumatic grasping forceps used to grasp bowel. It is most commonly used in appendicectomy to grasp the appendix and deliver it out of the wound. When using this instrument, care should be taken not to perforate the inflamed appendix. It is also used to steady parts of the bowel while bringing cut edges together for anastomosis."
        },
        {
            "id": 5,
            "question_type": "emq",
            "question": "Groin dissection in varicose vein surgery",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "K",
                "H"
            ],
            "explanation": "This is a self-retaining retractor used to retract wound edges where the length of the incision is 3 to 4 cm long. For longer incisions where dissection is not too deep, two of these retractors can be used at either end of the wound. It is ideal for a groin dissection for varicose veins, inguinal or femoral hernia repairs and femoral emoblectomy. It retracts skin and subcutaneous tissue and needs replacing as the incision is deepened. McIndoe scissors is the ideal dissecting instrument in these operations."
        },
        {
            "id": 6,
            "question_type": "emq",
            "question": "Laparotomy",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "I"
            ],
            "explanation": "On making an abdominal incision, longitudinal or transverse, for a laparotomy, on opening the abdomen, the wound edges have to be retracted by the assistant. At the initial stage during exploratory laparotomy, this retractor is the ideal one to use. The lip of the retractor prevents it from slipping while the assistant pulls on it to give the surgeon a good exposure."
        },
        {
            "id": 7,
            "question_type": "emq",
            "question": "Lymph node biopsy",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "L",
                "H"
            ],
            "explanation": "This instrument is a smaller version of the Travers retractor. It is the ideal retractor to use when doing a lymph node biopsy under local anaesthetic, usually without an assistant. As a self-retaining retractor, it will need repositioning during the operation. The jaws should be prised open gently, because the operation is under local anaesthetic. To dissect the lymph node the McIndoe scissors is the ideal instrument to use to create as minimal trauma as possible, thus not distorting the macroscopic feature of the node."
        },
        {
            "id": 8,
            "question_type": "emq",
            "question": "Open cholecystectomy/right hemicolectomy",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "C",
                "D"
            ],
            "explanation": "After entering the peritoneal cavity for one of these operations, the liver has to be retracted. This is done by the Dyball or Deaver retractor. While performing this procedure, to minimise the chances of trauma to the liver by over-enthusiastic retraction, a wet pack is often placed between the liver and the blade of the retractor."
        },
        {
            "id": 9,
            "question_type": "emq",
            "question": "Small bowel resection",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "A",
                "H"
            ],
            "explanation": "In small bowel resection, the bowel ends will need to be moved around without handling (no-touch technique). This is best done by using Allis forceps, which can also provide gentle traction. Dissection of the small bowel mesentery is an initial part of the operation. This is ideally done by McIndoe scissors."
        },
        {
            "id": 10,
            "question_type": "emq",
            "question": "Thyroidectomy",
            "options": [
                "A Allis forceps",
                "B Babcock forceps",
                "C Deaver retractor",
                "D Dyball retractor",
                "E Goligher retractor",
                "F Joll retractor",
                "G Kocher dissector",
                "H McIndoe scissors",
                "I Morris retractor",
                "J St Mark's retractor",
                "K Travers retractor",
                "L West retractor"
            ],
            "answer": [
                "F",
                "G",
                "H"
            ],
            "explanation": "A curved collar incision is made halfway between the thyroid cartilage and suprasternal notch. After cutting through skin and platysma, the upper flap is raised up to the thyroid cartilage and lower flap down to the suprasternal notch. After mobilisation of the two flaps is complete, the Joll self-retaining thyroid retractor is inserted. This is done by first placing wet swabs over the skin edges, and then applying the two clips of the retractor to the swab-covered skin edges. The central segment of the retractor is then unscrewed to separate the skin edges to obtain full exposure. After dealing with the middle thyroid vein/s, the superior pole is first mobilised and divided. The Kocher dissector is very useful for this manoeuvre. The dissector is used to perform blunt dissection in the upper pole and isolate the superior thyroid vessels. Once isolated, the dissector is pushed under the pedicle. A tie is then put through the eye of the dissector, which at this stage doubles as an aneurysm needle. The pedicle is thus tied three times as close to the gland as possible, so as not to damage the external laryngeal nerve. With the dissector under the tied pedicle, a fine knife is used to cut the pedicle, leaving two ties in the patient and one on the gland. Alternatively an aneurysm needle may be used to perform this step. Dissection in this operation is ideally carried out by McIndoe scissors."
        }
    ]
}
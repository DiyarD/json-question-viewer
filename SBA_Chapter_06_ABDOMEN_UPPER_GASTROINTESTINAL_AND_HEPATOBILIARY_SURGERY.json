{
    "chapter_name": "ABDOMEN: UPPER GASTROINTESTINAL AND HEPATOBILIARY SURGERY",
    "questions": [
        {
            "id": "1",
            "question_type": "mcq",
            "question": "The epiploic foramen of Winslow is an important anatomical landmark as it is the only communication between the greater and the lesser sac. Of the five structures listed below, which one is not a border of the epiploic foramen of Winslow?",
            "options": [
                "A. Inferior vena cava",
                "B. First part of the duodenum",
                "C. Hepatoduodenal ligament",
                "D. Gallbladder",
                "E. Caudate lobe of the liver"
            ],
            "answer": "D",
            "explanation": "Anatomy is taught to a greater or lesser degree in all medical schools. However, if a candidate is doing well in a viva or PACES format exam, he or she will be asked basic anatomy. Some schools also include anatomy questions in their written papers, so it is worth knowing, even if surgery is not your chosen career pathway. Of the above options, the gallbladder is the only structure which does not border the foramen of Winslow. Of note is that the portal triad is contained within the hepatoduodenal ligament. Candidates should know the three structures that make up the portal triad."
        },
        {
            "id": "2",
            "question_type": "mcq",
            "question": "Of the following, which is not a risk factor for gastric cancer?",
            "options": [
                "A. Pernicious anaemia",
                "B. Helicobacter pylori",
                "C. Partial gastrectomy",
                "D. Blood group 0",
                "E. Dried fish"
            ],
            "answer": "D",
            "explanation": "The incidence of gastric cancer in the UK is declining, although incidence is still approximately 16:100 000. It is more common in Japan, where it is such a problem that national screening programmes are in place. It affects males twice as commonly as females. Dried fish and cured meats are associated with increased risk, due to the high quantities of nitrosamines in them. Pernicious anaemia, an autoimmune disorder with antibodies produced against intrinsic factor, also predisposes to gastric cancer as does chronic H. pylori infection – which carries a 1% risk of malignancy. Previous gastrectomy is a risk factor for malignancy, something which must be discussed with the patient prior to their operation.\nBlood group A is a risk factor for gastric cancer, but blood group O is not. Other risk factors include atrophic gastritis, low social status and smoking."
        },
        {
            "id": "3",
            "question_type": "mcq",
            "question": "Which of the following investigations are not used in staging of oesophageal malignancy?",
            "options": [
                "A. Mediastinoscopy",
                "B. High-resolution computed tomography scanning",
                "C. Endoscopy",
                "D. Endoluminal ultrasound",
                "E. Laparoscopy"
            ],
            "answer": "C",
            "explanation": "Over 75% of cases of oesophageal carcinoma will have metastasis at the time of diagnosis and overall 5-year survival is just 5%. The spread is initially by direct invasion, then by lymphatics. Haematogenous spread occurs late. Appropriate choice of staging investigations depends on the positioning of the primary tumour. Endoscopy is not a staging investigation, although it is a diagnostic investigation and is the means through which tissue diagnosis is made."
        },
        {
            "id": "4",
            "question_type": "mcq",
            "question": "The blood supply to the oesophagus is derived from which three vessels?",
            "options": [
                "A. Inferior thyroid artery, descending aorta, left gastric artery",
                "B. Internal carotid, descending aorta, oesophageal artery",
                "C. Lateral thoracic artery, phrenic artery, right gastric artery",
                "D. Pharyngeal artery, long thoracic artery, phrenic artery",
                "E. Ascending aorta, common hepatic artery, left gastric artery"
            ],
            "answer": "A",
            "explanation": "The first reaction to a question of this type is typically panic as the majority of candidates will not know the blood supply to the oesophagus. However, candidates should be able to rule out most of the options using more basic knowledge. The internal carotid has no branches outside the cranial vault, and therefore option B can be discounted. The lateral thoracic artery runs in the mid-axillary line supplying the lateral chest wall and the long thoracic artery is fictitious, therefore options C and D can be discounted. Option E should be similarly discounted: neither the common hepatic nor the ascending aorta are likely to supply the oesophagus. By applying such an analytical approach candidates will be able to answer such questions without in-depth knowledge of the relevant anatomy.\nThe anatomy of the oesophagus is complex, primarily because of its length and passage through several anatomical regions. The first third is composed of striated muscle and is supplied by the inferior thyroid artery and drained by the inferior thyroid veins and the deep cervical lymph vessels. The second third is a blend of striated and smooth muscle fibres. It is supplied by the descending aorta, and drains via the azygos vein and the posterior mediastinal lymph vessels. The lower third is made up of smooth muscle fibres, and is supplied by the oesophageal branches of the left gastric artery and drained via the left gastric vein into the portal venous system and the lymph vessels surrounding the coeliac plexus."
        },
        {
            "id": "5",
            "question_type": "mcq",
            "question": "A 58-year-old patient presents with a 6-week history of increasing difficulty swallowing. He first noticed problems when eating meat which became stuck ‘behind his heart', but this gradually began to include other foods. The patient is currently worried because he is now struggling with thick fluids and has noticed some involuntary weight loss. What is the most appropriate investigation?",
            "options": [
                "A. Staging computed tomography",
                "B. Barium meal",
                "C. Upper gastrointestinal endoscopy",
                "D. Barium swallow",
                "E. Electrocardiography"
            ],
            "answer": "C",
            "explanation": "This patient has a history which is highly suggestive of oesophageal cancer. The rapid progression from solid food to liquids, weight loss and age should all raise the possibility of malignancy in the mind of the clinician. However, this should not tempt one to move straight to staging CT, however certain one might be. It is still necessary to confirm the diagnosis prior to staging, the gold standard investigation being endoscopy as it allows histological examination as well as direct visualization of pathology. Barium meal has little role in the investigation of dysphagia. Barium swallow has largely been replaced by endoscopy for mechanical causes of dysphagia, although it remains invaluable when investigating neuromuscular causes such as achalasia and in the evaluation of swallowing deficits following cerebrovascular accidents."
        },
        {
            "id": "6",
            "question_type": "mcq",
            "question": "A 27-year-old patient presents with a 3-month history of increasing difficulty in swallowing. He first noticed the problem when drinking fluids, but is now commonly experiencing it when eating food as well. He has presented as regurgitation of food is becoming a problem and he has noticed unintentional weight loss. A chest radiograph shows a widened mediastinum. What is the most likely diagnosis?",
            "options": [
                "A. Thoracic aortic aneurysm",
                "B. Oesophageal malignancy",
                "C. Plummer-Vinson syndrome",
                "D. Achalasia",
                "E. Oesophageal spasm"
            ],
            "answer": "D",
            "explanation": "Achalasia is a neuromuscular disorder caused by degeneration of Auerbach's plexus, which results in a failure of the lower oesophageal sphincter to relax. Its cause is idiopathic although infection with Trypanosoma cruzi (Chagas' disease) causes a similar problem. The characteristic presentation is with problems swallowing fluids initially, followed by food. Chest pain and weight loss are also common. This conflicts with mechanical causes such as malignancy and compression, as these will initially cause problems with large food boluses, progressing to fluids. The spectre of malignancy is raised by the history of weight loss and mediastinal mass; however, the pattern of symptoms and the patient's age count against this as an answer. The mass seen on the chest radiograph is a dilated oesophagus loaded with food.\nThe principal symptom associated with oesophageal spasm is chest pain, which may closely mimic that caused by myocardial infarction and is relieved by GTN. Dysphagia does occur, but is almost never associated with weight loss. Plummer-Vinson syndrome is a disorder characterized by severe iron deficiency and hyperkeratinization of the upper third of the oesophagus, which causes web formation and obstructive dysphagia. It is, therefore, presented in a similar fashion to other mechanical causes such as malignancy. Both achalasia and Plummer-Vinson syndrome are associated with an increased incidence of oesophageal cancer and require long-term endoscopic monitoring."
        },
        {
            "id": "7",
            "question_type": "mcq",
            "question": "The severity of acute pancreatitis can be assessed using the Glasgow criteria. Which of the following is not used in the calculation?",
            "options": [
                "A. Serum amylase",
                "B. White cell count",
                "C. Serum calcium",
                "D. Alanine aminotransferase",
                "E. Serum urea"
            ],
            "answer": "A",
            "explanation": "The Glasgow criteria are the most commonly applied prognostic scoring system in the UK. There are other criteria – the Ranson scoring system is preferred in the USA and the Balthazar score is based on the findings on CT scanning. It is important to know one of these, and for simplicity's sake the authors' suggest the Glasgow criteria for use by junior doctors. The score is based on the following findings: 1 point is awarded for each, and a score of 3 points within 48 hours of onset indicates severe disease. The score can be remembered using the mnemonic ‘PANCREAS’.\n• P - pO2 <8 kPa\n• A – age >55 years\n• N – neutrophil count >15 × 10º/L\n• C – calcium <2 mmol/L\n• R - raised urea >16 mmol/L\n• E enzymes; LDH >600 IU/L, AST >300 IU/L\n• A - albumin <32 g/L\n• S - sugar (glucose) >10 mmol/L"
        },
        {
            "id": "8",
            "question_type": "mcq",
            "question": "CREST syndrome is an autoimmune condition which is associated with atrophy and fibrosis of the oesophageal musculature resulting in dysphagia and reflux-type symptoms. Which of the following is not a feature of CREST syndrome?",
            "options": [
                "A. Raynaud's phenomenon",
                "B. Erythematous malar rash",
                "C. Sclerodactyly",
                "D. Soft tissue calcification",
                "E. Telangiectasia"
            ],
            "answer": "B",
            "explanation": "The scleroderma spectrum of disorders are a group of connective tissue diseases inclusive of localized scleroderma (affects skin only), Raynaud's (vasospastic involvement of the fingers) and systemic sclerosis which is itself divided into diffuse cutaneous systemic sclerosis (DCSS) and limited cutaneous systemic sclerosis (also known as CREST syndrome). The two conditions vary in their symptom pattern and onset, but both involve the internal organ systems, including the renal tract and lungs (causing failure and pulmonary fibrosis). Skin involvement in DCSS is severe and widespread, but organ involvement is maximal at around 3 years and then typically improves. In CREST skin involvement is confined to the face and extremities; however, organ involvement tends to be progressive and more severe. CREST syndrome is typified by the following features: calcinosis, Raynaud's, esophageal disorders, sclerodactyly and telangiectasia.\nDiagnosis is clinical and backed by identification of certain auto-antibodies. Anti-nuclear antibodies are usually present, anti-Scl-70 is positive in 40% of scleroderma, the presence of anti-centromere antibody occurs in 80%-90% of CREST and is suggestive of the diagnosis. However, auto-antibody testing is non-specific, and either antibody or both antibodies may occur in both conditions."
        },
        {
            "id": "9",
            "question_type": "mcq",
            "question": "The gastro-oesophageal sphincter is not a true sphincter in that it does not rely on a ring of contractile muscle to maintain patency. It therefore relies on several other mechanisms to prevent reflux. Which of the following does not contribute to gastro-oesophageal sphincter function?",
            "options": [
                "A. Left crus of diaphragm",
                "B. Smooth muscle of the lower oesophageal sphincter",
                "C. Angle of His",
                "D. Right crus of diaphragm",
                "E. Intra-abdominal pressure"
            ],
            "answer": "A",
            "explanation": "The gastro-oesophageal sphincter comprises three separate components, which work in tandem to prevent reflux. The LOS is a 4 cm section of hypertrophied smooth muscle, which is continuous with the smooth muscle wall of the oesophagus. It maintains a tonic contraction of 25 cmH2O above the resting intra-gastric pressure. The LOS requires support, however, when intra-gastric pressure rises above the baseline. The second component of the gastro-oesophageal sphincter is the extrinsic sphincter formed by the skeletal muscle fibres of the right crus of the diaphragm that sling around the oesophagus. The extrinsic sphincter supports the LOS at rest but also contracts with the diaphragm during inspiration and abdominal straining, preventing reflux.\nThe third component of the gastro-oesophageal sphincter is the 'physiological sphincter'; the oesophagus projects 2–3 cm into the abdominal cavity and therefore a rise in intra-abdominal pressure leads to compression of the abdominal portion of the oesophagus, preventing reflux. In addition the angle of His provides a flap valve which also protects against reflux. Knowledge of this mechanism is important when considering the effects of hiatus hernia on the integrity of the gastro-oesophageal sphincter, which leaves the LOS completely without support and therefore prone to severe reflux."
        },
        {
            "id": "10",
            "question_type": "mcq",
            "question": "A 58-year-old builder is referred to outpatients with a long history of retrosternal chest pain associated with food. Oesophagogastroduodenoscopy was performed which showed grade 2 oesophagitis with a hiatus hernia. The stomach and duodenum were normal. What is the most appropriate management?",
            "options": [
                "A. Triple eradication therapy",
                "B. Proton pump inhibitor",
                "C. Nissen's fundoplication",
                "D. Yearly endoscopic surveillance and biopsy",
                "E. Supportive gusset"
            ],
            "answer": "B",
            "explanation": "Hiatus herniation is common, occurring in 30% of the population aged over 50, and 50% of those with a hiatus hernia complain of symptomatic GORD. Eight per cent of hiatus hernias are sliding hernias and do not require surgery in the majority of cases; rolling hiatus hernias, however, may necessitate repair due to the risk of strangulation.\nSeverity of oesophagitis is graded according to the Los Angeles classification:\n• Grade 1 = small mucosal breaks, limited to less than two mucosal folds\n• Grade 2 = mucosal break >5 mm long, limited to less than two mucosal folds\n• Grade 3 = mucosal breaks extending beyond two mucosal folds, but involving < 75% of the oesophageal circumference\n• Grade 4 = circumferential mucosal breakdown involving\n> 75% of the mucosal circumference\nComplications include bleeding (usually small volume and chronic), stricture, Barrett's and oesophageal malignancy. Surgery should be avoided unless symptoms are severe and life-altering, refractory to optimal lifestyle and medical management and 24-hour pH monitoring confirms severe reflux. The best option in this patient is a trial of acid suppression therapy such as a proton pump inhibitor (e.g. omeprazole, lansoprazole) or an H₂ antagonist (e.g. ranitidine). Endoscopic surveillance is not indicted in this mild disease."
        },
        {
            "id": "11",
            "question_type": "mcq",
            "question": "Which one of the following is not a recognized long-term complication of partial/total gastrectomy?",
            "options": [
                "A. Gastric malignancy",
                "B. Obstruction",
                "C. Folate deficiency",
                "D. Iron deficiency",
                "E. Vitamin B₁ deficiency"
            ],
            "answer": "E",
            "explanation": "Gastrectomy (partial or total) is a procedure which has been falling out of favour as medical and endoscopic therapy for ulceration and upper gastrointestinal bleeding have proved their effectiveness. Currently, the most common indication for gastrectomy is resection of gastric carcinoma, however procedural rates are rising as endemic obesity becomes more of a problem and the demand for bariatric surgery increases.\nAs such, it is important for surgical trainees to be aware of the potential complications of such surgery. There is a lifelong increased risk of malignancy in patients treated with partial gastrectomy, and as with all intra-abdominal surgery, there is an increased risk of obstruction, either from anastomotic strictures or adhesions. Malabsorption syndromes following gastric surgery include B12, iron and folate deficiencies; vitamin B12 uptake is dependent on intrinsic factor normally produced by gastric parietal cells and bypassing of the duodenum and jejunum causes deficiency in iron and folate as they are chiefly absorbed in the proximal small bowel. Thiamine (vitamin B₁) deficiency is not associated with gastrectomy.\nOther common complications following gastrectomy include reduced gastric capacity, causing abdominal discomfort and early satiety, and dumping syndrome, which results from uncontrolled release of large volumes of chyme into the proximal bowel. The sugars from the chyme are rapidly absorbed and promote an exaggerated insulin response. This results in hot flushes, palpitations and syncope, similar to a hypoglycaemic attack."
        },
        {
            "id": "12",
            "question_type": "mcq",
            "question": "A 45-year-old man presents to the emergency department with a history of coffee-ground vomiting. He also reports that for 2 days his stool appeared darker than usual. Which of the following gives the most sensitive guide as to the severity of his gastrointestinal haemorrhage?",
            "options": [
                "A. Haemoglobin",
                "B. Systolic blood pressure",
                "C. Pulse rate",
                "D. Volume of vomitus/melaena",
                "E. Lying and standing blood pressure"
            ],
            "answer": "E",
            "explanation": "The above scenario is strongly suggestive of a diagnosis of gastrointestinal bleeding. This patient will require an endoscopy, but the timing of such will be determined by his haemodynamic status. Systolic blood pressure and heart rate can be difficult to interpret in patients with a good cardiopulmonary reserve; the most sensitive way of identifying decompensation following haemorrhage is to dynamically test the cardiovascular reserve by assessing for postural drop. Equally, vital signs can be difficult to interpret in patients with pre-existing co-morbidities such as hypertension. A blood pressure of 110/80 mmHg in an individual with a baseline systolic pressure of 180 mmHg indicates profound shock; however, this relative hypotension will be easily missed. Similarly, medications such as ẞ-blockers or digitalis will prevent a normal tachycardic response to hypovolaemia. Decompensation in these patients is also most accurately identified by comparing lying and standing blood pressures.\nA patient's haemoglobin level may indicate the need for transfusion (aim for haemoglobin >8.0 g/dL), but it is a poor marker of severity of haemorrhage in the absence of a baseline level. Furthermore, following an acute haemorrhage the haemoglobin level may be normal if the dilutional effect of fluid replacement has not had time to affect the result. Volume of melaena and vomit is an extremely unreliable marker and is seldom worth consideration."
        },
        {
            "id": "13",
            "question_type": "mcq",
            "question": "A 51-year-old patient is brought into the emergency department following a large-volume haematemesis. The patient is a known cirrhotic and previously survived variceal haemorrhage. The patient is haemodynamically stabilized and an emergency endoscopy is performed which identifies actively bleeding varices, and banding is attempted. Shortly following the procedure the patient again has a large-volume haematemesis and becomes haemodynamically compromised. The next step is",
            "options": [
                "A. Oesophageal transection",
                "B. Transjugular intrahepatic portal-systemic stent shunting",
                "C. Sengstaken-Blakemore tube",
                "D. Repeat endoscopy",
                "E. Angiographic arterial embolisation"
            ],
            "answer": "C",
            "explanation": "Oesophageal varices account for 7% of upper gastrointestinal bleeds, with 80% of these occurring in people with cirrhosis. Peptic ulceration accounts for 40% of upper GI bleeds, oesophagitis/gastritis accounts for 20% and Mallory-Weiss tears for 15%. Without treatment, 30% of varices will bleed, and once bleeding has occurred 80% will re-bleed within 2 years. The most effective management is a combination therapy with propranolol and repeat endoscopic monitoring and banding.\nIn the acute stage, first line therapy is haemodynamic stabilization and urgent endoscopy with sclerotherapy or banding. This can be performed in the emergency department in most major hospitals. Intravenous infusion with a PPI and terlipressin is also required along with correction of any co-existent clotting abnormalities. If this fails to control bleeding, then passage of a Sengstaken-Blakemore tube is the next line of therapy; remember only the gastric balloon is inflated to tamponade the bleeding – inflation of the oesophageal balloon is unnecessary and hazardous. A repeat endoscopy after a failed attempt is less likely to achieve haemostasis and is therefore avoided if the patient is haemodynamically compromised. Repeat endoscopy may have a role in the stable patient. Oesophageal transection is an outdated emergency surgical technique rarely employed. This patient will probably require TIPSS to prevent further re-bleeding, but it is not the ‘next step' in the acute scenario. It carries long-term consequences following insertion, namely increased risk of sepsis (as portal blood bypasses the liver), the precipitation of encephalopathy and risk of re-occlusion. Angiographic embolisation is inappropriate as bleeding is from the portal venous system, not from arterial vessels."
        },
        {
            "id": "14",
            "question_type": "mcq",
            "question": "A 45-year-old patient presents in shock complaining of sudden-onset generalized upper abdominal pain radiating to the right iliac fossa and the tip of his right shoulder. He reports one episode of vomiting, but none since. He has no past medical problems. On examination, his abdomen is rigid and bowel sounds are absent. The diagnosis is",
            "options": [
                "A. Caecal volvulus",
                "B. Pancreatitis",
                "C. Perforated duodenal ulcer",
                "D. Ascending cholangitis",
                "E. Appendicitis"
            ],
            "answer": "C",
            "explanation": "To correctly derive the answer from the given information try to exclude options to leave the single best fitting answer. The history is of sudden-onset pain and minimal vomiting, which makes caecal volvulus unlikely. This history also fails to fit with ascending cholangitis as there is no mention of fever or jaundice. On examination the patient has signs of generalised peritonitis; this is not typical of acute pancreatitis, the early stages of which are characterized by pain which radiates through to the back and associated vomiting, with peritonism localised to the epigastrum. The presentation of appendicitis can be variable the rapid-onset pain and generalized peritonitis should not suggest a diagnosis of appendicitis to most candidates. The location of the pain, the severity of the shock and the scanty vomiting are all typical of perforated duodenal ulcer. Do not be put off by the radiation of pain to the right iliac fossa; this commonly occurs as fluid tracks down the peritoneal gutter. Perforated peptic ulcer is an important diagnosis to arrive at quickly as it carries 5%-10% mortality. Approximately 50% of those affected give a history of previous ulcer symptoms or risk factors for ulcer disease; however, 50% have no such history. A high index of suspicion is therefore required."
        },
        {
            "id": "15",
            "question_type": "mcq",
            "question": "Which of the following is not encountered when making Kocher's (right subcostal) incision during an open cholecystectomy?",
            "options": [
                "A. Anterior rectus sheath",
                "B. Superior epigastric vessels",
                "C. Eighth intercostal nerve",
                "D. Falciform ligament",
                "E. External oblique"
            ],
            "answer": "D",
            "explanation": "Depending on what emphasis a candidate's medical school places on surgical teaching and applied anatomy, he or she may be asked simple questions regarding the more common or classic surgical incisions in the written or viva examination. Candidates should therefore know the surgical anatomy of Kocher's incision, Lanz incision, mid-line laparotomy incision and open hernia repair (i.e. the inguinal canal).\nKocher's incision may be made on the left or the right side, but it is most commonly used in open biliary tree surgery. The incision is made 3-5 cm below the costal margin. The anterior rectus sheath is exposed and divided along the line of incision exposing the rectus muscles which may then be divided with care taken to ensure haemostasis when branches of the superior epigastric vessels are sacrificed. The incision is extended through the lateral abdominal wall muscles which are split to allow better access. The eighth and ninth intercostal nerves lie between the internal oblique and transverse muscles; the eighth nerve is often sacrificed, but effort is made to preserve the larger ninth nerve. The incision is deepened through the posterior rectus sheath and peritoneum.\nThe falciform ligament inserts in the midline into the lina alba; this structure is not crossed in Kocher's incision and therefore should not be encountered."
        },
        {
            "id": "16",
            "question_type": "mcq",
            "question": "A patient is admitted from the emergency department following a large-volume haematemesis. Oesophagogastroduodenoscopy is performed, which identifies a posteriorly positioned duodenal ulcer that is actively bleeding. The vessel responsible is",
            "options": [
                "A. Gastroduodenal artery",
                "B. Abdominal aorta",
                "C. Right gastric artery",
                "D. Left gastric artery",
                "E. Right gastroepiploic artery"
            ],
            "answer": "A",
            "explanation": "Detailed knowledge of the arterial supply of the stomach is not required for undergraduate exams, however certain facts should be remembered. All the blood supply to the stomach is derived from the coeliac plexus, which branches from the abdominal aorta at the level of T12. The lesser curve is supplied by the right and left gastric vessels, the greater curve of the right and left gastroepiploic vessels. The right gastroepiploic artery is a branch of the gastroduodenal artery. The gastroduodenal artery passes underneath the first part of the duodenum, closely associated with its posterior wall; it is this vessel which classically causes major haemorrhage in the event of posterior erosion by a duodenal ulcer."
        },
        {
            "id": "17",
            "question_type": "mcq",
            "question": "A patient is admitted to hospital following referral by his GP for melaena. An oesophagogastroduodenoscopy identifies an actively bleeding gastric ulcer. Haemostasis is achieved. You are called to see the patient 48 hours later by nursing staff concerned that the patient has again passed black stool. On examination the patient is comfortable, blood pressure is 120/80 mmHg lying and 115/85 mmHg standing, pulse rate is 70 beats/min and respiratory rate is 16 breaths/min. Rectal examination reveals black stool on the glove. The next best course of action should be",
            "options": [
                "A. Urgent endoscopy",
                "B. Repeat full blood count",
                "C. Intravenous fluids and colloid",
                "D. Intravenous terlipressin",
                "E. Nothing, this is normal following upper gastrointestinal bleeding"
            ],
            "answer": "B",
            "explanation": "This patient is not in shock as evidenced by his observations and postural blood pressure; therefore the possibility of ongoing major haemorrhage is unlikely and options A, C and D can all be discounted. Melaena can continue for up to 3 days after cessation of bleeding from an upper gastrointestinal source, or even longer in the presence of constipation. Therefore the statement in option E is absolutely correct; reassure the patient that his continued passing of melaena is not necessarily a sign of continued bleeding, and also repeat the patient's FBC to exclude occult haemorrhage. There would be concern if the patient had had a normal bowel motion since his melaena initially started, then returned to passing melaena stool; this would more strongly indicate re-bleeding and if accompanied by a drop in haematocrit would necessitate a repeat endoscopy."
        },
        {
            "id": "18",
            "question_type": "mcq",
            "question": "Which of the following syndromes is associated with multiple duodenal ulcers not amenable to conventional medical therapy?",
            "options": [
                "A. Hereditary non-polyposis colon cancer (HNPCC)",
                "B. Plummer-Vinson syndrome",
                "C. Gardiner's syndrome",
                "D. Zollinger-Ellison syndrome",
                "E. CREST syndrome"
            ],
            "answer": "D",
            "explanation": "Rare diseases, including eponymous syndromes, are numerous and therefore take up an amount of revision time entirely disproportionate to their clinical or examinational importance. Candidates are advised against spending excessive time revising their clinical presentations and treatments. Instead, they should concern themselves only with those syndromes linked to cancer or severe illness or common symptomatology such as dysphagia, as these will typically be the only ones in the minds of examiners.\nZollinger-Ellison syndrome is caused by a non-insulin secreting tumour of the pancreas, which releases high levels of gastrin-like hormone. This causes hyperacidity of the stomach and therefore predisposes to severe and extensive duodenal ulceration."
        },
        {
            "id": "19",
            "question_type": "mcq",
            "question": "A patient presents with a short history of perfuse, projectile vomiting without bile staining. He has a history of peptic ulceration and chronic dyspepsia and has noticed increased bloating over the preceding 9 months. On examination, there is distension in the epigastric region and a succession splash. The abdominal radiograph shows a grossly distended stomach and collapsed bowel. The most likely cause is",
            "options": [
                "A. Carcinoma of the pylorus",
                "B. Carcinoma of the head of pancreas",
                "C. Fibrotic stricture",
                "D. Compression by malignant nodes",
                "E. Chronic pancreatitis"
            ],
            "answer": "C",
            "explanation": "This form of question is particularly difficult to answer as all of the above options are potential causes of gastric outlet obstruction. However, candidates should be aware that the most common causes in an adult are fibrotic structuring secondary to duodenal ulceration and cancer of the pylorus. Other causes are more unusual, particularly in the absence of preceding suggestive history.\nThe distinction between duodenal ulcer disease and cancer of the pylorus may be more difficult; both present with painless projectile vomiting, which is free from bile, but contains stale food and often smells faeculent. Profound weight loss is also common to both conditions. However, the long history of peptic ulcer disease in this case suggests fibrotic stricturing to be the most likely cause. Also the gross distension described suggests that this process has been ongoing over the years with compensatory gastric hypertrophy; cancer typically presents more acutely, and distension is therefore less marked. Caution is advised when applying this maxim in clinical practice as duodenal ulceration may also cause acute obstruction if associated oedema is severe enough to prevent gastric emptying; therefore the only reliable way of distinguishing cause is by endoscopy."
        },
        {
            "id": "20",
            "question_type": "mcq",
            "question": "Which of the following is not a lifestyle change which might reduce the occurrence of reflux-type symptoms?",
            "options": [
                "A. Smoking cessation",
                "B. Abdominal exercise",
                "C. Avoid tight clothing",
                "D. Eat smaller portions more often",
                "E. Raise the head of the bed at night"
            ],
            "answer": "B",
            "explanation": "Gastro-oesophageal reflux is a common symptom suffered by the majority of the population; its serious sequelae oesophagitis, anaemia, fibrotic stricture and Barrett's oesophagus are thankfully less common. Nevertheless Barrett's oesophagus afflicts approximately 2% of the adult population of the United Kingdom, and 2% of these individuals will develop malignant change.\nThe majority of reflux can be managed with conservative therapies and lifestyle changes; these include cessation of smoking, weight loss, avoidance of tight clothing, avoidance of large meals and raising the head of the bed at night. Abdominal exercises have no role and may exacerbate reflux. Consideration must be given to whether a patient requires further investigation; failure to respond to conservative management and a PPI may require endoscopy to exclude a hiatus hernia or other causative factor. New dyspepsia in patients over 55 or the presence of certain ‘red flag' signs should precipitate urgent endoscopic investigation to exclude the possibility of a serious underlying cause; these include signs that can be remembered using the 'ALARMS' mnemonic:\n• Anaemia\n• Loss of weight\n• Anorexia\n• Recent onset of rapidly progressive symptoms\n• Melaena\n• Swallowing difficulty"
        },
        {
            "id": "21",
            "question_type": "mcq",
            "question": "Which one of the following statements regarding gallstone disease is incorrect?",
            "options": [
                "A. Gallstones occur in 15% of all people over 65 in Western countries",
                "B. 85% of gallstones are asymptomatic",
                "C. 10% are identifiable using plain film radiography",
                "D. Gallstones are more common in males",
                "E. Gallstone disease is the most common cause of acute pancreatitis"
            ],
            "answer": "D",
            "explanation": "Gallstones are found in around 15% of the population over 60 years of age, but are only symptomatic in 15% of those. There are three types of stone: cholesterol stones (15%), pigment stones (5%), seen in haemolytic anaemias, and mixed stones (80%). Pigment stones are typically small, black, irregular, multiple and fragile. Cholesterol stones often form as a single large stone (solitaire) but can form as multiple stones termed mulberry stones. Pure cholesterol stones contain crystals when cut in cross-section. Mixed stones are often multiple; they are laminated in cross-section and approximately 15% of these are radio-opaque due to the variable extent to which they become calcified. Gallstone pancreatitis accounts for 45% of all acute pancreatitis in Western countries, its nearest rival being alcohol (25%). The incorrect statement is that gallstones occur more commonly in males; there is a slight female predominance overall, although this is more marked in the younger age ranges (see Question 22)."
        },
        {
            "id": "22",
            "question_type": "mcq",
            "question": "Which of the following is not a risk factor for gallstone formation?",
            "options": [
                "A. Smoking",
                "B. Pregnancy",
                "C. Crohn's disease",
                "D. Diet high in fats",
                "E. Contraceptive pill"
            ],
            "answer": "A",
            "explanation": "Factors predisposing to gallstone formation include sepsis within the biliary tree, anatomical variants which predispose to stasis and changes in the composition of bile which make it lithogenic. Amirand's triangle is a diagrammatic representation of how changes in bile composition can predispose to stone formation. Put simply, if the percentage composition of cholesterol increases, or the percentage composition of bile salts or phospholipids (lecithin) decreases, then the bile is more likely to form gallstones.\nWhen taking a focused history and examination, candidates should aim to elicit/exclude the following risk factors for gallstone formation:\n• Race (higher incidence in black and Asian populations)\n• High-fat diet/history of hypercholesterolaemia\n• Obesity\n• High oestrogen states (CCP, pregnancy, PCOS; hence the slight female predominance)\n• Haemolytic states\nThe loss of the terminal ileum following surgery or as a consequence of Crohn's disease also predisposes to gallstone formation as the terminal ileum is the site of re-absorption of bile salts. Smoking is not known to directly influence the risk of gallstone formation."
        },
        {
            "id": "23",
            "question_type": "mcq",
            "question": "A 29-year-old patient presents with a short history of right upper quadrant pain. She is jaundiced with dark urine and pale stool. She has a fever of 38.9 °C. Abdominal examination gives no suggestion of a palpable gallbladder. The diagnosis is",
            "options": [
                "A. Ascending cholangitis",
                "B. Acute cholecystitis",
                "C. Biliary colic with duct obstruction",
                "D. Pancreatitis",
                "E. Mirizzi's syndrome"
            ],
            "answer": "A",
            "explanation": "The high pyrexia is not typical of biliary colic, pancreatitis or Mirizzi's syndrome without supervening infection. Most candidates should therefore quickly narrow down the options to a choice between ascending cholangitis and acute cholecystitis. Acute cholecystitis is inflammation within the gallbladder most commonly due to long standing presence of gallstones. It presents with right upper quadrant pain and signs of sepsis. Jaundice may complicate cholecystitis if a gallstone migrates into the common bile duct; however, it is more usual for cholecystitis to present without jaundice. In addition, the fact the patient does not have Murphy's sign makes acute cholecystitis less likely, although it is not a reliable sign and therefore cholecystitis is a possible answer. However, this patient is jaundiced with high fever and right upper quadrant pain – these three symptoms constitute Charcot's triad, the classic description of the presentation of ascending cholangitis. Therefore A is the single best answer, although in reality, both A and B would be on your differential list."
        },
        {
            "id": "24",
            "question_type": "mcq",
            "question": "A 62-year-old patient is admitted with jaundice. His stool is pale and urine dark red. On examination he has a palpable gallbladder. The most likely cause is",
            "options": [
                "A. Ascending cholangitis",
                "B. Impacted stone in the common bile duct (choledocholithiasis)",
                "C. Tumour of the head of pancreas",
                "D. Impacted stone in the neck of the gallbladder",
                "E. Cholangiocarcinoma"
            ],
            "answer": "C",
            "explanation": "Dark urine and pale stool is the classic presentation of obstructive jaundice; one would also expect this patient to be complaining of pruritus as itching is a common symptom of conjugated hyperbilirubinaemia. The causes of obstructive jaundice are multiple and may be divided into obstructions within the lumen (stones, parasites) or within the wall (stricture, inflammation, tumour) or external pressure (lesions of the head of the pancreas, vascular aneurysms, local lymph nodes, Mirizzi's syndrome).\nThe key to answering this question is recognizing that a palpable gallbladder makes stone-related disease unlikely. Courvoisier's law states that 'in obstructive jaundice, the presence of a palpable gallbladder precludes the diagnosis of stones'. This is because the presence of gallstones irritates the gallbladder, resulting in wall fibrosis and thickening, a feature used when ultrasound scanning to confirm the presence of stones and a feature which prevents gallbladder distension in the presence of obstruction. Therefore answers A, B and D may all be discounted. The answer therefore relies on the candidate knowing the relative incidence of pancreatic cancer and cholangiocarcinoma, the former being the more common of the two."
        },
        {
            "id": "25",
            "question_type": "mcq",
            "question": "A 63-year-old patient is admitted with intermittent, colicky right upper quadrant pain and jaundice. Abdominal ultrasound shows a thickened gallbladder, but no identifiable stones. He is treated for biliary colic with fluids and analgesia but fails to improve. His serum bilirubin continues to rise and after 24 hours his C-reactive protein level and white cell count become elevated. Two days after initial presentation he develops a pyrexia of 39.2 °C and his pain is now constant. The next step in management is",
            "options": [
                "A. Cholecystectomy",
                "B. Endoscopic retrograde cholangiopancreatography",
                "C. Open stone removal with T-tube drainage",
                "D. Magnetic resonance cholangiopancreatography",
                "E. Lithotripsy"
            ],
            "answer": "B",
            "explanation": "This patient has obstructive jaundice. The likely culprit is gallstones, as his gallbladder is thickened on ultrasound. On admission there were no clear signs of cholecystitis as his pain was intermittent and colicky. The majority of biliary colic may be successfully managed with fluids and analgesia in the absence of superseding infection or pancreatitis. All patients should subsequently be offered cholecystectomy 6-12 weeks following recovery to avoid recurrence. Escalation of acute management is required when jaundice fails to resolve or when acute cholecystitis or ascending cholangitis supervenes, as has occurred in this case. The immediate priority is to treat the sepsis with intravenous antibiotics and fluids. However, this is not an option in this question. The next step in the management of such patients is the decompression of the biliary tree and the release of the stagnating bile. MRCP is not an appropriate option, and nor is lithotripsy which is reserved for renal calculi lying within the renal pelvis; ERCP is the single best procedure as it is minimally invasive, and allows confirmation of diagnosis and therapeutic intervention. In young patients, or in patients where ERCP fails, open stone removal with T-tube placement is a viable alternative to ERCP, however percutaneous cholecystostomy is more frequently used as it is a lower risk procedure. Cholecystectomy risks leaving the obstructing stone in place and is best avoided in patients with an obstructed biliary tree. Cholecystectomy is commonly deferred and performed as an elective day case procedure following resolution of the life-threatening sepsis."
        },
        {
            "id": "26",
            "question_type": "mcq",
            "question": "A 65-year-old patient presents with symptoms of oesophagitis. Endoscopy is performed and biopsies taken from the patients lower oesophagus which demonstrates Barrett's oesophagus with low grade dysplasia. What is the next best course of action?",
            "options": [
                "A. Referral for oesophagectomy",
                "B. Staging CT chest abdomen and pelvis",
                "C. Oesophageal ablation",
                "D. High dose PPI and repeat endoscopy",
                "E. Triple eradication therapy"
            ],
            "answer": "D",
            "explanation": "This patient has Barrett's oesophagus with low grade dysplasia. As such, he is at high risk of developing oesophageal malignancy. Such patients require high dose acid suppression and surveillance endoscopy until the dysplasia resolves. Initially this patient will require extensive re-biopsy following 8-12 weeks of high dose acid suppression. Thereafter endoscopic surveillance should continue 6 monthly until the dysplasia resolves. Barrett's without dysplasia requires surveillance every 2 years, and lifelong acid suppression. Patients with high grade dysplasia have a 30%-40% incidence of invasive adenocarcinoma. These patients should be referred for consideration of oesophagectomy. In patients unfit or unwilling to undergo surgery, ablation may be an alternative. Triple eradication is only indicated in the presence of Helicobacter pylori."
        },
        {
            "id": "27",
            "question_type": "mcq",
            "question": "Which of the following is not a risk factor for the development of cholangiocarcinoma?",
            "options": [
                "A. Primary sclerosing cholangitis",
                "B. Choledochal cysts",
                "C. Hepatitis B/C infection",
                "D. Primary biliary cirrhosis",
                "E. Lynch syndrome II"
            ],
            "answer": "D",
            "explanation": "Cholangiocarcinoma is a rare primary tumour of the intrahepatic or extrahepatic bile ducts. It accounts for approximately 20% of primary liver tumours. Although detailed knowledge of all risk factors associated with this disease is beyond the level of final examinations, finals candidates should be aware that 20%-30% of those with primary sclerosing cholangitis (PSC) will develop cholangiocarcinoma and that no similar relationship is seen in primary biliary cirrhosis. Therefore, answering this question correctly requires a basic level of knowledge and good exam technique. The other factors mentioned all predispose to cholangiocarcinoma. In addition, inflammatory bowel disease is also associated, although it is unclear how much this association is attributable to the increased rate of PSC in patients with IBD. Age positively correlates with incidence of cholangiocarcinoma, the peak age of presentation being between 50 and 70 years. However, patients with PSC or choledochal cysts typically develop a malignant change up to two decades before the unaffected populous."
        },
        {
            "id": "28",
            "question_type": "mcq",
            "question": "Whipple's procedure is an operation used in the management of pancreatic cancer and, more rarely, in chronic pancreatitis. Which of the following structures is not resected during the classical procedure?",
            "options": [
                "A. Duodenum",
                "B. Head of pancreas",
                "C. Gallbladder",
                "D. Common hepatic duct",
                "E. Pylorus"
            ],
            "answer": "D",
            "explanation": "Whipple's procedure is indicated in cancer of the pancreatic head, distal bile duct, ampulla or duodenum, and can also be undertaken in patients with chronic pancreatitis. The standard procedure provides a greater level of clearance as it involves removal of gastric antrum, pylorus and proximal duodenum, but despite this there is no difference in survival rates compared with pylorus-sparing techniques. Pylorus-sparing surgery is easier and quicker to perform, but there is a greater risk of gastric outlet obstruction. There is no difference in morbidity between the two operations. Both procedures involve the resection of the gallbladder, cystic duct, common bile duct, head of the pancreas and distal duodenum. Whipple's procedure requires the preservation of the common hepatic duct which is then anastomosed to a blind loop of jejunum. The jejunum is also anastomosed to the remnant pancreas and stomach."
        },
        {
            "id": "29",
            "question_type": "mcq",
            "question": "Which of the following abnormal findings on peripheral blood film is not typical of changes associated with hyposplenism?",
            "options": [
                "A. Bite cells",
                "B. Howell-Jolly bodies",
                "C. Target cells",
                "D. Ecchinocytes",
                "E. Pappenheimer bodies"
            ],
            "answer": "A",
            "explanation": "The spleen's functions are numerous and include immune function, erythropoiesis and the identification of abnormal or damaged red cells and their clearance from the circulation. Hyposplenism due to iatrogenic removal or innate disease (sickle cell disease, haematological malignancy, coeliac disease, IBD, amyloidosis) therefore causes a variety of changes on the blood film. Howell-Jolly bodies are DNA remnants which are normally removed by a functional spleen. Their presence in peripheral blood cells is the classic hyposplenic abnormality. Pappenheimer bodies are granules seen in iron-loaded cells, also usually removed by a functioning spleen. Target cells and echinocytes are red cells with membrane abnormalities, and normally these would also be removed by the spleen.\nBite cells are red blood cells in which a piece of the membrane has been removed. This occurs in glucose 6-phosphate dehydrogenase deficiency, in which oxidative stress causes oxidized denatured haemoglobin to aggregate into Heinz bodies on the RBC membrane; these Heinz bodies are detected and removed by the spleen. Therefore, for bite cells to exist, the spleen must be functional."
        },
        {
            "id": "30",
            "question_type": "mcq",
            "question": "Which is the most common early complication following splenectomy?",
            "options": [
                "A. Pancreatitis",
                "B. Gastric dilatation",
                "C. Atelectasis",
                "D. Thrombosis",
                "E. Overwhelming post-splenectomy sepsis"
            ],
            "answer": "C",
            "explanation": "Splenectomy may be a laparoscopic or open procedure; the open technique is performed through either a left subcostal (Kocher's) incision or through a mid-line laparotomy. Candidates should be aware of the major postoperative complications which may occur.\nAtelectasis is the most common complication and is a risk of any procedure which involves operating adjacent to the diaphragm. Post-splenectomy patients are at increased risk of thrombosis due to a paradoxical increase in platelet count; this risk typically lasts for 3 weeks postoperatively in the majority of patients, but persists in around 30%. Thromboembolic complications are best avoided by early mobilization and prophylactic treatment with aspirin + dipyridamole. Gastric dilatation is also a common complication with potentially serious consequences; it occurs due to gastric ileus and the danger is major haemorrhage following disturbance of ligatures on the vessels over the greater curve. Therefore all post-splenectomy patients must have an NG tube in situ following the procedure. Pancreatitis may follow splenectomy as the tail of the pancreas shares a common blood supply with the spleen which may occasionally become compromised during surgery. Overwhelming post-splenectomy sepsis is a well-documented long-term issue with all post-splenectomy patients and is described in greater detail in Question 31."
        },
        {
            "id": "31",
            "question_type": "mcq",
            "question": "Splenectomy patients should be immunized against all the following organisms, except",
            "options": [
                "A. Haemophilus influenzae",
                "B. Clostridium tetani",
                "C. Meningococcus C",
                "D. Streptococcus pneumoniae",
                "E. Influenza virus"
            ],
            "answer": "B",
            "explanation": "The spleen's functions are various and include haemopoiesis, filtration of blood cellular components, storage of platelets and endocrine effects. In addition, the spleen is a major constituent of the lymphoreticular system functioning as a processor of antigens and the presentation of such to immune cells. In particular the spleen is vital in the defence against encapsulated organisms such as streptococcus, meningococcus and Haemophilus.\nTherefore it is advisable for all patients who are having an elective splenectomy to receive vaccines against all these organisms prior to the procedure. In addition, all patients admitted following traumatic splenic injury which does not require an immediate operation are also immunized in case their condition deteriorates and they require splenectomy. Post-splenectomy patients typically receive seasonal flu vaccines for life as well as prophylactic antibiotics, most commonly penicillin V. Option B is the correct answer in this case as vaccination against tetanus is not required."
        },
        {
            "id": "32",
            "question_type": "mcq",
            "question": "Which of the following is not secreted by the endocrine or exocrine pancreas?",
            "options": [
                "A. Chymotrypsinogen",
                "B. Glucagon",
                "C. Somatostatin",
                "D. Lipase",
                "E. Gastrin"
            ],
            "answer": "E",
            "explanation": "The functions of the pancreas are both exocrine and endocrine. The exocrine pancreas is a compound alveolar gland similar in structure to the salivary glands. The digestive enzymes are secreted into the alimentary tract via the pancreatic duct (duct of Wirsung) which usually joins the common bile duct to form the ampulla of Vater. Around 1500 mL of pancreatic juice is secreted every day, which contains various pro-enzymes including trypsinogen and chymotrypsinogen, the activation of which requires exposure to specialist enzymes secreted by the brush boarder of the small bowel. Various intact enzymes are also secreted, including pancreatic lipase and amylase, which are activated by the change in pH. The endocrine pancreas produces four peptide hormones; insulin and glucagon are well known, somatostatin is produced by the D cells of the islets and serves a paracrine auto-regulatory function, and pancreatic polypeptide is produced by the F cells; its function is uncertain but it is thought to regulate gut motility. Gastrin is a hormone produced by the G cells in the gastric wall and influences acid secretion, gut motility and mucosal growth in the stomach and small bowel. It is produced by the pancreas in fetal life, but not in adulthood. Therefore although gastrinomas may occur within the pancreas, they are not tumours of pre-existing physiological endocrine glands."
        },
        {
            "id": "33",
            "question_type": "mcq",
            "question": "Of the following, which is not a clearly recognized cause of acute pancreatitis?",
            "options": [
                "A. 5-acetyl salicylic acid",
                "B. Furosemide",
                "C. Coxsackie B virus",
                "D. Hyperlipidaemia",
                "E. Magnetic resonance cholangiopancreatography"
            ],
            "answer": "E",
            "explanation": "This question is a blatant trick which intends to highlight the importance of paying attention to the question and also to emphasize that the causes of pancreatitis are numerous and varied, and not confined to those included in the ‘GET SMASHED' mnemonic. Of course MRCP does not cause acute pancreatitis; it is a non-invasive investigation which avoids the risks of ERCP. The causes of acute pancreatitis, according to the famous mnemonic, include:\n• Gallstones – the most common cause, accounting for 45% of acute pancreatitis.\n• Ethanol – the second most common cause, accounting for 25% of acute pancreatitis.\n• Trauma – contusion or laceration of the gland precipitates a generalized inflammatory reaction.\n• Steroids – a common pharmacological cause (see below for more detail).\n• Mumps - and other viral infections affecting exocrine glands (Coxsackie B).\n• Autoimmune – rarely in isolation; usually occurs in the presence of PSC, PBC, Sjögren's.\n• Scorpion sting – a species of Trinidadian scorpion (Tityus trinitatis), the poison of which is a powerful pancreatic secretagogue that causes pancreatic injury.\n• Hyperlipidaemia (types I and IV), hypothermia, hypercalcaemia, hypotension.\n• ERCP – accounts for 5% of all pancreatitis.\n• Drugs - collectively the third most common cause; causative agents include thiazide diuretics, furosemide, azathioprine, 5-aminosalicylate, 6-mercaptopurine, metronidazole, tetracycline and oestrogens."
        },
        {
            "id": "34",
            "question_type": "mcq",
            "question": "A 48-year-old patient is admitted into hospital with acute-onset abdominal pain and perfuse vomiting. Serum amylase is 2500 IU/mL, C-reactive protein is 250 mg/L. The patient is managed conservatively, but 48 hours later you are called to see him as the nursing staff has become concerned. On examination the patient is distressed and combative. His blood pressure is 125/65 mmHg, pulse rate is 130 beats/min and respiratory rate is 38 breaths/min. Arterial blood gases show pH 7.20, p02 7.9 and pCO2 5.8. The most likely cause of his deterioration is",
            "options": [
                "A. Septic shock",
                "B. Acute respiratory distress syndrome",
                "C. Pancreatic pseudocyst",
                "D. Acute alcohol withdrawal",
                "E. Disseminated intravascular coagulation"
            ],
            "answer": "B",
            "explanation": "Acute pancreatitis is a systemic insult; do not be falsely reassured by a patient who appears relatively well on admission! A patient will continue to deteriorate for several days and mortality remains at 10% despite optimal management. Cardiovascular collapse secondary to hypovolaemia is common and requires aggressive fluid resuscitation with central monitoring advisable. Gastrointestinal bleeding may occur secondary to stress ulceration or vessel erosion by the inflammatory process. Thrombosis may also occur in vessels adjacent to the sites of inflammation, causing viscus ischaemia, infarction and perforation. Renal failure is a common cause of death and carries a poor prognosis. Coagulation derangement is common but rarely severe.\nThe patient described in this scenario is in respiratory failure. Respiratory complications of pancreatitis include atelectasis and acute lung injury/ARDS. The latter may be a consequence of primary lung injury or systemic inflammatory response to sepsis or inflammatory insult. It carries a poor prognosis with patients often requiring intubation, respiratory support and ITU admission."
        },
        {
            "id": "35",
            "question_type": "mcq",
            "question": "A patient was admitted for acute pancreatitis secondary to alcohol misuse. He was treated conservatively and discharged for outpatient follow-up. He presents to your clinic after 8 weeks complaining of continued abdominal pain in the epigastrium radiating into the back. Serum amylase is 7800 IU/L. On examination, he is tender over the epigastrium. Blood pressure, pulse rate and temperature are all unremarkable. The diagnosis is",
            "options": [
                "A. Pancreatic pseudocyst",
                "B. Cholecystitis",
                "C. Chronic pancreatitis",
                "D. Recurrent acute pancreatitis",
                "E. Pancreatic abscess"
            ],
            "answer": "A",
            "explanation": "This scenario describes the classic presentation of a pancreatic pseudocyst, which is a common late complication of pancreatitis occurring in approximately 20% of cases, more commonly in alcoholism. The time frame of 6–8 weeks following the acute episode is typical and the persistently raised amylase is characteristic. The lack of systemic upset and pyrexia makes recurrent acute pancreatitis unlikely and precludes the diagnosis of a pancreatic abscess. Chronic pancreatitis and cholecystitis may be in the differential, but should only be entertained after exclusion of a pseudocyst.\nA pancreatic pseudocyst is a collection of pancreatic juices enclosed by a non-epithelialized wall of fibrous and granulomatous tissue. It is this wall which distinguishes it from a simple fluid collection. These pseudocysts can occur within the pancreas itself, but more commonly collect in the lesser peritoneal sac. Complications include infection (when it becomes known as a pancreatic abscess), vessel erosion, duodenal obstruction, biliary obstruction or rupture into the peritoneal or pleural space. Smaller cysts may resolve spontaneously without complication and therefore such patients are admitted for observation. Management of large cysts (> 6 cm) or cysts at risk of complication may be by CT/ultrasound-guided percutaneous drainage, endoscopic drainage or open pancreatectomy, although the latter is technically difficult, poorly tolerated and tends to be avoided."
        }
    ]
}
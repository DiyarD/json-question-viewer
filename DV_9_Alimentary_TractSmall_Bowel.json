{
  "chapter_name": "Alimentary Tract—Small Bowel",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 57-year-old male with no surgical history presents with 2 days of abdominal pain, nausea, and vomiting. On exam he is distended and tympanic and is mildly tender without rebound or guarding. Computed tomography (CT) scan demonstrates multiple dilated loops of small bowel with a transition point in the distal small bowel, with some adjacent mesenteric fat stranding. He has a mild leukocytosis. His last bowel movement was 1 day ago. He has not passed flatus for over a day. He has not had any similar symptoms previously. A nasogastric tube is placed, intravenous (IV) fluids are administered, and the patient is placed NPO (nothing by mouth). Which of the following is the best management option?",
      "options": [
        "A. Admission, observation, steroids",
        "B. Diagnostic laparoscopy",
        "C. Exploratory laparotomy",
        "D. Admission, observation",
        "E. Admission, observation, IV antibiotics"
      ],
      "answer": "C",
      "explanation": "*   A small bowel obstruction (SBO) in the absence of prior surgery most often requires surgery.\n*   The differential diagnosis includes incarcerated inguinal hernia, appendicitis, intussusception, inflammatory bowel disease, malignancy, and obstructed Meckel diverticulum.\n*   Exploratory laparotomy would be needed to gain additional information.\n*   The role for diagnostic laparoscopy in the presence of mesenteric fat stranding, leukocytosis, and possible malignancy remains controversial.\n*   Conservative management has a high likelihood of failing.\n*   Steroids are not indicated for SBO."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following has been shown to be the most efficacious means of reducing postoperative ileus in patients undergoing bowel resection?",
      "options": [
        "A. Early ambulation",
        "B. Gum chewing",
        "C. Alvimopan",
        "D. Ketorolac combined with reduction in opioid use",
        "E. Nasogastric intubation"
      ],
      "answer": "C",
      "explanation": "*   Postoperative ileus remains a major source of prolonged hospitalization in patients undergoing abdominal surgery.\n*   Early ambulation, early postoperative feeding protocols, and routine nasogastric intubation have not been shown to be associated with earlier resolution of postoperative ileus.\n*   Reducing opioid use in combination with nonsteroidal antiinflammatory drugs such as ketorolac has been shown to reduce ileus duration, but ketorolac is associated with increased risk of operative site and gastrointestinal (GI) bleeding, fluid retention, readmission, and reinterventions.\n*   Erythromycin is useful for gastroparesis but not for ileus and should be avoided in cases of obstruction.\n*   Metoclopramide has not been shown to be useful for ileus.\n*   Gum chewing has conflicting results, but a recent randomized controlled trial demonstrated a significant reduction in postoperative ileus in colorectal cancer patients.\n*   The most efficacious agent is alvimopan (entereg), an opioid receptor antagonist, which has been demonstrated in randomized studies to improve postoperative ileus.\n*   Alvimopan is approved for short-term (maximum 15 doses over 5 days) in-hospital use only.\n*   Patients on long-term narcotics should not use alvimopan due to an increased risk of myocardial infarction."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "Which of the following is true regarding Crohn disease?",
      "options": [
        "A. It is more common in individuals of high socioeconomic status.",
        "B. The most common indication for surgery is perforation.",
        "C. It has a unimodal distribution.",
        "D. It is more prevalent in females.",
        "E. The most common initial presentation is an acute onset of abdominal pain and diarrhea."
      ],
      "answer": "A",
      "explanation": "*   Crohn disease is the most common primary surgical disease of the small bowel.\n*   Acute onset of abdominal pain and diarrhea is not the most common presentation; the majority of patients first present with an insidious onset of vague abdominal discomfort.\n*   It has a bimodal distribution, with one large peak in the second and third decades of life and a second smaller peak in the sixth decade.\n*   Several risk factors include living in northern latitudes, Ashkenazi Jewish descent, smoking, and familial inheritance.\n*   It is more common in urban areas and in patients with a high socioeconomic status.\n*   Most studies suggest approximately equal prevalence in females and males.\n*   Breastfeeding may also be protective against the development of Crohn disease.\n*   Medical management is the first-line treatment, but about 75% of patients will ultimately need surgery.\n*   The most common reasons for surgery include fistula, abscess, and obstruction; perforation is quite rare."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "The earliest lesion characteristic of Crohn disease is:",
      "options": [
        "A. Aphthous ulcer",
        "B. Caseating granuloma",
        "C. Noncaseating granuloma",
        "D. Cobblestone mucosa",
        "E. Serosal thickening"
      ],
      "answer": "A",
      "explanation": "*   In the early stages of Crohn disease, patients demonstrate small superficial ulcers in the mucosa known as aphthous ulcers.\n*   These superficial ulcers are often surrounded by a halo of erythema and form as a result of submucosal lymphoid follicle expansion.\n*   As the disease progresses, the ulcers coalesce to form larger, stellate-shaped, and deep linear ulcers.\n*   Further coalescence of the ulcers leads to a cobblestone appearance, which is a hallmark of Crohn disease.\n*   Other hallmarks include noncaseating granulomas, transmural inflammation, serosal thickening, and “skip lesions.”\n*   Noncaseating granulomas are found in both areas of active disease and grossly normal-appearing intestine.\n*   Because the inflammation is transmural, inflamed loops of bowel become adhered to one another, leading to fibrosis, stricture formation, intra-abdominal abscess, fistulas, and, rarely, free perforation."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is the best therapeutic option for mild active Crohn disease?",
      "options": [
        "A. Sulfasalazine",
        "B. Prednisone",
        "C. Budesonide",
        "D. Metronidazole",
        "E. Infliximab"
      ],
      "answer": "A",
      "explanation": "*   Numerous pharmacologic agents are used to treat Crohn disease, including those for maintenance therapy, acute exacerbation, and maintaining remission.\n*   For mild active disease, sulfasalazine, an aminosalicylate anti-inflammatory agent, is most commonly used, particularly for colitis and ileocolitis.\n*   Mesalamine is another anti-inflammatory agent in the same family, with fewer side effects due to colonic bacterial activation.\n*   For acute flare-ups, corticosteroids, especially prednisone, are the treatment of choice, highly effective in inducing remission (in approximately three-fourths of patients), but not recommended for long-term prevention of remission due to side effects.\n*   Budesonide, a synthetic glucocorticoid, is another option with markedly reduced systemic absorption and fewer long-term side effects, though it can suppress the adrenal gland.\n*   If corticosteroids are ineffective, infliximab, a monoclonal antibody targeting tumor necrosis factor-alpha, is the next step. Infliximab carries risks of opportunistic infections (tuberculosis, aspergillosis), activation of latent multiple sclerosis, worsening congestive heart failure, and rarely T-cell lymphoma.\n*   Antibiotics (metronidazole) have an adjunctive role for infectious complications like perianal disease, enterocutaneous fistulas, active colon disease, and bacterial overgrowth.\n*   For remission maintenance, infliximab, azathioprine, and 6-mercaptopurine are used. Methotrexate is a second-line agent."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the principles of the operative management of the small bowel in Crohn disease?",
      "options": [
        "A. The optimal margin is at least 4 cm beyond grossly visible disease.",
        "B. Frozen section should be obtained to confirm the absence of active disease in at least one margin.",
        "C. A 3-cm strictured segment of duodenum is best managed by resection.",
        "D. A 10-cm strictured segment of jejunum can be managed by a Heineke-Mikulicz strictureplasty rather than by resection.",
        "E. Strictures longer than 10 cm are best managed by resection."
      ],
      "answer": "D",
      "explanation": "*   Approximately three-fourths of patients with Crohn disease will eventually require surgery for failure of medical management, intestinal obstruction, fistula, abscess, bleeding, or perforation. In children, growth retardation is another indication.\n*   To avoid short bowel syndrome, unnecessary small bowel resection should be avoided.\n*   Surgical resection should be limited to the segment causing the complication; other active disease areas should be left alone if asymptomatic.\n*   Resection margins of 2 cm beyond grossly visible disease are recommended; they have not been shown to affect recurrence.\n*   The presence of microscopic disease in the resection margin does not adversely affect outcome or recurrence, so frozen section is unnecessary.\n*   For small bowel obstruction (SBO), strictureplasty has been shown to be equally effective as resection for jejunal and ileal disease while sparing bowel length.\n*   Heineke-Mikulicz pyloroplasty is for strictures <12 cm in length, and Finney pyloroplasty is for strictures ≤25 cm in length.\n*   A potential drawback of strictureplasty is undetected malignancy; biopsy specimens of any intraluminal ulcerations should be taken.\n*   Duodenal Crohn disease is less common; current recommendations are to perform a bypass of duodenal strictures (gastrojejunostomy, duodenojejunostomy), not resection. Duodenal strictureplasty is rarely reported.\n*   For colon disease, resection is recommended, again limiting resection to the diseased segment causing symptoms."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is correct with regards to Crohn disease?",
      "options": [
        "A. Mesenteric fat wrapping is considered pathognomonic.",
        "B. Symptoms of ankylosing spondylitis improve with resection of diseased bowel.",
        "C. The majority of patients with an initial presentation of terminal ileitis progress to Crohn disease on long-term follow-up.",
        "D. Pathergy is a common finding.",
        "E. Pyoderma gangrenosum is commonly found on the initial presentation of Crohn disease."
      ],
      "answer": "A",
      "explanation": "*   The finding of “creeping fat” or mesenteric fat wrapping is a gross feature of Crohn disease that is considered pathognomonic. It indicates the encroachment of mesenteric fat onto the serosal surface of the bowel and correlates well with underlying acute and chronic inflammation.\n*   A recent study suggests that adiponectin, an adipocyte-specific protein, may play an important role in Crohn disease inflammation.\n*   Terminal ileitis refers to acute inflammation of the distal ileum adjacent to the ileocecal valve and is not pathognomonic. It is associated with numerous infectious causes.\n*   The finding of terminal ileitis does not warrant bowel resection.\n*   Overall, a minority of patients (10% in one study) who present with terminal ileitis progress to Crohn disease on long-term follow-up.\n*   The majority of extraintestinal manifestations in inflammatory bowel disease improve with bowel resection, but ankylosing spondylitis and primary sclerosing cholangitis do not.\n*   Pyoderma gangrenosum is rarely the initial presentation of Crohn disease. These patients present with small papules on the lower extremities resembling a “cat’s paw” appearance and can progress to larger ulcerations with necrotic centers.\n*   Pathergy, a condition where minor trauma leads to large, difficult-to-heal ulcers, rarely develops. Debridement should be avoided as it worsens the lesion. Infliximab or other tumor necrosis factor-alpha inhibitors should be used."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which intestinal cells have been implicated in the formation of gastrointestinal stromal tumors (GISTS)?",
      "options": [
        "A. Goblet cells",
        "B. Cajal cells",
        "C. Enteroendocrine cells",
        "D. Paneth cells",
        "E. Absorptive enterocytes"
      ],
      "answer": "B",
      "explanation": "*   There are four main cell types in the small intestine: absorptive enterocytes (95%), goblet cells, Paneth cells, and enteroendocrine cells.\n*   Goblet cells secrete mucus.\n*   Paneth cells secrete substances including lysozyme, tumor necrosis factor, and cryptidins, which assist in host mucosal defense.\n*   Enteroendocrine cells secrete various gut hormones.\n*   The interstitial Cajal cell is a specialized cell of mesodermal origin that seems to regulate peristalsis, referred to as an intestinal pacemaker cell.\n*   These cells normally express KIT, a tyrosine kinase receptor, and have been implicated as the cells of origin of GISTs."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is true regarding duodenal diverticula?",
      "options": [
        "A. They tend to occur on the antimesenteric side of the bowel.",
        "B. Most are identified in young patients.",
        "C. Treatment with endoscopic interventions is contraindicated.",
        "D. Malabsorption due to bacterial overgrowth within the diverticula mandates surgery.",
        "E. When discovered incidentally at surgery, they should be left alone."
      ],
      "answer": "E",
      "explanation": "*   Acquired diverticula consist of mucosa and submucosa but lack a complete muscularis, thus considered false diverticula.\n*   They are most commonly located in the second portion of the duodenum near the ampulla of Vater (periampullary diverticula).\n*   They arise on the mesenteric border in areas of weakness where blood vessels penetrate.\n*   Periampullary diverticula are associated with cholangitis, pancreatitis, and sphincter of Oddi dysfunction, and choledocholithiasis, thought to be due to obstruction and stasis of the common duct.\n*   The majority of patients with biliary complications who have a duodenal diverticulum can be safely treated endoscopically. If unsuccessful, surgical diverticulectomy is recommended, with care to identify and preserve the sphincter.\n*   These false diverticula are also found in the jejunum and ileum. They are distinguished from a Meckel diverticulum, which is a true diverticulum present at birth.\n*   Duodenal diverticula are most often discovered between ages 56 to 76 years during upper endoscopy, ERCP, or abdominal imaging (up to 6% of patients).\n*   They are asymptomatic in the majority of patients, and surgery is not recommended if discovered incidentally on imaging or intraoperatively.\n*   Complications are estimated to occur in 6% to 10% of patients. They may cause symptoms of malabsorption due to bacterial overgrowth (treatable with antibiotics).\n*   Less commonly, bleeding or diverticulitis leading to perforation (usually retroperitoneum) can arise. Perforation requires laparotomy and challenging closure."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "The etiology responsible for the most common presentation of a Meckel diverticulum in children is:",
      "options": [
        "A. Lead point",
        "B. Ectopic gastric mucosa",
        "C. Ectopic pancreatic mucosa",
        "D. Bacterial infection",
        "E. Adhesive band to the umbilicus"
      ],
      "answer": "B",
      "explanation": "*   Bleeding is the most common presentation of a Meckel diverticulum in children and is the most common cause of lower GI bleeding in children.\n*   Bleeding (melena or bright red blood per rectum) is due to heterotopic gastric mucosa within the Meckel diverticulum, leading to acid production and an ulcer forming in the ileum adjacent to the diverticulum.\n*   Less commonly, ectopic pancreatic mucosa can also contribute to GI bleeding.\n*   A Meckel diverticulum is a true diverticulum due to a failure of closure of the vitelline (omphalomesenteric) duct.\n*   An adhesive band may remain between the Meckel diverticulum and the umbilicus, leading to adhesive small bowel obstruction or volvulus (most common presentation in adults).\n*   Bowel obstruction can also occur due to intussusception with the Meckel diverticulum as the lead point, or due to incarceration of the diverticulum into a hernia sac (Littre hernia).\n*   Bacterial infection leading to diverticulitis is rarely encountered in children due to the smaller potential space of a Meckel diverticulum."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Two weeks after an open aortic aneurysm repair, the patient presents with marked abdominal distention without nausea or vomiting. There is no tenderness on abdominal examination. Plain films are unremarkable. CT scan reveals a large amount of ascites but is otherwise unremarkable. Paracentesis reveals turbid fluid that is culture negative. Fluid analysis reveals a triglyceride level of 400 mg/dL. The white blood cell count is 600 cells/µL with a predominance of lymphocytes. Which of the following is true about this condition?",
      "options": [
        "A. The patient should be placed on total parenteral nutrition (TPN) and NPO.",
        "B. Octreotide is not useful.",
        "C. The patient should immediately be re-explored.",
        "D. Peritoneovenous shunting is highly successful.",
        "E. Most patients respond to a high-protein, low-fat diet with medium-chain triglycerides."
      ],
      "answer": "E",
      "explanation": "*   The patient has chylous ascites.\n*   In Western countries, chylous ascites is most often due to malignancy and cirrhosis; in Eastern and developing countries, infectious etiologies (tuberculosis, filariasis) predominate.\n*   Other causes include post-laparotomy inflammatory disorders, trauma, radiation therapy, congenital lymphatic abnormalities, and pancreatitis.\n*   Operations most associated with this complication include aortic aneurysm repair, retroperitoneal lymph node dissection, inferior vena cava surgery, and liver transplantation, due to interruption of retroperitoneal lymphatics.\n*   Mechanisms include exudation of chyle due to obstruction of the cisterna chyli, direct leakage of chyle through a lymphoperitoneal fistula, and exudation through dilated retroperitoneal vessels.\n*   Diagnosis of chylous ascites is best established by fluid analysis. Chyle typically has a turbid appearance (can be clear in fasting patients). Elevated triglyceride levels (>200 mg/dL, or >110 mg/dL) are diagnostic. WBC count >500 cells/µL with lymphocyte predominance. Total protein 2.5-7.0 g/dL. Cultures are negative (except for tuberculosis, where adenosine deaminase is also positive).\n*   Initial treatment is a high-protein, low-fat diet with medium-chain triglycerides (MCTs). This diet minimizes chyle production and flow. MCTs are absorbed by the intestinal epithelium and transported to the liver via the portal vein, not contributing to chylomicron formation.\n*   If this diet fails, placing the patient NPO and on TPN with octreotide has been shown to be useful in postoperative chylous ascites.\n*   If medical approaches fail, lymphoscintigraphy can localize lymph leaks and obstruction. Surgical re-exploration and closure of the lymphatic leak should be performed.\n*   Peritoneovenous shunting has a poor success rate due to high occlusion rates (worsened by viscous chyle) and high complication rates (sepsis, disseminated intravascular coagulation)."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "Which of the following is true regarding short bowel syndrome in adults?",
      "options": [
        "A. The presence of an intact ileocecal valve reduces malabsorption.",
        "B. It is defined as less than 300 cm of residual small bowel.",
        "C. Resection of the ileum is better tolerated than resection of the jejunum.",
        "D. The presence of an intact colon does not alter the severity.",
        "E. It is most commonly caused by multiple operations requiring small bowel resection."
      ],
      "answer": "A",
      "explanation": "*   The total length of small bowel is approximately 600 cm (20 feet).\n*   Short bowel syndrome is defined as the presence of less than 180 cm of residual and functional small bowel in adult patients.\n*   Resection of less than 50% of the small intestine is generally well tolerated.\n*   Approximately 75% of cases result from one massive small bowel resection, as opposed to multiple sequential resections.\n*   In adults, the most common etiologies include acute mesenteric ischemia, malignancy, and Crohn disease.\n*   In pediatric patients, the most common etiologies include intestinal atresia, midgut volvulus, and necrotizing enterocolitis.\n*   Resection of the jejunum is better tolerated than resection of the ileum because the absorption of bile salts and vitamin B12 occurs in the ileum.\n*   An intact ileocecal valve is thought to reduce malabsorption because it increases the residence time of the chyme in the small intestine.\n*   Likewise, an intact colon is important because it has a tremendous water-reabsorbing capacity, and can also absorb fatty acids and electrolytes. With an intact colon, a shorter small bowel remnant is tolerated.\n*   The key to avoiding short bowel syndrome is avoidance of excessive small bowel resection.\n*   In Crohn patients, strictureplasty is recommended over resection when possible.\n*   In acute mesenteric ischemia, only obviously dead bowel should be resected, leaving marginal bowel in situ and performing a second-look procedure."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following is true regarding the management of short bowel syndrome?",
      "options": [
        "A. Glutamine should be avoided.",
        "B. Octreotide is the cornerstone of management.",
        "C. Codeine is contraindicated.",
        "D. Early enteral feeding is indicated.",
        "E. Patients who still require TPN after 6 months will require permanent TPN."
      ],
      "answer": "D",
      "explanation": "*   In the early phase of short bowel syndrome, treatment is directed at slowing intestinal transit, reducing GI secretions, and maintaining nutrition, fluid, and electrolyte balance.\n*   Transit time is slowed by narcotics (codeine, diphenoxylate) and antimotility agents (Lomotil, loperamide).\n*   Massive small bowel resection is associated with hypergastrinemia and acid hypersecretion, inhibiting digestive enzymes. This can be controlled with H2-receptor antagonists or proton pump inhibitors (omeprazole) in all patients with short gut syndrome.\n*   Nutrition is achieved with TPN.\n*   Early enteral feeding should be instituted as soon as postoperative ileus has resolved, as it assists intestinal adaptation and prevents villous atrophy.\n*   Glutamine is helpful as a trophic factor and principal fuel of the small intestine.\n*   Cholestyramine is useful in controlling diarrhea due to unabsorbed bile salts.\n*   The role of octreotide is controversial; short-term use reduces diarrhea, but long-term use may lead to steatorrhea, gallstones, and inhibition of intestinal adaptation.\n*   Recently, a high-carbohydrate, low-fat enteral diet rich in glutamine combined with growth hormone administration has shown promise in improving intestinal absorptive capacity.\n*   Intestinal adaptation occurs over 1 to 2 years in most adults; thus, the final determination of whether permanent TPN is necessary is not made until after this period."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "A 6-year-old boy has short bowel syndrome caused by midgut volvulus that developed during infancy and has since been dependent on TPN, which he has tolerated well. He has approximately 28 cm of small bowel remaining with an intact colon. The small bowel is markedly dilated without evidence of small bowel obstruction. Which of the following is the best option?",
      "options": [
        "A. Serial transverse enteroplasty procedure",
        "B. Continue with TPN",
        "C. Small bowel transplantation",
        "D. Small bowel tapering procedure",
        "E. Tapering and lengthening procedure (Bianchi)"
      ],
      "answer": "A",
      "explanation": "*   Many patients with short bowel syndrome can eventually discontinue TPN, particularly if bowel length is more than 120 cm in adults and more than 60 cm in children.\n*   Treatment options for short bowel syndrome depend on the length of small bowel remaining, whether the remnant small bowel is markedly dilated, whether the patient remains TPN dependent, and whether multiple complications of TPN have developed (catheter-related infections, vena cava thrombosis, liver damage).\n*   A short remnant (<90 cm in adults, <30 cm in children) poses a challenging dilemma.\n*   If the remnant of small bowel is short and markedly dilated without evidence of obstruction, the best option would be an intestinal lengthening procedure.\n*   The dilated bowel lends itself to lengthening by applying a series of transverse linear staples on the mesenteric and antimesenteric borders; this procedure is known as the serial transverse enteroplasty procedure.\n*   The Bianchi procedure is another option, but is technically more demanding and associated with a higher complication rate and increased need for reoperation.\n*   Tapering of the small bowel alone would be indicated for patients with a longer small bowel remnant (>60 cm in children) who have marked bowel distention with evidence of stasis and bacterial overgrowth.\n*   Small bowel transplantation is also an option but is reserved for patients with a short segment who are TPN dependent and have developed complications from TPN. If liver failure has developed, small bowel transplantation can be combined with liver transplantation."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "Which of the following is true regarding small bowel neoplasms?",
      "options": [
        "A. Adenocarcinoma is the most common type.",
        "B. Small bowel lymphoma most commonly occurs in the duodenum.",
        "C. The incidence of primary small intestinal cancers is increasing.",
        "D. Five-year survival is higher for adenocarcinoma compared with carcinoid tumors.",
        "E. Small bowel lymphoma is primarily treated by chemotherapy."
      ],
      "answer": "C",
      "explanation": "*   Malignant tumors of the small bowel are rare, but their incidence has nearly doubled since the 1970s.\n*   The most common tumor is carcinoid (37.4%), followed by adenocarcinoma (36.9%), lymphoma (17%), and GISTs (8%).\n*   Small bowel lymphomas most commonly involve the ileum (as do carcinoids), whereas adenocarcinomas are most common in the duodenum (periampullary), and GISTs are evenly distributed throughout the small bowel (though most common in the stomach).\n*   Small bowel lymphomas are predominantly the non-Hodgkin type. In children younger than age 10, they are the most common intestinal neoplasm. The propensity for ileum involvement is due to its high concentration of lymphoid tissue.\n*   The primary treatment of small bowel lymphoma (as well as all other small bowel malignancies) is surgical resection including the affected mesentery.\n*   There is no clear, well-defined role for radiation therapy or chemotherapy for the majority of small bowel malignancies, with the exception of Gleevec (imatinib mesylate) for GISTs.\n*   The 5-year survival is higher for carcinoid (64.6%) compared with adenocarcinoma (32.5%)."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "A 68-year-old woman presents with an exacerbation of congestive heart failure and acute abdominal pain. Physical examination of the abdomen is significant for mild diffuse abdominal tenderness but no rebound or guarding. CT arteriography of the abdomen demonstrates diffuse narrowing of the superior mesenteric artery (SMA) and its branches. Which of the following is an appropriate management option?",
      "options": [
        "A. IV heparin drip",
        "B. Exploratory laparotomy",
        "C. Aggressive fluid resuscitation",
        "D. Intra-arterial papaverine",
        "E. Thrombolytic therapy"
      ],
      "answer": "D",
      "explanation": "*   The presentation is most consistent with nonocclusive mesenteric ischemia, which accounts for approximately 20% to 30% of cases of acute mesenteric ischemia.\n*   This condition typically affects elderly patients and presents in the setting of decreased cardiac output (e.g., after acute myocardial infarction, exacerbation of congestive heart failure, or after cardiac surgery).\n*   There are no specific laboratory tests to establish the diagnosis of bowel ischemia with certainty, though lactic acidosis is ominous.\n*   The initial diagnostic test of choice for suspected acute mesenteric ischemia is CT angiography, helpful in identifying the etiology (embolus, acute SMA thrombosis, mesenteric venous thrombosis, diffuse spasm).\n*   Standard treatment for SMA embolus is operative embolectomy (some reports of thrombolytic therapy exist).\n*   Treatment for acute thrombosis is surgical bypass.\n*   For mesenteric venous thrombosis, treatment is heparin alone (if no infarcted bowel).\n*   For nonocclusive mesenteric ischemia, the goal is to restore intestinal blood flow by correcting the underlying cause to improve cardiac output.\n*   In addition to supportive care, selective intra-arterial infusion of a vasodilator such as papaverine hydrochloride into the SMA to reverse splanchnic vasoconstriction can be helpful.\n*   Aggressive fluid resuscitation should be used with caution as nonocclusive mesenteric ischemia often occurs in the setting of decompensated congestive heart failure, which may worsen with multiple fluid boluses.\n*   If signs of peritonitis develop, emergent laparotomy should be performed and the infarcted intestine resected.\n*   The mortality rate for nonocclusive mesenteric ischemia is approximately 50%."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Which of the following is true regarding carcinoid?",
      "options": [
        "A. The majority of carcinoid syndrome is from appendiceal tumors that have metastasized.",
        "B. The most common symptom of carcinoid syndrome is diarrhea.",
        "C. Chromogranin A will not be elevated in nonfunctioning tumors.",
        "D. Patients are at an increased risk for glossitis.",
        "E. Urinary 5-hydroxyindoleacetic acid (5-HIAA) is not sensitive for detecting metastatic carcinoid."
      ],
      "answer": "D",
      "explanation": "*   While it was long believed that the appendix was the most common source of carcinoid tumor, a large SEER database study found that the small intestine accounted for 55% of cases, followed by the rectum (20%) and then appendix (17%).\n*   Carcinoid syndrome most commonly presents with flushing, followed by diarrhea and bronchospasms.\n*   Most gut carcinoid tumors do not cause the syndrome because vasoactive substances (serotonin, histamine, dopamine, substance P, prostaglandins) from these tumors enter the portal vein and are metabolized by the liver before reaching the systemic circulation.\n*   For carcinoid syndrome to develop, these substances need to be released directly into the systemic circulation, occurring with bronchial carcinoids (do not drain into liver), retroperitoneal invasion, or liver metastasis.\n*   A 24-hour urinary 5-HIAA test is highly sensitive and specific for detecting metastatic carcinoid and is considered the gold standard for diagnosis. However, it is not as sensitive for detecting nonfunctional carcinoid tumors.\n*   Screening for a carcinoid tumor (not syndrome) is best achieved with serum chromogranin A because it will be elevated in both functioning and nonfunctioning tumors.\n*   Normally, most dietary tryptophan is converted into nicotinic acid (niacin, vitamin B3). In the presence of carcinoid tumors, there is a shift toward conversion to 5-hydroxytryptophan, which is then converted to serotonin. Serotonin is then metabolized to 5-HIAA.\n*   The shift away from tryptophan to nicotinic acid can result in pellagra, which can present with diarrhea, dermatitis (rough scaly skin, glossitis, angular stomatitis), dementia, and/or hypoalbuminemia."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following is the best test for prognosis and for monitoring treatment response in carcinoid tumors?",
      "options": [
        "A. Platelet serotonin levels",
        "B. A 24-hour urinary 5-HIAA test",
        "C. Serum chromogranin A levels",
        "D. Serum serotonin levels",
        "E. Neuron-specific enolase"
      ],
      "answer": "C",
      "explanation": "*   Serum chromogranin A is the most sensitive marker for detecting neuroendocrine tumors in general.\n*   It has also been shown to be the most useful marker for detecting recurrence and response to treatment.\n*   Because the level of chromogranin A correlates with tumor burden, it is a useful marker for treatment response; a high level correlates with a worse prognosis.\n*   Platelet serotonin level is useful in detecting carcinoid tumors, but platelets become rapidly saturated with serotonin, making it not useful for monitoring treatment response.\n*   5-HIAA is also thought to be useful; however, several studies indicate that chromogranin A is more sensitive for recurrence and a better prognosticator.\n*   Neuron-specific enolase has a high specificity but a low sensitivity for the detection of carcinoid tumor."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "Which of the following is true regarding small bowel obstruction?",
      "options": [
        "A. The most common worldwide etiology is adhesions from prior surgery.",
        "B. It is more frequent with upper intestinal than lower intestinal surgery.",
        "C. In a complete closed loop obstruction, serum lactate can be normal.",
        "D. Partial obstruction symptoms typically improve within 24 hours with conservative management.",
        "E. Abdominal pain disproportionate to exam findings occurs early in the setting of obstruction."
      ],
      "answer": "C",
      "explanation": "*   Mechanical SBO is the most frequently encountered surgical disorder of the small intestine.\n*   In the United States, it is most commonly due to intra-abdominal adhesions from prior surgery. Worldwide, it is most commonly due to a hernia.\n*   The risk of readmission for adhesions is greatest for patients undergoing lower abdominal surgery (around 9% long term).\n*   Diagnosis of obstruction can be made with CT scan, small bowel series, or enteroclysis.\n*   The majority of patients (65% to 81%) can be managed nonoperatively with nasogastric decompression and nutritional support. Symptoms most commonly resolve within 48 hours.\n*   Any signs and symptoms suggestive of ischemic bowel are an indication for urgent operative intervention.\n*   The incidence of strangulation is not greater with SBO that presents later.\n*   Abdominal pain disproportionate to exam findings (suggestive of intestinal ischemia) is not usually an early finding.\n*   Serum lactate levels are 90% sensitive and 87% specific for bowel ischemia. However, in a complete closed loop obstruction (more commonly volvulus), serum lactate can be normal because obstruction of venous drainage prevents lactic acid produced by enterocytes from reaching systemic circulation.\n*   If nasogastric decompression fails, surgery is indicated. The timing of surgery is debatable (6 to 14 days).\n*   The morbidity and mortality rates of early small bowel obstruction are very low."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "The most common cardiac valvular lesion associated with carcinoid syndrome is:",
      "options": [
        "A. Tricuspid stenosis",
        "B. Tricuspid insufficiency",
        "C. Pulmonary stenosis",
        "D. Pulmonary insufficiency",
        "E. Mitral stenosis"
      ],
      "answer": "B",
      "explanation": "*   Right-sided valvular disease is a significant source of morbidity and mortality in carcinoid syndrome because it can lead to right heart failure.\n*   Vasoactive substances released from liver metastasis are transported to the right heart, where endocardial damage ensues, leading to thickening, retraction, and fixation of the valves.\n*   The most common valvular disorder is tricuspid insufficiency.\n*   Pulmonary valve lesions are the next most common.\n*   Left-sided heart lesions are much less common but do occur. The serotonin metabolites are deactivated as they travel through the lung, making them less able to exert damaging effects when they arrive to the left heart."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "Which of the following is the most common cause of obscure GI bleeding in adults?",
      "options": [
        "A. Small intestine angiodysplasia",
        "B. Meckel diverticulum",
        "C. Crohn disease",
        "D. Infectious enteritis",
        "E. Vasculitis"
      ],
      "answer": "A",
      "explanation": "*   The majority of lesions responsible for GI bleeding are seen with upper endoscopy or colonoscopy.\n*   Obscure GI bleeding refers to persistent or recurrent bleeding for which no source has been identified by these modalities. It can be occult (not visible) or overt (melena, hematochezia).\n*   In most instances, the source of obscure bleeding is from the small bowel.\n*   Small intestine angiodysplasias account for 75% of cases of obscure bleeding in adults.\n*   Other causes include Crohn disease, infectious enteritis, neoplasms, and vasculitis.\n*   A Meckel diverticulum is the most common cause of obscure GI bleeding in children.\n*   Localization of small bowel lesions is difficult with standard studies. Options include push enteroscopy, small bowel barium studies, capsule endoscopy, radiolabeled red blood cell scanning, and angiography (latter two only useful in active bleeding)."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "Which of the following is true regarding GISTs of the small bowel?",
      "options": [
        "A. Most patients are symptomatic with GI bleeding.",
        "B. They stain positive for CD134.",
        "C. Patients deemed candidates for chemotherapy should receive it for 1 year.",
        "D. A patient with a 6-cm tumor should receive adjuvant chemotherapy.",
        "E. Malignancy is primarily determined by evidence of local invasion."
      ],
      "answer": "D",
      "explanation": "*   GISTs were previously termed leiomyomas or leiomyosarcomas; they are now considered mesenchymal tumors.\n*   GISTs are classified into three types: spindle cell (70%), epithelioid type (20%), and mixed (10%).\n*   GISTs stain positive for CD34 (human progenitor cell antigen) and CD177 (c-kit proto-oncogene protein).\n*   The stomach is the most common site in the GI tract. Small bowel GISTs may be incidental discoveries at surgery.\n*   The majority of patients are asymptomatic. Symptomatic patients tend to have very large and bulky tumors at presentation (median size 11 cm).\n*   Symptoms include obstruction or GI bleeding.\n*   Standard treatment is surgical resection with 1 cm margins. Microscopically positive margins have not been demonstrated to affect survival.\n*   Small intestine GISTs carry a high mortality rate, likely due to late presentation.\n*   Determining whether a GIST is benign or malignant is difficult; \"the rule of 5's\" (tumors >5 cm or >5 mitoses per 50 high-power field) is used. Malignancy is primarily determined by tumor size at presentation, mitotic index, location within the GI tract, and absence of tumor rupture.\n*   Adjuvant treatment includes chemotherapy with imatinib (Gleevec), a tyrosine kinase inhibitor. Imatinib controlled tumor growth in 85% of advanced GISTs.\n*   Currently, imatinib is recommended for unresectable, metastatic, or recurrent lesions.\n*   Adjuvant therapy should continue for a total of 3 years.\n*   Patients with an exon 9 KIT mutation require a higher dose of imatinib (800 mg daily vs 400 mg)."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A hernia sac containing a Meckel diverticulum is known as:",
      "options": [
        "A. Petit hernia",
        "B. Littre hernia",
        "C. Spigelian hernia",
        "D. Richter hernia",
        "E. Grynfeltt hernia"
      ],
      "answer": "B",
      "explanation": "*   A hernia sac containing a Meckel diverticulum is called a Littre hernia.\n*   Lumbar hernias can be congenital or acquired and occur in the lumbar region of the posterior abdominal wall.\n*   Hernias through the superior lumbar triangle (Grynfeltt triangle) are more common than those through the inferior lumbar triangle (Petit triangle).\n*   The Petit triangle is bounded by the external oblique muscle, latissimus dorsi muscle, and iliac crest.\n*   The Grynfeltt triangle is bounded by the quadratus lumborum muscle, the 12th rib, and the internal oblique muscle.\n*   A spigelian hernia occurs through the spigelian fascia (aponeurotic layer between the rectus muscle medially and the semilunar line laterally), typically below the umbilicus but above the epigastric vessels.\n*   A Richter hernia occurs when only the antimesenteric border of the bowel herniates through the fascial defect, involving only a portion of the circumference of the bowel. Incarceration and strangulation may occur in the absence of any evidence of bowel obstruction."
    },
    {
      "id": 24,
      "question_type": "mcq",
      "question": "The SMA (Wilkie) syndrome:",
      "options": [
        "A. Involves the second portion of the duodenum",
        "B. Occurs when the SMA leaves the aorta at an upward angle",
        "C. Is best diagnosed with arteriography",
        "D. Should initially be managed with a high caloric intake",
        "E. Is best managed by gastrojejunostomy"
      ],
      "answer": "D",
      "explanation": "*   The SMA leaves the aorta at a downward and acute angle.\n*   SMA syndrome or Wilkie syndrome is a rare condition characterized by compression of the third portion of the duodenum by the SMA as it passes over this portion of the duodenum.\n*   It occurs most often in the setting of profound weight loss.\n*   Factors that predispose to the condition include supine immobilization, scoliosis, placement of a body cast, and eating disorders.\n*   Symptoms include profound nausea and vomiting, abdominal distention, weight loss, and postprandial epigastric pain.\n*   Weight loss usually occurs before the onset of symptoms.\n*   It is believed to occur more commonly in women, likely secondary to the increased prevalence of anorexia. However, a recent study in intellectually disabled children showed it predominantly affects males.\n*   Diagnosis can be made by CT scan (decreased aortomesenteric angle and distance, duodenal obstruction) or barium upper GI series/hypotonic duodenography (abrupt or near total cessation of barium flow).\n*   Initial management involves conservative measures, primarily focused on weight gain to increase the mesenteric root fat pad.\n*   The operative treatment is duodenojejunostomy."
    },
    {
      "id": 25,
      "question_type": "mcq",
      "question": "A 45-year-old woman with a history of laparotomy and 5000 cGy of abdominal and pelvic irradiation for ovarian cancer 10 years ago presents with symptoms and signs of an acute bowel obstruction. CT scan shows a complete small bowel obstruction at the level of the mid jejunum with no evidence of any masses. Which of the following is true about this condition?",
      "options": [
        "A. If a stricture is present, it is best managed by strictureplasty.",
        "B. Steroids should be administered.",
        "C. Acute radiation enteritis is due to an obliterative arteritis.",
        "D. The risk of this complication increases in the setting of diabetes.",
        "E. The degree of radiation damage is not affected by whether the patient received chemotherapy."
      ],
      "answer": "D",
      "explanation": "*   The small-intestinal epithelium is acutely susceptible to radiation injury because radiation has its greatest impact on rapidly proliferating cells.\n*   Radiation-induced injury to the bowel can present with acute or chronic enteritis.\n*   Chronic radiation enteritis results from an obliterative arteritis in the submucosal vessels, leading to progressive submucosal fibrosis and stricture formation.\n*   Patients with radiation-induced injury may develop small bowel obstruction.\n*   The risk of radiation enteritis correlates with the amount of radiation received (uncommon if total dose <4000 cGy).\n*   The risk increases if the patient received chemotherapy or has underlying vascular disease or diabetes.\n*   Early symptoms of radiation damage (diarrhea, abdominal pain, malabsorption) are usually self-limited.\n*   Treatment of acute radiation enteritis includes antispasmodic, analgesic, and antidiarrheal agents. Steroids are not used.\n*   Only a small group with chronic radiation enteritis will require surgery for SBO from stricture formation or fistulas.\n*   Unlike Crohn disease, strictureplasty is not recommended for radiation enteritis due to high risk of tissue breakdown.\n*   The extent of macroscopic radiation injury is difficult to determine on gross inspection. Extensive lysis of adhesions should be avoided (risk of enterotomy and fistula formation).\n*   The two main surgical procedures are primary resection with reanastomosis or bypass. Bypass is preferred if the obstruction source is a bowel loop stuck in the pelvis."
    },
    {
      "id": 26,
      "question_type": "mcq",
      "question": "A 75-year-old male with a history of chronic obstructive pulmonary disease (COPD) presents to the ED with a 1-day history of abdominal distention and nausea. He denies abdominal pain. Abdominal examination is benign. Laboratory values are normal. CT scan demonstrates free air under the diaphragm and thin walled, air-filled cysts within the bowel wall. Which of the following is true regarding this condition?",
      "options": [
        "A. Laparotomy is indicated.",
        "B. The primary form occurs more commonly than the secondary form.",
        "C. It is unlikely to be related to the patient's COPD.",
        "D. It is most commonly seen in the ileum.",
        "E. It is associated with steroid use."
      ],
      "answer": "E",
      "explanation": "*   Pneumatosis intestinalis is a radiographic finding, not a disease itself. Its discovery can be a benign finding or associated with life-threatening bowel ischemia.\n*   It is divided into primary and secondary pneumatosis intestinalis.\n*   The primary form (pneumatosis cystoides intestinalis) is less common, consisting of thin-walled, air-filled cysts within the bowel wall, usually in the colon, but can occur anywhere in the GI tract. It is an incidental finding, readily diagnosed on plain radiograph or CT scan. No specific treatment.\n*   Secondary pneumatosis intestinalis occurs with an underlying disease process. The exact cause is unclear, but several pathways allow gas to enter the bowel wall.\n*   Immunodeficient and inflammatory bowel states lead to loss of mucosal barrier function.\n*   Bowel obstruction leads to gas formation under pressure.\n*   Alterations in bacteria flora lead to gas formation.\n*   In adults, secondary pneumatosis intestinalis is most often associated with COPD. It is also seen with collagen vascular disease, celiac sprue, Crohn disease, steroid use, and immunodeficient states.\n*   More ominously, it is associated with ischemic bowel. Not all cases are benign.\n*   In neonates, it is most commonly associated with necrotizing enterocolitis (does not mandate surgical exploration).\n*   Also seen with pyloric stenosis, Hirschsprung disease, and other causes of bowel obstruction.\n*   Pneumoperitoneum can rarely result from a benign case of pneumatosis intestinalis because the air-filled cysts are thin walled and can burst."
    },
    {
      "id": 27,
      "question_type": "mcq",
      "question": "Which of the following is true regarding Peutz-Jeghers syndrome?",
      "options": [
        "A. Patients should begin breast and cervical cancer screening at age 25.",
        "B. It is autosomal recessive.",
        "C. Small bowel obstruction is uncommon.",
        "D. Prophylactic colectomy is recommended to most patients starting at age 20.",
        "E. These patients are not at an increased risk for small bowel cancer."
      ],
      "answer": "A",
      "explanation": "*   Peutz-Jeghers syndrome features mucocutaneous melanotic pigmentation and hamartomatous (not adenomatous) polyps of the small intestine.\n*   It is an autosomal dominant inherited syndrome.\n*   Skin lesions are found in the circumoral region of the face, buccal mucosa, forearms, palms, soles, digits, and perianal area, whereas the hamartomas are usually in the jejunum and ileum.\n*   The most common symptom is recurrent colicky abdominal pain.\n*   Bowel obstruction develops in up to 50% of patients, usually due to intussusception or obstruction by the polyp itself.\n*   Hemorrhage or chronic anemia can also occur.\n*   The polyps can also undergo adenomatous change.\n*   Patients are at significantly increased risk of cancer in the GI tract (esophagus, stomach, small intestine, colon, pancreas), as well as extraintestinal (testis, breast, uterus, ovary).\n*   Female patients should begin breast and cervical cancer screening starting at age 25.\n*   Over the long term, cancer develops in up to 90% of patients.\n*   Compared with the general population, they are at 500 times increased risk of small intestine cancer.\n*   Operative intervention is only indicated in the presence of symptoms."
    },
    {
      "id": 28,
      "question_type": "mcq",
      "question": "A 12-year-old boy presents with a large amount of bright red blood per rectum, combined with melena. He is hemodynamically stable. Subsequent workup includes lower and upper endoscopies, both of which are negative. A technetium-99m pertechnetate nuclear scan is performed, and it lights up in the bowel in the right lower quadrant region. Further management consists of:",
      "options": [
        "A. Arteriography",
        "B. Meckel diverticulectomy",
        "C. Small bowel follow-through",
        "D. Segmental resection of ileum to include the Meckel diverticulum",
        "E. CT scan of the abdomen with oral contrast"
      ],
      "answer": "D",
      "explanation": "*   A Meckel diverticulum is a remnant of the vitelline duct.\n*   It occurs within 2 feet of the ileocecal valve on the antimesenteric border of the bowel.\n*   It is a true diverticulum found in 2% of the population. It is twice as common in males and frequently presents in the first 2 years of life.\n*   The most common cause of lower GI bleeding in children is a Meckel diverticulum.\n*   It may contain ectopic gastric or pancreatic mucosa. The gastric mucosa secretes acid, leading to ulcer formation and bleeding, usually in the adjacent ileum, not in the Meckel diverticulum itself.\n*   Surgical management consists of segmental resection of the ileum to include the Meckel diverticulum.\n*   At surgery, the specimen should be opened to search for the ulceration.\n*   The presence of a Meckel diverticulum can be determined with a nuclear scan (technetium-99m pertechnetate), which lights up if ectopic gastric mucosa is present."
    },
    {
      "id": 29,
      "question_type": "mcq",
      "question": "A 5-year-old boy presents with symptoms and signs of acute appendicitis. He undergoes an open appendectomy. At surgery, the appendix is acutely inflamed but not perforated. A Meckel diverticulum is incidentally discovered. In addition to performing an appendectomy, further management consists of:",
      "options": [
        "A. Observation",
        "B. Meckel diverticulectomy",
        "C. Meckel diverticulectomy only if ectopic mucosa is palpated in the diverticulum",
        "D. Meckel diverticulectomy only if an adhesive band to the umbilicus is present",
        "E. Meckel diverticulectomy only if previous signs of inflammation are present"
      ],
      "answer": "B",
      "explanation": "*   Meckel diverticulum is found on the antimesenteric border approximately 60 cm (2 ft) from the ileocecal valve. It may be very small or extend via a fibrous band up to the umbilicus.\n*   It is a remnant of the vitelline duct. Because cells from this region are pluripotent during embryologic development, heterotopic tissue may develop within a Meckel diverticulum.\n*   Intestinal obstruction is the most common presentation in adults with a Meckel diverticulum, followed by intussusception and diverticulitis. Children most often present with painless GI bleeding.\n*   The management of an incidentally discovered Meckel diverticulum remains controversial.\n*   However, most surgeons would recommend removal in all children when it is discovered incidentally at surgery.\n*   Guidelines in adults for selective removal include age younger than 50 years, a narrow base, the presence of palpable heterotopic tissue, diverticulum length greater than 2 cm, the presence of a mesodiverticular band, and signs of previous diverticulitis."
    },
    {
      "id": 30,
      "question_type": "mcq",
      "question": "A 46-year-old woman is about to undergo hepatic resection for a metastatic carcinoid tumor. During anesthesia induction, her blood pressure decreases to 80 mm Hg systolic and her heart rate increases to 110 beats per minute. Her entire body appears flushed. Her temperature is normal as is end-tidal CO2. Management consists of:",
      "options": [
        "A. Corticosteroids",
        "B. Antihistamine",
        "C. Octreotide",
        "D. Abort operation",
        "E. Dantrolene"
      ],
      "answer": "C",
      "explanation": "*   The patient has a carcinoid crisis, characterized by hypotension, bronchospasms, flushing, and tachycardia.\n*   Carcinoid crisis has been described after anesthetic induction as well as after other stressful situations such as biopsies or invasive procedures.\n*   The primary treatment is IV octreotide administered as a bolus of 50 to 100 µg. Octreotide is effective for hypertensive crisis as well.\n*   Adjunctive treatment with antihistamines may also be of benefit due to frequent histamine release from carcinoid tumors.\n*   If the above measures do not resolve the crisis, then aborting the procedure may be necessary.\n*   Dantrolene is the preferred choice of management for malignant hyperthermia, a diagnosis supported by an increase in end-tidal CO2.\n*   Corticosteroids are not used in the management of carcinoid crisis."
    },
    {
      "id": 31,
      "question_type": "mcq",
      "question": "A 70-year-old woman presents with vague abdominal pain, diarrhea, steatorrhea, and anemia with an elevated mean corpuscular volume. Her medical and surgical history is unremarkable. A CT scan of the abdomen and pelvis is negative. An upper GI series and small bowel follow-through are significant only for a large jejunal diverticulum. Which of the following is true regarding this patient?",
      "options": [
        "A. It is typically caused by an autoimmune etiology.",
        "B. A long-chain triglyceride diet may be helpful.",
        "C. The diverticulum should be resected.",
        "D. Broad-spectrum antibiotics are indicated only if the patient presents with a fever and leukocytosis.",
        "E. Vitamin B12 is indicated."
      ],
      "answer": "E",
      "explanation": "*   The patient has blind loop syndrome, which is due to bacterial overgrowth.\n*   Symptoms include diarrhea, steatorrhea, megaloblastic anemia (due to vitamin B12 utilization by bacteria), weight loss, abdominal pain, and deficiencies of fat-soluble vitamins.\n*   The underlying cause may be an intestinal abnormality such as a diverticulum, fistula, intestinal stricture, or a Billroth II procedure. In this patient, the large jejunal diverticulum is likely the etiology.\n*   Diagnosis can be confirmed by various means: barium study (defines anatomic abnormality), D-xylose test (excessive CO2 in breath confirms diagnosis), cultures of the small intestine (challenging), Schilling test (oral radiolabeled B12 with parenteral unlabeled B12; B12 excretion low with pernicious anemia/blind loop syndrome; increases with intrinsic factor for pernicious anemia, remains low for blind loop).\n*   Initial treatment consists of broad-spectrum antibiotics (metronidazole with tetracycline) as well as parenteral vitamin B12 supplementation. This should be given to all patients presenting with blind loop syndrome.\n*   Prokinetic agents do not seem to help.\n*   Dietary modifications are useful, such as a lactose-free diet (patients often lactose intolerant). Medium-chain triglyceride diets are more readily absorbed than long-chain triglycerides.\n*   Resection of the diverticulum is not recommended initially. Surgery should be reserved for patients who fail repeated medical management attempts."
    }
  ]
}
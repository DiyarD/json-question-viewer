{
  "chapter_name": "Plastic Surgery",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "Which of the following is true regarding skin grafts?",
      "options": [
        "A. Full-thickness skin grafts (FTSG) are more amenable to imbibition compared with split-thickness skin grafts (STSG).",
        "B. Allografts will eventually get vascularized.",
        "C. The most common reason for skin graft loss is a nonviable wound bed.",
        "D. The degree of primary contraction is inversely proportional to the amount of dermis in the skin graft.",
        "E. Secondary contraction is greater with FTSG."
      ],
      "answer": "B",
      "explanation": "*   Full-thickness and most deep-partial thickness wounds require skin grafting after debridement and ensuring a healthy, viable wound bed.\n*   Allografts (cadaver skin) and xenografts (bovine skin) provide temporary biologic coverage; allografts eventually vascularize, but both are rejected and temporary. Autograft is the only permanent solution.\n*   STSG (epidermis and some dermis) or FTSG (epidermis and dermis) choice depends on wound area and location. FTSG donor sites require primary closure, suitable for small wounds in face/hands for cosmetic/functional repair.\n*   Meshing STSG (1:1 to 4:1 ratio) allows for larger area coverage.\n*   Grafts undergo primary (immediate shrinkage, dependent on dermal elastic fibers, more with FTSG) and secondary contraction (inversely proportional to dermis, more with STSG).\n*   STSG has a higher survival chance due to thinner skin facilitating imbibition and inosculation.\n*   Most common reason for skin graft loss is hematoma or seroma preventing contact with wound bed. Other failures include infection, poor wound bed, and sheer forces."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "Which of the following is the most important principle in repair of a lip laceration?",
      "options": [
        "A. Closure of the mucosal layer",
        "B. Primary closure of the muscularis",
        "C. Reapproximation of the vermilion-cutaneous junction",
        "D. Minimal stitching",
        "E. Alignment of the underlying teeth"
      ],
      "answer": "C",
      "explanation": "*   The main goal of lip laceration repair is reapproximation of the vermilion-cutaneous junction for optimal cosmesis and function.\n*   The vermilion border is initially closed with interrupted sutures.\n*   This is followed by closure of the muscularis, and then interrupted absorbable sutures in the mucosa.\n*   Multiple stitches are used as each layer needs closure.\n*   Teeth alignment is not a priority and can be addressed later."
    },
    {
      "id": 3,
      "question_type": "clinical_scenario",
      "question": "A 64-year-old male with chronic obstructive pulmonary disease (COPD) presents to the ED with full-thickness burns to the majority of the right arm after his robe caught on fire while he was cooking. Several days later he undergoes a planned STSG using his left anterior thigh as a donor site. Halfway through the anticipated harvest of donor skin using the dermatome, the resident notes visible fat. Which of the following is the best next step?",
      "options": [
        "A. Terminate the procedure and reschedule.",
        "B. Continue harvesting with the dermatome at the same site while attempting to aim more superficially to obtain the planned STSG.",
        "C. Continue harvesting with the dermatome at the same site with no change to the angle of the dermatome in an attempt to now harvest full-thickness skin graft.",
        "D. Stop the dermatome at the current site, and attempt harvesting at another site.",
        "E. Stop the dermatome at the current site, suture the skin, and attempt harvesting at another site."
      ],
      "answer": "E",
      "explanation": "*   Patients on home oxygen, including those with COPD, have a higher risk for burn injuries.\n*   This patient requires split-thickness skin grafting (STSG) for a full-thickness burn to the upper extremity. Full-thickness skin grafting is not suitable for large wound beds.\n*   STSGs are approximately 0.015 inches deep and take 7-14 days to re-epithelialize.\n*   Skin harvesting depends on the user and dermatome settings (angle, depth, pressure).\n*   Visible fat during harvest indicates incorrect technique (too much force or inappropriate depth), leading to harvesting skin that is too thin or too deep.\n*   The best next step is to stop harvesting at the current site, suture the skin, and attempt harvesting at an alternative site."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "Which of the following is a contraindication for negative-pressure wound therapy (NPWT)?",
      "options": [
        "A. Newly grafted skin",
        "B. Wounds with a fistula",
        "C. Diabetic wounds",
        "D. Ischemic wounds",
        "E. Venous stasis wounds"
      ],
      "answer": "D",
      "explanation": "*   Negative-pressure wound therapy (NPWT) reduces edema, removes wound fluid rich in destructive enzymes, and stimulates mechanotransduction pathways.\n*   Common indications for NPWT include lymphatic leaks, venous stasis wounds, diabetic wounds, wounds with fistula, sternal wounds, orthopedic wounds, and abdominal wounds.\n*   NPWT is also used as an alternative to bolster dressings for split skin grafts to reduce seroma or hematoma risk.\n*   Contraindications for NPWT include malignancy, ischemic wounds, inadequately debrided, or badly infected wounds.\n*   NPWT on ischemic wounds may extend the zone of necrosis; revascularization should be considered first."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following is an important reason to use meshed STSG as opposed to nonmeshed STSG?",
      "options": [
        "A. Meshed STSG allows for use in a wound bed with poor granulation tissue.",
        "B. Meshed STSG allows for use in an ischemic wound bed.",
        "C. Meshed STSG allows drainage of fluid and blood when absolute hemostasis cannot be performed.",
        "D. Widely meshed skin is associated with less scarring.",
        "E. With meshed STSG increased amounts of adnexal structures are available."
      ],
      "answer": "C",
      "explanation": "*   Split-thickness skin grafts (STSG) contain epidermis and varying amounts of dermis.\n*   Meshing STSG allows for increased tissue coverage and drainage of fluid/blood when absolute hemostasis is not achievable.\n*   However, widely meshed skin can lead to increased scarring and longer healing times.\n*   Poor granulation tissue and ischemic or infected wound beds are relative/absolute contraindications for skin grafting.\n*   Adnexal structures are more abundant in full-thickness skin grafts (FTSG) as they are contained in the dermis."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "In general, what is the correct order of the reconstructive ladder for complex defect closures?",
      "options": [
        "A. Healing by secondary intention, primary tissue closure, skin graft, local/regional tissue transfer, free tissue transfer",
        "B. Healing by secondary intension, local/regional tissue transfer, free tissue transfer, skin graft",
        "C. Healing by secondary intension, local/regional tissue transfer, free tissue transfer",
        "D. Skin graft, free tissue transfer, primary tissue closure",
        "E. Skin graft, local/regional tissue transfer, primary tissue closure"
      ],
      "answer": "A",
      "explanation": "*   The reconstructive ladder evaluates closure options from simplest to most complex for wounds.\n*   The progression is: primary closure → skin graft → local flap → regional flap → microvascular free flap.\n*   Choosing the simplest option that meets reconstructive requirements ensures a “lifeboat” if the procedure fails.\n*   Sometimes, a higher rung on the ladder is initially chosen for superior results (e.g., local flap for nose defect, free flap for breast reconstruction due to superior blood supply).\n*   The reconstructive ladder sequence is: (1) secondary intention, (2) direct tissue closure, (3) skin graft, (4) local tissue transfer, (5) regional tissue transfer, (6) free tissue transfer."
    },
    {
      "id": 7,
      "question_type": "clinical_scenario",
      "question": "Which of the following is the recommended surveillance regimen to detect silent rupture for a 45-year-old woman with silicone gel-filled bilateral breast implants?",
      "options": [
        "A. Annual ultrasound",
        "B. Ultrasound as needed for pain/discomfort",
        "C. Magnetic resonance imaging (MRI) 3 years after implant surgery and then every 2 years for life of the implant",
        "D. Annual plain films",
        "E. Computed tomography (CT) every 5 years for the life of the implant"
      ],
      "answer": "C",
      "explanation": "*   Breast implants are not lifetime devices and often require reoperation/removal due to issues like capsular contracture, rupture, poor cosmesis, infection, and pain.\n*   MRI is the most sensitive and specific modality for detecting silent rupture of breast implants.\n*   FDA guidelines (2011) recommend MRI screening 3 years after implant surgery, then every 2 years for the life of the implant.\n*   CT is less sensitive and involves unnecessary radiation.\n*   Ultrasound can be used but is less accurate than MRI.\n*   Plain films are not used for detecting ruptured breast implants."
    },
    {
      "id": 8,
      "question_type": "clinical_scenario",
      "question": "Which of the following is an appropriate candidate for repair of a cleft lip?",
      "options": [
        "A. 1-year-old female with hemoglobin of 9 g/dL",
        "B. 6-month-old male with a body weight of 9 pounds",
        "C. 12-week-old male with hemoglobin of 11 g/dL",
        "D. 1-year-old male with prealbumin less than 3 mg/dL",
        "E. 6-month-old female with concurrent pulmonic stenosis"
      ],
      "answer": "C",
      "explanation": "*   Cleft lip repair aims to restore facial appearance and oral function.\n*   The \"rule of 10s\" is a guideline for appropriate candidates: hemoglobin > 10 g/dL, age > 10 weeks, body weight > 10 pounds.\n*   Contraindications include severe malnutrition and concurrent cardiac anomalies.\n*   Cleft palate repair is delayed until 1 year of age to prevent interference with maxillofacial growth.\n*   Early repair risks increased middle ear infections and hearing loss."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is required along with vitamin C to complete cross-linking of proline residues in collagen?",
      "options": [
        "A. Oxygen",
        "B. Oxygen and vitamin A",
        "C. Iron and alpha-ketoglutarate",
        "D. Oxygen, iron, and alpha-ketoglutarate",
        "E. Oxygen, iron, and penicillamine"
      ],
      "answer": "D",
      "explanation": "*   Oxygen, iron, vitamin C, and alpha-ketoglutarate are all involved in the hydroxylation and cross-linking of collagen.\n*   Vitamin A promotes epithelialization in collagen synthesis for wound healing but does not participate in cross-linking of proline residues.\n*   Penicillamine reduces T-lymphocytes, inhibits macrophage function, decreases IL-1 and rheumatoid factor, and prevents collagen cross-linking."
    },
    {
      "id": 10,
      "question_type": "clinical_scenario",
      "question": "In planning for elective component separation for ventral hernia repair in a morbidly obese patient (body mass index [BMI] 36 kg/m²), placement of mesh between which layers will have the least risk of recurrence?",
      "options": [
        "A. Skin and anterior rectus sheath",
        "B. Between rectus muscle defects",
        "C. Anterior rectus sheath and rectus muscle",
        "D. Rectus muscle and posterior rectus sheath (retrorectus)",
        "E. Rectus muscle and peritoneum (preperitoneal)"
      ],
      "answer": "D",
      "explanation": "*   Mesh use significantly lowers ventral hernia recurrence rates (from 40-50% to 10%).\n*   Mesh can be placed in various layers:\n    *   \"Onlay technique\": between skin and anterior rectus sheath.\n    *   \"Inlay technique\": between rectus muscle defects.\n    *   Other locations: between anterior rectus sheath and rectus muscle, or between rectus muscle and peritoneum.\n*   Retrorectus (underlay) mesh placement, between the rectus muscle and posterior rectus sheath, has shown a lower recurrence rate compared to other mesh placements."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "Which artery is the dominant vascular supply of the rectus abdominis muscle and paired with the correct feeding vessel?",
      "options": [
        "A. Superficial epigastric artery from the internal thoracic artery",
        "B. Inferior epigastric artery from the external iliac artery",
        "C. Superficial epigastric artery from the intercostal arteries",
        "D. Inferior epigastric artery from the internal iliac artery",
        "E. Deep circumflex iliac artery from the internal iliac artery"
      ],
      "answer": "B",
      "explanation": "*   The rectus abdominis muscle has a dual dominant blood supply.\n*   The superior epigastric artery (terminal branch of internal thoracic artery) supplies the upper part.\n*   The inferior epigastric artery (from the external iliac artery above the inguinal ligament) supplies the lower part.\n*   The superficial epigastric artery (from the femoral artery) does not supply the rectus abdominis.\n*   The deep circumflex iliac artery (from the external iliac artery) supplies the iliac crest."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "What is average tissue survival rate for a microvascular free flap?",
      "options": [
        "A. Less than 5%",
        "B. 5-30%",
        "C. 30-60%",
        "D. 60-90%",
        "E. More than 95%"
      ],
      "answer": "E",
      "explanation": "*   Microsurgery involves surgery with an operative microscope, specifically microvascular anastomoses for free tissue transfer.\n*   The first successful free tissue transfer was a jejunal free flap for cervical esophagus reconstruction in 1957.\n*   Initially considered a last-resort option, free flap success rates now exceed 95% due to improved techniques, patient/flap selection, and postoperative monitoring.\n*   Free tissue transfer is often the first-choice treatment for complex defects."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "What is the mainstay of postoperative flap monitoring?",
      "options": [
        "A. Doppler ultrasound",
        "B. Pulse oximetry",
        "C. Clinical observation",
        "D. Quantitative fluorometry",
        "E. Surface temperature probing"
      ],
      "answer": "C",
      "explanation": "*   Clinical examination (assessing flap color, capillary refill, tissue bleeding, and temperature) is the gold standard for assessing transferred tissue viability and is the mainstay of postoperative flap monitoring.\n*   Identifying a failing or insufficiently perfused flap can be challenging.\n*   A Doppler probe is a useful adjunct for assessing vascular flow but is subject to error and should not replace clinical assessments.\n*   Signs of malperfusion:\n    *   Arterial insufficiency: pale flap color, reduced temperature, loss of capillary refill/turgor.\n    *   Venous insufficiency: purple/blue hue, congestion, swelling, rapid capillary refill (early stages), followed by eventual loss of capillary refill.\n*   Venous congestion can be treated with surgical measures, medicinal leeches, or chemical \"leeching\" (topical heparin with dermal punctures)."
    },
    {
      "id": 14,
      "question_type": "clinical_scenario",
      "question": "A 40-year-old female who has a desire for reconstructive breast surgery after a mastectomy is offered a deep inferior epigastric perforator (DIEP) flap. What is the disadvantage to performing a DIEP flap compared to a standard pedicle flap in this patient?",
      "options": [
        "A. It has a higher rate of flap necrosis.",
        "B. It has an elevated rate of donor site morbidity.",
        "C. Patients have permanent nerve dysfunction.",
        "D. Patients have increased pain.",
        "E. It is a longer operation."
      ],
      "answer": "E",
      "explanation": "*   A perforator (fasciocutaneous) flap involves transferring skin and subcutaneous fat from a distant/adjacent site.\n*   Major advantages of perforator flaps (e.g., DIEP) relate to reduced donor site morbidity:\n    *   Fascia and muscle are not manipulated, preserving nerve innervation.\n    *   Reduced nerve dysfunction and pain.\n    *   Reduced risk of hernias at the donor site due to intact fascia.\n*   The major disadvantage is that it requires a microsurgery specialist and takes significantly longer than a standard pedicle flap.\n*   Compared to TRAM flaps, DIEP flaps are associated with shorter hospital stays, decreased donor site hernias, and a significantly lower rate of fat necrosis."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "What is the most common early postoperative complication in gynecomastia surgery?",
      "options": [
        "A. Wound infection",
        "B. Hematoma",
        "C. Under-resection of tissue",
        "D. Asymmetry of breast tissue",
        "E. Nipple/areola depression"
      ],
      "answer": "B",
      "explanation": "*   Gynecomastia is benign glandular breast tissue proliferation in men, often managed surgically for cosmetic reasons via excision, suction-assisted lipectomy, or ultrasound-assisted liposuction.\n*   During surgical excision, a periareolar incision is made, and a 1-1.5 cm cuff of tissue deep to the nipple/areola complex is preserved to prevent postoperative nipple/areola depression or adherence.\n*   The most common early postoperative complication is hematoma, which should be evacuated if possible.\n*   Under-resection is the most common long-term complication.\n*   Wound infection is uncommon due to clean operation and prophylactic antibiotics (especially in liposuction).\n*   Asymmetry is uncommon with newer techniques."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "The most important reason to avoid STSG over an extremity joint is:",
      "options": [
        "A. There is an increased risk of infection over joints.",
        "B. The rate of contracture over a joint can be debilitating.",
        "C. The blood flow to these regions is low and often leads to a necrotic graft.",
        "D. There is a high rate of seroma formation compared with other areas on the body.",
        "E. There is reduced imbibition."
      ],
      "answer": "B",
      "explanation": "*   Wound contraction, driven by myofibroblasts, is a key closure mechanism.\n*   Contracture extending over a joint can lead to debilitating scarring and compromise function, especially in joint burns.\n*   Rehabilitation (stretching, exercising, splinting) can minimize contracture development.\n*   Surgical release of tight bands may be needed to restore function."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "Which statement is true regarding facial trauma?",
      "options": [
        "A. Isolated facial fractures are associated with 30% cervical spine injury.",
        "B. Maxillary fracture is the most common type of facial fracture.",
        "C. Mandibular fractures are frequently multiple.",
        "D. A small septal hematoma can be managed conservatively.",
        "E. Intranasal exam is not necessary in nondisplaced nasal fractures."
      ],
      "answer": "C",
      "explanation": "*   Cervical spine injuries complicate facial fractures, occurring in 5-8% of isolated facial fractures and 7-11% of multiple facial fractures.\n*   The nose is the most common facial fracture site, involving cartilaginous septum and/or nasal bones.\n*   Intranasal examination is crucial for all nasal fractures (even nondisplaced) to check for septal hematoma.\n*   Septal hematomas must be incised, drained, and packed to prevent pressure necrosis and septal resorption, which can cause saddle nasal deformity.\n*   Mandibular fractures are frequently multiple.\n*   Most orbital injuries (except simplest) require eye specialist evaluation for visual acuity and globe injury."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "Which of the following bones is the most common isolated orbital bone fracture?",
      "options": [
        "A. Ethmoid",
        "B. Frontal",
        "C. Maxillary",
        "D. Lacrimal",
        "E. Zygomatic"
      ],
      "answer": "C",
      "explanation": "*   Most isolated orbital fractures involve the orbital floor, primarily composed of the maxillary bone.\n*   Pure blowout fractures typically involve the orbital floor.\n*   The most common complication of an orbital floor fracture is entrapment.\n*   Two uncommon complications of orbital bone fracture:\n    *   Superior orbital fissure syndrome: compression of cranial nerves III, IV, and VI, leading to eyelid ptosis, globe proptosis, and extraocular muscle paralysis.\n    *   Orbital apex syndrome: involves optic nerve compression, causing blindness, in addition to superior orbital fissure syndrome symptoms.\n*   Both syndromes are medical emergencies requiring steroid therapy or surgical decompression."
    },
    {
      "id": 19,
      "question_type": "clinical_scenario",
      "question": "A 21-year-old female has a flash burn to her face, sustaining a 3-cm full thickness wound to her right cheek. Which of the following would be the best skin graft?",
      "options": [
        "A. Full thickness from behind the ear",
        "B. Full thickness from the waist at the inguinal fold",
        "C. Full thickness from the wrist fold",
        "D. Split thickness from the anterior thigh",
        "E. Split thickness from the posterior thigh"
      ],
      "answer": "A",
      "explanation": "*   Full-thickness skin grafts (FTSG) are ideal for visible areas like the face due to their ability to match adjacent skin in color, texture, and thickness, improving cosmesis.\n*   FTSGs also undergo less secondary wound contracture.\n*   Ideal donor sites for FTSG include upper eyelid, nasolabial fold, postauricular region (behind the ear), and supraclavicular fossa.\n*   The inguinal fold (groin) can be used and heals well, but may not provide as good a skin match.\n*   The wrist crease can also be used, but the resulting scar may be cosmetically undesirable."
    }
  ]
}
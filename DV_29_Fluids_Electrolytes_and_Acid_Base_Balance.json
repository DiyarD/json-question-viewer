{
  "chapter_name": "Fluids, Electrolytes, and Acid-Base Balance",
  "questions": [
    {
      "id": 1,
      "question_type": "mcq",
      "question": "A 25-year-old female is postoperative day 1 from a laparoscopic, converted to open cholecystectomy for acute cholecystitis. Since surgery, she has had one episode of emesis, urinary output has decreased to 0.3 cc/kg per hour, and serum sodium is found to be 131 mEq/L. Serum creatinine is normal, but antidiuretic hormone (ADH) level is elevated. What is the most likely cause of these findings?",
      "options": [
        "A. Syndrome of inappropriate antidiuretic hormone secretion (SIADH)",
        "B. Normal physiologic response to surgery",
        "C. Acute kidney injury",
        "D. Emesis",
        "E. Congestive heart failure"
      ],
      "answer": "B",
      "explanation": "- Postoperative stress triggers endocrine and cytokine responses, leading to sodium and water retention.\n- ADH levels increase significantly (up to 100x normal) during surgery and remain elevated for several days.\n- This response is primarily due to intravascular volume loss from sequestration in injured tissues (\"third-spacing\"), prolonged fasting dehydration, and insensible losses during surgery.\n- The result is postoperative oliguria and hyponatremia.\n- In this context, the elevated ADH level is a normal physiologic response to stress and decreased intravascular volume, not inappropriate SIADH (which typically leads to a euvolemic state and greater sodium loss).\n- Acute kidney injury (C) is ruled out by normal creatinine clearance.\n- A single episode of emesis (D) is unlikely to cause significant hyponatremia.\n- Congestive heart failure (E) is an unlikely cause of hyponatremia without other associated symptoms."
    },
    {
      "id": 2,
      "question_type": "mcq",
      "question": "A 65-year-old male with massive intracranial hemorrhage after a ruptured berry aneurysm is currently in the neurosurgical intensive care unit (ICU). Two days ago, he underwent intravascular coiling of the lesion. Because of increased urinary output over the last 24 hours, a urine sodium was measured and found to be 35 mEq/L. Current labs include a serum sodium of 128 mEq/L and a hemoglobin of 18 g/dL. Central venous pressure is 2 mm Hg. Which of the following is the most appropriate initial treatment?",
      "options": [
        "A. Normal saline",
        "B. Free water restriction",
        "C. Desmopressin",
        "D. Demeclocycline",
        "E. Tolvaptan"
      ],
      "answer": "A",
      "explanation": "- In a neurologically injured patient with hyponatremia and elevated urinary sodium, the two most likely diagnoses are SIADH or cerebral salt wasting syndrome (CSWS).\n- CSWS is characterized by excessive urinary sodium losses, leading to hypovolemia and hyponatremia, often seen after subarachnoid hemorrhage with increased urine output.\n- SIADH involves excess water retention, leading to euvolemia or hypervolemia.\n- The patient's low central venous pressure (CVP) of 2 mm Hg and elevated hemoglobin (18 g/dL) indicate a reduction in intravascular volume, which is consistent with CSWS.\n- Therefore, intravascular volume should be replaced with normal saline.\n- Fluid restriction (B), typically used for SIADH, could potentially worsen cerebral ischemia in CSWS.\n- Desmopressin (C) is an ADH analogue used to treat central diabetes insipidus, characterized by excessive dilute urine output and normal to high plasma sodium.\n- Demeclocycline (D) and \"vaptans\" (E) are used off-label as adjuncts to treat SIADH that is unresponsive to fluid restriction."
    },
    {
      "id": 3,
      "question_type": "mcq",
      "question": "A 75-year-old male is in the ICU due to sepsis 5 days after a colectomy for a perforated diverticulitis. While the nurse is checking his blood pressure, his hand went into a spasm. Which of the following is the most likely etiology?",
      "options": [
        "A. Hypercalcemia",
        "B. Hypermagnesemia",
        "C. Hypomagnesemia",
        "D. Hyponatremia",
        "E. Hyperkalemia"
      ],
      "answer": "C",
      "explanation": "- Hypomagnesemia is a common electrolyte abnormality in hospitalized and critically ill patients (11–65%).\n- While most patients are asymptomatic, symptoms can manifest as the level drops below 1.2 mg/dL.\n- Symptoms include simple neuromuscular irritability, such as Trousseau sign (spasm of the forearm and hand with occlusion of the brachial artery), or more serious cases like tetany, nystagmus, and seizures.\n- Magnesium depletion can also lead to atrial and ventricular arrhythmias.\n- Hypercalcemia, hypermagnesemia, hyponatremia, and hyperkalemia (A, B, D, E) would not typically present with neuromuscular irritability in this manner."
    },
    {
      "id": 4,
      "question_type": "mcq",
      "question": "The most effective method for the prevention of contrast-induced nephropathy (CIN) from computed tomography with intravenous contrast is:",
      "options": [
        "A. Intravenous N-acetylcysteine",
        "B. Normal saline bolus immediately before the exam followed by 6 hours of sodium bicarbonate and normal saline after the exam",
        "C. 12 hours of intravenous normal saline before and after the exam",
        "D. Intravenous fluids with sodium bicarbonate 2 hours before exam and 12 hours after, as well as N-acetylcysteine",
        "E. 6 hours of half normal saline before and after the exam"
      ],
      "answer": "C",
      "explanation": "- Fluid hydration is considered the most important aspect of CIN prevention by major organizations.\n- The most significant reduction in CIN is observed with 12 hours of pre- and post-scan hydration.\n- Normal saline is the fluid of choice for hydration.\n- Sodium bicarbonate was initially thought to be helpful, but follow-up studies have not consistently shown clinically significant benefit.\n- N-acetylcysteine is generally considered safe, but there is no convincing evidence for its routine use, and it may potentially mask CIN by reducing creatinine in healthy patients rather than treating the condition."
    },
    {
      "id": 5,
      "question_type": "mcq",
      "question": "Which of the following causes of acidosis in the intensive care unit is best treated by administration of sodium bicarbonate?",
      "options": [
        "A. Lactic acidosis",
        "B. Diabetic ketoacidosis",
        "C. Respiratory acidosis from acute respiratory distress syndrome (ARDS)",
        "D. Cardiac arrest",
        "E. Renal tubular acidosis (RTA)"
      ],
      "answer": "E",
      "explanation": "- While sodium bicarbonate can increase blood pH, it does not consistently translate to improved survival and can even be deleterious.\n- Treatment of acidosis typically focuses on augmenting respiratory compensation and addressing the underlying condition rather than directly buffering the blood.\n- An important exception for bicarbonate use is certain forms of Renal Tubular Acidosis (RTA), where the primary problem is impaired buffering of the urine.\n- In RTA, sodium bicarbonate or alkalinizing potassium salts can correct the acidosis and improve electrolyte disturbances.\n- Current literature does not support the use of sodium bicarbonate for lactic acidosis (A) or diabetic ketoacidosis (B).\n- For respiratory acidosis from ARDS (C), the benefit of blood buffering with sodium bicarbonate on mortality has not been definitively shown.\n- Current Advanced Cardiovascular Life Support (ACLS) guidelines do not recommend the routine use of sodium bicarbonate in cardiac arrest (D), except in specific situations like hyperkalemia or tricyclic antidepressant overdose."
    },
    {
      "id": 6,
      "question_type": "mcq",
      "question": "A 76-year-old female is postoperative day 4 from sigmoid colon resection. Her postoperative course has been uneventful, but she has not yet started passing flatus. Overnight, the urinary output has decreased to 20 cc/hour, and the patient has had several episodes of emesis. Lab work includes a blood urea nitrogen (BUN) of 40 mg/dL and serum creatinine of 1.5 mg/dL. Urinary sodium is 10 mEq/L. What is the most likely etiology of oliguria in this patient?",
      "options": [
        "A. Postoperative ileus",
        "B. Intra-abdominal hemorrhage",
        "C. Intraoperative hypotension",
        "D. Inadvertent ligation of the left ureter",
        "E. Drug-induced nephrotoxicity"
      ],
      "answer": "A",
      "explanation": "- The first step in identifying oliguria is history and BUN:creatinine ratio analysis. A BUN:creatinine ratio >20 with hypoperfusion/hypotension history suggests prerenal azotemia.\n- In this case, a low urinary sodium concentration (<20 mEq/L) or a low fractional excretion of sodium (<1%) indicates a prerenal cause of acute kidney injury.\n- Given the presence of emesis and failure to pass flatus (suggesting ileus), postoperative ileus is the most likely diagnosis.\n- Ileus or small bowel obstruction can lead to significant intra-abdominal fluid sequestration, which decreases renal blood flow and urinary output without adequate fluid resuscitation.\n- The low urinary sodium is a result of physiologically elevated ADH secondary to hypovolemia.\n- Intra-abdominal hemorrhage (B) and intraoperative hypotension (C) would typically present earlier in the postoperative period (POD 0-1).\n- Drug-induced nephrotoxicity (E) is an intrinsic acute kidney injury, and urinary sodium would not be low.\n- Inadvertent ligation of the ureter (D) typically causes oliguria only if both sides are affected."
    },
    {
      "id": 7,
      "question_type": "mcq",
      "question": "Which of the following is true regarding dehydration and/or hypovolemia in children?",
      "options": [
        "A. Children only need to lose 5% of total body water to produce significant symptoms of hypovolemia.",
        "B. Hypovolemia refers to a reduction in free water.",
        "C. Dehydration will primarily result in extracellular fluid losses.",
        "D. Profound hypernatremic hypovolemia should be corrected initially with hypotonic fluids.",
        "E. Oral fluid replacement is adequate in most children with insensible fluid losses."
      ],
      "answer": "E",
      "explanation": "- Oral fluid replacement is generally adequate and preferred for insensible fluid losses in most children, unless there are contraindications such as altered mental status or vascular compromise.\n- Dehydration refers to a reduction in free water (fluid loss in excess of solute loss), while hypovolemia is a loss of circulating extracellular volume (B is incorrect).\n- Two-thirds of total body water is intracellular, so dehydration primarily results in intracellular fluid losses (C is incorrect).\n- Almost 10% of total body water needs to be lost before significant signs of hypovolemia manifest (A is incorrect).\n- Profound hypernatremic hypovolemia requires rapid intravascular volume replacement with intravenous isotonic fluids initially, with slower correction of the free water deficit to avoid cerebral edema (D is incorrect)."
    },
    {
      "id": 8,
      "question_type": "mcq",
      "question": "Which of the following is considered a normal physiologic change in pregnancy?",
      "options": [
        "A. Decrease in blood pH",
        "B. Decrease in minute ventilation",
        "C. Increased vital capacity",
        "D. Right-shift of oxyhemoglobin dissociation curve",
        "E. Relative leukopenia"
      ],
      "answer": "D",
      "explanation": "- Pregnancy involves increased metabolic demands, necessitating increased oxygen delivery, which is achieved by an increase in cardiac output.\n- The oxyhemoglobin dissociation curve shifts to the right, facilitating the unloading of oxygen to the fetus. This is partly due to an increase in 2,3-DPG.\n- Progesterone acts on the central nervous system to lower CO2 levels, leading to increased tidal volume and respiratory rate, which results in increased minute ventilation (opposite of B) and respiratory alkalosis (opposite of A).\n- While uterine mass effect reduces inspiratory/expiratory reserve and functional/residual capacity, vital capacity remains relatively unchanged (C is incorrect).\n- There is an increase in circulating white blood cells during pregnancy, not relative leukopenia (E is incorrect)."
    },
    {
      "id": 9,
      "question_type": "mcq",
      "question": "Which of the following is true regarding sodium and water maintenance in the geriatric patient?",
      "options": [
        "A. There is an increase in the ratio of intracellular to extracellular water.",
        "B. A hyperactive thirst response predisposes geriatric patients to hyponatremia.",
        "C. Elevated antidiuretic hormone levels predispose patients to sodium retention.",
        "D. Atrial natriuretic peptide level increases with aging.",
        "E. There is a relative increase in the activity of the renin-angiotensin-aldosterone system."
      ],
      "answer": "D",
      "explanation": "- Atrial natriuretic peptide (ANP) levels increase with aging, contributing to renal salt and water wasting.\n- Loss of lean body mass in geriatrics decreases total body water and the ratio of intracellular to extracellular water (opposite of A).\n- The older population has a diminished thirst response to changes in serum osmolality (opposite of B).\n- The aged kidney shows diminished responsiveness to ADH (opposite of C) and a suppressed renin-angiotensin-aldosterone system (opposite of E), leading to dysregulation of sodium and potassium balance."
    },
    {
      "id": 10,
      "question_type": "mcq",
      "question": "An elderly patient presents to the emergency department (ED) with increased thirst and urinary output. Which of the following findings would be most helpful to suggest diabetes insipidus (DI) as the likely etiology in this patient?",
      "options": [
        "A. Hypernatremia",
        "B. Hyperglycemia",
        "C. Hyponatremia",
        "D. Low urine osmolality",
        "E. High serum-to-urine osmolality ratio"
      ],
      "answer": "E",
      "explanation": "- Diabetes Insipidus (DI) is characterized by polyuria and polydipsia due to either low ADH (central DI) or diminished renal response to ADH (nephrogenic DI).\n- DI is associated with low urine osmolality despite elevated serum osmolality, resulting in a high serum-to-urine osmolality ratio.\n- While hypernatremia (A) is possible in DI due to excessive water loss, patients can often compensate with increased oral intake.\n- Hyperglycemia (B) would indicate osmotic diuresis from diabetes mellitus, not DI.\n- Hyponatremia (C) with low urine osmolality suggests primary polydipsia, a normal response to increased water intake, not DI.\n- Low urine osmolality (D) is seen in both DI and primary polydipsia, so it is not specific enough on its own to differentiate DI."
    },
    {
      "id": 11,
      "question_type": "mcq",
      "question": "A 58-year-old male alcoholic presents to the ED complaining of increased abdominal girth over the last several weeks. He underwent a diagnostic ultrasound 1 year ago, which showed evidence of cirrhosis. Physical exam reveals pitting edema of the lower extremities and positive abdominal fluid wave. In addition to alcohol cessation, what is the next step in management?",
      "options": [
        "A. Free water restriction",
        "B. Transjugular intrahepatic portosystemic shunt",
        "C. Intravenous furosemide with transition to PO once ascites resolves",
        "D. Strict sodium restriction (<1 g per day)",
        "E. Combination of oral furosemide and spironolactone"
      ],
      "answer": "E",
      "explanation": "- Mobilization of ascites in cirrhotic patients requires a negative sodium balance, achieved by limiting oral sodium intake and initiating diuresis.\n- The standard initial diuretic therapy involves a combination of oral spironolactone (initial dose 100 mg/day) and furosemide (initial dose 40 mg/day).\n- Simultaneous administration of these two potentiates natriuretic effect and limits potassium imbalance.\n- Free water restriction (A) is generally not indicated unless significant hyponatremia (<125 mEq/L) is present, as the primary problem is inappropriate sodium retention, not excess free water.\n- Transjugular intrahepatic portosystemic shunt (TIPS) (B) is considered for refractory ascites, not as an initial management step.\n- Intravenous administration of diuretics in cirrhotics with new-onset ascites should generally be avoided due to the risk of azotemia (C).\n- While strict sodium restriction can hasten ascites mobilization, a restriction of less than 2 g/day (D) is generally sufficient and more manageable, as stricter diets are difficult to adhere to and can worsen malnutrition."
    },
    {
      "id": 12,
      "question_type": "mcq",
      "question": "A 45-year-old male with congestive heart failure is being treated in the ICU for sepsis secondary to pneumonia. Over the last 24 hours, he has received 11 L of crystalloid and was started on vasopressors for hypotension. His urine output has dropped to 20 mL/hour. Delivered tidal volumes on the mechanical ventilator have also significantly decreased. Physical exam reveals a tense abdomen, abdominal fluid wave, and anasarca. Current bladder pressure is 25 mm Hg. The most appropriate initial management is:",
      "options": [
        "A. Neuromuscular blockade",
        "B. Immediate decompressive laparotomy",
        "C. Percutaneous drainage of intra-abdominal fluid",
        "D. Continuous renal replacement therapy",
        "E. Change resuscitative fluid to albumin"
      ],
      "answer": "C",
      "explanation": "- The patient presents with signs of abdominal compartment syndrome (ACS), indicated by a bladder pressure of 25 mm Hg (above 20 mm Hg, associated with new organ failure), oliguria, decreased tidal volumes, tense abdomen, and anasarca.\n- This is a case of secondary ACS, likely due to massive fluid resuscitation in a patient with congestive heart failure, leading to significant intra-abdominal fluid accumulation.\n- For secondary ACS caused by obvious intraperitoneal fluid (like ascites), percutaneous catheter drainage is the most appropriate initial management if technically feasible, as it can often alleviate the need for surgical decompression.\n- Immediate decompressive laparotomy (B) is typically recommended for primary ACS (etiology arising within the abdomen).\n- Neuromuscular blockade (A) and diuresis (D) may help with intra-abdominal hypertension, but worsening kidney and lung function requires more immediate intervention.\n- The role of albumin (E) in abdominal compartment syndrome is still controversial."
    },
    {
      "id": 13,
      "question_type": "mcq",
      "question": "Which of the following is true regarding lactated Ringer's solution when used as an intravenous fluid?",
      "options": [
        "A. It is equally suitable as a maintenance or resuscitative fluid.",
        "B. It is useful in acidosis because of the bicarbonate content of the solution.",
        "C. It is an aqueous solution composed of only sodium chloride, sodium lactate, calcium chloride, and potassium chloride salts.",
        "D. The pH of the solution itself is 7.5.",
        "E. Sodium content is equivalent to normal serum."
      ],
      "answer": "C",
      "explanation": "- Lactated Ringer's (LR) solution is a crystalloid solution designed to mimic normal physiologic ion concentrations. It is composed of sodium chloride, sodium lactate, calcium chloride, and potassium chloride salts.\n- LR is generally considered a poor maintenance fluid due to its low potassium concentration and absence of glucose, and its propensity to cause metabolic alkalosis (A is incorrect).\n- The lactate in LR is metabolized, releasing a bicarbonate ion, which has an alkalinizing effect on the blood. It does not contain bicarbonate directly (B is incorrect).\n- The pH of LR solution itself is slightly acidic at 6.5 (D is incorrect).\n- The sodium content of LR (130 mEq/L) is not equivalent to normal serum sodium (typically 135-145 mEq/L) (E is incorrect)."
    },
    {
      "id": 14,
      "question_type": "mcq",
      "question": "Which of the following is true regarding serum osmolarity and serum osmolality?",
      "options": [
        "A. Large proteins, like albumin, are the most important contributors to serum osmolality.",
        "B. The presence of an osmolar gap indicates the presence of a foreign molecule that readily distributes across cell membranes.",
        "C. The difference between serum osmolarity and serum osmolality is highly variable depending on the physiologic state.",
        "D. Sodium is multiplied by two in the calculation for serum osmolarity because of its increased osmotic activity.",
        "E. The number of molecules, and not the size, is the most important contributor to serum osmolarity."
      ],
      "answer": "E",
      "explanation": "- Osmolarity and osmolality represent the number of osmotically active solutes (osmoles) in a given solution. The kinetic energy of dissolved solutes, and thus their osmotic contribution, is based on the number of molecules, not their size.\n- Large proteins like albumin contribute relatively little to serum osmolality compared to more abundant molecules like sodium (A is incorrect).\n- An osmolar gap indicates the presence of a foreign molecule that does *not* readily diffuse across cell membranes, thus contributing to osmolality (B is incorrect).\n- Under normal physiologic conditions, serum osmolarity and osmolality are essentially interchangeable because 1 L of water weighs 1 kg (C is incorrect).\n- Sodium is multiplied by two in the calculation (2[Na]) to account for its corresponding anions (chloride and bicarbonate), not due to increased osmotic activity (D is incorrect)."
    },
    {
      "id": 15,
      "question_type": "mcq",
      "question": "A 62-year-old female was recently diagnosed on upper endoscopy with a near obstructing distal gastric tumor but was subsequently lost to follow-up. She now returns to the ED with 24 hours of nonbilious vomiting and abdominal pain. What is the most significant contributing factor to hypokalemia in this patient?",
      "options": [
        "A. Intracellular shift",
        "B. Increased excretion in the urine",
        "C. Loss of potassium with emesis",
        "D. Metabolic acidosis",
        "E. Hypokalemic fluid replacement"
      ],
      "answer": "B",
      "explanation": "- Large volume emesis from gastric outlet obstruction causes significant loss of volume, hydrogen, and chloride ions, leading to hypochloremic metabolic alkalosis.\n- While gastric juice contains some potassium, the amount lost via emesis (C) is relatively insignificant compared to renal losses.\n- Volume depletion activates the renin-angiotensin-aldosterone system, which increases sodium and water absorption but also promotes continued potassium excretion in the urine, leading to significant hypokalemia.\n- The kidney compensates for hypokalemia by exchanging potassium ions for hydrogen ions, which perpetuates the alkalosis and can cause paradoxical aciduria (acidic urine despite systemic alkalosis).\n- Intracellular shift of potassium (A) due to alkalosis is a variable effect and does not account for the significant hypokalemia seen with metabolic alkalosis.\n- The patient has metabolic alkalosis, not acidosis (D).\n- Hypokalemic fluid replacement (E) is a treatment, not a cause. Volume expansion with crystalloid is recommended before potassium replacement to reduce renal potassium loss."
    },
    {
      "id": 16,
      "question_type": "mcq",
      "question": "Which of the following is true regarding commonly used resuscitative or maintenance fluids?",
      "options": [
        "A. Normal saline is preferred over lactated Ringer's solution in burn patients.",
        "B. Five percent albumin solution draws fluid from the extravascular space by increasing colloid oncotic pressure.",
        "C. Five percent dextrose in water is iso-osmolar to serum.",
        "D. Lactated Ringer's solution will worsen an existing lactic acidosis.",
        "E. In order to replace lost intravascular volume, twice the volume of crystalloid must be infused."
      ],
      "answer": "C",
      "explanation": "- Five percent dextrose in water (D5W) is iso-osmolar to serum initially. However, because dextrose is rapidly taken up by cells, the water in the solution rapidly distributes between the intracellular and extracellular spaces, making it effectively hypotonic in vivo.\n- Lactated Ringer's solution is the preferred resuscitative fluid in burn patients, not normal saline (A is incorrect).\n- Five percent albumin solution retains infused volume in the intravascular space but does not \"pull\" fluid from extravascular compartments (B is incorrect). In contrast, 25% albumin solution does pull fluid from the interstitial space.\n- Lactated Ringer's solution contains lactate, which is metabolized to bicarbonate, consuming hydrogen ions. Therefore, it does not worsen lactic acidosis and may even improve it, unless there is complete absence of liver function (D is incorrect).\n- To replace lost intravascular volume, three to four times the volume of crystalloid must be infused for every liter lost, not twice the volume (E is incorrect)."
    },
    {
      "id": 17,
      "question_type": "mcq",
      "question": "A 48-year-old male with past medical history of alcoholic cirrhosis and refractory ascites is admitted to the ICU recovering from spontaneous bacterial peritonitis (SBP). He is now off of antibiotics, and there is no evidence of continued infection. Over the course of his hospitalization, his creatinine level increased from 1.0 to 1.6 mg/ dL. Urinalysis reveals no evidence of proteinuria or microhematuria. Which of the following is the initial step in management?",
      "options": [
        "A. Fluid resuscitation with normal saline",
        "B. Cessation of diuretics",
        "C. Terlipressin and albumin",
        "D. Initiation of continuous renal replacement therapy",
        "E. Transjugular intrahepatic portosystemic shunt (TIPS)"
      ],
      "answer": "B",
      "explanation": "- The most common cause of renal failure in patients with cirrhosis is prerenal azotemia.\n- The initial step when acute kidney injury is suspected in this setting is the cessation of diuretics and volume expansion with human albumin (not normal saline, A is incorrect).\n- Failure to respond to these measures raises concern for hepatorenal syndrome (HRS).\n- Diagnostic criteria for HRS include cirrhosis with ascites, serum creatinine >1.5 mg/dL, no improvement after at least 2 days of diuretic withdrawal and albumin volume expansion, absence of shock/nephrotoxic drugs/parenchymal kidney disease, and low urine sodium (<10 mEq/L).\n- Terlipressin and albumin (C) are treatments for HRS, particularly in non-critically ill patients (or albumin/norepinephrine in critically ill patients).\n- Dialysis or renal replacement therapy (D) is used as a bridge to transplant but has not been shown to decrease mortality or improve renal recovery.\n- TIPS (E) can be considered for refractory ascites, but its role in the treatment of HRS is unclear."
    },
    {
      "id": 18,
      "question_type": "mcq",
      "question": "A 24-year-old female underwent a jejunal resection complicated by abdominal compartment syndrome and an open abdomen after a motor vehicle collision. She is eventually discharged home but returns 1 week later with copious output of yellowish fluid from her midline wound. She has noted diminished urinary output, is tachycardic, and has decreased skin turgor. What combination of electrolyte abnormalities is most likely present in this patient?",
      "options": [
        "A. Hyponatremia, hypokalemia, and metabolic acidosis",
        "B. Hypokalemia, hypochloremia, and metabolic alkalosis",
        "C. Hyponatremia, hyperkalemia, and metabolic acidosis",
        "D. Hypernatremia and metabolic acidosis",
        "E. Hyperkalemia and metabolic alkalosis"
      ],
      "answer": "A",
      "explanation": "- The patient has a jejunal resection with copious yellowish fluid output, indicating significant loss of small bowel secretions.\n- Small bowel and pancreatic secretions have relatively high concentrations of bicarbonate and potassium.\n- Excessive losses of these fluids commonly result in hypokalemia and metabolic acidosis.\n- Given the patient's signs of hypovolemia (diminished urinary output, tachycardia, decreased skin turgor) and presumably intact thirst mechanism, she would likely replace fluid losses with free water, leading to hyponatremia.\n- Therefore, the most likely combination of electrolyte abnormalities is hyponatremia, hypokalemia, and metabolic acidosis.\n- Hypochloremic metabolic alkalosis (B) results from gastric (stomach) losses, not jejunal losses.\n- Hypernatremic metabolic acidosis (D) can occur with sweat losses if oral intake is inadequate.\n- Hyperkalemia is not typically seen in conjunction with metabolic alkalosis (E) because the renal response to alkalosis causes potassium wasting in the urine."
    },
    {
      "id": 19,
      "question_type": "mcq",
      "question": "A 55-year-old male is admitted to the hospital with altered mental status. Paramedics report that they found multiple empty beer cans in his home. He is found to have a serum alcohol concentration of 255 mg/dL and a serum sodium concentration of 118 mEq/L. Fluid resuscitation is initiated with normal saline and sodium levels return to normal by the next morning. On hospital day 5, he develops spastic quadriplegia and is unresponsive to external stimuli. Which of the following is true regarding this condition?",
      "options": [
        "A. It could have been prevented with the use of hypertonic saline.",
        "B. Desmopressin can be used as an adjunct to fluid replacement to prevent this complication.",
        "C. Cerebral adaptions to hyponatremia take up to a week to develop.",
        "D. Recovery is impossible after the onset of neurologic symptoms.",
        "E. Injury is restricted to the pons."
      ],
      "answer": "B",
      "explanation": "- The patient developed Osmotic Demyelination Syndrome (ODS), also known as central pontine myelinolysis, due to the rapid correction of chronic hyponatremia.\n- Desmopressin has been advocated as an adjunct to fluid replacement in this scenario to prevent rapid autocorrection of sodium by allowing the production of more concentrated urine.\n- The use of hypertonic saline (A) is generally unnecessary unless the hyponatremia is clearly acute by history, or there are signs of cerebral edema or elevated intracranial pressures.\n- Cerebral adaptations to chronic hyponatremia generally develop completely within 48 hours, not up to a week (C is incorrect).\n- While recovery can be prolonged, it is not impossible after the onset of neurologic symptoms, and some data support reinstitution of hyponatremia to improve prognosis (D is incorrect).\n- Although ODS was originally described in the pons, it has now been described in other areas of the brain as well (E is incorrect)."
    },
    {
      "id": 20,
      "question_type": "mcq",
      "question": "A 50-year-old, type I diabetic male is admitted to the hospital for the workup of vague abdominal pain and subjective fevers. Past medical history includes total proctocolectomy with ileostomy for ulcerative colitis. Routine laboratory values include: pH 7.26, pCO2 24 mm Hg, pO2 100 mm Hg, sodium 129 mEq/L, potassium 2.9 mEq/L, chloride 110 mEq/L, and bicarbonate 12 mEq/L. Which of the following is the most likely diagnosis?",
      "options": [
        "A. Excessive ileostomy output",
        "B. Kidney failure",
        "C. Diabetic ketoacidosis",
        "D. Lactic acidosis",
        "E. Methanol intoxication"
      ],
      "answer": "A",
      "explanation": "- The patient's lab values (low pH, low pCO2, low bicarbonate) indicate a metabolic acidosis.\n- The anion gap is calculated as: Na - (Cl + HCO3) = 129 - (110 + 12) = 7.\n- An anion gap of 7 is consistent with a non-anion gap metabolic acidosis (normal range 8-16).\n- Given the patient's history of total proctocolectomy with ileostomy, excessive ileostomy output is a common cause of non-anion gap metabolic acidosis due to the loss of bicarbonate-rich gastrointestinal fluids.\n- Kidney failure (B), diabetic ketoacidosis (C), lactic acidosis (D), and methanol intoxication (E) all typically cause high anion gap metabolic acidosis."
    },
    {
      "id": 21,
      "question_type": "mcq",
      "question": "A 16-year-old girl arrives via ambulance after the family became concerned that she was behaving strangely. She appears disoriented and will answer simple questions but is evasive in answering questions about events leading up to her arrival. Vital signs are normal except for a respiratory rate of 7 and a body mass index (BMI) of 16. Arterial blood gas and basic metabolic panel are consistent with a metabolic alkalosis. Which of the following tests will be most helpful in establishing a diagnosis?",
      "options": [
        "A. Urine drug screen",
        "B. Computed tomography of the brain",
        "C. Spot urine chloride concentration",
        "D. Electrocardiogram (ECG)",
        "E. Abdominal ultrasound"
      ],
      "answer": "C",
      "explanation": "- The patient presents with metabolic alkalosis and is evasive about her history, which is common in cases of self-induced vomiting (bulimia) or laxative abuse.\n- Measuring spot urine chloride concentration is the most helpful test to differentiate the causes of metabolic alkalosis.\n- Chloride-responsive metabolic alkalosis (e.g., from vomiting, laxative abuse, or diuretic use) is associated with hypovolemia and appropriately low urine chloride concentration (<20 mEq/L).\n- Chloride-unresponsive metabolic alkalosis (e.g., from mineralocorticoid excess) is associated with hypervolemia and high urine chloride concentration (>20 mEq/L).\n- A urine drug screen (A) is unlikely to identify substances causing metabolic alkalosis with hypoventilation.\n- Computed tomography of the brain (B) and abdominal ultrasound (E) are less direct in establishing the etiology of metabolic alkalosis in this scenario.\n- An electrocardiogram (D) may show signs of hypokalemia, which is common in metabolic alkalosis, but it does not establish the underlying cause of the alkalosis."
    },
    {
      "id": 22,
      "question_type": "mcq",
      "question": "After cardiac arrest and successful return of spontaneous circulation in a 63-year-old male, mild therapeutic hypothermia (MTH) is initiated. Which of the following is true regarding the physiologic changes associated with this treatment?",
      "options": [
        "A. Central venous pressure will decrease.",
        "B. During rewarming, hypokalemia can be problematic.",
        "C. Acidosis and elevated lactate are indicative of treatment failure.",
        "D. Hypothermia induces diuresis by the kidneys.",
        "E. It is frequently deleterious on cardiac function."
      ],
      "answer": "D",
      "explanation": "- Mild therapeutic hypothermia (MTH) induces diuresis by the kidneys, which can lead to hypokalemia, hypomagnesemia, and hypophosphatemia.\n- During MTH, peripheral vasoconstriction and shunting of blood to the central system cause an *increase* in central venous pressure despite relative systemic hypovolemia (A is incorrect).\n- During rewarming, potassium shifts back out of cells, so *hyperkalemia* can be problematic, not hypokalemia (B is incorrect).\n- An expected drop in serum pH and an increase in serum lactate occur during MTH due to a shift from aerobic to anaerobic metabolism; these are normal findings and not indicative of treatment failure (C is incorrect).\n- MTH may have a protective cardiac effect, facilitated by hypothermia-induced bradycardia, reduction in cardiac output, and decreased myocardial oxygen demand (E is incorrect)."
    },
    {
      "id": 23,
      "question_type": "mcq",
      "question": "A 57-year-old female with end-stage renal disease on peritoneal dialysis is postoperative day 1 from a small bowel resection. A basic metabolic panel reveals a potassium level of 6.3 mEq/L. An electrocardiogram is obtained that shows no significant change from baseline. The resident administers 1 g of calcium gluconate, 50 mL of 50% dextrose in water, and 10 units of intravenous insulin and delivers a nebulized albuterol treatment. The patient then undergoes urgent hemodialysis. Six hours later, the potassium level is found to be 7.0 mEq/L. Which of the following is true?",
      "options": [
        "A. Monotherapy with calcium gluconate was likely adequate.",
        "B. Sodium polystyrene sulfonate (Kayexalate) in sorbitol should have been administered.",
        "C. Sodium bicarbonate should have been included in the treatment regimen.",
        "D. Calcium gluconate, dextrose, insulin, and albuterol were not indicated.",
        "E. Peritoneal dialysis would have provided superior clearance of potassium."
      ],
      "answer": "D",
      "explanation": "- Urgent treatment for hyperkalemia (membrane stabilization or intracellular shift) is necessary when serum potassium concentrations are very high (>6.5 mEq/L) or when there are ECG changes (e.g., peaked T waves).\n- In this patient, the potassium level was 6.3 mEq/L with no ECG changes, meaning urgent interventions like calcium gluconate, insulin/dextrose, and albuterol were not immediately indicated.\n- Calcium gluconate should never be used as monotherapy (A) as its effect is short-lived.\n- The FDA has recommended against combining sodium polystyrene sulfonate (Kayexalate) with sorbitol due to the risk of intestinal necrosis, especially in patients with recent bowel surgery (B is incorrect). It should only be used if dialysis is unavailable.\n- Sodium bicarbonate (C) is generally no longer recommended for hyperkalemia unless the etiology is an extracellular shift from a metabolic acidosis.\n- Peritoneal dialysis (E) is significantly inferior to hemodialysis for potassium removal."
    }
  ]
}
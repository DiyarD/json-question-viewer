{
    "chapter_name": "ANAESTHETICS AND SURGICAL CRITICAL CARE",
    "questions": [
        {
            "id": 1,
            "question_type": "mcq",
            "question": "You are observing a 45-year-old female being prepared for induction of anaesthesia for a laparoscopic cholecystectomy. You discuss the stages of anaesthesia with the Consultant anaesthetist. From the list below, select the answer corresponding to the correct number of stages of anaesthesia.",
            "options": [
                "A. 1",
                "B. 2",
                "C. 3",
                "D. 4",
                "Ε. 5"
            ],
            "answer": "D",
            "explanation": "There are four stages of anaesthesia (classified by Arthur Ernest Guedel):\nStage 1 refers to induction of anaesthesia whereby patients begin to slowly lose consciousness.\nStage 2 is called the excitement stage where there is complete loss of consciousness, but there may be uncontrolled movement.\nStage 3 is call the surgical anaesthesia phase whereby the skeletal muscles begin to relax and eye movement stops. The patient is now ready for surgery.\nStage 4 is the overdose phase, whereby the patient has received too much medication resulting in severe brain stem or medullary depression leading to subsequent hypotension or circulatory failure. Stage 4 can be fatal and requires prompt clinical support and close monitoring."
        },
        {
            "id": 2,
            "question_type": "mcq",
            "question": "You see a patient on the Intensive Care Unit who has been admitted with severe pancreatitis. He is having a central venous catheter inserted for intravenous fluid monitoring. Other than using a central venous cannula to measure central venous pressure during fluid resuscitation, from the list below choose the answer which correctly describes a long-term use of a central venous cannula.",
            "options": [
                "A. Haemodialysis",
                "B. Total parenteral nutrition",
                "C. Pulmonary artery catheterisation",
                "D. Drug administration",
                "E. Transvenous cardiac pacing"
            ],
            "answer": "B",
            "explanation": "The short-term uses of a central venous cannula include CVP measurements, pulmonary artery catheterisation, fluid resuscitation, drug administration (e.g. inotropes, potassium amiodarone, etc.), haemodialysis and transvenous cardiac pacing.\nThe long-term uses include feeding by total parenteral nutrition, long-term venous blood sampling using, for example, a Hickman line and cytotoxic drug administration."
        },
        {
            "id": 3,
            "question_type": "mcq",
            "question": "A 57-year-old lady is post total thyroidectomy for thyromegaly with retrosternal extension. During the transfer of the patient from theatre to recovery, she develops shortness of breath. The patient is alert and speaking in complete sentences. Her respiratory rate is 20 breaths per minute, pulse is 90 beats per minute and blood pressure is 115/75 mmHg. Oxygen saturations have decreased from 98% on 2 litres of oxygen per minute to 92%. On examination of the chest, there is decreased expansion of the right hemithorax and ipsilateral reduced air entry and hyper-resonance. From the list below, choose the most appropriate step to take in this patient's management.",
            "options": [
                "A. Increase the oxygen delivery to 4 litres/min via a nasal cannula",
                "B. Request a chest radiograph",
                "C. Increase the oxygen delivery to 12–15 litres/min via a non-rebreathe facemask",
                "D. Re-open the collar incision to evacuate the haematoma",
                "E. Insertion of a right-sided chest drain"
            ],
            "answer": "C",
            "explanation": "From the clinical history and examination, this patient is having an acute onset of shortness of breath secondary to a right pneumothorax. This is not a tension pneumothorax because there are no signs of haemodynamic compromise. Furthermore, the airway is patent because the patient is able to speak in complete sentences and therefore an upper airway obstruction secondary to a surgical wound haematoma is unlikely here.\nThe immediate management of an acutely ill surgical patient should follow a sequence of\n• Airway (A) assessment and treatment\n• Breathing (B) assessment and treatment\n• Circulation (C) assessment and treatment\n• Dysfunction (D) of the CNS; neurological status can be assessed rapidly by examining the pupils as well as using the ‘AVPU’ system (A - alert, V – responds to verbal stimulus, P – responds to pain and U – unresponsive to any stimulus)\n• Exposure (E) of the patient sufficient for full assessment and treatment\nAlthough the definitive treatment for this patient is to insert a chest drain, using the ‘ABCDE’system, the patient has decreased oxygen saturations despite receiving 2 litres of oxygen per minute. She therefore requires high flow oxygen in aid of increasing oxygen saturations. Nasal cannula are used to deliver oxygen at low flow rates of up to 5 litres per minute. In the initial stages of her management this patient requires high flow oxygen delivery and this will be achieved using 10–15 litres of oxygen per minute using a non-rebreathe facemask."
        },
        {
            "id": 4,
            "question_type": "mcq",
            "question": "An otherwise well 57-year-old male is 45 minutes post transurethral resection of the prostate gland for benign prostatic hyperplasia. The procedure was performed under general anaesthesia and lasted one and a half hours. You are asked to see the patient due to the fact that he has become acutely confused and drowsy. Initial observation showed an oxygen saturation of 98% on 2 litres of oxygen per minute, respiratory rate of 18 breaths per minute, pulse rate of 40 beats per minute, blood pressure of 90/70 mmHg and temperature of 37.3 °C. From the list below, choose the most likely cause for this patient's deterioration.",
            "options": [
                "A. Sepsis",
                "B. Hypervolaemia",
                "C. Hypovolaemia",
                "D. Microcytic anaemia",
                "E. Hyperthermia"
            ],
            "answer": "B",
            "explanation": "The clinical history, combined with the nature of the surgical procedure and the onset of symptoms, point towards TURP syndrome, which occurs following absorption of excess irrigation fluid (mostly glycine). This condition is characterised by an increase in intravascular volume, dilutional hyponatraemia, intracellular oedema and metabolism of glycine to ammonia. Clinical signs include bradycardia or arrhythmias, hypertension followed by hypotension, dyspnoea, visual disturbance, and mental irritation leading to reduced levels of consciousness.\nIn summary, following initial resuscitation protocol, the management of TURP syndrome involves slow correction of the hyponatraemia with diuretics; the use of hypertonic saline is controversial. In addition, close patient monitoring (for coagulopathy, electrolyte disturbances, hypothermia and arrhythmias) is required and therefore, the intensive care and surgical teams should be involved as soon as possible.\nSepsis is possible, but unlikely given the history. The patient is not hyperthermic owing to a normal body temperature and it is unlikely for the patient to have a microcytic anaemia causing his acute deterioration."
        },
        {
            "id": 5,
            "question_type": "mcq",
            "question": "You are asked to see a 67-year-old man who is 10 hours post open abdominal aortic aneurysm repair. His oxygen saturations are 97% on 3 litres of oxygen, respiratory rate is 20 breaths per minute, pulse rate is 115 beats per minute, blood pressure is 105/78 mmHg and body temperature is 37.2 °C. On assessment of his fluid balance chart, you notice that the patient's urine output is low at 20 ml in the last hour. From the list below, choose the most appropriate next step in this patient's management.",
            "options": [
                "A. Increase the oxygen flow rate",
                "B. Speak with the Surgical Registrar in light of taking the patient back to theatre",
                "C. Administer an intravenous fluid bolus of 500 mls of normal saline",
                "D. Perform an arterial blood gas investigation",
                "E. Request an urgent mobile chest radiograph"
            ],
            "answer": "C",
            "explanation": "Hypovolaemia is not uncommon in elderly patients who have had major surgical procedures. The elevated pulse rate coupled with a reduced blood pressure and low urine output suggests that the patient is hypovolaemic. Following the ‘ABCDE' system (please refer to Question 3 in this chapter for further information), increasing this patient's supplemental oxygen flow rate is not an unreasonable step to take; however, the patient is maintaining adequate oxygen saturations on 3 litres of oxygen per minute. This question points towards a 'C' (circulation) problem which requires treatment and re-evaluation.\nCalling the Surgical Registrar, performing an arterial blood gas and requesting an urgent mobile chest radiograph are steps which may need to be taken in the future, but initially this patient requires an intravenous fluid challenge to ascertain whether the urine output increases. In most cases this type of problem can be corrected with adequate intravenous fluid resuscitation but care must be taken in patients who have cardiac and pulmonary co-morbidities. The use of fluid balance charts is imperative in patients who have undergone major surgery."
        },
        {
            "id": 6,
            "question_type": "mcq",
            "question": "You are asked to see an 80-year-old female patient who is 2 days post insertion of a right dynamic hip screw following an extracapsular right neck of femur fracture. She has become acutely short of breath with a respiratory rate of 28 breaths per minute. The oxygen saturations are 96% on 5 litres of oxygen per minute. Her pulse rate is 120 beats per minute, blood pressure is 110/70 mmHg and body temperature is 37 °C. Examination of the chest is normal. You perform an arterial blood gas investigation. From the list below, choose the most likely type of acid-base disturbance you expect to see from the arterial blood gas results.",
            "options": [
                "A. Metabolic acidosis",
                "B. Respiratory acidosis",
                "C. Metabolic alkalosis",
                "D. Respiratory alkalosis",
                "E. Lactic acidosis"
            ],
            "answer": "D",
            "explanation": "This patient is suffering from an acute pulmonary embolism owing to the acute onset of shortness of breath, low oxygen saturations and normal chest examination. The electrocardiogram shows a sinus tachycardia, which is more frequently seen in pulmonary embolism than the traditionally taught prominent S wave in lead 1, Q wave and an inverted T wave in lead 3 (‘S1Q3T3').\nThe patient is tachypnoeic which will result in a decreased blood concentration of carbon dioxide leading to hypocapnia. The decreased levels of carbon dioxide will lead to a decreased concentration of hydrogen ions resulting in an alkalosis. In addition, the level of bicarbonate is usually normal in the acute phase. Respiratory alkalosis is therefore the acid-base disturbance which would occur in this scenario."
        },
        {
            "id": 7,
            "question_type": "mcq",
            "question": "A 39-year-old lady is having a diagnostic laparoscopy to investigate her symptoms of right iliac fossa pain. The procedure lasts 50 minutes and following the removal of the endotracheal tube, the patient is taken to the recovery room where she develops sudden onset shortness of breath, tachycardia and hypotension. Following rapid assessment, she is found to have a tension pneumothorax which is decompressed by needle thoracocentesis. From the list below, choose the clinical sign which is not a feature of tension pneumothorax.",
            "options": [
                "A. Tracheal deviation away from the affected side",
                "B. Increased expansion on the affected side",
                "C. Decreased breath sounds on the affected side",
                "D. Hyper-resonance on the affected side",
                "E. Distended neck veins"
            ],
            "answer": "B",
            "explanation": "Clinical features of tension pneumothorax include respiratory distress, a rise in the jugular venous pressure (which manifests as distended neck veins), tracheal deviation away from the affected side, ipsilateral decreased breath sounds, ipsilateral decreased expansion and ipsilateral hyper-resonance."
        },
        {
            "id": 8,
            "question_type": "mcq",
            "question": "You see a 48-year-old man in the theatre admission lounge who is due for an open abdominal incisional hernia repair. The anaesthetist tells you that a high dependency unit bed has been booked for the patient owing to his co-morbidities and will therefore require close monitoring following surgery. The anaesthetist tells you that the patient falls under ASA 3. From the list below, choose the definition that best describes an ASA grading of 3.",
            "options": [
                "A. A moribund patient who is not expected to survive without an operation",
                "B. A patient with mild systemic disease",
                "C. A normal healthy patient",
                "D. A patient with severe systemic disease that is a constant threat to life",
                "E. A patient with severe systemic disease"
            ],
            "answer": "E",
            "explanation": "The ASA grading system, created by the American Society of Anaesthisologists, has been adopted to stratify patients' preoperative physical status. There are six grades:\nASA – 1: A normal healthy patient\nASA – 2: A patient with mild systemic disease\nASA – 3: A patient with severe systemic disease\nASA – 4: A patient with severe systemic disease that is a constant threat to life\nASA – 5: A moribund patient who is not expected to survive without the operation\nASA – 6: A declared brain-dead patient whose organs are being removed for donor purposes\nIf there is an addition of an ‘E' next to the grade, this implies that the patient is having emergency surgery. The ‘E' is not used for ASA grade 6."
        },
        {
            "id": 9,
            "question_type": "mcq",
            "question": "You are asked to see a 35-year-old man who sustained a head injury during a road traffic accident. The patient was stable upon arrival to the emergency department, but over the last hour, his GCS has fallen from 15/15 to 13/15 and he is now drowsy and complaining of a headache. From the list below, choose the most appropriate next step to take in this patient's management.",
            "options": [
                "A. Repeat the GCS score in an hour",
                "B. Speak with the Neurosurgical Registrar on-call with a view to take the patient to theatre",
                "C. Prescribe analgesia",
                "D. Request an urgent CT scan of the head",
                "E. Prescribe an intravenous infusion of mannitol"
            ],
            "answer": "D",
            "explanation": "This patient has sustained a head injury causing a decrease in the level of his consciousness. This scenario warrants concern and the patient requires urgent attention. Before the patient can be discussed with the Neurosurgery team, urgent imaging of the head would be required in order to ascertain whether this patient has an intracranial bleed. Situations where a CT head scan would be performed are (1) persisting neurological signs following resuscitation, (2) persisting headache or vomiting, (3) falling level of consciousness, (4) suspicion of a base of skull fracture and (5) suspected penetrating injury.\nRepeating the GCS in an hour and prescribing analgesia for the patient are not appropriate here and just unnecessarily delay the time for the patient to receive definitive management.\nPrescribing an intravenous mannitol infusion could be performed once a diagnosis is made of elevated intracranial pressure secondary to a mass-effect-causing intracerebral bleed."
        },
        {
            "id": 10,
            "question_type": "mcq",
            "question": "You see an 18-year-old lady in the theatre admission lounge who is due to have a removal of a right breast fibroadenoma under general anaesthesia. You ask her whether she has had anything to eat or drink after midnight on the same day as the operation. From the list below, which of the following correctly applies to preoperative starvation in adults?",
            "options": [
                "A. Patients should not eat solid food for 6 hours prior to a general anaesthetic",
                "B. Patients may eat solid food up to 4 hours before a general anaesthetic",
                "C. Patients should not eat solid food for 12 hours prior to a general anaesthetic",
                "D. Patients may eat solid food up to 2 hours before a general anaesthetic",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "patients undergoing elective surgical procedures involving general anaesthesia or sedation for 6 and 2 hours respectively, prior to their surgical procedure. In addition, patients having regional or local anaesthetic procedures should follow the same ‘nil by mouth' policy as those scheduled for a general anaesthetic.\nFor patients undergoing emergency surgical procedures that involve a general anaesthetic, nasogastric aspiration is usually performed to decrease gastric contents and hence reduce the risk of pulmonary aspiration."
        },
        {
            "id": 11,
            "question_type": "mcq",
            "question": "A 56-year-old lady is having a total thyroidectomy for Graves' disease. During the operation she develops thyroid storm and the anaesthetist informs you that the patient has developed a tachycardia. From the list below, please choose a feature not likely to be associated with thyroid storm.",
            "options": [
                "A. Hypothermia",
                "B. Pyrexia",
                "C. Cardiac arrhythmias",
                "D. Cardiac failure",
                "E. Coma"
            ],
            "answer": "A",
            "explanation": "Thyroid storm, also known as thyrotoxic crisis, is an acute rare manifestation of hyperthyroidism, which may be precipitated by stress, surgery and infection. There is a sudden release of thyroid hormones such as thyroxine (T4) and/or triiodothyronine (T3) into the systemic circulation. This leads to an exaggerated thyrotoxicosis manifestation, the features of which include hyperventilation, tachycardia, fever, agitation, dehydration, shock, cardiac arrhythmias, cardiac failure and coma; it can be fatal if not managed promptly. This condition is seen most commonly in patients who have thyrotoxicosis secondary to Graves' disease."
        },
        {
            "id": 12,
            "question_type": "mcq",
            "question": "You are reviewing the blood test results of a 50-year-old man who has been admitted following a crush injury to his right leg. His serum potassium is found to be low at 2.9 mmol/L following earlier correction of hyperkalaemia. You request an ECG for this patient. Which one of the following ECG changes is not characteristic of hypokalaemia?",
            "options": [
                "A. Small and inverted T-waves",
                "B. Small P-waves",
                "C. Prolonged P-R interval",
                "D. S-T segment depression",
                "E. Presence of U-waves"
            ],
            "answer": "B",
            "explanation": "Hypokalaemia is a serum potassium level of less than 3.5 mmol/L. ECG characteristics include S-T segment depression, a prolonged P-R interval, small and inverted T-waves and U-waves, which are seen following the T-wave.\nECG changes associated with hyperkalaemia include wide QRS-complexes, small P-waves and tall, tented T-waves."
        },
        {
            "id": 13,
            "question_type": "mcq",
            "question": "You review the coagulation blood investigations for a patient who has sustained 18% body surface area third-degree burns. PT and APTT are both prolonged. Your Consultant informs you that the patient has disseminated intravascular coagulation (DIC) and to request urgent blood products from Pathology. From the list below, please choose the most appropriate blood product that you would request from Pathology for the management of this clotting abnormality.",
            "options": [
                "A. Albumin",
                "B. Platelets",
                "C. Protein C concentrate",
                "D. Antithrombin III concentrate",
                "E. Immunoglobulins"
            ],
            "answer": "B",
            "explanation": "DIC occurs as a result of pathological activation of the coagulation pathway by damaged tissues (e.g. in trauma, sepsis, burns, hypothermia) which release tissue factors and cytokines leading to activation of the fibrinolytic pathway. This results in widespread intravascular occlusion in small and large vessels. Vascular occlusion by fibrin causes shock and end organ failure whilst high consumption of clotting factors and platelets increases the bleeding tendency.\nFrom this list of answers platelets (Answer B) would be the most appropriate blood product to request. In DIC the platelet count may fall due to rapid consumption of the latter as well as fresh frozen plasma (which contains factors II, V, VII, IX, X and XI).\nAlbumin and immunoglobulins are not clotting substitutes and therefore would not be required in this clinical scenario.\nProtein C concentrate is given to patients who are predisposed to venous thrombotic disease and have a congenital protein C deficiency.\nAntithrombin III is usually administered to patients with a congenital antithrombin III deficiency which is associated with recurrent venous thrombosis and pulmonary embolism."
        },
        {
            "id": 14,
            "question_type": "mcq",
            "question": "You are discussing basic oxygen physiology with the Intensive Care Consultant. He explains the physiology of the oxygen dissociation curve and the Bohr effect. From the list below, choose the answer that is characteristically seen in the Bohr effect.",
            "options": [
                "A.↓ pCO2",
                "Β.↓ 2,3 ΒPG",
                "C. ↓ pH",
                "D. ↑ Temperature",
                "E. None of the above"
            ],
            "answer": "C",
            "explanation": "The Bohr effect is a shift of the oxygen dissociation curve to the right as a result of a reduction in the oxygen affinity of haemoglobin. This leads to a greater tendency of haemoglobin to offload oxygen into the tissues. A shift of the oxygen dissociation curve to the right is caused by an increase in temperature, acidity (i.e. a decrease in pH), 2,3 BPG (2,3-Bisphosphoglycerate; an organophosphate which is produced as a product of glycolysis in erythrocytes) and in the circulating partial pressure of carbon dioxide."
        },
        {
            "id": 15,
            "question_type": "mcq",
            "question": "You review a patient on the ward who has suspected cardiac tamponade following insertion of a pacemaker. You are asked to perform a rapid initial assessment of the patient. Which one of the following clinical signs from the list below would you expect to see in a patient with cardiac tamponade?",
            "options": [
                "A. Prominent first heart sound",
                "B. Muffled heart sounds",
                "C. Prominent second heart sound",
                "D. Low jugular venous pressure",
                "E. Hypertension"
            ],
            "answer": "B",
            "explanation": "Cardiac tamponade (which can be traumatic or non-traumatic) occurs as a result of pericardial sac being filled with inflammatory fluid or blood leading to a pericardial effusion. As the effusion increases in volume, this in turn results in a decrease in cardiac contractility which ultimately leads to (obstructive) shock.\nTraumatic causes of pericardial effusion include blunt or penetrating trauma to the chest. Cardiac tamponade can also occur during cardiac catheterisation, central line insertion or insertion of a pacemaker. Some non-traumatic causes include hypothyroidism, pericarditis, invasive neoplastic disease and high exposure of the chest to radiation.\nOn assessment of the patient with cardiac tamponade the following signs may be seen (the first three of which are referred to as Beck's triad):\n• Hypotension (due to obstructive shock)\n• Increased jugular venous pressure\n• Muffled heart sounds\n• Kussmaul's sign; a paradoxical rise in JVP on inspiration\n• Electromechanical dissociation arrest"
        },
        {
            "id": 16,
            "question_type": "mcq",
            "question": "A 40-year-old man is admitted to the Intensive Care Unit following a diagnosis of severe pancreatitis. The patient develops acute respiratory distress syndrome. Which of the following is associated with the diagnostic criteria for ARDS?",
            "options": [
                "A. Slow onset of symptoms",
                "B. White cell count of >9 × 10⁹/L",
                "C. Pulmonary capillary wedge pressure ≤18 mmHg",
                "D. PaO2:FIO2 >200",
                "E. Presence of bilateral pulmonary infiltrates on chest radiograph or CT"
            ],
            "answer": "E",
            "explanation": "ARDS is characterised by reducing lung compliance and hypoxaemia due to a combination of acute respiratory failure (due to acute lung injury) with the formation of non-cardiogenic pulmonary oedema. The condition is refractory to oxygen therapy and can be diagnosed if the following three are present:\n• Chest radiographs or CT imaging confirms bilateral pulmonary infiltrates\n• Acute onset; within 1 week of a known clinical insult\n• Refractory hypoxaemia: PaO2:FIO2 <200\nThe pulmonary artery capillary wedge pressure (PCWP) being ≤18 mmHg was part of the diagnostic criteria but has now been removed."
        },
        {
            "id": 17,
            "question_type": "mcq",
            "question": "You are asked to see a patient one day post total thyroidectomy who has a serum calcium of 2.0 and is complaining of muscular cramps. Which of the following is the most appropriate next step in this patient's management?",
            "options": [
                "A. Prescribe a bisphosphonate infusion",
                "B. Prescribe calcitonin",
                "C. Establish cardiac monitoring",
                "D. Administer high dose steroids",
                "E. Contact the Surgical Registrar in light of taking this patient back to theatre"
            ],
            "answer": "C",
            "explanation": "The most common surgical cause of hypocalcaemia is inadvertent removal or damage to the parathyroid glands during thyroid surgery. Clinical features associated with hypocalcaemia include (1)neuromuscular irritability which may manifest as peripheral and circumoral parathesia, (2) tetany, (3) muscular cramps, (4) twitching of the facial muscles on tapping of the facial nerve (Chvostek's sign) and (5) tetanic spasm of the hand following blood pressure cuff-induced arm ischaemia (Trousseau's sign). This patient is experiencing symptomatic hypocalcaemia and requires close monitoring and correction of the low serum calcium. Following initial assessment using the ‘ABCDE’ system (refer to Question 3 in this chapter), the most appropriate next step to take is to establish cardiac monitoring to monitor for cardiac arrhythmias. In addition, an ECG trace may show intermittent QT prolongation.\nPrescribing bisphosphonates or calcitonin or administering high dose steroids are measures which are usually taken in the management of hypercalcaemia.\nThe patient does not need to be taken back to theatre and hence contacting the Surgical Registrar would not be indicated."
        },
        {
            "id": 18,
            "question_type": "mcq",
            "question": "You are assessing the nutritional status of a patient in the Intensive Care Unit who has been admitted with polytrauma. The Consultant has advised the team that this patient will require a period of total parenteral nutrition (TPN). You are discussing the essential elements which the TPN feed should contain. Which of the following is referred to as a fat-soluble vitamin involved in cell membrane stabilisation and retinal function?",
            "options": [
                "A. Vitamin D",
                "B. Vitamin B₁",
                "C. Vitamin C",
                "D. Vitamin A",
                "E. Vitamin K"
            ],
            "answer": "D",
            "explanation": "Vitamins A, D, E and K are fat soluble. Vitamin A is a fat soluble vitamin which is important for the stabilisation of cell membranes as well as retinal function. Vitamin D is required for calcium homeostasis and mineralisation of bone. Vitamin K is required for blood coagulation through the γ-carboxylation of glutamic acid residues of the clotting factors, namely II, VII, IX and X.\nThe family of Vitamin B (B1/B2/B3/Biotin/B6/B12) and Vitamin C are water soluble vitamins. Vitamin C, as well as possessing antioxidant functions, plays an important role in hydroxylation of proline and lysine residues during collagen synthesis, absorption of iron from the gastrointestinal system and the synthesis of epinephrine from tyrosine. Vitamin B1 (riboflavin) deficiency leads to Weinicke's encephalopathy or beri-beri."
        },
        {
            "id": 19,
            "question_type": "mcq",
            "question": "You are reviewing the blood culture results of a patient who was admitted to the Intensive Care Unit after developing septic shock post laparotomy for a diverticular perforation. The blood results reveal the presence of Gram negative bacteria. Which of the following is a Gram negative bacteria?",
            "options": [
                "A. Streptococcus pneumoniae",
                "B. Neisseria meningitidis",
                "C. Staphylococcus aureus",
                "D. Streptococcus viridans",
                "E. Clostridium botulinum"
            ],
            "answer": "B",
            "explanation": "Neisseria meningitidis is a Gram negative bacteria. Streptococcus pneumoniae, Staphylococcus aureus, Streptococcus viridans and Clostridium botulinum are all Gram positive bacteria.\nCharacteristics of Gram negative bacteria include a cytoplasmic lipid membrane, a thick peptidoglycan layer (forming rigid cell walls) and the presence of lipoteichoic acids (which are chelating agents and are involved in adherence) within the cell wall.\nGram negative bacteria possess a cytoplasmic membrane, a thin pep-tidoglycan layer and an outer cell membrane containing lipopolysaccharide. They do not contain lipoteichoic acids."
        },
        {
            "id": 20,
            "question_type": "mcq",
            "question": "You are asked to review a 45-year-old man who has been admitted following acute onset of epigastric pain. His initial observations reveal a pulse of 108 beats per minute, a blood pressure of 95/80 mmHg, a respiratory rate of 32 breaths per minute and a body temperature of 38.5 °C. You are asked to take a set of blood cultures. Which of the following is correct concerning blood cultures?",
            "options": [
                "A. Aerobic and anaerobic blood cultures will only be positive in approximately 20% of patients with sepsis",
                "B. Blood cultures should not be taken through in-dwelling central venous catheters",
                "C. Antibiotic therapy should commence prior to taking blood cultures",
                "D. Results from blood cultures can be obtained is less than an hour from time of analysis",
                "E. None of the above"
            ],
            "answer": "A",
            "explanation": "Blood cultures are taken in patients with signs of systemic sepsis. Two blood culture bottles (anaerobic and aerobic blood culture bottles) should always be taken and sent to the pathology laboratory promptly. The blood culture analysis usually takes a minimum of 3 days, however in some cases, owing to high amounts of bacteraemia and higher bacterial proliferation rates, results may be relayed to you in 2 days. Antibiotic therapy should start after a blood culture investigation is performed. An in-dwelling central venous catheter could be the source of sepsis and blood cultures should be taken through them to isolate the offending organism.\nGenerally the following measures should be taken within the first 6 hours from onset of symptoms in patients with suspected sepsis:\n• Administer high flow oxygen\n• Take blood cultures\n• Administer intravenous antibiotics\n• Commence intravenous fluid resuscitation\n• Measure and check haemoglobin and lactate levels\n• Accurate measurement of hourly urine output and fluid balance\nFor further information, please refer to the Surviving Sepsis Campaign at www.survivingsepsis.org."
        },
        {
            "id": 21,
            "question_type": "mcq",
            "question": "You perform an arterial blood gas investigation on the patient in Question 20. The results show a pH of 7.31, p02 11.5, pCO2 4.1 kPa, bicarbonate 24 mmol/L and lactate 6.0. Which of the following is not a cause of lactic acidosis?",
            "options": [
                "A. Pancreatitis",
                "B. Excessive exercise",
                "C. Pyloric stenosis",
                "D. Septic shock",
                "E. Biguanides"
            ],
            "answer": "C",
            "explanation": "The features of lactic acidosis include the presence of a metabolic acidosis, a varying degree of respiratory compensation and an elevated serum lactate >5 mmol/L (normal range <2 mmol/L). The causes of lactic acidosis include shock, pancreatitis, liver impairment/failure, renal impairment/failure, excessive exercise, leukaemia and biguanides.\nExcessive vomiting (e.g. as seen in pyloric stenosis) is associated with loss of gastric contents. Since gastric fluids are low pH this leads to decreased levels of hydrogen, chloride and potassium ions, resulting in a hypokalaemic-hypochloraemic metabolic acidosis."
        },
        {
            "id": 22,
            "question_type": "mcq",
            "question": "You are asked to review a 30-year-old man who has sustained chest trauma. He has a pO2 of 7.9 kPa and a pCO2 of 7.0 kPa. From his arterial blood gas reading (taken on 5 L O₂ per minute), this patient has type 2 respiratory failure. Which of the following is not associated with type 2 (hypercapnic) respiratory failure?",
            "options": [
                "A. Pulmonary embolism",
                "B. Raised intracranial pressure",
                "C. Poliomyelitis",
                "D. Phrenic nerve injury",
                "E. Myaesthenia gravis"
            ],
            "answer": "A",
            "explanation": "Pulmonary embolism is associated with type 1 (hypoxic) respiratory failure (pO2 <8kPa and pCO2 may be low or normal). In pulmonary embolism, there is an associated ventilation/perfusion mismatch leading to hypocapnia due to hyperventilation (please refer to Question 6). Raised intracranial pressure, poliomyelitis, phrenic nerve injury and myasthenia gravis are common causes of type 2 (hypercapnic) respiratory failure (p02 <8 kPa and pCO2 >6.5 kPa)."
        },
        {
            "id": 23,
            "question_type": "mcq",
            "question": "A 25-year-old lady, weighing 65 Kg, is having a sebaceous cyst excised from her mid back. You are asked to infiltrate local anaesthetic around the area before the sebaceous cyst can be removed. Which of the following is the maximum safe dose of lidocaine that can be used before it reaches toxic levels?",
            "options": [
                "A. 250 mg",
                "B. 200 mg",
                "C. 195 mg",
                "D. 160 mg",
                "E. 120 mg"
            ],
            "answer": "C",
            "explanation": "The maximum safe dose of lidocaine is 3 ml/kg and therefore, the latter value multiplied by the patient weight (65 × 3 mg/kg = 195 mg) gives the maximum safe dose of lidocaine that can be administered to the patient. Bupivacaine has a maximum dose of 2 mg/kg, lidocaine with adrenaline is 5 mg/kg and prilocaine is 6 mg/kg.\nFurthermore, local anaesthetics and vasoconstrictors (e.g. lidocaine and adrenaline) should not be administered together to pedicled structures with end arteries (e.g. ear lobes, digits, the nose, penis, etc.) as this can lead to ischaemia and necrosis."
        },
        {
            "id": 24,
            "question_type": "mcq",
            "question": "You are asked to review a chest radiograph of a 67-year-old lady who has been admitted with suspected aortic dissection. Which of the following chest radiograph procedures is not associated with aortic dissection?",
            "options": [
                "A. Widened mediastinum",
                "B. Depression of the left main bronchus",
                "C. Displacement of the ‘aortic knuckle’",
                "D. Haemothorax",
                "E. Loss of the right heart border"
            ],
            "answer": "E",
            "explanation": "Chest radiographs taken from patients with aortic dissection are normal in 80% of cases. Rare radiographic signs which may present are (1) widened mediastinum, (2) haemothorax, (3) displacement of the ‘aortic knuckle' and (4) depression of the left main bronchus.\nLoss or obscurity of the right heart border usually implies that there is an abnormality/disease of the right middle lobe of the lung."
        },
        {
            "id": 25,
            "question_type": "mcq",
            "question": "A 45-year-old lady is having an elective wide local excision of a right breast carcinoma followed by right axillary sentinel node biopsy under general anaesthesia. After 2-3 minutes of injecting the blue dye at the breast tumour site, you notice that the skin overlying the patient's chest has become erythematous. The anaesthetist alerts the surgeon that the patient has become tachycardic. Which of the following is the most appropriate next step to take in the anaesthetised patient?",
            "options": [
                "A. Administer intravenous chlorpheniramine",
                "B. Maintaining intravascular volume with intravenous fluids",
                "C. Endotracheal tube removal and waking the patient",
                "D. Continue with the surgery as this is not a serious condition",
                "E. Administer intravenous hydrocortisone"
            ],
            "answer": "B",
            "explanation": "The patient is experiencing anaphylaxis from the blue dye. This is a rare complication and occurs at an incidence rate of 0.1%, but can be fatal if not managed promptly. Patients who develop intraoperative anaphylaxis may show signs of tachycardia, hypotension, laryngeal oedema and bronchospasm. The mainstay of treatment involves maintaining intravascular volume through intravenous fluid resuscitation to anticipate the ensuing hypotension. Administering intravenous adrenaline is also required to maintain systemic vascular resistance. Once the patient is stable, intravenous antihistamine (e.g. chlorpheniramine) and hydrocortisone are administered. From the list of answers, maintaining intravascular volume with intravenous fluids would be the most appropriate step in the first instance followed by administering intravenous adrenaline to maintain systemic vascular resistance. Removal of the endotracheal tube and waking the patient would be fatal due to the fact that the endotracheal tube is maintaining the airway and its removal would lead to loss of the airway secondary to anaphylaxis inducing laryngeal oedema. Intravenous antihistamines and steroids are used once the patient is resuscitated and stable. Since the procedure being performed is an elective case, continuing with the operation is not indicated. Anaphylaxis is a life threatening condition and needs to be attended to first."
        }
    ]
}